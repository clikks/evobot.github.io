{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/common/images.md","path":"common/images.md","modified":0,"renderable":0},{"_id":"source/images/alipay_donate.png","path":"images/alipay_donate.png","modified":0,"renderable":0},{"_id":"source/images/favicon16x16.ico","path":"images/favicon16x16.ico","modified":0,"renderable":0},{"_id":"source/images/favicon32x32.ico","path":"images/favicon32x32.ico","modified":0,"renderable":0},{"_id":"source/images/icon2.png","path":"images/icon2.png","modified":0,"renderable":0},{"_id":"source/images/wechat_donate.png","path":"images/wechat_donate.png","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"themes/next6.3/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next6.3/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next6.3/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next6.3/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next6.3/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next6.3/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next6.3/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next6.3/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next6.3/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next6.3/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next6.3/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next6.3/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next6.3/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next6.3/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next6.3/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next6.3/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next6.3/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next6.3/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next6.3/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next6.3/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next6.3/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next6.3/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next6.3/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next6.3/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next6.3/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next6.3/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next6.3/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next6.3/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next6.3/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next6.3/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next6.3/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next6.3/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next6.3/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next6.3/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next6.3/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next6.3/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next6.3/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next6.3/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next6.3/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next6.3/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next6.3/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next6.3/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next6.3/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next6.3/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next6.3/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"a5991bb3598c5d934bd97e3bc4ed14b71ebf1e62","modified":1528077700163},{"_id":"source/CNAME","hash":"dcd096574da5f86b4076e87c7d7192685707fe14","modified":1526309718093},{"_id":"themes/next6.3/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1526470537000},{"_id":"themes/next6.3/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1526470537000},{"_id":"themes/next6.3/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1526470537000},{"_id":"themes/next6.3/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1526470537000},{"_id":"themes/next6.3/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1526470537000},{"_id":"themes/next6.3/.stickler.yml","hash":"b7939095038cbdc4883fc10950e163a60a643b43","modified":1526470537000},{"_id":"themes/next6.3/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1526470537000},{"_id":"themes/next6.3/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1526470537000},{"_id":"themes/next6.3/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1526470537000},{"_id":"themes/next6.3/README.md","hash":"807c28ad6473b221101251d244aa08e2a61b0d60","modified":1526470537000},{"_id":"themes/next6.3/_config.yml","hash":"dce4ae9d7b648a578dde1b6773c7212cfcaec652","modified":1526470537000},{"_id":"themes/next6.3/bower.json","hash":"a8c832da6aad5245052aed7ff26c246f85d68c6c","modified":1526470537000},{"_id":"themes/next6.3/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1526470537000},{"_id":"themes/next6.3/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1526470537000},{"_id":"themes/next6.3/package.json","hash":"11a0b27f92da8abf1efbea6e7a0af4271d7bff9e","modified":1526470537000},{"_id":"source/_drafts/images.md","hash":"292ec6215b14141edda938f0c4bf23a4832e97f8","modified":1524669536085},{"_id":"source/_posts/Apache和PHP结合及Apache默认虚拟主机.md","hash":"51b908338ecae218b5469714aba0789af4484952","modified":1528181715847},{"_id":"source/_posts/Apache访问日志配置及静态元素过期时间配置.md","hash":"be63bdf02add941498624b89abc574d1558aec58","modified":1528181669253},{"_id":"source/_posts/Apache配置防盗链及访问控制.md","hash":"795c6db452faf00c18da4a232ef869d11fdf0447","modified":1528181534478},{"_id":"source/_posts/Apache限制相关配置及php相关配置.md","hash":"fd9c8757b6c5f0178ace6bf8aebff1d1f605ce0d","modified":1528181770981},{"_id":"source/_posts/Centos7系列-find命令和文件名后缀.md","hash":"698950321dd654c32956d116fc77602e36975697","modified":1527944489484},{"_id":"source/_posts/Centos7系列-使用ssh远程管理系统.md","hash":"c495776e37ce8e714208418a79014bfcbd1986b8","modified":1527944489488},{"_id":"source/_posts/Centos7系列-单用户及救援模式和虚拟机克隆操作.md","hash":"7be335436813afd1832bc789210f28191670e56e","modified":1527944489484},{"_id":"source/_posts/Centos7系列-文件及目录管理(一).md","hash":"acc8a33c72037bbe23cd31ca644b42960ec24df6","modified":1527944489500},{"_id":"source/_posts/Centos7系列-文件及目录管理(二).md","hash":"1ddbd8332bc64a153173fbe79715dfae7b385742","modified":1527944489496},{"_id":"source/_posts/Centos7系列-文件及目录管理相关命令-三.md","hash":"40f74e0a9d7973d37a190f6614037feb854bef30","modified":1527944489500},{"_id":"source/_posts/Centos7系列-文件和目录权限(一).md","hash":"d9a93cf5777d929243d46ea1f03efec79ed3bdb0","modified":1527944489492},{"_id":"source/_posts/Centos7系列-文件和目录权限(二).md","hash":"9d4856d5b45b3432b5654c7cd690052ce2a6fddc","modified":1527944489488},{"_id":"source/_posts/Centos7系列-用户及密码管理相关命令.md","hash":"ed5be7b62c0b8c1d4fc265de3243cf94e71898e5","modified":1527944489508},{"_id":"source/_posts/Centos7系列-用户和用户组管理.md","hash":"338a3e408315369909b36fe6794c47cabcf37ac4","modified":1527944489508},{"_id":"source/_posts/Centos7系列-用户身份切换和sudo命令.md","hash":"00d91634717e24da473b272147e9342200969e3f","modified":1527944489512},{"_id":"source/_posts/Centos7系列-系统安装配置.md","hash":"68dc33cbe08a63cfc81d093dd211b5f50a11f5fd","modified":1527944489500},{"_id":"source/_posts/Centos7系列-系统网络配置.md","hash":"7b9e11ef919fd0267098cdfd0cf57bc113ad4886","modified":1527944489504},{"_id":"source/_posts/Centos软件包的安装与卸载(一).md","hash":"aac733ce8373abbbf0a0eadc84424edc021df0af","modified":1527944489524},{"_id":"source/_posts/Apache用户认证、域名跳转及访问日志.md","hash":"8a114d444e2bd21143622317f8639fa3dc239641","modified":1528181550886},{"_id":"source/_posts/LAMP架构介绍及MySQL安装.md","hash":"87bb92bd87f574fe6ca540feb34c96c5edfe8cce","modified":1528218521483},{"_id":"source/_posts/Linux日常运维(一)—系统资源监控.md","hash":"2b769470f8fd3e743284f3146b04ca2bca932445","modified":1527944489572},{"_id":"source/_posts/Linux日常运维(三)—网络相关命令.md","hash":"f071330552f230bb95ee881d61e72ebf4df80982","modified":1527944489564},{"_id":"source/_posts/Linux日常运维(二)—进程、内存网络监控.md","hash":"2f2452bcf363f945df0e096e2b92f4f85a40c7bd","modified":1527944489560},{"_id":"source/_posts/Linux日常运维(四)——iptables-filter表及nat表应用.md","hash":"bd0de1d9a6eb5c25df80d45e62d7d80e2d0f62d0","modified":1527944489568},{"_id":"source/_posts/Linux正则表达式—awk命令.md","hash":"888eb7ad1a7e473febb082600e4b1471cbd82a21","modified":1527944489584},{"_id":"source/_posts/Linux正则表达式—awk扩展学习.md","hash":"94e4bb79c54231fab8a79c12ff559d42599635a1","modified":1527944489580},{"_id":"source/_posts/Linux正则表达式—grep命令.md","hash":"40104461189e0ff2c0c5d2a04c2b505ad29af40c","modified":1527944489588},{"_id":"source/_posts/Linux正则表达式—sed命令.md","hash":"3dcb68eba0b3e2dff1ac689a8737460547cb65c8","modified":1527944489592},{"_id":"source/_posts/Linux正则表达式—常用操作练习.md","hash":"e629ec8525811e92b825ca85857080596de16f43","modified":1527944489596},{"_id":"source/_posts/Linux磁盘管理—LVM磁盘分区.md","hash":"3517d108621cf83be033225828a283b346060443","modified":1527944489544},{"_id":"source/_posts/Linux磁盘管理—df-du命令及磁盘分区.md","hash":"b99647c9ced009b749d69c1259a34d5dc353f46c","modified":1527944489540},{"_id":"source/_posts/PHP扩展模块安装.md","hash":"8a86c138af0624ebbc07ddde7a4c4b43b9dc2cee","modified":1528183562666},{"_id":"source/_posts/PHP的安装.md","hash":"4f18e14b1e3e9719e15d811390bb47402f6837a5","modified":1528181479936},{"_id":"source/_posts/Shell基础(一).md","hash":"61cb37e5128f3ab2a4d6bad17e036934812c04ed","modified":1527944489628},{"_id":"source/_posts/Shell基础(三).md","hash":"eeb93a11229ba886198c145c7cf36a481c7e2dee","modified":1527944489624},{"_id":"source/_posts/Shell基础(二).md","hash":"d9470d94f01c8ce8130b73e45a6cc8b6e34f6de1","modified":1527944489620},{"_id":"source/_posts/Vim基础(一).md","hash":"4a30cebd9655d06916a0862682cadcd77c5e4110","modified":1527944489628},{"_id":"source/_posts/Vim基础(二).md","hash":"d47973ec1a0d26698a5d876a381943c28d4a535c","modified":1527944489628},{"_id":"source/_posts/Windows10开机自启动Linux子系统和ssh服务.md","hash":"ffb1beee8ad53eb2bc367fc8e088e21490978762","modified":1528076190183},{"_id":"source/_posts/Centos软件包的安装与卸载(二).md","hash":"a5b589b8710e9ee99c011a303c93b3ac79d0a89b","modified":1527944489516},{"_id":"source/_posts/pyenv安装使用指南.md","hash":"3771f2256cb7774055a842be1ffb653447954955","modified":1527944489608},{"_id":"source/_posts/rsync工具的使用.md","hash":"d3403d82ea7162ffe4f2c2afeb4ca23e924943b6","modified":1527944489608},{"_id":"source/_posts/rsync通过服务同步及系统日志介绍、screen工具的使用.md","hash":"e091c5021b8b01dc7dfb90dc7449942bacdaafdd","modified":1527944489612},{"_id":"source/_posts/windows10-Arch-双系统安装指南【一】.md","hash":"436ff201a9a15b1294e072a1da2093bf3ed28338","modified":1527944489636},{"_id":"source/_posts/windows10-Arch-双系统安装指南【三】.md","hash":"ec448a9b5574ffbff1a7111711a2bc09fe09c23b","modified":1527944489632},{"_id":"source/_posts/windows10-Arch-双系统安装指南【二】.md","hash":"cfbcb5c78ab6c250db783a04af43bd178cdaf45c","modified":1527944489632},{"_id":"source/_posts/windows10-Arch-双系统安装指南【四】.md","hash":"7bbaae73d379527bdc9943f154cced40679f5093","modified":1527944489632},{"_id":"source/categories/index.md","hash":"a66b09c273cb92e5067c0c44e90630c34e0f117a","modified":1521136503168},{"_id":"source/common/images.md","hash":"539d250ecc3f3a8bc74c191b8fb9ac392fa35430","modified":1521650176196},{"_id":"source/images/alipay_donate.png","hash":"0816ceccaa0b051317f2b5c24e1badbd347ec22a","modified":1521218323445},{"_id":"source/_posts/Linux文件压缩工具.md","hash":"81ec8bdb4ae70e3c40e1682631a313328d710a6f","modified":1527944489576},{"_id":"source/_posts/firewalld使用介绍.md","hash":"6aa6e921724dc0efd8a2792f8c85a4ed658f5e8f","modified":1527944489528},{"_id":"source/_posts/Linux文件打包工具.md","hash":"a8494d988a98d3a710c2c9c18d0c40565d2ab4b3","modified":1527944489576},{"_id":"source/images/favicon16x16.ico","hash":"61519850172e2b8bd02dd4efa508dd2caa1dfa45","modified":1521398673752},{"_id":"source/images/favicon32x32.ico","hash":"7bd6a3d20a812ce353422e9c536af9202258cc4a","modified":1521394089066},{"_id":"source/images/icon2.png","hash":"31c235f74d1818ac158039c9e8985ff052040973","modified":1521398691168},{"_id":"source/images/wechat_donate.png","hash":"ea445154f32c47ce4e9e6e9e1ed462deaf01c6a9","modified":1521218219048},{"_id":"source/tags/index.md","hash":"c54799f82e3390c9bb68b542b00a79a7cbd122c0","modified":1521136265931},{"_id":"themes/next6.3/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1526470537000},{"_id":"themes/next6.3/.github/CONTRIBUTING.md","hash":"f846118d7fc68c053df47b24e1f661241645373f","modified":1526470537000},{"_id":"themes/next6.3/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1526470537000},{"_id":"themes/next6.3/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1526470537000},{"_id":"themes/next6.3/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1526470537000},{"_id":"themes/next6.3/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1526470537000},{"_id":"source/_posts/Linux磁盘管理—分区格式化与挂载.md","hash":"9411ba479b913d1b73a14040a152370b197bb4b4","modified":1527944489548},{"_id":"source/_posts/Linux计划任务与服务管理.md","hash":"ab7fea7f9b7849f9009a75b064de454f31b6ab59","modified":1527944489556},{"_id":"source/_posts/MariaDB和Apache的安装.md","hash":"32f1076b83d0029988ea8c262ccf4e961eba6184","modified":1528181447890},{"_id":"themes/next6.3/.ipynb_checkpoints/_config-checkpoint.yml","hash":"dce4ae9d7b648a578dde1b6773c7212cfcaec652","modified":1526470537000},{"_id":"themes/next6.3/.ipynb_checkpoints/package-checkpoint.json","hash":"11a0b27f92da8abf1efbea6e7a0af4271d7bff9e","modified":1526470537000},{"_id":"themes/next6.3/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1526470537000},{"_id":"themes/next6.3/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1526470537000},{"_id":"themes/next6.3/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1526470537000},{"_id":"themes/next6.3/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1526470537000},{"_id":"themes/next6.3/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1526470537000},{"_id":"themes/next6.3/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1526470537000},{"_id":"themes/next6.3/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1526470537000},{"_id":"themes/next6.3/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1526470537000},{"_id":"themes/next6.3/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1526470537000},{"_id":"themes/next6.3/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1526470537000},{"_id":"themes/next6.3/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1526470537000},{"_id":"themes/next6.3/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1526470537000},{"_id":"themes/next6.3/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1526470537000},{"_id":"themes/next6.3/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1526470537000},{"_id":"themes/next6.3/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1526470537000},{"_id":"themes/next6.3/languages/ja.yml","hash":"5f8e54c666393d1ca2e257f6b1e3b4116f6657d8","modified":1526470537000},{"_id":"themes/next6.3/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1526470537000},{"_id":"themes/next6.3/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1526470537000},{"_id":"themes/next6.3/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1526470537000},{"_id":"themes/next6.3/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1526470537000},{"_id":"themes/next6.3/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1526470537000},{"_id":"themes/next6.3/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1526470537000},{"_id":"themes/next6.3/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1526470537000},{"_id":"themes/next6.3/languages/zh-CN.yml","hash":"b85638c316b011d074457bfe0ba14fd1859b6ad7","modified":1528115321903},{"_id":"themes/next6.3/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1526470537000},{"_id":"themes/next6.3/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1526470537000},{"_id":"themes/next6.3/layout/_layout.swig","hash":"09e8a6bfe5aa901c66d314601c872e57f05509e8","modified":1526470537000},{"_id":"themes/next6.3/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1526470537000},{"_id":"themes/next6.3/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1526470537000},{"_id":"themes/next6.3/layout/index.swig","hash":"53300ca42c00cba050bc98b0a3f2d888d71829b1","modified":1526470537000},{"_id":"themes/next6.3/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1526470537000},{"_id":"themes/next6.3/layout/post.swig","hash":"e7458f896ac33086d9427979f0f963475b43338e","modified":1526470537000},{"_id":"themes/next6.3/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1526470537000},{"_id":"themes/next6.3/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1526470537000},{"_id":"themes/next6.3/scripts/helpers.js","hash":"392cda207757d4c055b53492a98f81386379fc4f","modified":1526470537000},{"_id":"themes/next6.3/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1526470537000},{"_id":"themes/next6.3/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1526470537000},{"_id":"themes/next6.3/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1526470537000},{"_id":"themes/next6.3/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1526470537000},{"_id":"themes/next6.3/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1526470537000},{"_id":"themes/next6.3/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526470537000},{"_id":"source/_posts/.ipynb_checkpoints/Apache和PHP结合及Apache默认虚拟主机-checkpoint.md","hash":"51b908338ecae218b5469714aba0789af4484952","modified":1528181715847},{"_id":"source/_posts/.ipynb_checkpoints/Apache用户认证、域名跳转及访问日志-checkpoint.md","hash":"8a114d444e2bd21143622317f8639fa3dc239641","modified":1528181550886},{"_id":"source/_posts/.ipynb_checkpoints/Apache访问日志配置及静态元素过期时间配置-checkpoint.md","hash":"39383c62dd9d3e901bc2f1e808a9b729c07eda56","modified":1528181544254},{"_id":"source/_posts/.ipynb_checkpoints/Apache配置防盗链及访问控制-checkpoint.md","hash":"795c6db452faf00c18da4a232ef869d11fdf0447","modified":1528181534478},{"_id":"source/_posts/.ipynb_checkpoints/Apache限制相关配置及php相关配置-checkpoint.md","hash":"fd9c8757b6c5f0178ace6bf8aebff1d1f605ce0d","modified":1528181770981},{"_id":"source/_posts/.ipynb_checkpoints/Centos7单用户及救援模式和虚拟机克隆操作-checkpoint.md","hash":"b16c465114742667c26eeda429619784c6ad6a38","modified":1521728464704},{"_id":"source/_posts/.ipynb_checkpoints/Centos7单用户模式修改root密码-checkpoint.md","hash":"1fe27e3b768f4f0d913d15d8c774db582e35b1f8","modified":1521651448172},{"_id":"source/_posts/.ipynb_checkpoints/Centos7安装配置-checkpoint.md","hash":"d318ade386d7212c56656fbda8ae15d02a868bae","modified":1521487599539},{"_id":"source/_posts/.ipynb_checkpoints/Centos7系列-find命令和文件名后缀-checkpoint.md","hash":"698950321dd654c32956d116fc77602e36975697","modified":1522867481450},{"_id":"source/_posts/.ipynb_checkpoints/Centos7系列-使用ssh远程管理系统-checkpoint.md","hash":"c495776e37ce8e714208418a79014bfcbd1986b8","modified":1521825954402},{"_id":"source/_posts/.ipynb_checkpoints/Centos7系列-单用户及救援模式和虚拟机克隆操作-checkpoint.md","hash":"7be335436813afd1832bc789210f28191670e56e","modified":1521825960086},{"_id":"source/_posts/.ipynb_checkpoints/Centos7系列-文件及目录管理(一)-checkpoint.md","hash":"acc8a33c72037bbe23cd31ca644b42960ec24df6","modified":1521825882013},{"_id":"source/_posts/.ipynb_checkpoints/Centos7系列-文件及目录管理(二)-checkpoint.md","hash":"1ddbd8332bc64a153173fbe79715dfae7b385742","modified":1522076592933},{"_id":"source/_posts/.ipynb_checkpoints/Centos7系列-文件及目录管理相关命令-三-checkpoint.md","hash":"40f74e0a9d7973d37a190f6614037feb854bef30","modified":1522165874893},{"_id":"source/_posts/.ipynb_checkpoints/Centos7系列-文件和目录权限(一)-checkpoint.md","hash":"a335dc71edf0c982cf68fabfdbb4028a28b45a92","modified":1526659996455},{"_id":"source/_posts/.ipynb_checkpoints/Centos7系列-文件和目录权限-一-checkpoint.md","hash":"4740c4a6d5901ad0b140b2ca91bd48b0e544f084","modified":1522248896727},{"_id":"source/_posts/.ipynb_checkpoints/Centos7系列-用户及密码管理相关命令-checkpoint.md","hash":"ed5be7b62c0b8c1d4fc265de3243cf94e71898e5","modified":1522771702993},{"_id":"source/_posts/.ipynb_checkpoints/Centos7系列-系统安装配置-checkpoint.md","hash":"68dc33cbe08a63cfc81d093dd211b5f50a11f5fd","modified":1521825969670},{"_id":"source/_posts/.ipynb_checkpoints/Centos7系列-系统网络配置-checkpoint.md","hash":"7b9e11ef919fd0267098cdfd0cf57bc113ad4886","modified":1521825975133},{"_id":"source/_posts/.ipynb_checkpoints/Centos7网络配置-checkpoint.md","hash":"a6c915c0c5fa0a92016fbc80092c829d0738e42a","modified":1521577695475},{"_id":"source/_posts/.ipynb_checkpoints/Centos软件包的安装与卸载(一)-checkpoint.md","hash":"55c392d71e6853f21af77cf2e88099b43a8f0e6f","modified":1523891978833},{"_id":"source/_posts/.ipynb_checkpoints/Centos软件包的安装与卸载(二)-checkpoint.md","hash":"d234f05dd8ba5f8f9d747e35df712eb88bc29df7","modified":1524073736037},{"_id":"source/_posts/.ipynb_checkpoints/LAMP架构介绍及MySQL安装-checkpoint.md","hash":"87bb92bd87f574fe6ca540feb34c96c5edfe8cce","modified":1528218521483},{"_id":"source/_posts/.ipynb_checkpoints/Linux文件压缩工具-checkpoint.md","hash":"e0a4f1af6017fd52c895f6847d7b00e9f3d648de","modified":1523810757922},{"_id":"source/_posts/.ipynb_checkpoints/Linux文件打包工具-checkpoint.md","hash":"a8494d988a98d3a710c2c9c18d0c40565d2ab4b3","modified":1523811374471},{"_id":"source/_posts/.ipynb_checkpoints/Linux日常运维(一)—系统资源监控-checkpoint.md","hash":"b82dd82c102690826381e70abff479399451f67a","modified":1525872257147},{"_id":"source/_posts/.ipynb_checkpoints/Linux日常运维(三)—网络相关命令-checkpoint.md","hash":"280add0bf8a48681dab0c5c5738bd6b4669e11f2","modified":1525871721682},{"_id":"source/_posts/.ipynb_checkpoints/Linux日常运维(二)—进程、内存网络监控-checkpoint.md","hash":"94de77c04682da9868184bb791e974b60d644720","modified":1525872259255},{"_id":"source/_posts/.ipynb_checkpoints/Linux日常运维(四)——iptables-filter表及nat表应用-checkpoint.md","hash":"667f3ccbf3547832bbfb4f4866b14e3ec1e5d8cd","modified":1525885587919},{"_id":"source/_posts/.ipynb_checkpoints/Linux日常运维-二-checkpoint.md","hash":"ee695f88ce947a9c0c98b7df46cc055ff7f7c7ca","modified":1525618189661},{"_id":"source/_posts/.ipynb_checkpoints/Linux正则表达式—awk命令-checkpoint.md","hash":"888eb7ad1a7e473febb082600e4b1471cbd82a21","modified":1524852135176},{"_id":"source/_posts/.ipynb_checkpoints/Linux正则表达式—awk扩展学习-checkpoint.md","hash":"94e4bb79c54231fab8a79c12ff559d42599635a1","modified":1525364215217},{"_id":"source/_posts/.ipynb_checkpoints/Linux正则表达式—grep命令-checkpoint.md","hash":"40104461189e0ff2c0c5d2a04c2b505ad29af40c","modified":1525712287594},{"_id":"source/_posts/.ipynb_checkpoints/Linux正则表达式—sed命令-checkpoint.md","hash":"3dcb68eba0b3e2dff1ac689a8737460547cb65c8","modified":1525712223849},{"_id":"source/_posts/.ipynb_checkpoints/Linux磁盘管理—df-du命令及磁盘分区-checkpoint.md","hash":"b99647c9ced009b749d69c1259a34d5dc353f46c","modified":1523288840802},{"_id":"source/_posts/.ipynb_checkpoints/Linux磁盘管理—分区格式化与挂载-checkpoint.md","hash":"9411ba479b913d1b73a14040a152370b197bb4b4","modified":1523378757999},{"_id":"source/_posts/.ipynb_checkpoints/Linux计划任务与服务管理-checkpoint.md","hash":"6cfcc8dbc3fb30bb1c27a2246d3b1974b5340a95","modified":1526149160405},{"_id":"source/_posts/.ipynb_checkpoints/MariaDB和Apache的安装-checkpoint.md","hash":"32f1076b83d0029988ea8c262ccf4e961eba6184","modified":1528181447890},{"_id":"source/_posts/.ipynb_checkpoints/PHP扩展模块安装-checkpoint.md","hash":"94ba0be6916bce626873635925bea520bbe7ac69","modified":1528181801112},{"_id":"source/_posts/.ipynb_checkpoints/PHP的安装-checkpoint.md","hash":"4f18e14b1e3e9719e15d811390bb47402f6837a5","modified":1528181479936},{"_id":"source/_posts/.ipynb_checkpoints/Shell基础(一)-checkpoint.md","hash":"61cb37e5128f3ab2a4d6bad17e036934812c04ed","modified":1524245416711},{"_id":"source/_posts/.ipynb_checkpoints/Shell基础(二)-checkpoint.md","hash":"d9470d94f01c8ce8130b73e45a6cc8b6e34f6de1","modified":1524497706515},{"_id":"source/_posts/.ipynb_checkpoints/Vim基础(一)-checkpoint.md","hash":"4a30cebd9655d06916a0862682cadcd77c5e4110","modified":1523642020803},{"_id":"source/_posts/.ipynb_checkpoints/Vim基础(二)-checkpoint.md","hash":"d47973ec1a0d26698a5d876a381943c28d4a535c","modified":1523645056839},{"_id":"source/_posts/.ipynb_checkpoints/Windows10开机自启动Linux子系统和ssh服务-checkpoint.md","hash":"ffb1beee8ad53eb2bc367fc8e088e21490978762","modified":1528076190183},{"_id":"source/_posts/.ipynb_checkpoints/firewalld使用介绍-checkpoint.md","hash":"8322047e37133f7b87c24962bc760cd85c885c45","modified":1525969308318},{"_id":"source/_posts/.ipynb_checkpoints/pyenv安装使用指南-checkpoint.md","hash":"5c394031b7c42fd50fcb5d45d5ad191e54bb96ba","modified":1525773900750},{"_id":"source/_posts/.ipynb_checkpoints/rsync通过服务同步及系统日志介绍、screen工具的使用-checkpoint.md","hash":"56c7ca980144458284bf50afc597a042d0ba8aac","modified":1527733231839},{"_id":"source/_posts/.ipynb_checkpoints/windows10-Arch-双系统安装指南【一】-checkpoint.md","hash":"436ff201a9a15b1294e072a1da2093bf3ed28338","modified":1521825980773},{"_id":"source/_posts/.ipynb_checkpoints/windows10-Arch-双系统安装指南【三】-checkpoint.md","hash":"ec448a9b5574ffbff1a7111711a2bc09fe09c23b","modified":1521825987505},{"_id":"source/_posts/.ipynb_checkpoints/windows10-Arch-双系统安装指南【二】-checkpoint.md","hash":"cfbcb5c78ab6c250db783a04af43bd178cdaf45c","modified":1521825992657},{"_id":"source/_posts/.ipynb_checkpoints/windows10-Arch-双系统安装指南【四】-checkpoint.md","hash":"7bbaae73d379527bdc9943f154cced40679f5093","modified":1521825998085},{"_id":"source/images/avatar.png","hash":"20904da3548e9a9bb7da3ecbe4bd71ed25f61c78","modified":1521135415063},{"_id":"themes/next6.3/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1526470537000},{"_id":"themes/next6.3/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1526470537000},{"_id":"themes/next6.3/docs/ru/README.md","hash":"712d9a9a557c54dd6638adfb0e1d2bb345b60756","modified":1526470537000},{"_id":"themes/next6.3/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1526470537000},{"_id":"themes/next6.3/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1526470537000},{"_id":"themes/next6.3/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1526470537000},{"_id":"themes/next6.3/docs/zh-CN/CONTRIBUTING.md","hash":"44e4fb7ce2eca20dfa98cdd1700b50d6def4086f","modified":1526470537000},{"_id":"themes/next6.3/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1526470537000},{"_id":"themes/next6.3/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1526470537000},{"_id":"themes/next6.3/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1526470537000},{"_id":"themes/next6.3/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1526470537000},{"_id":"themes/next6.3/docs/zh-CN/README.md","hash":"84d349fda6b9973c81a9ad4677db9d9ee1828506","modified":1526470537000},{"_id":"themes/next6.3/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"c1ba919f70efe87a39e6217883e1625af0b2c23c","modified":1526470537000},{"_id":"themes/next6.3/languages/.ipynb_checkpoints/zh-CN-checkpoint.yml","hash":"b85638c316b011d074457bfe0ba14fd1859b6ad7","modified":1528115321903},{"_id":"themes/next6.3/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1526470537000},{"_id":"themes/next6.3/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1526470537000},{"_id":"themes/next6.3/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1526470537000},{"_id":"themes/next6.3/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1526470537000},{"_id":"themes/next6.3/layout/_macro/post-copyright.swig","hash":"05e67c50a4f3a20fad879ed61b890de8ca6ba4ea","modified":1526470537000},{"_id":"themes/next6.3/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1526470537000},{"_id":"themes/next6.3/layout/_macro/post.swig","hash":"686e60ede86547bdd7bc34c3629e4c9dbd134a21","modified":1526470537000},{"_id":"themes/next6.3/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1526470537000},{"_id":"themes/next6.3/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1526470537000},{"_id":"themes/next6.3/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1526470537000},{"_id":"themes/next6.3/scripts/tags/button.js","hash":"5a61c2da25970a4981fbd65f4a57c5e85db4dcda","modified":1526470537000},{"_id":"themes/next6.3/scripts/tags/center-quote.js","hash":"db70a841e7c1708f95ca97b44413b526b267fa9b","modified":1526470537000},{"_id":"themes/next6.3/scripts/tags/exturl.js","hash":"2b3a4dc15dea33972c0b6d46a1483dabbf06fb5b","modified":1526470537000},{"_id":"themes/next6.3/scripts/tags/full-image.js","hash":"a98fc19a90924f2368e1982f8c449cbc09df8439","modified":1526470537000},{"_id":"themes/next6.3/scripts/tags/group-pictures.js","hash":"1b97b1b5364945b8ab3e50813bef84273055234f","modified":1526470537000},{"_id":"themes/next6.3/scripts/tags/include-raw.js","hash":"b7600f6b868d8f4f7032126242d9738cd1e6ad71","modified":1526470537000},{"_id":"themes/next6.3/scripts/tags/label.js","hash":"621004f2836040b12c4e8fef77e62cf22c561297","modified":1526470537000},{"_id":"themes/next6.3/scripts/tags/lazy-image.js","hash":"460e5e1f305847dcd4bcab9da2038a85f0a1c273","modified":1526470537000},{"_id":"themes/next6.3/scripts/tags/note.js","hash":"4975d4433e11161b2e9a5744b7287c2d667b3c76","modified":1526470537000},{"_id":"themes/next6.3/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1526470537000},{"_id":"themes/next6.3/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1526470537000},{"_id":"themes/next6.3/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1526470537000},{"_id":"themes/next6.3/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1526470537000},{"_id":"themes/next6.3/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1526470537000},{"_id":"themes/next6.3/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1526470537000},{"_id":"themes/next6.3/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1526470537000},{"_id":"themes/next6.3/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1526470537000},{"_id":"themes/next6.3/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1526470537000},{"_id":"themes/next6.3/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1526470537000},{"_id":"themes/next6.3/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1526470537000},{"_id":"themes/next6.3/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1526470537000},{"_id":"themes/next6.3/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1526470537000},{"_id":"themes/next6.3/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1526470537000},{"_id":"themes/next6.3/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526470537000},{"_id":"themes/next6.3/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1526470537000},{"_id":"themes/next6.3/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526470537000},{"_id":"themes/next6.3/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1526470537000},{"_id":"themes/next6.3/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1526470537000},{"_id":"themes/next6.3/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1526470537000},{"_id":"themes/next6.3/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1526470537000},{"_id":"themes/next6.3/layout/_partials/comments.swig","hash":"5df32b286a8265ba82a4ef5e1439ff34751545ad","modified":1526470537000},{"_id":"themes/next6.3/layout/_partials/footer.swig","hash":"1ae77b6a369f83c9986408f2ab448090e37cd2dc","modified":1526470537000},{"_id":"themes/next6.3/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1526470537000},{"_id":"themes/next6.3/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1526470537000},{"_id":"themes/next6.3/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1526470537000},{"_id":"themes/next6.3/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1526470537000},{"_id":"themes/next6.3/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1526470537000},{"_id":"themes/next6.3/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1526470537000},{"_id":"themes/next6.3/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526470537000},{"_id":"themes/next6.3/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526470537000},{"_id":"themes/next6.3/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526470537000},{"_id":"themes/next6.3/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526470537000},{"_id":"themes/next6.3/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526470537000},{"_id":"themes/next6.3/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526470537000},{"_id":"themes/next6.3/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526470537000},{"_id":"themes/next6.3/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1526470537000},{"_id":"themes/next6.3/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1526470537000},{"_id":"themes/next6.3/source/css/_custom/custom.styl","hash":"05c28969b4e2243d4f909ea711f4fa2dab718f51","modified":1528115555801},{"_id":"themes/next6.3/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1526470537000},{"_id":"themes/next6.3/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1526470537000},{"_id":"themes/next6.3/source/css/_mixins/base.styl","hash":"81ca13d6d0beff8b1a4b542a51e3b0fb68f08efd","modified":1526470537000},{"_id":"themes/next6.3/source/css/_variables/Gemini.styl","hash":"7a2706304465b9e673d5561b715e7c72a238437c","modified":1526470537000},{"_id":"themes/next6.3/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1526470537000},{"_id":"themes/next6.3/source/css/_variables/Pisces.styl","hash":"32392d213f5d05bc26b2dc452f2fc6fea9d44f6d","modified":1526470537000},{"_id":"themes/next6.3/source/css/_variables/base.styl","hash":"cfb03ec629f13883509eac66e561e9dba562333f","modified":1526470537000},{"_id":"themes/next6.3/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1526470537000},{"_id":"themes/next6.3/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1526470537000},{"_id":"themes/next6.3/source/js/src/bootstrap.js","hash":"40de94fd18fcbd67a327d63b0d1e242a08aa5404","modified":1526470537000},{"_id":"themes/next6.3/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1526470537000},{"_id":"themes/next6.3/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1526470537000},{"_id":"themes/next6.3/source/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1526470537000},{"_id":"themes/next6.3/source/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1526470537000},{"_id":"themes/next6.3/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1526470537000},{"_id":"themes/next6.3/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1526470537000},{"_id":"themes/next6.3/source/js/src/utils.js","hash":"4284c67ea1435de2acd523f6d48c0d073fd1ad03","modified":1526470537000},{"_id":"themes/next6.3/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1526470537000},{"_id":"themes/next6.3/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1526470537000},{"_id":"themes/next6.3/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1526470537000},{"_id":"themes/next6.3/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1526470537000},{"_id":"themes/next6.3/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1526470537000},{"_id":"themes/next6.3/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1526470537000},{"_id":"themes/next6.3/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1526470537000},{"_id":"themes/next6.3/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1526470537000},{"_id":"themes/next6.3/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1526470537000},{"_id":"themes/next6.3/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1526470537000},{"_id":"themes/next6.3/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1526470537000},{"_id":"themes/next6.3/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1526470537000},{"_id":"themes/next6.3/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1526470537000},{"_id":"themes/next6.3/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1526470537000},{"_id":"themes/next6.3/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1526470537000},{"_id":"themes/next6.3/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1526470537000},{"_id":"themes/next6.3/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1526470537000},{"_id":"themes/next6.3/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1526470537000},{"_id":"themes/next6.3/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1526470537000},{"_id":"themes/next6.3/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1526470537000},{"_id":"themes/next6.3/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1526470537000},{"_id":"themes/next6.3/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1526470537000},{"_id":"themes/next6.3/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/analytics/lean-analytics.swig","hash":"cee047575ae324398025423696b760db64d04e6f","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/comments/disqus.swig","hash":"8878241797f8494a70968756c57cacdfc77b61c7","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/comments/valine.swig","hash":"c0eb6123464d745ac5324ce6deac8ded601f432f","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1526470537000},{"_id":"themes/next6.3/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1526470537000},{"_id":"themes/next6.3/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1526470537000},{"_id":"themes/next6.3/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1526470537000},{"_id":"themes/next6.3/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Gemini/index.styl","hash":"f362fbc791dafb378807cabbc58abf03e097af6d","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Pisces/_layout.styl","hash":"ba1842dbeb97e46c6c4d2ae0e7a2ca6d610ada67","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1526470537000},{"_id":"themes/next6.3/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1526470537000},{"_id":"themes/next6.3/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1526470537000},{"_id":"themes/next6.3/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1526470537000},{"_id":"themes/next6.3/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1526470537000},{"_id":"themes/next6.3/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1526470537000},{"_id":"themes/next6.3/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1526470537000},{"_id":"themes/next6.3/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1526470537000},{"_id":"themes/next6.3/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1526470537000},{"_id":"themes/next6.3/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1526470537000},{"_id":"themes/next6.3/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/sidebar/sidebar-author.styl","hash":"bbe0d111f6451fc04e52719fd538bd0753ec17f9","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/tags/full-image.styl","hash":"5d15cc8bbefe44c77a9b9f96bf04a6033a4b35b8","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1526470537000},{"_id":"themes/next6.3/source/css/_common/components/third-party/third-party.styl","hash":"1c06be422bc41fd35e5c7948cdea2c09961207f6","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1526470537000},{"_id":"themes/next6.3/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1526470537000},{"_id":"themes/next6.3/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1526470537000},{"_id":"public/baidusitemap.xml","hash":"5633c590da87797ba30146872b0a122dc95e04dd","modified":1528218606882},{"_id":"public/rss2.xml","hash":"2f6aeb06decd7e8be58b5c8ddc88aba6d452a171","modified":1528218641958},{"_id":"public/search.xml","hash":"976390cc656fc1d72ace48e593bb7b4d1bd3b0e9","modified":1528218641965},{"_id":"public/sitemap.xml","hash":"9c0f84878f38f1d7baae3162dbcf1df2f5f7eba9","modified":1528218642054},{"_id":"public/404.html","hash":"39f0a975e50cf1e6af9567f5e4e33f6d126df820","modified":1528218643027},{"_id":"public/categories/index.html","hash":"5a71da7d7bcdc2e67361e639b577303d6c954bf8","modified":1528218643982},{"_id":"public/tags/index.html","hash":"7b008684d7db79ae2b10363b68216db45abbcc32","modified":1528218643983},{"_id":"public/post/63e0f53d.html","hash":"4297eb6a8aff01741a734a1a4623ffd5c60135b2","modified":1528218643986},{"_id":"public/post/5d3ade62.html","hash":"58e70674a3b6740277309f384ff50bda0acf8139","modified":1528218643986},{"_id":"public/post/5a8b1c0f.html","hash":"700b579b0b072cdec1220e174193c77c1fb4dff6","modified":1528218643986},{"_id":"public/post/7abd11c3.html","hash":"6bf7f2dc7afa718567c9e04d377dfc8b12fb6a53","modified":1528218643986},{"_id":"public/post/8097d660.html","hash":"d9a5808f281bf1b430628e9747fefa728116321c","modified":1528218643987},{"_id":"public/post/af0b01.html","hash":"094951094114813c68991311580397a656f3aabf","modified":1528218643987},{"_id":"public/post/9c123af5.html","hash":"610bbc9edfae2430c1d66b7301ab11e4b3c22233","modified":1528218643987},{"_id":"public/post/75d64810.html","hash":"7f0b32f8ee6a07ff58bf3ed2bf8898f60f7f301c","modified":1528218643988},{"_id":"public/post/1d2820c6.html","hash":"20f26538206a5e356b1273a9d0fe5cb7a1ffee8c","modified":1528218643988},{"_id":"public/post/cd21d578.html","hash":"a1b83bd64e646ccc01fdf617064dea896f392b2c","modified":1528218643988},{"_id":"public/post/ccfd4295.html","hash":"5c94e82b5891efd496e0620066fc51e00615b227","modified":1528218643989},{"_id":"public/post/d9f5c2d9.html","hash":"f41e30ea6e987cb8724ff995feedadf84e471093","modified":1528218643989},{"_id":"public/post/5540efdf.html","hash":"aeb3f2e2053bd02b16e66591e651c67cb3efa11b","modified":1528218643989},{"_id":"public/post/79e258ff.html","hash":"a3acc89bcd540d292004af5060b386366589aca5","modified":1528218643989},{"_id":"public/post/f587388e.html","hash":"b9c2b98db182046150f290315f144109a4f80f4f","modified":1528218643990},{"_id":"public/post/e1f132a7.html","hash":"a29f919dea18a0c911c85b9a35c79ef63806e5dd","modified":1528218643991},{"_id":"public/post/13c2c977.html","hash":"e0da26c78e105b19509ad314a97cb5e85523f3f7","modified":1528218643991},{"_id":"public/post/9f02128c.html","hash":"5685fe9fa482cf788968002365e65372fcb24fbc","modified":1528218643991},{"_id":"public/post/707efc0b.html","hash":"6c508ee3e6ddcf2e8a95317fa4f6969c9c3b3618","modified":1528218643991},{"_id":"public/post/9960c119.html","hash":"be41190d3efa205ae7b53a63ac065efaaf69114c","modified":1528218643992},{"_id":"public/post/60aa0a0.html","hash":"299656696ac01ec1be183741960e0cbe4a956b2f","modified":1528218643992},{"_id":"public/post/c7f852f3.html","hash":"c92cb48471368a479608a02b0c27b0fb1d840bf8","modified":1528218643992},{"_id":"public/post/8d187ebb.html","hash":"607389f45d15fc7aff2203591b0c34da0ad40743","modified":1528218643993},{"_id":"public/post/400407c0.html","hash":"e594427e5e379e95bfe357ecc849b17c27bc57f3","modified":1528218643993},{"_id":"public/post/3711cd5b.html","hash":"96934d38e9bdf870872357c4b1fec1566161c4d6","modified":1528218643993},{"_id":"public/post/49e2ed70.html","hash":"a43a6053cf76adc5bbf85a6b865dcf352a739081","modified":1528218643994},{"_id":"public/post/e6d37612.html","hash":"5316434f11ccdd03e82e67119213cb1c8f738d44","modified":1528218643994},{"_id":"public/post/85ee13c4.html","hash":"fbacdd9babe8759926c9250d6e71f53932ffa662","modified":1528218643995},{"_id":"public/post/2adf88a6.html","hash":"86d9017ce0db04ae59278ae2baaa52265e3e2a3a","modified":1528218643995},{"_id":"public/post/b9ebaad1.html","hash":"2e0df150b5bd80dc1720c7bea07dd484ff26dd4f","modified":1528218643995},{"_id":"public/post/701184ad.html","hash":"dcc9d1a1196f1db5adb01da9d447182c00c94d79","modified":1528218643996},{"_id":"public/post/49f9b403.html","hash":"01cf5603988069dd66c7eb03cda46b8482a7521b","modified":1528218643996},{"_id":"public/post/e6c82f61.html","hash":"646c2a5068644003a4297efdf03f9fd050def74d","modified":1528218643996},{"_id":"public/post/8901b9bb.html","hash":"5e0205583cbcdf90794e4da7615da5bcc852ffd4","modified":1528218643997},{"_id":"public/post/aa04cc87.html","hash":"dd31b2982b7aa9a6e30f28f841664ea9f0c0095a","modified":1528218643997},{"_id":"public/post/43eb8ab5.html","hash":"e21eaa8736af7dc2be288ec666f2c0c8bb445063","modified":1528218643997},{"_id":"public/post/9f1fc446.html","hash":"7766aefca072ac65056f42b42aff24dd77653b39","modified":1528218643998},{"_id":"public/post/2af55eed.html","hash":"c9b9cedc2c9765c109f94ec6b31f7d5b12c173f4","modified":1528218643998},{"_id":"public/post/adac5712.html","hash":"437015217d1856373b98e74065988c672f493727","modified":1528218643998},{"_id":"public/post/f4c9d6be.html","hash":"14eeb71cf48bb78377fb1b2db55c6eef9c25ff6b","modified":1528218643999},{"_id":"public/post/a0538766.html","hash":"e35d12208586b6552a3d6cd32daf8b58ee7e2b69","modified":1528218643999},{"_id":"public/post/7af3ca57.html","hash":"15d8f0560c70fc028dce472f9b9c5aeeb171049e","modified":1528218643999},{"_id":"public/post/8385c26e.html","hash":"b3522664e34b9e2b1edaaef4bca3b828c7b5099f","modified":1528218644000},{"_id":"public/post/fd76e245.html","hash":"20f7c9bc7eafc85c360cb60d565bd9668eab55a6","modified":1528218644000},{"_id":"public/post/9e44b9f5.html","hash":"88a8cab9caf35fc1b5bc988722ffb91773b0b9a4","modified":1528218644000},{"_id":"public/post/19bc2f97.html","hash":"bdf9de6842eec5a1285484a56d18c9397a7abb4d","modified":1528218644001},{"_id":"public/post/cb3f93e8.html","hash":"f1d1a23245a4a2f31705cf4b455cc0f8cd50f21c","modified":1528218644001},{"_id":"public/post/144d2216.html","hash":"63d35d95923ff6625695684fc9ad5d50c9fb0693","modified":1528218644001},{"_id":"public/post/79bae30d.html","hash":"3b50f9be83d83f788fe0a0a7dcc94d15d474730b","modified":1528218644002},{"_id":"public/post/f5f3d6e0.html","hash":"f52211306b7baed515fb4d9f74c665f2d1445617","modified":1528218644002},{"_id":"public/post/42decf85.html","hash":"07610268060e2a0b1fa2a6dccfc9b3bf7cf196e3","modified":1528218644002},{"_id":"public/post/fc06cd7.html","hash":"ab4750a64195bc7d518b5cbeac07470f753e8381","modified":1528218644002},{"_id":"public/post/3fd6800f.html","hash":"06c24ea8395385e90d2a4065a67a4829f65e29d0","modified":1528218644003},{"_id":"public/books/index.html","hash":"423529ceabadcfa8e8e67b208871ad58946f85f3","modified":1528218644032},{"_id":"public/movies/index.html","hash":"ff85595d83950ac9ca11cc38ea93fb788c2d70d5","modified":1528218644032},{"_id":"public/archives/index.html","hash":"cff65b45e184e67b9d05c4d4aad2a7601b522227","modified":1528218644003},{"_id":"public/archives/page/2/index.html","hash":"2110260510729da8b731c7deadaea40a7217f473","modified":1528218644003},{"_id":"public/archives/page/3/index.html","hash":"6450fe1668676d4a17c3594f3a9278dee1eeda69","modified":1528218644004},{"_id":"public/archives/page/4/index.html","hash":"1b006f057dac85401fb97a232125043f8c8f9527","modified":1528218644004},{"_id":"public/archives/2016/index.html","hash":"9df5c5d7df3ca9bf0dd3306ccdd9a6ae51afef6d","modified":1528218644004},{"_id":"public/archives/2016/02/index.html","hash":"c93d50ce323240adcdee25f995b4f03faffdaf9a","modified":1528218644005},{"_id":"public/archives/2017/index.html","hash":"d6c678cdfb03ff3ca93aa2d2977aaee89b75ca54","modified":1528218644005},{"_id":"public/archives/2017/08/index.html","hash":"3f43c203c9d28e8254044c643f972e58639fe87d","modified":1528218644005},{"_id":"public/archives/2018/index.html","hash":"304fa27a2e302ae436dd79f8e0d6a0a314f19f75","modified":1528218644005},{"_id":"public/archives/2018/page/2/index.html","hash":"7f2f80ae8bc1374c967397c0a3260499fb236b88","modified":1528218644006},{"_id":"public/archives/2018/page/3/index.html","hash":"fc2dcfefcb577e41198ad814394b789f8f4c0d25","modified":1528218644006},{"_id":"public/archives/2018/page/4/index.html","hash":"1cf009b3032a61daec7c0921f76e409c0cee0b5e","modified":1528218644006},{"_id":"public/archives/2018/03/index.html","hash":"16f9c6f2e0f304c1409c928c0d6593775181538e","modified":1528218644006},{"_id":"public/archives/2018/04/index.html","hash":"46b7ae89ffdfc4eb6ee19279eb879b11020479bc","modified":1528218644007},{"_id":"public/archives/2018/04/page/2/index.html","hash":"d17866afe10b8bc96738a4ada25c131db5a388ce","modified":1528218644007},{"_id":"public/archives/2018/05/index.html","hash":"e1a6860262b8d70ceb679b6bd55e2f6ee733cdeb","modified":1528218644007},{"_id":"public/archives/2018/05/page/2/index.html","hash":"c2becd336efc9aaa1bbb56e71c9f5956647f4d6e","modified":1528218644008},{"_id":"public/archives/2018/06/index.html","hash":"2f771075f82aa204d375da3bdba1026528ea2b83","modified":1528218644008},{"_id":"public/categories/LAMP/index.html","hash":"7b67ba771f21e77e29a0b5b8252a5375217f6e2c","modified":1528218644008},{"_id":"public/categories/Centos7/index.html","hash":"038b12a05686e81024df5b577157fe800b598a90","modified":1528218644008},{"_id":"public/categories/Centos7/page/2/index.html","hash":"e8918246cd93ce38482140438407025710f39dc1","modified":1528218644009},{"_id":"public/categories/Centos7/page/3/index.html","hash":"1d164afa50faefb951042936a6a5b7a233e32847","modified":1528218644009},{"_id":"public/categories/Linux/index.html","hash":"d1fae082a1063f70cbf03e0688d607ee6fbb8b73","modified":1528218644009},{"_id":"public/categories/Python/index.html","hash":"93b4f8d17272eed88cfc268c12bf94547aa936a7","modified":1528218644010},{"_id":"public/index.html","hash":"6501f07d71a4a7a0b877bfb855c0bedc2fe2c63a","modified":1528218644010},{"_id":"public/page/2/index.html","hash":"3e8b0c5a18d6ef000c769ae81c150199f21f822e","modified":1528218644010},{"_id":"public/page/3/index.html","hash":"e60570113e08a35240f691184e19967bb4b186d7","modified":1528218644010},{"_id":"public/page/4/index.html","hash":"76be39f271419153ee7ea504a7015b9c4e2c435e","modified":1528218644011},{"_id":"public/page/5/index.html","hash":"b5ecc1e737b54ab5620b83c7c068b9d335e87a0b","modified":1528218644011},{"_id":"public/page/6/index.html","hash":"e8b9c8ba5d9c12d72b84bedb5dee71d09a14c04d","modified":1528218644011},{"_id":"public/tags/Linux/index.html","hash":"4b408f32cc853fa535bfff14c5964869bf9510fb","modified":1528218644012},{"_id":"public/tags/Linux/page/2/index.html","hash":"a257994fba87109413513b49f37ca878d0b383cc","modified":1528218644012},{"_id":"public/tags/Linux/page/3/index.html","hash":"0a643f563384bd112141bec742f68a613cf17d32","modified":1528218644012},{"_id":"public/tags/Linux/page/4/index.html","hash":"bc285b7f36ce1cdfeb5f5264f9929cdda8cd04cb","modified":1528218644013},{"_id":"public/tags/Centos/index.html","hash":"25b1cec6926835fe2a7fc010182a1c1aa8a575c1","modified":1528218644013},{"_id":"public/tags/Centos/page/2/index.html","hash":"a4e7e5d71e7b2f948edd45a8ccaa15dc536b5ed2","modified":1528218644013},{"_id":"public/tags/Centos/page/4/index.html","hash":"fa01d4f3bf4e1840b94becb2aac5e36d1cc0f175","modified":1528218644014},{"_id":"public/tags/Centos/page/3/index.html","hash":"229424b3cfbdc0ff922838d68d4913ecd8cae193","modified":1528218644013},{"_id":"public/tags/Apache/index.html","hash":"29eb2a2718276da8e997c247e1dbd37f83e52c75","modified":1528218644014},{"_id":"public/tags/PHP/index.html","hash":"8da9e0d9d877f620cf9c56806ad968f851a6efa6","modified":1528218644014},{"_id":"public/tags/MySQL/index.html","hash":"0c3c242254d5c0c5aaaf859376934c0a3b6ac53b","modified":1528218644015},{"_id":"public/tags/windows10/index.html","hash":"faafd5cf2f43e1f1890492e99867055526d6bc34","modified":1528218644015},{"_id":"public/tags/WSL/index.html","hash":"1d9e4abf9fa6a551758ca6b47789cce23e1e05f8","modified":1528218644015},{"_id":"public/tags/Python/index.html","hash":"283ef1881dbbde28e14c790a6a2feb2770422f96","modified":1528218644015},{"_id":"public/tags/linux/index.html","hash":"c8d4cd9d6e23c906801cd4627d7d06f08b93d564","modified":1528218644016},{"_id":"public/tags/archlinux/index.html","hash":"5f104903e1867ce93ac79ef0ab332d97eae8a84e","modified":1528218644016},{"_id":"public/tags/cinnamon/index.html","hash":"60d03e3de7f56e935598fdacaf0bf3db2a2e019d","modified":1528218644016},{"_id":"public/tags/MariaDB/index.html","hash":"1d08eab515d88022f4469f23c68b2aa5ab4ce49a","modified":1528218644017},{"_id":"public/CNAME","hash":"dcd096574da5f86b4076e87c7d7192685707fe14","modified":1528189174516},{"_id":"public/common/images.md","hash":"539d250ecc3f3a8bc74c191b8fb9ac392fa35430","modified":1528189174516},{"_id":"public/images/alipay_donate.png","hash":"0816ceccaa0b051317f2b5c24e1badbd347ec22a","modified":1528189174516},{"_id":"public/images/favicon16x16.ico","hash":"61519850172e2b8bd02dd4efa508dd2caa1dfa45","modified":1528189174517},{"_id":"public/images/favicon32x32.ico","hash":"7bd6a3d20a812ce353422e9c536af9202258cc4a","modified":1528189174517},{"_id":"public/images/icon2.png","hash":"31c235f74d1818ac158039c9e8985ff052040973","modified":1528189174517},{"_id":"public/images/wechat_donate.png","hash":"ea445154f32c47ce4e9e6e9e1ed462deaf01c6a9","modified":1528189174517},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1528189174517},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1528189174518},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1528189174518},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1528189174518},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1528189174518},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1528189174519},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1528189174519},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1528189174519},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1528189174519},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1528189174519},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1528189174520},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1528189174520},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528189174520},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1528189174520},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528189174520},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1528189174521},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1528189174521},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1528189174521},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1528189174521},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1528189174521},{"_id":"public/assets/douban-loading.gif","hash":"6f026ea7110c102edd3b32f63129d22b17c41b49","modified":1528189174522},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1528189176834},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1528189180258},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1528189182298},{"_id":"public/js/src/affix.js","hash":"a2967aa24d59743b1f8ca226d526706a7427ac0a","modified":1528189182301},{"_id":"public/js/src/algolia-search.js","hash":"3c599ffa97e6e38821aa4f5c5130828f1b61cf99","modified":1528189182301},{"_id":"public/js/src/bootstrap.js","hash":"6c70e0cffd85d13a8a9576775e289b74c98fb64a","modified":1528189182301},{"_id":"public/js/src/exturl.js","hash":"dc9be2fb1b79e0b9f6c11e557f4b58f6c4c1c2c4","modified":1528189182301},{"_id":"public/js/src/js.cookie.js","hash":"a98e2c3831f21b20f45f2c2081f3ea7f84c75044","modified":1528189182302},{"_id":"public/js/src/motion.js","hash":"2bd93a26439df5b8c63ce273ff6073b01b7349ed","modified":1528189182302},{"_id":"public/js/src/post-details.js","hash":"4e1cb2665d49a0b09c983065d4c5de97160a9d6a","modified":1528189182302},{"_id":"public/js/src/scroll-cookie.js","hash":"2933388e5d85695188b89f3af44882d5f5391bf2","modified":1528189182302},{"_id":"public/js/src/scrollspy.js","hash":"0ee0f14a6a1e3ba8bc193e5fa2692ed8c57242f9","modified":1528189182303},{"_id":"public/js/src/utils.js","hash":"cd0a0b84254d1c9552e7338e86e2126cfe2934c6","modified":1528189182303},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"4253a83fa7b9b77e4ece1244e9b80cf0cdab63dc","modified":1528189182303},{"_id":"public/lib/velocity/velocity.ui.js","hash":"52707e53f5fe7a94e639c696d4d6566b724b17fa","modified":1528189182303},{"_id":"public/js/src/schemes/pisces.js","hash":"031fe89761d30db82f4f16c5fd732e2108cbe2c2","modified":1528189182303},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"55b50e7f20e333599bc2240eb3ee85332afebc00","modified":1528189182304},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"67fff4ef4845db706c5c4c748a3f887d9d3af0bb","modified":1528189182304},{"_id":"public/lib/velocity/velocity.min.js","hash":"9cb74825f3fa1180dbbe9fa733e8df36972dbea6","modified":1528189182304},{"_id":"public/lib/jquery/index.js","hash":"d463b9eba8fb57952eb33239516cf840dc08949e","modified":1528189182304},{"_id":"public/lib/velocity/velocity.js","hash":"fde14960d652aa2f9757c8172b37fab1b84e658a","modified":1528189182304},{"_id":"public/images/avatar.png","hash":"20904da3548e9a9bb7da3ecbe4bd71ed25f61c78","modified":1528189182305},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1528189182305},{"_id":"public/css/main.css","hash":"aeb5acdca31fb19c132639396f930d2c93465856","modified":1528189182323},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"566d8688dc261ad82ce395ebc066cb35231db46a","modified":1528189182323},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"5a7c69f6d5398f0e5f8f7fa5642e4268447c14e8","modified":1528189182323}],"Category":[{"name":"LAMP","_id":"cji1gaz6f0006u1jxfm43fxi8"},{"name":"Centos7","_id":"cji1gaz84000nu1jxovhmh0dj"},{"name":"Linux","_id":"cji1gazdx003ou1jxe3mgynwl"},{"name":"Python","_id":"cji1gazec003yu1jx0vz3bjwn"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","date":"2018-06-04T02:01:40.163Z","updated":"2018-06-04T02:01:40.163Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cji1gayun0000u1jxcoti5k62","content":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><!DOCTYPE HTML><html><head><meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"><meta name=\"robots\" content=\"all\"><meta name=\"robots\" content=\"index,follow\"><link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\"></head><body><script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\"></script><script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script><script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script></body></html><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><!DOCTYPE HTML><html><head><meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"><meta name=\"robots\" content=\"all\"><meta name=\"robots\" content=\"index,follow\"><link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\"></head><body><script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\"></script><script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script><script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script></body></html><!-- rebuild by neat -->"},{"title":"分类","date":"2018-03-15T17:51:32.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-03-16 01:51:32\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-03-15T17:55:03.168Z","path":"categories/index.html","layout":"page","_id":"cji1gaz5h0002u1jxrd8khqer","content":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><!-- rebuild by neat -->"},{"title":"标签","date":"2018-03-15T17:48:09.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-03-16 01:48:09\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-03-15T17:51:05.931Z","path":"tags/index.html","layout":"page","_id":"cji1gaz5u0004u1jxpyd8nrj0","content":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><!-- rebuild by neat -->"}],"Post":[{"title":"images","author":"Evobot","abbrlink":"e01fbe6a","date":"2018-03-22T16:15:00.000Z","_content":"![paste image](http://p5qynomrl.bkt.clouddn.com/152173531953668h6dyus.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1521816629431xbicnwsb.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1522075826408alwrya2w.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1522076578398hgl3ncm4.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1522162144804yntgfqme.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/15222440423936fdqcu2t.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1522771004764cu3a7i8u.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1523288634264cki496jp.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1523378473666fges139o.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1523456458706v7d50vlz.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1523544542096lpvuekxi.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1523544586409fzzd4jl7.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1523547969821sdmsr6q0.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/15236446713184315ls9p.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1523810699086ylm0327m.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/15238112046500szvwym3.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/15239803743973aqlnr8b.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/15239832162285ykeole1.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1524663037714kppzgbbw.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1524664933060dp4ahdbl.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1524664982318vn5zo4k7.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1524665036744upqnxqqe.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1524669414781k7u9ah56.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1524669534782i30jjmce.png?imageslim)","source":"_drafts/images.md","raw":"title: images\nauthor: Evobot\nabbrlink: e01fbe6a\ntags: []\ncategories: []\ndate: 2018-03-23 00:15:00\n---\n![paste image](http://p5qynomrl.bkt.clouddn.com/152173531953668h6dyus.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1521816629431xbicnwsb.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1522075826408alwrya2w.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1522076578398hgl3ncm4.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1522162144804yntgfqme.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/15222440423936fdqcu2t.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1522771004764cu3a7i8u.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1523288634264cki496jp.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1523378473666fges139o.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1523456458706v7d50vlz.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1523544542096lpvuekxi.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1523544586409fzzd4jl7.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1523547969821sdmsr6q0.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/15236446713184315ls9p.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1523810699086ylm0327m.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/15238112046500szvwym3.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/15239803743973aqlnr8b.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/15239832162285ykeole1.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1524663037714kppzgbbw.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1524664933060dp4ahdbl.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1524664982318vn5zo4k7.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1524665036744upqnxqqe.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1524669414781k7u9ah56.png?imageslim)\n![paste image](http://p5qynomrl.bkt.clouddn.com/1524669534782i30jjmce.png?imageslim)","slug":"images","published":0,"updated":"2018-04-25T15:18:56.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gaz4z0001u1jxvsb559po","content":"<!-- build time:Tue Jun 05 2018 16:57:37 GMT+0800 (CST) --><p><img src=\"http://p5qynomrl.bkt.clouddn.com/152173531953668h6dyus.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521816629431xbicnwsb.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1522075826408alwrya2w.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1522076578398hgl3ncm4.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1522162144804yntgfqme.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/15222440423936fdqcu2t.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1522771004764cu3a7i8u.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1523288634264cki496jp.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1523378473666fges139o.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1523456458706v7d50vlz.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1523544542096lpvuekxi.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1523544586409fzzd4jl7.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1523547969821sdmsr6q0.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/15236446713184315ls9p.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1523810699086ylm0327m.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/15238112046500szvwym3.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/15239803743973aqlnr8b.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/15239832162285ykeole1.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1524663037714kppzgbbw.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1524664933060dp4ahdbl.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1524664982318vn5zo4k7.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1524665036744upqnxqqe.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1524669414781k7u9ah56.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1524669534782i30jjmce.png?imageslim\" alt=\"paste image\"></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Tue Jun 05 2018 16:57:37 GMT+0800 (CST) --><p><img src=\"http://p5qynomrl.bkt.clouddn.com/152173531953668h6dyus.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521816629431xbicnwsb.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1522075826408alwrya2w.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1522076578398hgl3ncm4.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1522162144804yntgfqme.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/15222440423936fdqcu2t.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1522771004764cu3a7i8u.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1523288634264cki496jp.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1523378473666fges139o.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1523456458706v7d50vlz.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1523544542096lpvuekxi.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1523544586409fzzd4jl7.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1523547969821sdmsr6q0.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/15236446713184315ls9p.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1523810699086ylm0327m.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/15238112046500szvwym3.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/15239803743973aqlnr8b.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/15239832162285ykeole1.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1524663037714kppzgbbw.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1524664933060dp4ahdbl.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1524664982318vn5zo4k7.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1524665036744upqnxqqe.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1524669414781k7u9ah56.png?imageslim\" alt=\"paste image\"><br><img src=\"http://p5qynomrl.bkt.clouddn.com/1524669534782i30jjmce.png?imageslim\" alt=\"paste image\"></p><!-- rebuild by neat -->"},{"title":"Apache配置PHP解析及Apache默认虚拟主机","author":"Evobot","abbrlink":"9c123af5","date":"2018-05-28T12:51:29.000Z","image":null,"_content":"\n\n\n在之前已经编译生成了PHP的模块，本文主要介绍如何配置httpd支持PHP解析，以及Apache的默认虚拟主机的相关知识。\n\n<!--more-->\n\n---\n\n# Apache配置PHP解析\n\n## 修改httpd配置文件\n\n- httpd的主配置文件为`/usr/local/apache2.4/conf/httpd.conf`，增加PHP解析支持，需要修改一下4个地方：\n\n  ```bash\n  //去掉ServerName的注释\n  ServerName www.example.com:80\n  \n  //将denied修改为granted，防止出现403错误\n  Require all denied\n  \n  //在下面两行后面增加AddType application/x-httpd-php .php，增加对PHP的支持\n  AddType application/x-compress .Z\n  AddType application/x-gzip .gz .tgz\n  AddType application/x-httpd-php .php\n  \n  //在index.html后面增加index.php\n  <IfModule dir_module>\n      #DirectoryIndex index.html\n      DirectoryIndex index.html index.php\n  </IfModule>\n  ```\n\n- 修改完成后可以使用`apachectl -t`检查配置文件正确性，使用`apachectl graceful`重新加载配置文件，这样的好处是防止配置错误导致服务宕机：\n\n  ```bash\n  [root@evobot ~]# /usr/local/apache2.4/bin/apachectl -t\n  Syntax OK\n  \n  [root@evobot ~]# /usr/local/apache2.4/bin/apachectl graceful\n  \n  ```\n\n  \n\n- 默认情况下，服务器的80端口为关闭状态，临时打开80端口，可以使用iptables添加如下规则：\n\n  ```bash\n  # iptables -I INPUT -p tcp --dport 80 -j ACCEPT\n  ```\n\n## 测试PHP支持\n\n- 在apache安装目录下的`htdocs`下创建1.php，写入如下内容：\n\n  ```php\n  <?php\n      phpinfo();\n  ?>\n  ```\n\n  增加文件后不需要重启服务，访问`ip/1.php`查看是否解析成功，看到如下页面则解析成功：\n\n  ![apache-php](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/php.png)\n\n  如果不支持解析，则显示的是文件源代码，这时要检查apache的php模块是否加载，模块文件是否存在，配置文件是否加载模块，并且是否增加了`AddType application/x-httpd-php .php`这行配置。\n\n# Apache默认虚拟主机\n\n- 一台服务器可以运行多个网站，每个网站都是一个虚拟主机，而任何一个域名解析到这台服务器，都可以访问的虚拟主机就是默认的虚拟主机。\n\n- 在httpd.conf中，`DocumentRoot`项配置定义了网站的根目录：\n\n  ```bash\n  DocumentRoot \"/usr/local/apache2.4/htdocs\"\n  <Directory \"/usr/local/apache2.4/htdocs\">\n  ```\n\n- 而域名则是`ServerName`项的配置，为httpd的默认虚拟主机：\n\n  ```\n  ServerName www.example.com:80\n  ```\n\n## 虚拟主机配置文件\n\n- httpd.conf中搜索`extra`，找到`Virtual hosts`配置，去掉注释：\n\n  ```bash\n  # Virtual hosts\n  Include conf/extra/httpd-vhosts.conf\n  ```\n\n- httpd-vhosts.conf是虚拟主机二级配置文件，打开这条选项后，前面的虚拟主机配置就不再生效，而是虚拟主机配置文件生效，打开httpd-vhosts.conf文件：\n\n  ```bash\n  <VirtualHost *:80>\n      ServerAdmin webmaster@dummy-host.example.com\n      DocumentRoot \"/usr/local/apache2.4/docs/dummy-host.example.com\"\n      ServerName dummy-host.example.com\n      ServerAlias www.dummy-host.example.com\n      ErrorLog \"logs/dummy-host.example.com-error_log\"\n      CustomLog \"logs/dummy-host.example.com-access_log\" common\n  </VirtualHost>\n  \n  <VirtualHost *:80>\n      ServerAdmin webmaster@dummy-host2.example.com\n      DocumentRoot \"/usr/local/apache2.4/docs/dummy-host2.example.com\"\n      ServerName dummy-host2.example.com\n      ErrorLog \"logs/dummy-host2.example.com-error_log\"\n      CustomLog \"logs/dummy-host2.example.com-access_log\" common\n  </VirtualHost>\n  ```\n\n- 配置文件中的每个`<VirtualHost *:80>`都是一个虚拟主机，其中ServerAdmin为网站管理员的邮箱，可以删除；DocumentRoot则是网站根目录的路径；ServerName则是网站的域名；ServerAlias是网站的别名，如果网站有多个域名，可以以空格分割写在这里，而ServerName则只能写一个域名；ErrorLog是网站的错误日志；CustomLog是访问日志，建议将日志重命名便于区分，，如下配置示例：\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.cn\"\n      ServerName xtears.cn\n      ServerAlias www.abc.com www.123.com\n      ErrorLog \"logs/xtears.cn-error_log\"\n      CustomLog \"logs/xtears.cn-access_log\" common\n  </VirtualHost>\n  \n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.com\"\n      ServerName xtears.com\n      ServerAlias 222.com 333.com\n      ErrorLog \"logs/xtears.com-error_log\"\n      CustomLog \"logs/xtears.com-access_log\" common\n  </VirtualHost>\n  ```\n\n- 然后为虚拟主机创建网站根目录：\n\n  ```bash\n  # mkdir -p /data/wwwroot/xtears.cn\n  # mkdir -p /data/wwwroot/xtears.com\n  ```\n\n- 在两个站点目录下创建`index.php`文件，分别写入如下内容：\n\n  ```php\n  //xtears.cn\n  <?php\n  echo \"xtears.cn\";\n  php?>\n  \n  //xtears.com\n  <?php\n  echo \"xtears.com\";\n  php?>\n  ```\n\n## 测试虚拟主机配置\n\n- 配置完成后，使用`apachectl -t`、`apachectl graceful`重新生效配置文件；\n\n- `curl`命令能够以命令行的形式访问网站，`-x`选项可以查看访问的域名：\n\n  ```bash\n  root@ubuntu:~# curl -x118.24.153.130:80  xtears.cn\n  xtears.cn\n  root@ubuntu:~#\n  ```\n\n- 开启了虚拟主机配置后，默认虚拟主机就变为虚拟主机配置中的第一个虚拟主机，任何域名指向到服务器都会访问第一个虚拟主机。\n\n  ```bash\n  root@ubuntu:~# curl -x118.24.153.130:80 222.com\n  xtears.comroot@ubuntu:~# curl -x118.24.153.130:80 333.com\n  xtears.comroot@ubuntu:~# curl -x118.24.153.130:80 xtears.com\n  xtears.comroot@ubuntu:~# curl -x118.24.153.130:80 www.abc.com\n  xtears.cnroot@ubuntu:~# curl -x118.24.153.130:80 www.123.com\n  xtears.cnroot@ubuntu:~# curl -x118.24.153.130:80 xtears.cn\n  xtears.cnroot@ubuntu:~#\n  ```\n\n---\n\n","source":"_posts/Apache和PHP结合及Apache默认虚拟主机.md","raw":"---\ntitle: Apache配置PHP解析及Apache默认虚拟主机\nauthor: Evobot\ncategories: LAMP\ntags:\n  - Linux\n  - Centos\n  - Apache\n  - PHP\nabbrlink: 9c123af5\ndate: 2018-05-28 20:51:29\nimage:\n---\n\n\n\n在之前已经编译生成了PHP的模块，本文主要介绍如何配置httpd支持PHP解析，以及Apache的默认虚拟主机的相关知识。\n\n<!--more-->\n\n---\n\n# Apache配置PHP解析\n\n## 修改httpd配置文件\n\n- httpd的主配置文件为`/usr/local/apache2.4/conf/httpd.conf`，增加PHP解析支持，需要修改一下4个地方：\n\n  ```bash\n  //去掉ServerName的注释\n  ServerName www.example.com:80\n  \n  //将denied修改为granted，防止出现403错误\n  Require all denied\n  \n  //在下面两行后面增加AddType application/x-httpd-php .php，增加对PHP的支持\n  AddType application/x-compress .Z\n  AddType application/x-gzip .gz .tgz\n  AddType application/x-httpd-php .php\n  \n  //在index.html后面增加index.php\n  <IfModule dir_module>\n      #DirectoryIndex index.html\n      DirectoryIndex index.html index.php\n  </IfModule>\n  ```\n\n- 修改完成后可以使用`apachectl -t`检查配置文件正确性，使用`apachectl graceful`重新加载配置文件，这样的好处是防止配置错误导致服务宕机：\n\n  ```bash\n  [root@evobot ~]# /usr/local/apache2.4/bin/apachectl -t\n  Syntax OK\n  \n  [root@evobot ~]# /usr/local/apache2.4/bin/apachectl graceful\n  \n  ```\n\n  \n\n- 默认情况下，服务器的80端口为关闭状态，临时打开80端口，可以使用iptables添加如下规则：\n\n  ```bash\n  # iptables -I INPUT -p tcp --dport 80 -j ACCEPT\n  ```\n\n## 测试PHP支持\n\n- 在apache安装目录下的`htdocs`下创建1.php，写入如下内容：\n\n  ```php\n  <?php\n      phpinfo();\n  ?>\n  ```\n\n  增加文件后不需要重启服务，访问`ip/1.php`查看是否解析成功，看到如下页面则解析成功：\n\n  ![apache-php](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/php.png)\n\n  如果不支持解析，则显示的是文件源代码，这时要检查apache的php模块是否加载，模块文件是否存在，配置文件是否加载模块，并且是否增加了`AddType application/x-httpd-php .php`这行配置。\n\n# Apache默认虚拟主机\n\n- 一台服务器可以运行多个网站，每个网站都是一个虚拟主机，而任何一个域名解析到这台服务器，都可以访问的虚拟主机就是默认的虚拟主机。\n\n- 在httpd.conf中，`DocumentRoot`项配置定义了网站的根目录：\n\n  ```bash\n  DocumentRoot \"/usr/local/apache2.4/htdocs\"\n  <Directory \"/usr/local/apache2.4/htdocs\">\n  ```\n\n- 而域名则是`ServerName`项的配置，为httpd的默认虚拟主机：\n\n  ```\n  ServerName www.example.com:80\n  ```\n\n## 虚拟主机配置文件\n\n- httpd.conf中搜索`extra`，找到`Virtual hosts`配置，去掉注释：\n\n  ```bash\n  # Virtual hosts\n  Include conf/extra/httpd-vhosts.conf\n  ```\n\n- httpd-vhosts.conf是虚拟主机二级配置文件，打开这条选项后，前面的虚拟主机配置就不再生效，而是虚拟主机配置文件生效，打开httpd-vhosts.conf文件：\n\n  ```bash\n  <VirtualHost *:80>\n      ServerAdmin webmaster@dummy-host.example.com\n      DocumentRoot \"/usr/local/apache2.4/docs/dummy-host.example.com\"\n      ServerName dummy-host.example.com\n      ServerAlias www.dummy-host.example.com\n      ErrorLog \"logs/dummy-host.example.com-error_log\"\n      CustomLog \"logs/dummy-host.example.com-access_log\" common\n  </VirtualHost>\n  \n  <VirtualHost *:80>\n      ServerAdmin webmaster@dummy-host2.example.com\n      DocumentRoot \"/usr/local/apache2.4/docs/dummy-host2.example.com\"\n      ServerName dummy-host2.example.com\n      ErrorLog \"logs/dummy-host2.example.com-error_log\"\n      CustomLog \"logs/dummy-host2.example.com-access_log\" common\n  </VirtualHost>\n  ```\n\n- 配置文件中的每个`<VirtualHost *:80>`都是一个虚拟主机，其中ServerAdmin为网站管理员的邮箱，可以删除；DocumentRoot则是网站根目录的路径；ServerName则是网站的域名；ServerAlias是网站的别名，如果网站有多个域名，可以以空格分割写在这里，而ServerName则只能写一个域名；ErrorLog是网站的错误日志；CustomLog是访问日志，建议将日志重命名便于区分，，如下配置示例：\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.cn\"\n      ServerName xtears.cn\n      ServerAlias www.abc.com www.123.com\n      ErrorLog \"logs/xtears.cn-error_log\"\n      CustomLog \"logs/xtears.cn-access_log\" common\n  </VirtualHost>\n  \n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.com\"\n      ServerName xtears.com\n      ServerAlias 222.com 333.com\n      ErrorLog \"logs/xtears.com-error_log\"\n      CustomLog \"logs/xtears.com-access_log\" common\n  </VirtualHost>\n  ```\n\n- 然后为虚拟主机创建网站根目录：\n\n  ```bash\n  # mkdir -p /data/wwwroot/xtears.cn\n  # mkdir -p /data/wwwroot/xtears.com\n  ```\n\n- 在两个站点目录下创建`index.php`文件，分别写入如下内容：\n\n  ```php\n  //xtears.cn\n  <?php\n  echo \"xtears.cn\";\n  php?>\n  \n  //xtears.com\n  <?php\n  echo \"xtears.com\";\n  php?>\n  ```\n\n## 测试虚拟主机配置\n\n- 配置完成后，使用`apachectl -t`、`apachectl graceful`重新生效配置文件；\n\n- `curl`命令能够以命令行的形式访问网站，`-x`选项可以查看访问的域名：\n\n  ```bash\n  root@ubuntu:~# curl -x118.24.153.130:80  xtears.cn\n  xtears.cn\n  root@ubuntu:~#\n  ```\n\n- 开启了虚拟主机配置后，默认虚拟主机就变为虚拟主机配置中的第一个虚拟主机，任何域名指向到服务器都会访问第一个虚拟主机。\n\n  ```bash\n  root@ubuntu:~# curl -x118.24.153.130:80 222.com\n  xtears.comroot@ubuntu:~# curl -x118.24.153.130:80 333.com\n  xtears.comroot@ubuntu:~# curl -x118.24.153.130:80 xtears.com\n  xtears.comroot@ubuntu:~# curl -x118.24.153.130:80 www.abc.com\n  xtears.cnroot@ubuntu:~# curl -x118.24.153.130:80 www.123.com\n  xtears.cnroot@ubuntu:~# curl -x118.24.153.130:80 xtears.cn\n  xtears.cnroot@ubuntu:~#\n  ```\n\n---\n\n","slug":"Apache和PHP结合及Apache默认虚拟主机","published":1,"updated":"2018-06-05T06:55:15.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gaz5m0003u1jxgpda7702","content":"<!-- build time:Tue Jun 05 2018 16:57:37 GMT+0800 (CST) --><p>在之前已经编译生成了PHP的模块，本文主要介绍如何配置httpd支持PHP解析，以及Apache的默认虚拟主机的相关知识。</p><a id=\"more\"></a><hr><h1 id=\"Apache配置PHP解析\"><a href=\"#Apache配置PHP解析\" class=\"headerlink\" title=\"Apache配置PHP解析\"></a>Apache配置PHP解析</h1><h2 id=\"修改httpd配置文件\"><a href=\"#修改httpd配置文件\" class=\"headerlink\" title=\"修改httpd配置文件\"></a>修改httpd配置文件</h2><ul><li><p>httpd的主配置文件为<code>/usr/local/apache2.4/conf/httpd.conf</code>，增加PHP解析支持，需要修改一下4个地方：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//去掉ServerName的注释</span><br><span class=\"line\">ServerName www.example.com:80</span><br><span class=\"line\"></span><br><span class=\"line\">//将denied修改为granted，防止出现403错误</span><br><span class=\"line\">Require all denied</span><br><span class=\"line\"></span><br><span class=\"line\">//在下面两行后面增加AddType application/x-httpd-php .php，增加对PHP的支持</span><br><span class=\"line\">AddType application/x-compress .Z</span><br><span class=\"line\">AddType application/x-gzip .gz .tgz</span><br><span class=\"line\">AddType application/x-httpd-php .php</span><br><span class=\"line\"></span><br><span class=\"line\">//在index.html后面增加index.php</span><br><span class=\"line\">&lt;IfModule dir_module&gt;</span><br><span class=\"line\">    <span class=\"comment\">#DirectoryIndex index.html</span></span><br><span class=\"line\">    DirectoryIndex index.html index.php</span><br><span class=\"line\">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改完成后可以使用<code>apachectl -t</code>检查配置文件正确性，使用<code>apachectl graceful</code>重新加载配置文件，这样的好处是防止配置错误导致服务宕机：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># /usr/local/apache2.4/bin/apachectl -t</span></span><br><span class=\"line\">Syntax OK</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># /usr/local/apache2.4/bin/apachectl graceful</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>默认情况下，服务器的80端口为关闭状态，临时打开80端口，可以使用iptables添加如下规则：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"测试PHP支持\"><a href=\"#测试PHP支持\" class=\"headerlink\" title=\"测试PHP支持\"></a>测试PHP支持</h2><ul><li><p>在apache安装目录下的<code>htdocs</code>下创建1.php，写入如下内容：</p><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    phpinfo();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure><p>增加文件后不需要重启服务，访问<code>ip/1.php</code>查看是否解析成功，看到如下页面则解析成功：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/php.png\" alt=\"apache-php\"></p><p>如果不支持解析，则显示的是文件源代码，这时要检查apache的php模块是否加载，模块文件是否存在，配置文件是否加载模块，并且是否增加了<code>AddType application/x-httpd-php .php</code>这行配置。</p></li></ul><h1 id=\"Apache默认虚拟主机\"><a href=\"#Apache默认虚拟主机\" class=\"headerlink\" title=\"Apache默认虚拟主机\"></a>Apache默认虚拟主机</h1><ul><li><p>一台服务器可以运行多个网站，每个网站都是一个虚拟主机，而任何一个域名解析到这台服务器，都可以访问的虚拟主机就是默认的虚拟主机。</p></li><li><p>在httpd.conf中，<code>DocumentRoot</code>项配置定义了网站的根目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DocumentRoot <span class=\"string\">\"/usr/local/apache2.4/htdocs\"</span></span><br><span class=\"line\">&lt;Directory <span class=\"string\">\"/usr/local/apache2.4/htdocs\"</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>而域名则是<code>ServerName</code>项的配置，为httpd的默认虚拟主机：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServerName www.example.com:80</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"虚拟主机配置文件\"><a href=\"#虚拟主机配置文件\" class=\"headerlink\" title=\"虚拟主机配置文件\"></a>虚拟主机配置文件</h2><ul><li><p>httpd.conf中搜索<code>extra</code>，找到<code>Virtual hosts</code>配置，去掉注释：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Virtual hosts</span></span><br><span class=\"line\">Include conf/extra/httpd-vhosts.conf</span><br></pre></td></tr></table></figure></li><li><p>httpd-vhosts.conf是虚拟主机二级配置文件，打开这条选项后，前面的虚拟主机配置就不再生效，而是虚拟主机配置文件生效，打开httpd-vhosts.conf文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    ServerAdmin webmaster@dummy-host.example.com</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/usr/local/apache2.4/docs/dummy-host.example.com\"</span></span><br><span class=\"line\">    ServerName dummy-host.example.com</span><br><span class=\"line\">    ServerAlias www.dummy-host.example.com</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/dummy-host.example.com-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"logs/dummy-host.example.com-access_log\"</span> common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    ServerAdmin webmaster@dummy-host2.example.com</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/usr/local/apache2.4/docs/dummy-host2.example.com\"</span></span><br><span class=\"line\">    ServerName dummy-host2.example.com</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/dummy-host2.example.com-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"logs/dummy-host2.example.com-access_log\"</span> common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置文件中的每个<code>&lt;VirtualHost *:80&gt;</code>都是一个虚拟主机，其中ServerAdmin为网站管理员的邮箱，可以删除；DocumentRoot则是网站根目录的路径；ServerName则是网站的域名；ServerAlias是网站的别名，如果网站有多个域名，可以以空格分割写在这里，而ServerName则只能写一个域名；ErrorLog是网站的错误日志；CustomLog是访问日志，建议将日志重命名便于区分，，如下配置示例：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.cn\"</span></span><br><span class=\"line\">    ServerName xtears.cn</span><br><span class=\"line\">    ServerAlias www.abc.com www.123.com</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.cn-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"logs/xtears.cn-access_log\"</span> common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.com\"</span></span><br><span class=\"line\">    ServerName xtears.com</span><br><span class=\"line\">    ServerAlias 222.com 333.com</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.com-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"logs/xtears.com-access_log\"</span> common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>然后为虚拟主机创建网站根目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mkdir -p /data/wwwroot/xtears.cn</span></span><br><span class=\"line\"><span class=\"comment\"># mkdir -p /data/wwwroot/xtears.com</span></span><br></pre></td></tr></table></figure></li><li><p>在两个站点目录下创建<code>index.php</code>文件，分别写入如下内容：</p><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//xtears.cn</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"xtears.cn\"</span>;</span><br><span class=\"line\">php<span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//xtears.com</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"xtears.com\"</span>;</span><br><span class=\"line\">php<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"测试虚拟主机配置\"><a href=\"#测试虚拟主机配置\" class=\"headerlink\" title=\"测试虚拟主机配置\"></a>测试虚拟主机配置</h2><ul><li><p>配置完成后，使用<code>apachectl -t</code>、<code>apachectl graceful</code>重新生效配置文件；</p></li><li><p><code>curl</code>命令能够以命令行的形式访问网站，<code>-x</code>选项可以查看访问的域名：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~<span class=\"comment\"># curl -x118.24.153.130:80  xtears.cn</span></span><br><span class=\"line\">xtears.cn</span><br><span class=\"line\">root@ubuntu:~<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure></li><li><p>开启了虚拟主机配置后，默认虚拟主机就变为虚拟主机配置中的第一个虚拟主机，任何域名指向到服务器都会访问第一个虚拟主机。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~<span class=\"comment\"># curl -x118.24.153.130:80 222.com</span></span><br><span class=\"line\">xtears.comroot@ubuntu:~<span class=\"comment\"># curl -x118.24.153.130:80 333.com</span></span><br><span class=\"line\">xtears.comroot@ubuntu:~<span class=\"comment\"># curl -x118.24.153.130:80 xtears.com</span></span><br><span class=\"line\">xtears.comroot@ubuntu:~<span class=\"comment\"># curl -x118.24.153.130:80 www.abc.com</span></span><br><span class=\"line\">xtears.cnroot@ubuntu:~<span class=\"comment\"># curl -x118.24.153.130:80 www.123.com</span></span><br><span class=\"line\">xtears.cnroot@ubuntu:~<span class=\"comment\"># curl -x118.24.153.130:80 xtears.cn</span></span><br><span class=\"line\">xtears.cnroot@ubuntu:~<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:37 GMT+0800 (CST) --><p>在之前已经编译生成了PHP的模块，本文主要介绍如何配置httpd支持PHP解析，以及Apache的默认虚拟主机的相关知识。</p>","more":"<hr><h1 id=\"Apache配置PHP解析\"><a href=\"#Apache配置PHP解析\" class=\"headerlink\" title=\"Apache配置PHP解析\"></a>Apache配置PHP解析</h1><h2 id=\"修改httpd配置文件\"><a href=\"#修改httpd配置文件\" class=\"headerlink\" title=\"修改httpd配置文件\"></a>修改httpd配置文件</h2><ul><li><p>httpd的主配置文件为<code>/usr/local/apache2.4/conf/httpd.conf</code>，增加PHP解析支持，需要修改一下4个地方：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//去掉ServerName的注释</span><br><span class=\"line\">ServerName www.example.com:80</span><br><span class=\"line\"></span><br><span class=\"line\">//将denied修改为granted，防止出现403错误</span><br><span class=\"line\">Require all denied</span><br><span class=\"line\"></span><br><span class=\"line\">//在下面两行后面增加AddType application/x-httpd-php .php，增加对PHP的支持</span><br><span class=\"line\">AddType application/x-compress .Z</span><br><span class=\"line\">AddType application/x-gzip .gz .tgz</span><br><span class=\"line\">AddType application/x-httpd-php .php</span><br><span class=\"line\"></span><br><span class=\"line\">//在index.html后面增加index.php</span><br><span class=\"line\">&lt;IfModule dir_module&gt;</span><br><span class=\"line\">    <span class=\"comment\">#DirectoryIndex index.html</span></span><br><span class=\"line\">    DirectoryIndex index.html index.php</span><br><span class=\"line\">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改完成后可以使用<code>apachectl -t</code>检查配置文件正确性，使用<code>apachectl graceful</code>重新加载配置文件，这样的好处是防止配置错误导致服务宕机：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># /usr/local/apache2.4/bin/apachectl -t</span></span><br><span class=\"line\">Syntax OK</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># /usr/local/apache2.4/bin/apachectl graceful</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>默认情况下，服务器的80端口为关闭状态，临时打开80端口，可以使用iptables添加如下规则：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"测试PHP支持\"><a href=\"#测试PHP支持\" class=\"headerlink\" title=\"测试PHP支持\"></a>测试PHP支持</h2><ul><li><p>在apache安装目录下的<code>htdocs</code>下创建1.php，写入如下内容：</p><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    phpinfo();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure><p>增加文件后不需要重启服务，访问<code>ip/1.php</code>查看是否解析成功，看到如下页面则解析成功：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/php.png\" alt=\"apache-php\"></p><p>如果不支持解析，则显示的是文件源代码，这时要检查apache的php模块是否加载，模块文件是否存在，配置文件是否加载模块，并且是否增加了<code>AddType application/x-httpd-php .php</code>这行配置。</p></li></ul><h1 id=\"Apache默认虚拟主机\"><a href=\"#Apache默认虚拟主机\" class=\"headerlink\" title=\"Apache默认虚拟主机\"></a>Apache默认虚拟主机</h1><ul><li><p>一台服务器可以运行多个网站，每个网站都是一个虚拟主机，而任何一个域名解析到这台服务器，都可以访问的虚拟主机就是默认的虚拟主机。</p></li><li><p>在httpd.conf中，<code>DocumentRoot</code>项配置定义了网站的根目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DocumentRoot <span class=\"string\">\"/usr/local/apache2.4/htdocs\"</span></span><br><span class=\"line\">&lt;Directory <span class=\"string\">\"/usr/local/apache2.4/htdocs\"</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>而域名则是<code>ServerName</code>项的配置，为httpd的默认虚拟主机：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServerName www.example.com:80</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"虚拟主机配置文件\"><a href=\"#虚拟主机配置文件\" class=\"headerlink\" title=\"虚拟主机配置文件\"></a>虚拟主机配置文件</h2><ul><li><p>httpd.conf中搜索<code>extra</code>，找到<code>Virtual hosts</code>配置，去掉注释：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Virtual hosts</span></span><br><span class=\"line\">Include conf/extra/httpd-vhosts.conf</span><br></pre></td></tr></table></figure></li><li><p>httpd-vhosts.conf是虚拟主机二级配置文件，打开这条选项后，前面的虚拟主机配置就不再生效，而是虚拟主机配置文件生效，打开httpd-vhosts.conf文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    ServerAdmin webmaster@dummy-host.example.com</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/usr/local/apache2.4/docs/dummy-host.example.com\"</span></span><br><span class=\"line\">    ServerName dummy-host.example.com</span><br><span class=\"line\">    ServerAlias www.dummy-host.example.com</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/dummy-host.example.com-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"logs/dummy-host.example.com-access_log\"</span> common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    ServerAdmin webmaster@dummy-host2.example.com</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/usr/local/apache2.4/docs/dummy-host2.example.com\"</span></span><br><span class=\"line\">    ServerName dummy-host2.example.com</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/dummy-host2.example.com-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"logs/dummy-host2.example.com-access_log\"</span> common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置文件中的每个<code>&lt;VirtualHost *:80&gt;</code>都是一个虚拟主机，其中ServerAdmin为网站管理员的邮箱，可以删除；DocumentRoot则是网站根目录的路径；ServerName则是网站的域名；ServerAlias是网站的别名，如果网站有多个域名，可以以空格分割写在这里，而ServerName则只能写一个域名；ErrorLog是网站的错误日志；CustomLog是访问日志，建议将日志重命名便于区分，，如下配置示例：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.cn\"</span></span><br><span class=\"line\">    ServerName xtears.cn</span><br><span class=\"line\">    ServerAlias www.abc.com www.123.com</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.cn-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"logs/xtears.cn-access_log\"</span> common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.com\"</span></span><br><span class=\"line\">    ServerName xtears.com</span><br><span class=\"line\">    ServerAlias 222.com 333.com</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.com-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"logs/xtears.com-access_log\"</span> common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>然后为虚拟主机创建网站根目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mkdir -p /data/wwwroot/xtears.cn</span></span><br><span class=\"line\"><span class=\"comment\"># mkdir -p /data/wwwroot/xtears.com</span></span><br></pre></td></tr></table></figure></li><li><p>在两个站点目录下创建<code>index.php</code>文件，分别写入如下内容：</p><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//xtears.cn</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"xtears.cn\"</span>;</span><br><span class=\"line\">php<span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//xtears.com</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"xtears.com\"</span>;</span><br><span class=\"line\">php<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"测试虚拟主机配置\"><a href=\"#测试虚拟主机配置\" class=\"headerlink\" title=\"测试虚拟主机配置\"></a>测试虚拟主机配置</h2><ul><li><p>配置完成后，使用<code>apachectl -t</code>、<code>apachectl graceful</code>重新生效配置文件；</p></li><li><p><code>curl</code>命令能够以命令行的形式访问网站，<code>-x</code>选项可以查看访问的域名：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~<span class=\"comment\"># curl -x118.24.153.130:80  xtears.cn</span></span><br><span class=\"line\">xtears.cn</span><br><span class=\"line\">root@ubuntu:~<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure></li><li><p>开启了虚拟主机配置后，默认虚拟主机就变为虚拟主机配置中的第一个虚拟主机，任何域名指向到服务器都会访问第一个虚拟主机。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~<span class=\"comment\"># curl -x118.24.153.130:80 222.com</span></span><br><span class=\"line\">xtears.comroot@ubuntu:~<span class=\"comment\"># curl -x118.24.153.130:80 333.com</span></span><br><span class=\"line\">xtears.comroot@ubuntu:~<span class=\"comment\"># curl -x118.24.153.130:80 xtears.com</span></span><br><span class=\"line\">xtears.comroot@ubuntu:~<span class=\"comment\"># curl -x118.24.153.130:80 www.abc.com</span></span><br><span class=\"line\">xtears.cnroot@ubuntu:~<span class=\"comment\"># curl -x118.24.153.130:80 www.123.com</span></span><br><span class=\"line\">xtears.cnroot@ubuntu:~<span class=\"comment\"># curl -x118.24.153.130:80 xtears.cn</span></span><br><span class=\"line\">xtears.cnroot@ubuntu:~<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->"},{"title":"Apache访问日志配置及静态元素过期时间配置","author":"Evobot","abbrlink":"8097d660","date":"2018-05-30T13:12:11.000Z","image":null,"_content":"\n\n\n本文主要介绍如何配置Apache的访问日志，使其不记录静态文件访问和如何配置访问日志的切割，另外介绍如何配置静态元素的过期时间。\n\n<!--more-->\n\n---\n\n# 访问日志配置\n\n## 不记录静态文件请求\n\n- 由于网站页面上存在大量的图片，css等静态元素，如果对这些元素的访问都记录在日志中，会导致访问日志快速增加，所以可以在Apache中配置不记录这些静态文件的访问日志；\n\n- 修改虚拟主机配置文件`httpd-vhosts.conf`，在需要配置不记录静态文件请求的虚拟主机配置的`ErrorLog \"logs/xtears.com-error_log\"`下添加以下内容：\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.cn\"\n      ServerName xtears.cn\n      ServerAlias www.abc.com www.123.com\n      ErrorLog \"logs/xtears.cn-error_log\"\n      SetEnvIf Request_URI \".*\\.gif$\" img\n      SetEnvIf Request_URI \".*\\.jpg$\" img\n      SetEnvIf Request_URI \".*\\.png$\" img\n      SetEnvIf Request_URI \".*\\.bmp$\" img\n      SetEnvIf Request_URI \".*\\.swf$\" img\n      SetEnvIf Request_URI \".*\\.js$\" img\n      SetEnvIf Request_URI \".*\\.css$\" img\n      CustomLog \"logs/xtears.cn-access_log\" common env=!img\n  </VirtualHost>\n  ```\n\n- 保存退出之后暂不加载配置文件，然后尝试访问图片资源：\n\n  ```bash\n  $ curl -x118.24.153.130:80 xtears.cn/x.jpg -I\n  HTTP/1.1 404 Not Found\n  Date: Wed, 30 May 2018 16:43:40 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  Content-Type: text/html; charset=iso-8859-1\n  ```\n\n  ```bash\n  [root@evobot apache2.4]# tail -n 3 logs/xtears.cn-access_log \n  222.186.129.155 - - [31/May/2018:00:43:40 +0800] \"HEAD / HTTP/1.1\" 200 -\n  118.113.205.248 - - [31/May/2018:00:43:40 +0800] \"HEAD http://xtears.cn/x.jpg HTTP/1.1\" 404 -\n  ```\n\n  - 可以看到没有刷新配置文件的情况下，日志会记录静态文件的访问请求。\n\n- 重新加载配置文件，再访问图片资源：\n\n  ```bash\n  $ curl -x118.24.153.130:80 xtears.cn/xxx.jpg -I\n  HTTP/1.1 404 Not Found\n  Date: Wed, 30 May 2018 16:46:14 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  Content-Type: text/html; charset=iso-8859-1\n  ```\n\n  ```bash\n  [root@evobot apache2.4]# tail logs/xtears.cn-access_log \n  222.186.129.155 - - [31/May/2018:00:44:40 +0800] \"HEAD / HTTP/1.1\" 200 -\n  124.14.16.204 - - [31/May/2018:00:44:45 +0800] \"HEAD / HTTP/1.1\" 200 -\n  113.31.27.249 - - [31/May/2018:00:45:02 +0800] \"HEAD / HTTP/1.1\" 200 -\n  223.94.95.141 - - [31/May/2018:00:45:05 +0800] \"HEAD / HTTP/1.1\" 200 -\n  222.88.91.50 - - [31/May/2018:00:45:07 +0800] \"HEAD / HTTP/1.1\" 200 -\n  222.186.129.155 - - [31/May/2018:00:45:40 +0800] \"HEAD / HTTP/1.1\" 200 -\n  124.14.16.204 - - [31/May/2018:00:45:46 +0800] \"HEAD / HTTP/1.1\" 200 -\n  113.31.27.249 - - [31/May/2018:00:46:02 +0800] \"HEAD / HTTP/1.1\" 200 -\n  223.94.95.141 - - [31/May/2018:00:46:05 +0800] \"HEAD / HTTP/1.1\" 200 -\n  222.88.91.50 - - [31/May/2018:00:46:07 +0800] \"HEAD / HTTP/1.1\" 200 -\n  ```\n\n  - 可以看到，访问静态资源的日志已经不再记录。\n\n## 访问日志切割\n\n- 日志持续记录，会导致磁盘空间越来越大，所以需要对访问日志配置自动切割，并自动删除过期的日志文件；\n\n- 配置访问日志切割，在虚拟主机配置文件中的虚拟主机配置的`CustomLog`行修改如下：\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.cn\"\n      ServerName xtears.cn\n      ServerAlias www.abc.com www.123.com\n      ErrorLog \"logs/xtears.cn-error_log\"\n      SetEnvIf Request_URI \".*\\.gif$\" img\n      SetEnvIf Request_URI \".*\\.jpg$\" img\n      SetEnvIf Request_URI \".*\\.png$\" img\n      SetEnvIf Request_URI \".*\\.bmp$\" img\n      SetEnvIf Request_URI \".*\\.swf$\" img\n      SetEnvIf Request_URI \".*\\.js$\" img\n      SetEnvIf Request_URI \".*\\.css$\" img\n      CustomLog \"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d_log 86400\" common env=!img\n  </VirtualHost>\n  ```\n\n  - 其中`rotatelogs`是apache自带的日志切割工具，`-l`选项表示按照本地时间而不是UTC时间进行切割，然后日志名结尾的`%Y%m%d`表示日志名以时间结尾命名，86400则表示一天切割一次，即86400秒。\n\n- 重加载配置文件后，进行几次访问请求，然后查看日志：\n\n  ```bash\n  [root@evobot apache2.4]# ls logs/\n  access_log  xtears.cn-access_20180531.log  xtears.com-access_log\n  ```\n\n  - 可以看到生成了以日期为结尾的新的日志。\n\n- 然后还需要配置定时任务，定期删除过期的日志文件。\n\n- Apache的rotatelogs的语法为：`rotatelogs [-l] logfile [rotationtime [offset]] | [filesizeM]`，其中`-l`不加的话日志时间会和实际时间相差8小时，而logfile如果包含`%`，则会被视为strftime()格式的字符串，否则会加上以秒为单位的`.ssss`的后缀，时间都是表示新日志开始的时间，`rotationtime`则表示日志文件以秒为单位滚动的间隔时间，`offset`则是相对于UTC时间相缠得分钟数，如果省略，表示为0并且使用UTC时间，比如要指定与UTC时差为-5小时的当地时间，则参数应该为**-300**，单位为分钟；`filesizeM`是指以文件大小滚动，而不是按时间或时差滚动；\n\n- 如下两个例子，分别以天分割和以小时分割：\n\n  ```bash\n  #按每天分割\n  CustomLog \"|bin/rotatelogs -l logs/access_%Y%m%d.log 86400\" combined\n  \n  #按每小时分割\n  CustomLog \"|bin/rotatelogs -l logs/access_%Y%m%d%H.log 3600\" combined\n  ```\n\n- 除了使用rotatelogs，apache还可以使用`cronolog`进行日志分割，同样以小时和以天分割日志，例子如下：\n\n  ```bash\n  #按每天分割\n  CustomLog \"|bin/cronolog logs/access_%Y%m%d.log\" combined\n  \n  #按每小时分割\n  CustomLog \"|bin/cronolog logs/access_%Y%m%d%h.log\" combined\n  ```\n\n## 日志记录代理及真实ip\n\n- 默认配置中，log日志的格式为` LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" combined`，其中%h是访问者的ip地址，但是如果用户使用代理进行访问，那么这里的ip就会是代理机器的ip地址；\n\n- 为了将用户的真实辑器ip记录下来，可以将日志格式改成如下格式：\n\n  ```bash\n   LogFormat \"%h %{X-FORWARDED-FOR}i %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" combined\n  ```\n\n## 只记录指定URI日志\n\n- 如果需要apache只记录我们指定的URI的日志，如请求www.aaa.com/aa/...这样的地址才会记录日志，那么需要在httpd.conf或者相关的虚拟主机配置文件中添加如下内容：\n\n  ```bash\n  SetEnvIf Request_URI \"^/aaa/.*\" aaa-request\n  CustomLog \"|/usr/local/apache/bin/rotatelogs -l /usr/local/apache/lgs/aaa-access_%Y%m%d.log 86400\" combined env=aaa-request\n  ```\n\n  > 配置原理与不记录静态文件日志相同。\n\n## 记录客户端请求域名\n\n- 这里的请求域名不是指我们虚拟主机配置的ServerName，而是指类似*.abc.com这样的泛解析形式；\n- Apache的LogFormat的`%V`变量就可以记录用户请求的域名，更多关于LogFormat变量的设置信息，可以参考[Apache日志详解](http://blog.51cto.com/longlei/2095594)这篇博文。\n\n# 静态元素过期时间\n\n- 浏览器访问网站时，会将静态的文件缓存在本地电脑，这样下次访问时就不需要重新到服务器下载静态文件；\n\n- 在Apache中可以配置静态文件的缓存时间，一旦配置的缓存时间过期，浏览器就会重新去服务器下载静态资源；\n\n- 在Apache中配置静态资源过期时间，需要使用到`expires`模块，在虚拟主机配置中更改配置如下：\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.cn\"\n      ServerName xtears.cn\n      ServerAlias www.abc.com www.123.com\n      <IfModule mod_expires.c>\n          //打开过期时间开关\n          ExpiresActive on\n          //设置图片格式的静态文件过期时间，可以以天设置也可以以小时设置\n          ExpiresByType image/gif \"access plus 1 days\"\n          ExpiresByType image/jpeg \"access plus 24 hours\"\n          ExpiresByType image/png \"access plus 24 hours\"\n          //设置css、js等过期时间\n          ExpiresByType text/css \"now plus 2 hours\"\n          ExpiresByType application/x-javascript \"now plus 2 hours\"\n          ExpiresByType application/javascript \"now plus 2 hours\"\n          ExpiresByType application/x-shockwave-flash \"now plus 2 hours\"\n          //设置默认的过期时间为不过期\n          ExpiresDefault \"now plus 0 min\"\n      </IfModule>\n      ErrorLog \"logs/xtears.cn-error_log\"\n      SetEnvIf Request_URI \".*\\.gif$\" img\n      SetEnvIf Request_URI \".*\\.jpg$\" img\n      SetEnvIf Request_URI \".*\\.png$\" img\n      SetEnvIf Request_URI \".*\\.bmp$\" img\n      SetEnvIf Request_URI \".*\\.swf$\" img\n      SetEnvIf Request_URI \".*\\.js$\" img\n      SetEnvIf Request_URI \".*\\.css$\" img\n      CustomLog \"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\" common env=!img\n  </VirtualHost>\n  ```\n\n- 然后检查`expires`模块是否打开，未打开时需要修改`httpd.conf`文件取消注释模块：\n\n  ```bash\n  [root@evobot apache2.4]# vi conf/httpd.conf\n  LoadModule expires_module modules/mod_expires.so\n  [root@evobot apache2.4]# bin/apachectl -t\n  Syntax OK\n  [root@evobot apache2.4]# bin/apachectl graceful\n  [root@evobot apache2.4]# bin/apachectl -M | grep expires\n   expires_module (shared)\n  ```\n\n- 接着使用浏览器的开发工具或者curl测试访问静态文件：\n\n  ```bash\n  $ curl -x118.24.153.130:80 xtears.cn/red.jpg -I  \n  HTTP/1.1 200 OK\n  Date: Wed, 30 May 2018 17:52:40 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  Last-Modified: Sun, 10 Jul 2016 09:38:08 GMT\n  ETag: \"19e568-53744cb14e000\"\n  Accept-Ranges: bytes\n  Content-Length: 1697128\n  Cache-Control: max-age=86400\n  Expires: Thu, 31 May 2018 17:52:40 GMT\n  Content-Type: image/jpeg\n  ```\n\n  - 可以看到请求头中多了`Cache-Control`这一项并且在`Expires`中列出了过期时间。\n\n---\n\n","source":"_posts/Apache访问日志配置及静态元素过期时间配置.md","raw":"---\ntitle: Apache访问日志配置及静态元素过期时间配置\nauthor: Evobot\ncategories: LAMP\ntags:\n  - Linux\n  - Centos\n  - Apache\nabbrlink: 8097d660\ndate: 2018-05-30 21:12:11\nimage:\n---\n\n\n\n本文主要介绍如何配置Apache的访问日志，使其不记录静态文件访问和如何配置访问日志的切割，另外介绍如何配置静态元素的过期时间。\n\n<!--more-->\n\n---\n\n# 访问日志配置\n\n## 不记录静态文件请求\n\n- 由于网站页面上存在大量的图片，css等静态元素，如果对这些元素的访问都记录在日志中，会导致访问日志快速增加，所以可以在Apache中配置不记录这些静态文件的访问日志；\n\n- 修改虚拟主机配置文件`httpd-vhosts.conf`，在需要配置不记录静态文件请求的虚拟主机配置的`ErrorLog \"logs/xtears.com-error_log\"`下添加以下内容：\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.cn\"\n      ServerName xtears.cn\n      ServerAlias www.abc.com www.123.com\n      ErrorLog \"logs/xtears.cn-error_log\"\n      SetEnvIf Request_URI \".*\\.gif$\" img\n      SetEnvIf Request_URI \".*\\.jpg$\" img\n      SetEnvIf Request_URI \".*\\.png$\" img\n      SetEnvIf Request_URI \".*\\.bmp$\" img\n      SetEnvIf Request_URI \".*\\.swf$\" img\n      SetEnvIf Request_URI \".*\\.js$\" img\n      SetEnvIf Request_URI \".*\\.css$\" img\n      CustomLog \"logs/xtears.cn-access_log\" common env=!img\n  </VirtualHost>\n  ```\n\n- 保存退出之后暂不加载配置文件，然后尝试访问图片资源：\n\n  ```bash\n  $ curl -x118.24.153.130:80 xtears.cn/x.jpg -I\n  HTTP/1.1 404 Not Found\n  Date: Wed, 30 May 2018 16:43:40 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  Content-Type: text/html; charset=iso-8859-1\n  ```\n\n  ```bash\n  [root@evobot apache2.4]# tail -n 3 logs/xtears.cn-access_log \n  222.186.129.155 - - [31/May/2018:00:43:40 +0800] \"HEAD / HTTP/1.1\" 200 -\n  118.113.205.248 - - [31/May/2018:00:43:40 +0800] \"HEAD http://xtears.cn/x.jpg HTTP/1.1\" 404 -\n  ```\n\n  - 可以看到没有刷新配置文件的情况下，日志会记录静态文件的访问请求。\n\n- 重新加载配置文件，再访问图片资源：\n\n  ```bash\n  $ curl -x118.24.153.130:80 xtears.cn/xxx.jpg -I\n  HTTP/1.1 404 Not Found\n  Date: Wed, 30 May 2018 16:46:14 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  Content-Type: text/html; charset=iso-8859-1\n  ```\n\n  ```bash\n  [root@evobot apache2.4]# tail logs/xtears.cn-access_log \n  222.186.129.155 - - [31/May/2018:00:44:40 +0800] \"HEAD / HTTP/1.1\" 200 -\n  124.14.16.204 - - [31/May/2018:00:44:45 +0800] \"HEAD / HTTP/1.1\" 200 -\n  113.31.27.249 - - [31/May/2018:00:45:02 +0800] \"HEAD / HTTP/1.1\" 200 -\n  223.94.95.141 - - [31/May/2018:00:45:05 +0800] \"HEAD / HTTP/1.1\" 200 -\n  222.88.91.50 - - [31/May/2018:00:45:07 +0800] \"HEAD / HTTP/1.1\" 200 -\n  222.186.129.155 - - [31/May/2018:00:45:40 +0800] \"HEAD / HTTP/1.1\" 200 -\n  124.14.16.204 - - [31/May/2018:00:45:46 +0800] \"HEAD / HTTP/1.1\" 200 -\n  113.31.27.249 - - [31/May/2018:00:46:02 +0800] \"HEAD / HTTP/1.1\" 200 -\n  223.94.95.141 - - [31/May/2018:00:46:05 +0800] \"HEAD / HTTP/1.1\" 200 -\n  222.88.91.50 - - [31/May/2018:00:46:07 +0800] \"HEAD / HTTP/1.1\" 200 -\n  ```\n\n  - 可以看到，访问静态资源的日志已经不再记录。\n\n## 访问日志切割\n\n- 日志持续记录，会导致磁盘空间越来越大，所以需要对访问日志配置自动切割，并自动删除过期的日志文件；\n\n- 配置访问日志切割，在虚拟主机配置文件中的虚拟主机配置的`CustomLog`行修改如下：\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.cn\"\n      ServerName xtears.cn\n      ServerAlias www.abc.com www.123.com\n      ErrorLog \"logs/xtears.cn-error_log\"\n      SetEnvIf Request_URI \".*\\.gif$\" img\n      SetEnvIf Request_URI \".*\\.jpg$\" img\n      SetEnvIf Request_URI \".*\\.png$\" img\n      SetEnvIf Request_URI \".*\\.bmp$\" img\n      SetEnvIf Request_URI \".*\\.swf$\" img\n      SetEnvIf Request_URI \".*\\.js$\" img\n      SetEnvIf Request_URI \".*\\.css$\" img\n      CustomLog \"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d_log 86400\" common env=!img\n  </VirtualHost>\n  ```\n\n  - 其中`rotatelogs`是apache自带的日志切割工具，`-l`选项表示按照本地时间而不是UTC时间进行切割，然后日志名结尾的`%Y%m%d`表示日志名以时间结尾命名，86400则表示一天切割一次，即86400秒。\n\n- 重加载配置文件后，进行几次访问请求，然后查看日志：\n\n  ```bash\n  [root@evobot apache2.4]# ls logs/\n  access_log  xtears.cn-access_20180531.log  xtears.com-access_log\n  ```\n\n  - 可以看到生成了以日期为结尾的新的日志。\n\n- 然后还需要配置定时任务，定期删除过期的日志文件。\n\n- Apache的rotatelogs的语法为：`rotatelogs [-l] logfile [rotationtime [offset]] | [filesizeM]`，其中`-l`不加的话日志时间会和实际时间相差8小时，而logfile如果包含`%`，则会被视为strftime()格式的字符串，否则会加上以秒为单位的`.ssss`的后缀，时间都是表示新日志开始的时间，`rotationtime`则表示日志文件以秒为单位滚动的间隔时间，`offset`则是相对于UTC时间相缠得分钟数，如果省略，表示为0并且使用UTC时间，比如要指定与UTC时差为-5小时的当地时间，则参数应该为**-300**，单位为分钟；`filesizeM`是指以文件大小滚动，而不是按时间或时差滚动；\n\n- 如下两个例子，分别以天分割和以小时分割：\n\n  ```bash\n  #按每天分割\n  CustomLog \"|bin/rotatelogs -l logs/access_%Y%m%d.log 86400\" combined\n  \n  #按每小时分割\n  CustomLog \"|bin/rotatelogs -l logs/access_%Y%m%d%H.log 3600\" combined\n  ```\n\n- 除了使用rotatelogs，apache还可以使用`cronolog`进行日志分割，同样以小时和以天分割日志，例子如下：\n\n  ```bash\n  #按每天分割\n  CustomLog \"|bin/cronolog logs/access_%Y%m%d.log\" combined\n  \n  #按每小时分割\n  CustomLog \"|bin/cronolog logs/access_%Y%m%d%h.log\" combined\n  ```\n\n## 日志记录代理及真实ip\n\n- 默认配置中，log日志的格式为` LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" combined`，其中%h是访问者的ip地址，但是如果用户使用代理进行访问，那么这里的ip就会是代理机器的ip地址；\n\n- 为了将用户的真实辑器ip记录下来，可以将日志格式改成如下格式：\n\n  ```bash\n   LogFormat \"%h %{X-FORWARDED-FOR}i %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" combined\n  ```\n\n## 只记录指定URI日志\n\n- 如果需要apache只记录我们指定的URI的日志，如请求www.aaa.com/aa/...这样的地址才会记录日志，那么需要在httpd.conf或者相关的虚拟主机配置文件中添加如下内容：\n\n  ```bash\n  SetEnvIf Request_URI \"^/aaa/.*\" aaa-request\n  CustomLog \"|/usr/local/apache/bin/rotatelogs -l /usr/local/apache/lgs/aaa-access_%Y%m%d.log 86400\" combined env=aaa-request\n  ```\n\n  > 配置原理与不记录静态文件日志相同。\n\n## 记录客户端请求域名\n\n- 这里的请求域名不是指我们虚拟主机配置的ServerName，而是指类似*.abc.com这样的泛解析形式；\n- Apache的LogFormat的`%V`变量就可以记录用户请求的域名，更多关于LogFormat变量的设置信息，可以参考[Apache日志详解](http://blog.51cto.com/longlei/2095594)这篇博文。\n\n# 静态元素过期时间\n\n- 浏览器访问网站时，会将静态的文件缓存在本地电脑，这样下次访问时就不需要重新到服务器下载静态文件；\n\n- 在Apache中可以配置静态文件的缓存时间，一旦配置的缓存时间过期，浏览器就会重新去服务器下载静态资源；\n\n- 在Apache中配置静态资源过期时间，需要使用到`expires`模块，在虚拟主机配置中更改配置如下：\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.cn\"\n      ServerName xtears.cn\n      ServerAlias www.abc.com www.123.com\n      <IfModule mod_expires.c>\n          //打开过期时间开关\n          ExpiresActive on\n          //设置图片格式的静态文件过期时间，可以以天设置也可以以小时设置\n          ExpiresByType image/gif \"access plus 1 days\"\n          ExpiresByType image/jpeg \"access plus 24 hours\"\n          ExpiresByType image/png \"access plus 24 hours\"\n          //设置css、js等过期时间\n          ExpiresByType text/css \"now plus 2 hours\"\n          ExpiresByType application/x-javascript \"now plus 2 hours\"\n          ExpiresByType application/javascript \"now plus 2 hours\"\n          ExpiresByType application/x-shockwave-flash \"now plus 2 hours\"\n          //设置默认的过期时间为不过期\n          ExpiresDefault \"now plus 0 min\"\n      </IfModule>\n      ErrorLog \"logs/xtears.cn-error_log\"\n      SetEnvIf Request_URI \".*\\.gif$\" img\n      SetEnvIf Request_URI \".*\\.jpg$\" img\n      SetEnvIf Request_URI \".*\\.png$\" img\n      SetEnvIf Request_URI \".*\\.bmp$\" img\n      SetEnvIf Request_URI \".*\\.swf$\" img\n      SetEnvIf Request_URI \".*\\.js$\" img\n      SetEnvIf Request_URI \".*\\.css$\" img\n      CustomLog \"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\" common env=!img\n  </VirtualHost>\n  ```\n\n- 然后检查`expires`模块是否打开，未打开时需要修改`httpd.conf`文件取消注释模块：\n\n  ```bash\n  [root@evobot apache2.4]# vi conf/httpd.conf\n  LoadModule expires_module modules/mod_expires.so\n  [root@evobot apache2.4]# bin/apachectl -t\n  Syntax OK\n  [root@evobot apache2.4]# bin/apachectl graceful\n  [root@evobot apache2.4]# bin/apachectl -M | grep expires\n   expires_module (shared)\n  ```\n\n- 接着使用浏览器的开发工具或者curl测试访问静态文件：\n\n  ```bash\n  $ curl -x118.24.153.130:80 xtears.cn/red.jpg -I  \n  HTTP/1.1 200 OK\n  Date: Wed, 30 May 2018 17:52:40 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  Last-Modified: Sun, 10 Jul 2016 09:38:08 GMT\n  ETag: \"19e568-53744cb14e000\"\n  Accept-Ranges: bytes\n  Content-Length: 1697128\n  Cache-Control: max-age=86400\n  Expires: Thu, 31 May 2018 17:52:40 GMT\n  Content-Type: image/jpeg\n  ```\n\n  - 可以看到请求头中多了`Cache-Control`这一项并且在`Expires`中列出了过期时间。\n\n---\n\n","slug":"Apache访问日志配置及静态元素过期时间配置","published":1,"updated":"2018-06-05T06:54:29.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gaz660005u1jx2sml3i3l","content":"<!-- build time:Tue Jun 05 2018 16:57:37 GMT+0800 (CST) --><p>本文主要介绍如何配置Apache的访问日志，使其不记录静态文件访问和如何配置访问日志的切割，另外介绍如何配置静态元素的过期时间。</p><a id=\"more\"></a><hr><h1 id=\"访问日志配置\"><a href=\"#访问日志配置\" class=\"headerlink\" title=\"访问日志配置\"></a>访问日志配置</h1><h2 id=\"不记录静态文件请求\"><a href=\"#不记录静态文件请求\" class=\"headerlink\" title=\"不记录静态文件请求\"></a>不记录静态文件请求</h2><ul><li><p>由于网站页面上存在大量的图片，css等静态元素，如果对这些元素的访问都记录在日志中，会导致访问日志快速增加，所以可以在Apache中配置不记录这些静态文件的访问日志；</p></li><li><p>修改虚拟主机配置文件<code>httpd-vhosts.conf</code>，在需要配置不记录静态文件请求的虚拟主机配置的<code>ErrorLog &quot;logs/xtears.com-error_log&quot;</code>下添加以下内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.cn\"</span></span><br><span class=\"line\">    ServerName xtears.cn</span><br><span class=\"line\">    ServerAlias www.abc.com www.123.com</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.cn-error_log\"</span></span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.gif$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.jpg$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.png$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.bmp$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.swf$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.js$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.css$\"</span> img</span><br><span class=\"line\">    CustomLog <span class=\"string\">\"logs/xtears.cn-access_log\"</span> common env=!img</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>保存退出之后暂不加载配置文件，然后尝试访问图片资源：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80 xtears.cn/x.jpg -I</span><br><span class=\"line\">HTTP/1.1 404 Not Found</span><br><span class=\"line\">Date: Wed, 30 May 2018 16:43:40 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># tail -n 3 logs/xtears.cn-access_log </span></span><br><span class=\"line\">222.186.129.155 - - [31/May/2018:00:43:40 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br><span class=\"line\">118.113.205.248 - - [31/May/2018:00:43:40 +0800] <span class=\"string\">\"HEAD http://xtears.cn/x.jpg HTTP/1.1\"</span> 404 -</span><br></pre></td></tr></table></figure><ul><li>可以看到没有刷新配置文件的情况下，日志会记录静态文件的访问请求。</li></ul></li><li><p>重新加载配置文件，再访问图片资源：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80 xtears.cn/xxx.jpg -I</span><br><span class=\"line\">HTTP/1.1 404 Not Found</span><br><span class=\"line\">Date: Wed, 30 May 2018 16:46:14 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># tail logs/xtears.cn-access_log </span></span><br><span class=\"line\">222.186.129.155 - - [31/May/2018:00:44:40 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br><span class=\"line\">124.14.16.204 - - [31/May/2018:00:44:45 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br><span class=\"line\">113.31.27.249 - - [31/May/2018:00:45:02 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br><span class=\"line\">223.94.95.141 - - [31/May/2018:00:45:05 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br><span class=\"line\">222.88.91.50 - - [31/May/2018:00:45:07 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br><span class=\"line\">222.186.129.155 - - [31/May/2018:00:45:40 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br><span class=\"line\">124.14.16.204 - - [31/May/2018:00:45:46 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br><span class=\"line\">113.31.27.249 - - [31/May/2018:00:46:02 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br><span class=\"line\">223.94.95.141 - - [31/May/2018:00:46:05 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br><span class=\"line\">222.88.91.50 - - [31/May/2018:00:46:07 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br></pre></td></tr></table></figure><ul><li>可以看到，访问静态资源的日志已经不再记录。</li></ul></li></ul><h2 id=\"访问日志切割\"><a href=\"#访问日志切割\" class=\"headerlink\" title=\"访问日志切割\"></a>访问日志切割</h2><ul><li><p>日志持续记录，会导致磁盘空间越来越大，所以需要对访问日志配置自动切割，并自动删除过期的日志文件；</p></li><li><p>配置访问日志切割，在虚拟主机配置文件中的虚拟主机配置的<code>CustomLog</code>行修改如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.cn\"</span></span><br><span class=\"line\">    ServerName xtears.cn</span><br><span class=\"line\">    ServerAlias www.abc.com www.123.com</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.cn-error_log\"</span></span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.gif$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.jpg$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.png$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.bmp$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.swf$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.js$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.css$\"</span> img</span><br><span class=\"line\">    CustomLog <span class=\"string\">\"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d_log 86400\"</span> common env=!img</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><ul><li>其中<code>rotatelogs</code>是apache自带的日志切割工具，<code>-l</code>选项表示按照本地时间而不是UTC时间进行切割，然后日志名结尾的<code>%Y%m%d</code>表示日志名以时间结尾命名，86400则表示一天切割一次，即86400秒。</li></ul></li><li><p>重加载配置文件后，进行几次访问请求，然后查看日志：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># ls logs/</span></span><br><span class=\"line\">access_log  xtears.cn-access_20180531.log  xtears.com-access_log</span><br></pre></td></tr></table></figure><ul><li>可以看到生成了以日期为结尾的新的日志。</li></ul></li><li><p>然后还需要配置定时任务，定期删除过期的日志文件。</p></li><li><p>Apache的rotatelogs的语法为：<code>rotatelogs [-l] logfile [rotationtime [offset]] | [filesizeM]</code>，其中<code>-l</code>不加的话日志时间会和实际时间相差8小时，而logfile如果包含<code>%</code>，则会被视为strftime()格式的字符串，否则会加上以秒为单位的<code>.ssss</code>的后缀，时间都是表示新日志开始的时间，<code>rotationtime</code>则表示日志文件以秒为单位滚动的间隔时间，<code>offset</code>则是相对于UTC时间相缠得分钟数，如果省略，表示为0并且使用UTC时间，比如要指定与UTC时差为-5小时的当地时间，则参数应该为<strong>-300</strong>，单位为分钟；<code>filesizeM</code>是指以文件大小滚动，而不是按时间或时差滚动；</p></li><li><p>如下两个例子，分别以天分割和以小时分割：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#按每天分割</span></span><br><span class=\"line\">CustomLog <span class=\"string\">\"|bin/rotatelogs -l logs/access_%Y%m%d.log 86400\"</span> combined</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#按每小时分割</span></span><br><span class=\"line\">CustomLog <span class=\"string\">\"|bin/rotatelogs -l logs/access_%Y%m%d%H.log 3600\"</span> combined</span><br></pre></td></tr></table></figure></li><li><p>除了使用rotatelogs，apache还可以使用<code>cronolog</code>进行日志分割，同样以小时和以天分割日志，例子如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#按每天分割</span></span><br><span class=\"line\">CustomLog <span class=\"string\">\"|bin/cronolog logs/access_%Y%m%d.log\"</span> combined</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#按每小时分割</span></span><br><span class=\"line\">CustomLog <span class=\"string\">\"|bin/cronolog logs/access_%Y%m%d%h.log\"</span> combined</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"日志记录代理及真实ip\"><a href=\"#日志记录代理及真实ip\" class=\"headerlink\" title=\"日志记录代理及真实ip\"></a>日志记录代理及真实ip</h2><ul><li><p>默认配置中，log日志的格式为<code>LogFormat &quot;%h %l %u %t \\&quot;%r\\&quot; %&gt;s %b \\&quot;%{Referer}i\\&quot; \\&quot;%{User-Agent}i\\&quot;&quot; combined</code>，其中%h是访问者的ip地址，但是如果用户使用代理进行访问，那么这里的ip就会是代理机器的ip地址；</p></li><li><p>为了将用户的真实辑器ip记录下来，可以将日志格式改成如下格式：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LogFormat <span class=\"string\">\"%h %&#123;X-FORWARDED-FOR&#125;i %l %u %t \\\"%r\\\" %&gt;s %b \\\"%&#123;Referer&#125;i\\\" \\\"%&#123;User-Agent&#125;i\\\"\"</span> combined</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"只记录指定URI日志\"><a href=\"#只记录指定URI日志\" class=\"headerlink\" title=\"只记录指定URI日志\"></a>只记录指定URI日志</h2><ul><li><p>如果需要apache只记录我们指定的URI的日志，如请求<a href=\"http://www.aaa.com/aa/...这样的地址才会记录日志，那么需要在httpd.conf或者相关的虚拟主机配置文件中添加如下内容：\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">www.aaa.com/aa/...这样的地址才会记录日志，那么需要在httpd.conf或者相关的虚拟主机配置文件中添加如下内容：</a></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SetEnvIf Request_URI <span class=\"string\">\"^/aaa/.*\"</span> aaa-request</span><br><span class=\"line\">CustomLog <span class=\"string\">\"|/usr/local/apache/bin/rotatelogs -l /usr/local/apache/lgs/aaa-access_%Y%m%d.log 86400\"</span> combined env=aaa-request</span><br></pre></td></tr></table></figure><blockquote><p>配置原理与不记录静态文件日志相同。</p></blockquote></li></ul><h2 id=\"记录客户端请求域名\"><a href=\"#记录客户端请求域名\" class=\"headerlink\" title=\"记录客户端请求域名\"></a>记录客户端请求域名</h2><ul><li>这里的请求域名不是指我们虚拟主机配置的ServerName，而是指类似*.abc.com这样的泛解析形式；</li><li>Apache的LogFormat的<code>%V</code>变量就可以记录用户请求的域名，更多关于LogFormat变量的设置信息，可以参考<a href=\"http://blog.51cto.com/longlei/2095594\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Apache日志详解</a>这篇博文。</li></ul><h1 id=\"静态元素过期时间\"><a href=\"#静态元素过期时间\" class=\"headerlink\" title=\"静态元素过期时间\"></a>静态元素过期时间</h1><ul><li><p>浏览器访问网站时，会将静态的文件缓存在本地电脑，这样下次访问时就不需要重新到服务器下载静态文件；</p></li><li><p>在Apache中可以配置静态文件的缓存时间，一旦配置的缓存时间过期，浏览器就会重新去服务器下载静态资源；</p></li><li><p>在Apache中配置静态资源过期时间，需要使用到<code>expires</code>模块，在虚拟主机配置中更改配置如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.cn\"</span></span><br><span class=\"line\">    ServerName xtears.cn</span><br><span class=\"line\">    ServerAlias www.abc.com www.123.com</span><br><span class=\"line\">    &lt;IfModule mod_expires.c&gt;</span><br><span class=\"line\">        //打开过期时间开关</span><br><span class=\"line\">        ExpiresActive on</span><br><span class=\"line\">        //设置图片格式的静态文件过期时间，可以以天设置也可以以小时设置</span><br><span class=\"line\">        ExpiresByType image/gif <span class=\"string\">\"access plus 1 days\"</span></span><br><span class=\"line\">        ExpiresByType image/jpeg <span class=\"string\">\"access plus 24 hours\"</span></span><br><span class=\"line\">        ExpiresByType image/png <span class=\"string\">\"access plus 24 hours\"</span></span><br><span class=\"line\">        //设置css、js等过期时间</span><br><span class=\"line\">        ExpiresByType text/css <span class=\"string\">\"now plus 2 hours\"</span></span><br><span class=\"line\">        ExpiresByType application/x-javascript <span class=\"string\">\"now plus 2 hours\"</span></span><br><span class=\"line\">        ExpiresByType application/javascript <span class=\"string\">\"now plus 2 hours\"</span></span><br><span class=\"line\">        ExpiresByType application/x-shockwave-flash <span class=\"string\">\"now plus 2 hours\"</span></span><br><span class=\"line\">        //设置默认的过期时间为不过期</span><br><span class=\"line\">        ExpiresDefault <span class=\"string\">\"now plus 0 min\"</span></span><br><span class=\"line\">    &lt;/IfModule&gt;</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.cn-error_log\"</span></span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.gif$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.jpg$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.png$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.bmp$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.swf$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.js$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.css$\"</span> img</span><br><span class=\"line\">    CustomLog <span class=\"string\">\"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\"</span> common env=!img</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>然后检查<code>expires</code>模块是否打开，未打开时需要修改<code>httpd.conf</code>文件取消注释模块：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># vi conf/httpd.conf</span></span><br><span class=\"line\">LoadModule expires_module modules/mod_expires.so</span><br><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># bin/apachectl -t</span></span><br><span class=\"line\">Syntax OK</span><br><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># bin/apachectl graceful</span></span><br><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># bin/apachectl -M | grep expires</span></span><br><span class=\"line\"> expires_module (shared)</span><br></pre></td></tr></table></figure></li><li><p>接着使用浏览器的开发工具或者curl测试访问静态文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80 xtears.cn/red.jpg -I  </span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Date: Wed, 30 May 2018 17:52:40 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">Last-Modified: Sun, 10 Jul 2016 09:38:08 GMT</span><br><span class=\"line\">ETag: <span class=\"string\">\"19e568-53744cb14e000\"</span></span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\">Content-Length: 1697128</span><br><span class=\"line\">Cache-Control: max-age=86400</span><br><span class=\"line\">Expires: Thu, 31 May 2018 17:52:40 GMT</span><br><span class=\"line\">Content-Type: image/jpeg</span><br></pre></td></tr></table></figure><ul><li>可以看到请求头中多了<code>Cache-Control</code>这一项并且在<code>Expires</code>中列出了过期时间。</li></ul></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:37 GMT+0800 (CST) --><p>本文主要介绍如何配置Apache的访问日志，使其不记录静态文件访问和如何配置访问日志的切割，另外介绍如何配置静态元素的过期时间。</p>","more":"<hr><h1 id=\"访问日志配置\"><a href=\"#访问日志配置\" class=\"headerlink\" title=\"访问日志配置\"></a>访问日志配置</h1><h2 id=\"不记录静态文件请求\"><a href=\"#不记录静态文件请求\" class=\"headerlink\" title=\"不记录静态文件请求\"></a>不记录静态文件请求</h2><ul><li><p>由于网站页面上存在大量的图片，css等静态元素，如果对这些元素的访问都记录在日志中，会导致访问日志快速增加，所以可以在Apache中配置不记录这些静态文件的访问日志；</p></li><li><p>修改虚拟主机配置文件<code>httpd-vhosts.conf</code>，在需要配置不记录静态文件请求的虚拟主机配置的<code>ErrorLog &quot;logs/xtears.com-error_log&quot;</code>下添加以下内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.cn\"</span></span><br><span class=\"line\">    ServerName xtears.cn</span><br><span class=\"line\">    ServerAlias www.abc.com www.123.com</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.cn-error_log\"</span></span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.gif$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.jpg$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.png$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.bmp$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.swf$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.js$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.css$\"</span> img</span><br><span class=\"line\">    CustomLog <span class=\"string\">\"logs/xtears.cn-access_log\"</span> common env=!img</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>保存退出之后暂不加载配置文件，然后尝试访问图片资源：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80 xtears.cn/x.jpg -I</span><br><span class=\"line\">HTTP/1.1 404 Not Found</span><br><span class=\"line\">Date: Wed, 30 May 2018 16:43:40 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># tail -n 3 logs/xtears.cn-access_log </span></span><br><span class=\"line\">222.186.129.155 - - [31/May/2018:00:43:40 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br><span class=\"line\">118.113.205.248 - - [31/May/2018:00:43:40 +0800] <span class=\"string\">\"HEAD http://xtears.cn/x.jpg HTTP/1.1\"</span> 404 -</span><br></pre></td></tr></table></figure><ul><li>可以看到没有刷新配置文件的情况下，日志会记录静态文件的访问请求。</li></ul></li><li><p>重新加载配置文件，再访问图片资源：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80 xtears.cn/xxx.jpg -I</span><br><span class=\"line\">HTTP/1.1 404 Not Found</span><br><span class=\"line\">Date: Wed, 30 May 2018 16:46:14 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># tail logs/xtears.cn-access_log </span></span><br><span class=\"line\">222.186.129.155 - - [31/May/2018:00:44:40 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br><span class=\"line\">124.14.16.204 - - [31/May/2018:00:44:45 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br><span class=\"line\">113.31.27.249 - - [31/May/2018:00:45:02 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br><span class=\"line\">223.94.95.141 - - [31/May/2018:00:45:05 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br><span class=\"line\">222.88.91.50 - - [31/May/2018:00:45:07 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br><span class=\"line\">222.186.129.155 - - [31/May/2018:00:45:40 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br><span class=\"line\">124.14.16.204 - - [31/May/2018:00:45:46 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br><span class=\"line\">113.31.27.249 - - [31/May/2018:00:46:02 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br><span class=\"line\">223.94.95.141 - - [31/May/2018:00:46:05 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br><span class=\"line\">222.88.91.50 - - [31/May/2018:00:46:07 +0800] <span class=\"string\">\"HEAD / HTTP/1.1\"</span> 200 -</span><br></pre></td></tr></table></figure><ul><li>可以看到，访问静态资源的日志已经不再记录。</li></ul></li></ul><h2 id=\"访问日志切割\"><a href=\"#访问日志切割\" class=\"headerlink\" title=\"访问日志切割\"></a>访问日志切割</h2><ul><li><p>日志持续记录，会导致磁盘空间越来越大，所以需要对访问日志配置自动切割，并自动删除过期的日志文件；</p></li><li><p>配置访问日志切割，在虚拟主机配置文件中的虚拟主机配置的<code>CustomLog</code>行修改如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.cn\"</span></span><br><span class=\"line\">    ServerName xtears.cn</span><br><span class=\"line\">    ServerAlias www.abc.com www.123.com</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.cn-error_log\"</span></span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.gif$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.jpg$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.png$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.bmp$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.swf$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.js$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.css$\"</span> img</span><br><span class=\"line\">    CustomLog <span class=\"string\">\"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d_log 86400\"</span> common env=!img</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><ul><li>其中<code>rotatelogs</code>是apache自带的日志切割工具，<code>-l</code>选项表示按照本地时间而不是UTC时间进行切割，然后日志名结尾的<code>%Y%m%d</code>表示日志名以时间结尾命名，86400则表示一天切割一次，即86400秒。</li></ul></li><li><p>重加载配置文件后，进行几次访问请求，然后查看日志：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># ls logs/</span></span><br><span class=\"line\">access_log  xtears.cn-access_20180531.log  xtears.com-access_log</span><br></pre></td></tr></table></figure><ul><li>可以看到生成了以日期为结尾的新的日志。</li></ul></li><li><p>然后还需要配置定时任务，定期删除过期的日志文件。</p></li><li><p>Apache的rotatelogs的语法为：<code>rotatelogs [-l] logfile [rotationtime [offset]] | [filesizeM]</code>，其中<code>-l</code>不加的话日志时间会和实际时间相差8小时，而logfile如果包含<code>%</code>，则会被视为strftime()格式的字符串，否则会加上以秒为单位的<code>.ssss</code>的后缀，时间都是表示新日志开始的时间，<code>rotationtime</code>则表示日志文件以秒为单位滚动的间隔时间，<code>offset</code>则是相对于UTC时间相缠得分钟数，如果省略，表示为0并且使用UTC时间，比如要指定与UTC时差为-5小时的当地时间，则参数应该为<strong>-300</strong>，单位为分钟；<code>filesizeM</code>是指以文件大小滚动，而不是按时间或时差滚动；</p></li><li><p>如下两个例子，分别以天分割和以小时分割：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#按每天分割</span></span><br><span class=\"line\">CustomLog <span class=\"string\">\"|bin/rotatelogs -l logs/access_%Y%m%d.log 86400\"</span> combined</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#按每小时分割</span></span><br><span class=\"line\">CustomLog <span class=\"string\">\"|bin/rotatelogs -l logs/access_%Y%m%d%H.log 3600\"</span> combined</span><br></pre></td></tr></table></figure></li><li><p>除了使用rotatelogs，apache还可以使用<code>cronolog</code>进行日志分割，同样以小时和以天分割日志，例子如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#按每天分割</span></span><br><span class=\"line\">CustomLog <span class=\"string\">\"|bin/cronolog logs/access_%Y%m%d.log\"</span> combined</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#按每小时分割</span></span><br><span class=\"line\">CustomLog <span class=\"string\">\"|bin/cronolog logs/access_%Y%m%d%h.log\"</span> combined</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"日志记录代理及真实ip\"><a href=\"#日志记录代理及真实ip\" class=\"headerlink\" title=\"日志记录代理及真实ip\"></a>日志记录代理及真实ip</h2><ul><li><p>默认配置中，log日志的格式为<code>LogFormat &quot;%h %l %u %t \\&quot;%r\\&quot; %&gt;s %b \\&quot;%{Referer}i\\&quot; \\&quot;%{User-Agent}i\\&quot;&quot; combined</code>，其中%h是访问者的ip地址，但是如果用户使用代理进行访问，那么这里的ip就会是代理机器的ip地址；</p></li><li><p>为了将用户的真实辑器ip记录下来，可以将日志格式改成如下格式：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LogFormat <span class=\"string\">\"%h %&#123;X-FORWARDED-FOR&#125;i %l %u %t \\\"%r\\\" %&gt;s %b \\\"%&#123;Referer&#125;i\\\" \\\"%&#123;User-Agent&#125;i\\\"\"</span> combined</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"只记录指定URI日志\"><a href=\"#只记录指定URI日志\" class=\"headerlink\" title=\"只记录指定URI日志\"></a>只记录指定URI日志</h2><ul><li><p>如果需要apache只记录我们指定的URI的日志，如请求<a href=\"http://www.aaa.com/aa/...这样的地址才会记录日志，那么需要在httpd.conf或者相关的虚拟主机配置文件中添加如下内容：\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">www.aaa.com/aa/...这样的地址才会记录日志，那么需要在httpd.conf或者相关的虚拟主机配置文件中添加如下内容：</a></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SetEnvIf Request_URI <span class=\"string\">\"^/aaa/.*\"</span> aaa-request</span><br><span class=\"line\">CustomLog <span class=\"string\">\"|/usr/local/apache/bin/rotatelogs -l /usr/local/apache/lgs/aaa-access_%Y%m%d.log 86400\"</span> combined env=aaa-request</span><br></pre></td></tr></table></figure><blockquote><p>配置原理与不记录静态文件日志相同。</p></blockquote></li></ul><h2 id=\"记录客户端请求域名\"><a href=\"#记录客户端请求域名\" class=\"headerlink\" title=\"记录客户端请求域名\"></a>记录客户端请求域名</h2><ul><li>这里的请求域名不是指我们虚拟主机配置的ServerName，而是指类似*.abc.com这样的泛解析形式；</li><li>Apache的LogFormat的<code>%V</code>变量就可以记录用户请求的域名，更多关于LogFormat变量的设置信息，可以参考<a href=\"http://blog.51cto.com/longlei/2095594\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Apache日志详解</a>这篇博文。</li></ul><h1 id=\"静态元素过期时间\"><a href=\"#静态元素过期时间\" class=\"headerlink\" title=\"静态元素过期时间\"></a>静态元素过期时间</h1><ul><li><p>浏览器访问网站时，会将静态的文件缓存在本地电脑，这样下次访问时就不需要重新到服务器下载静态文件；</p></li><li><p>在Apache中可以配置静态文件的缓存时间，一旦配置的缓存时间过期，浏览器就会重新去服务器下载静态资源；</p></li><li><p>在Apache中配置静态资源过期时间，需要使用到<code>expires</code>模块，在虚拟主机配置中更改配置如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.cn\"</span></span><br><span class=\"line\">    ServerName xtears.cn</span><br><span class=\"line\">    ServerAlias www.abc.com www.123.com</span><br><span class=\"line\">    &lt;IfModule mod_expires.c&gt;</span><br><span class=\"line\">        //打开过期时间开关</span><br><span class=\"line\">        ExpiresActive on</span><br><span class=\"line\">        //设置图片格式的静态文件过期时间，可以以天设置也可以以小时设置</span><br><span class=\"line\">        ExpiresByType image/gif <span class=\"string\">\"access plus 1 days\"</span></span><br><span class=\"line\">        ExpiresByType image/jpeg <span class=\"string\">\"access plus 24 hours\"</span></span><br><span class=\"line\">        ExpiresByType image/png <span class=\"string\">\"access plus 24 hours\"</span></span><br><span class=\"line\">        //设置css、js等过期时间</span><br><span class=\"line\">        ExpiresByType text/css <span class=\"string\">\"now plus 2 hours\"</span></span><br><span class=\"line\">        ExpiresByType application/x-javascript <span class=\"string\">\"now plus 2 hours\"</span></span><br><span class=\"line\">        ExpiresByType application/javascript <span class=\"string\">\"now plus 2 hours\"</span></span><br><span class=\"line\">        ExpiresByType application/x-shockwave-flash <span class=\"string\">\"now plus 2 hours\"</span></span><br><span class=\"line\">        //设置默认的过期时间为不过期</span><br><span class=\"line\">        ExpiresDefault <span class=\"string\">\"now plus 0 min\"</span></span><br><span class=\"line\">    &lt;/IfModule&gt;</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.cn-error_log\"</span></span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.gif$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.jpg$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.png$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.bmp$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.swf$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.js$\"</span> img</span><br><span class=\"line\">    SetEnvIf Request_URI <span class=\"string\">\".*\\.css$\"</span> img</span><br><span class=\"line\">    CustomLog <span class=\"string\">\"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\"</span> common env=!img</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>然后检查<code>expires</code>模块是否打开，未打开时需要修改<code>httpd.conf</code>文件取消注释模块：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># vi conf/httpd.conf</span></span><br><span class=\"line\">LoadModule expires_module modules/mod_expires.so</span><br><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># bin/apachectl -t</span></span><br><span class=\"line\">Syntax OK</span><br><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># bin/apachectl graceful</span></span><br><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># bin/apachectl -M | grep expires</span></span><br><span class=\"line\"> expires_module (shared)</span><br></pre></td></tr></table></figure></li><li><p>接着使用浏览器的开发工具或者curl测试访问静态文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80 xtears.cn/red.jpg -I  </span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Date: Wed, 30 May 2018 17:52:40 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">Last-Modified: Sun, 10 Jul 2016 09:38:08 GMT</span><br><span class=\"line\">ETag: <span class=\"string\">\"19e568-53744cb14e000\"</span></span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\">Content-Length: 1697128</span><br><span class=\"line\">Cache-Control: max-age=86400</span><br><span class=\"line\">Expires: Thu, 31 May 2018 17:52:40 GMT</span><br><span class=\"line\">Content-Type: image/jpeg</span><br></pre></td></tr></table></figure><ul><li>可以看到请求头中多了<code>Cache-Control</code>这一项并且在<code>Expires</code>中列出了过期时间。</li></ul></li></ul><hr><!-- rebuild by neat -->"},{"title":"Apache配置防盗链及访问控制","author":"Evobot","abbrlink":"7abd11c3","date":"2018-05-31T14:00:58.000Z","image":null,"_content":"\n\n\n本文主要介绍Apache如何配置防盗链，以及访问控制Directory和FilesMatch。\n\n<!--more-->\n\n---\n\n# 防盗链配置\n\n- 防盗链是为了防止外站引用本站的资源，导致本站流量上升，占用带宽资源；\n\n- 防盗链的配置就是让资源只能在本站域名引用，不让其他域名引用，即`referer`，在虚拟主机配置里增加以下配置：\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.cn\"\n      ServerName xtears.cn\n      ServerAlias www.abc.com www.123.com\n      <Directory /data/wwwroot/xtears.cn>\n          SetEnvIfNoCase Referer \"http://xtears.cn\" local_ref\n          SetEnvIfNoCase Referer \"http://abc.com\" local_ref\n          SetEnvIfNoCase Referer \"^$\" local_ref\n          <filesmatch \"\\.(txt|doc|mp3|zip|rar|jpg|gif)\">\n              Order Allow,Deny\n              Allow from env=local_ref\n          </filesmatch>\n      </Directory>\n      ErrorLog \"logs/xtears.cn-error_log\"\n      CustomLog \"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\" common \n  </VirtualHost>\n  ```\n\n  - 这里Directory设置了两个域名白名单：xtears.cn和abc.com，FilesMatch配置设置了需要做防盗链的文件格式，FilesMatch可以不区分大小写，然后在FilesMatch中配置了访问控制，让白名单的域名允许引用，其他的引用被Deny。\n  - 在两个白名单域名后面有一个空referer：`SetEnvIfNoCase Referer \"^$\" local_ref`，空referer是指直接访问资源链接，并不是其他站点引用之后访问的，所以为了防止用户直接复制资源源地址访问被403拒绝，这里增加允许空referer的访问。\n\n- 使用`curl -e \"http://domain.com\" -x127.0.0.1:80 xtears.cn/red.jpg -I`可以模拟referer，选项`-e`用来指定referer：\n\n  ```bash\n  $ curl -e \"http://www.qq.com\" -x118.24.153.130:80 xtears.cn/red.jpg -I\n  HTTP/1.1 403 Forbidden\n  Date: Thu, 31 May 2018 14:55:40 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  Content-Type: text/html; charset=iso-8859-1\n  ```\n\n  - 可以看到访问被403拒绝，而如果注释掉空Referer，直接访问也会返回403错误：\n\n  ![403](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/403.png)\n\n# 访问控制\n\n## Directory\n\n- 之前设置管理员的二次认证，在这个基础上，还可以进一步配置访问控制，只允许指定IP地址能够访问页面，Directory访问控制配置如下，写入虚拟主机配置：\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.cn\"\n      ServerName xtears.cn\n      ServerAlias www.abc.com www.123.com\n      <Directory /data/wwwroot/xtears.cn/admin>\n          Order deny,allow\n          Deny from all\n          Allow from 127.0.0.1\n      </Directory>\n  \n      <Directory /data/wwwroot/xtears.cn>\n          SetEnvIfNoCase Referer \"http://xtears.cn\" local_ref\n          SetEnvIfNoCase Referer \"http://abc.com\" local_ref\n          #SetEnvIfNoCase Referer \"^$\" local_ref\n          <filesmatch \"\\.(txt|doc|mp3|zip|rar|jpg|gif)\">\n              Order Allow,Deny\n              Allow from env=local_ref\n          </filesmatch>\n      </Directory>\n      ErrorLog \"logs/xtears.cn-error_log\"\n      CustomLog \"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\" common\n  </VirtualHost>\n  ```\n\n- 这里为了防止两个Directory冲突，所以将访问控制放在了上面，其中`Order`是定义访问控制的顺序，即先执行deny的语句还是allow的语句，控制语句不论是否匹配，都会按照Order的顺序执行，所以这里如果访问来自127.0.0.1，那么会先被deny拒绝，然后再被允许访问。\n\n- 更新配置后，创建网站根目录下的admin目录和网页文件，然后在服务器本地尝试访问，结果被允许访问：\n\n  ```bash\n  # curl -x127.0.0.1:80 xtears.cn/admin/index.php -I\n  HTTP/1.1 200 OK\n  Date: Thu, 31 May 2018 15:14:54 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  X-Powered-By: PHP/5.6.32\n  Content-Type: text/html; charset=UTF-8\n  ```\n\n- 从其他IP访问，返回403状态码：\n\n  ```bash\n  $ curl -x118.24.153.130:80 xtears.cn/admin/index.php -I\n  HTTP/1.1 403 Forbidden\n  Date: Thu, 31 May 2018 15:18:02 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  Content-Type: text/html; charset=iso-8859-1\n  ```\n\n## FilesMatch\n\n- 上面的访问控制是控制目录的访问，另外也可以对链接或者文件进行访问控制，比如访问的链接后面带有参数的情况，这时就可以用FilesMatch来进行访问控制；\n\n- 虚拟主机配置文件配置如下：\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.cn\"\n      ServerName xtears.cn\n      ServerAlias www.abc.com www.123.com\n      <Directory /data/wwwroot/xtears.cn>\n          <FilesMatch admin.php(.*)>\n          Order deny,allow\n          Deny from all\n          Allow from 127.0.0.1\n          </FilesMatch>\n      </Directory>\n      ErrorLog \"logs/xtears.cn-error_log\"\n      CustomLog \"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\" common\n  </VirtualHost>\n  ```\n\n- `admin.php(.*)`是为了匹配地址后面带有参数的情况，测试如下：\n\n  ```bash\n  # curl -x118.24.153.130:80 'xtears.cn/admin.php?asd' -I\n  HTTP/1.1 403 Forbidden\n  Date: Thu, 31 May 2018 16:13:04 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  Content-Type: text/html; charset=iso-8859-1\n  \n  # curl -x127.0.0.1:80 'xtears.cn/admin.php?asd' -I\n  HTTP/1.1 200 OK\n  Date: Thu, 31 May 2018 16:13:22 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  X-Powered-By: PHP/5.6.32\n  Content-Type: text/html; charset=UTF-8\n  ```\n\n## 其他访问控制\n\n- 禁止访问指定目录/文件，如不允许访问.inc扩展名文件，保护php类库，虚拟主机配置增加如下内容:\n\n  ```bash\n  <Files ~ \"\\.inc$\">\n      Order allow,deny\n      Deny from all\n  </Files>\n  ```\n\n- 禁止访问指定目录：\n\n  ```bash\n  <Directory ~ \"^/var/www/(.+/)*[0-9]{3}\">\n      Order allow,deny\n      Deny from all\n  </Directory>\n  \n  ```\n\n- 通过文件匹配来禁止，如禁止访问图片：\n\n  ```bash\n  <FilesMatch \\.(gif|jpe?g|png)$>\n      Order allow,deny\n      Deny from all\n  </FilesMatch>\n  \n  ```\n\n- 针对URL相对路径的访问控制：\n\n  ```bash\n  <Location /dir/>\n      Order allow,deny\n      Deny from all\n  </Location>\n  ```\n\n- 禁止某些IP访问：\n\n  ```bash\n  <Directory \"/var/www/web/\">\n  \tOrder allow,deny\n  \tAllow from all\n  \tDeny from 10.0.0.1 #阻止ip\n  \tDeny from 192.168.0.0/24 #阻止ip段\n  </Directory>\n  \n  ```\n\n- 允许某些IP访问，适合内部或合作公司访问:\n\n  ```bash\n  <Directory \"/var/www/web/\">\n  \tOrder deny,allow\n  \tDeny from all\n  \tAll from example.com #允许域名\n  \tAll from 10.0.0.1\t#允许一个IP\n  \tAll from 10.0.0.1 10.0.0.2\t#允许多个IP\n  \tAllow from 10.1.0.0/255.255.0.0\t#允许一个IP段、掩码对\n  \tAll from 10.0.1 192.168\t#允许一个IP段，ip段后面不写\n  \tAll from 192.168.0.0/24\n  </Directory>\n  \n  ```\n\n# Apache禁止trace\n\n- 禁止Trace和Track这两种调试web服务器链接的http凡是，可以防止xss攻击，具体可以使用rewrite功能实现：\n\n  ```bash\n  RewriteEngine On\n  RewriteCond %{REQUEST_METHOD}^TRACE\n  RewriteRule .* - [F]\n  \n  ```\n\n  - 或者再apache配置文件中配置`TraceEnable off`参数项。\n\n# Apache配置https\n\n- 首先下载openssl源码包并使用默认配置编译，默认将安装到`/usr/local/ssl`：\n\n  ```bash\n  tar -zxf openssl-0.9.8k.tar.gz\n  cd openssl-0.9.8k\n  ./config   \n  make && make install\n  ```\n\n- 然后编译apache指定ssl支持，可以编译为静态模块或动态模块：\n\n  - 静态：`--enable-ssl=static --with-ssl=/usr/local/ssl`\n  - 动态：`--enable-ssl=shared --with-ssl=/usr/local/ssl`\n  - 动态编译的情况会在module目录生成`mod_ssl.so`文件，并且需要在httpd.conf中加入`LoadModule ssl_module modules/mod_ssl.so`。\n\n- 接着创建私钥：\n\n  ```bash\n  cd /usr/local/ssl/bin\n  openssl genrsa -out server.key 2048\n  //如果需要对server.key添加保护密码，使用 -des3 扩展命令。Windows环境下不支持加密格式私钥，Linux环境下使用加密格式私钥时，每次重启Apache都需要您输入该私钥密码（例：openssl genrsa -des3 -out server.key 2048）\n  cp server.key /usr/local/apache/conf/ssl.key/\n  \n  ```\n\n- 之后生成证书请求(CSR)文件：\n\n  ```bash\n  # openssl req -new -key server.key -out certreq.csr\n  Country Name：                           //所在国家的ISO标准代号，中国为CN   \n  State or Province Name：                 //单位所在地省/自治区/直辖市   \n  Locality Name：                          //单位所在地的市/县/区   \n  Organization Name：                      //单位/机构/企业合法的名称   \n  Organizational Unit Name：               //部门名称   \n  Common Name：                            //通用名，例如：www.itrus.com.cn。此项必须与访问提供SSL服务的服务器时所应用的域名完全匹配。   \n  Email Address：                          //邮件地址，不必输入，直接回车跳过   \n  \"extra\"attributes                        //以下信息不必输入，回车跳过直到命令执行完毕。 \n  ```\n\n- 将生成的certreq.csr文件提交到证书申请机构，等待CA证书签发，服务器证书密钥对必须配对使用，私钥丢失会导致证书不可用。\n\n- 将签发的两张中级CA证书内容保存到`conf/ssl.crt/intermediatebundle.crt`文件中，并将服务器证书内容保存到`ssl.crt/server.crt`文件中。\n\n- 在httpd.conf中增加以下内容：\n\n  ```bash\n  Listen 443\n  NameVirtualHost *:443\n  \t\n  \tDocumentRoot \"/data/web/www\"\n  \tServerName aaa.com:443\n  \tErrorLog \"logs/error.log\"\n  \tCustomLog \"logs/access.log\" combined\n  \t\n  \t\tSSLEngine on\n  \t\tSSLCertificateFile /usr/local/apache/conf/ssl.crt/server.crt\n  \t\tSSLCertificateKeyFile /usr/local/apache/conf/ssl.key/server.key\n  \t\tSSLCertificateChainFile /usr/local/apache/conf/ssl.crt/intermediatebundle.crt\n  ```\n\n---\n\n","source":"_posts/Apache配置防盗链及访问控制.md","raw":"---\ntitle: Apache配置防盗链及访问控制\nauthor: Evobot\ncategories: LAMP\ntags:\n  - Linux\n  - Centos\n  - Apache\nabbrlink: 7abd11c3\ndate: 2018-05-31 22:00:58\nimage:\n---\n\n\n\n本文主要介绍Apache如何配置防盗链，以及访问控制Directory和FilesMatch。\n\n<!--more-->\n\n---\n\n# 防盗链配置\n\n- 防盗链是为了防止外站引用本站的资源，导致本站流量上升，占用带宽资源；\n\n- 防盗链的配置就是让资源只能在本站域名引用，不让其他域名引用，即`referer`，在虚拟主机配置里增加以下配置：\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.cn\"\n      ServerName xtears.cn\n      ServerAlias www.abc.com www.123.com\n      <Directory /data/wwwroot/xtears.cn>\n          SetEnvIfNoCase Referer \"http://xtears.cn\" local_ref\n          SetEnvIfNoCase Referer \"http://abc.com\" local_ref\n          SetEnvIfNoCase Referer \"^$\" local_ref\n          <filesmatch \"\\.(txt|doc|mp3|zip|rar|jpg|gif)\">\n              Order Allow,Deny\n              Allow from env=local_ref\n          </filesmatch>\n      </Directory>\n      ErrorLog \"logs/xtears.cn-error_log\"\n      CustomLog \"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\" common \n  </VirtualHost>\n  ```\n\n  - 这里Directory设置了两个域名白名单：xtears.cn和abc.com，FilesMatch配置设置了需要做防盗链的文件格式，FilesMatch可以不区分大小写，然后在FilesMatch中配置了访问控制，让白名单的域名允许引用，其他的引用被Deny。\n  - 在两个白名单域名后面有一个空referer：`SetEnvIfNoCase Referer \"^$\" local_ref`，空referer是指直接访问资源链接，并不是其他站点引用之后访问的，所以为了防止用户直接复制资源源地址访问被403拒绝，这里增加允许空referer的访问。\n\n- 使用`curl -e \"http://domain.com\" -x127.0.0.1:80 xtears.cn/red.jpg -I`可以模拟referer，选项`-e`用来指定referer：\n\n  ```bash\n  $ curl -e \"http://www.qq.com\" -x118.24.153.130:80 xtears.cn/red.jpg -I\n  HTTP/1.1 403 Forbidden\n  Date: Thu, 31 May 2018 14:55:40 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  Content-Type: text/html; charset=iso-8859-1\n  ```\n\n  - 可以看到访问被403拒绝，而如果注释掉空Referer，直接访问也会返回403错误：\n\n  ![403](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/403.png)\n\n# 访问控制\n\n## Directory\n\n- 之前设置管理员的二次认证，在这个基础上，还可以进一步配置访问控制，只允许指定IP地址能够访问页面，Directory访问控制配置如下，写入虚拟主机配置：\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.cn\"\n      ServerName xtears.cn\n      ServerAlias www.abc.com www.123.com\n      <Directory /data/wwwroot/xtears.cn/admin>\n          Order deny,allow\n          Deny from all\n          Allow from 127.0.0.1\n      </Directory>\n  \n      <Directory /data/wwwroot/xtears.cn>\n          SetEnvIfNoCase Referer \"http://xtears.cn\" local_ref\n          SetEnvIfNoCase Referer \"http://abc.com\" local_ref\n          #SetEnvIfNoCase Referer \"^$\" local_ref\n          <filesmatch \"\\.(txt|doc|mp3|zip|rar|jpg|gif)\">\n              Order Allow,Deny\n              Allow from env=local_ref\n          </filesmatch>\n      </Directory>\n      ErrorLog \"logs/xtears.cn-error_log\"\n      CustomLog \"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\" common\n  </VirtualHost>\n  ```\n\n- 这里为了防止两个Directory冲突，所以将访问控制放在了上面，其中`Order`是定义访问控制的顺序，即先执行deny的语句还是allow的语句，控制语句不论是否匹配，都会按照Order的顺序执行，所以这里如果访问来自127.0.0.1，那么会先被deny拒绝，然后再被允许访问。\n\n- 更新配置后，创建网站根目录下的admin目录和网页文件，然后在服务器本地尝试访问，结果被允许访问：\n\n  ```bash\n  # curl -x127.0.0.1:80 xtears.cn/admin/index.php -I\n  HTTP/1.1 200 OK\n  Date: Thu, 31 May 2018 15:14:54 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  X-Powered-By: PHP/5.6.32\n  Content-Type: text/html; charset=UTF-8\n  ```\n\n- 从其他IP访问，返回403状态码：\n\n  ```bash\n  $ curl -x118.24.153.130:80 xtears.cn/admin/index.php -I\n  HTTP/1.1 403 Forbidden\n  Date: Thu, 31 May 2018 15:18:02 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  Content-Type: text/html; charset=iso-8859-1\n  ```\n\n## FilesMatch\n\n- 上面的访问控制是控制目录的访问，另外也可以对链接或者文件进行访问控制，比如访问的链接后面带有参数的情况，这时就可以用FilesMatch来进行访问控制；\n\n- 虚拟主机配置文件配置如下：\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.cn\"\n      ServerName xtears.cn\n      ServerAlias www.abc.com www.123.com\n      <Directory /data/wwwroot/xtears.cn>\n          <FilesMatch admin.php(.*)>\n          Order deny,allow\n          Deny from all\n          Allow from 127.0.0.1\n          </FilesMatch>\n      </Directory>\n      ErrorLog \"logs/xtears.cn-error_log\"\n      CustomLog \"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\" common\n  </VirtualHost>\n  ```\n\n- `admin.php(.*)`是为了匹配地址后面带有参数的情况，测试如下：\n\n  ```bash\n  # curl -x118.24.153.130:80 'xtears.cn/admin.php?asd' -I\n  HTTP/1.1 403 Forbidden\n  Date: Thu, 31 May 2018 16:13:04 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  Content-Type: text/html; charset=iso-8859-1\n  \n  # curl -x127.0.0.1:80 'xtears.cn/admin.php?asd' -I\n  HTTP/1.1 200 OK\n  Date: Thu, 31 May 2018 16:13:22 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  X-Powered-By: PHP/5.6.32\n  Content-Type: text/html; charset=UTF-8\n  ```\n\n## 其他访问控制\n\n- 禁止访问指定目录/文件，如不允许访问.inc扩展名文件，保护php类库，虚拟主机配置增加如下内容:\n\n  ```bash\n  <Files ~ \"\\.inc$\">\n      Order allow,deny\n      Deny from all\n  </Files>\n  ```\n\n- 禁止访问指定目录：\n\n  ```bash\n  <Directory ~ \"^/var/www/(.+/)*[0-9]{3}\">\n      Order allow,deny\n      Deny from all\n  </Directory>\n  \n  ```\n\n- 通过文件匹配来禁止，如禁止访问图片：\n\n  ```bash\n  <FilesMatch \\.(gif|jpe?g|png)$>\n      Order allow,deny\n      Deny from all\n  </FilesMatch>\n  \n  ```\n\n- 针对URL相对路径的访问控制：\n\n  ```bash\n  <Location /dir/>\n      Order allow,deny\n      Deny from all\n  </Location>\n  ```\n\n- 禁止某些IP访问：\n\n  ```bash\n  <Directory \"/var/www/web/\">\n  \tOrder allow,deny\n  \tAllow from all\n  \tDeny from 10.0.0.1 #阻止ip\n  \tDeny from 192.168.0.0/24 #阻止ip段\n  </Directory>\n  \n  ```\n\n- 允许某些IP访问，适合内部或合作公司访问:\n\n  ```bash\n  <Directory \"/var/www/web/\">\n  \tOrder deny,allow\n  \tDeny from all\n  \tAll from example.com #允许域名\n  \tAll from 10.0.0.1\t#允许一个IP\n  \tAll from 10.0.0.1 10.0.0.2\t#允许多个IP\n  \tAllow from 10.1.0.0/255.255.0.0\t#允许一个IP段、掩码对\n  \tAll from 10.0.1 192.168\t#允许一个IP段，ip段后面不写\n  \tAll from 192.168.0.0/24\n  </Directory>\n  \n  ```\n\n# Apache禁止trace\n\n- 禁止Trace和Track这两种调试web服务器链接的http凡是，可以防止xss攻击，具体可以使用rewrite功能实现：\n\n  ```bash\n  RewriteEngine On\n  RewriteCond %{REQUEST_METHOD}^TRACE\n  RewriteRule .* - [F]\n  \n  ```\n\n  - 或者再apache配置文件中配置`TraceEnable off`参数项。\n\n# Apache配置https\n\n- 首先下载openssl源码包并使用默认配置编译，默认将安装到`/usr/local/ssl`：\n\n  ```bash\n  tar -zxf openssl-0.9.8k.tar.gz\n  cd openssl-0.9.8k\n  ./config   \n  make && make install\n  ```\n\n- 然后编译apache指定ssl支持，可以编译为静态模块或动态模块：\n\n  - 静态：`--enable-ssl=static --with-ssl=/usr/local/ssl`\n  - 动态：`--enable-ssl=shared --with-ssl=/usr/local/ssl`\n  - 动态编译的情况会在module目录生成`mod_ssl.so`文件，并且需要在httpd.conf中加入`LoadModule ssl_module modules/mod_ssl.so`。\n\n- 接着创建私钥：\n\n  ```bash\n  cd /usr/local/ssl/bin\n  openssl genrsa -out server.key 2048\n  //如果需要对server.key添加保护密码，使用 -des3 扩展命令。Windows环境下不支持加密格式私钥，Linux环境下使用加密格式私钥时，每次重启Apache都需要您输入该私钥密码（例：openssl genrsa -des3 -out server.key 2048）\n  cp server.key /usr/local/apache/conf/ssl.key/\n  \n  ```\n\n- 之后生成证书请求(CSR)文件：\n\n  ```bash\n  # openssl req -new -key server.key -out certreq.csr\n  Country Name：                           //所在国家的ISO标准代号，中国为CN   \n  State or Province Name：                 //单位所在地省/自治区/直辖市   \n  Locality Name：                          //单位所在地的市/县/区   \n  Organization Name：                      //单位/机构/企业合法的名称   \n  Organizational Unit Name：               //部门名称   \n  Common Name：                            //通用名，例如：www.itrus.com.cn。此项必须与访问提供SSL服务的服务器时所应用的域名完全匹配。   \n  Email Address：                          //邮件地址，不必输入，直接回车跳过   \n  \"extra\"attributes                        //以下信息不必输入，回车跳过直到命令执行完毕。 \n  ```\n\n- 将生成的certreq.csr文件提交到证书申请机构，等待CA证书签发，服务器证书密钥对必须配对使用，私钥丢失会导致证书不可用。\n\n- 将签发的两张中级CA证书内容保存到`conf/ssl.crt/intermediatebundle.crt`文件中，并将服务器证书内容保存到`ssl.crt/server.crt`文件中。\n\n- 在httpd.conf中增加以下内容：\n\n  ```bash\n  Listen 443\n  NameVirtualHost *:443\n  \t\n  \tDocumentRoot \"/data/web/www\"\n  \tServerName aaa.com:443\n  \tErrorLog \"logs/error.log\"\n  \tCustomLog \"logs/access.log\" combined\n  \t\n  \t\tSSLEngine on\n  \t\tSSLCertificateFile /usr/local/apache/conf/ssl.crt/server.crt\n  \t\tSSLCertificateKeyFile /usr/local/apache/conf/ssl.key/server.key\n  \t\tSSLCertificateChainFile /usr/local/apache/conf/ssl.crt/intermediatebundle.crt\n  ```\n\n---\n\n","slug":"Apache配置防盗链及访问控制","published":1,"updated":"2018-06-05T06:52:14.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gaz6o0008u1jx71u3cmm1","content":"<!-- build time:Tue Jun 05 2018 16:57:37 GMT+0800 (CST) --><p>本文主要介绍Apache如何配置防盗链，以及访问控制Directory和FilesMatch。</p><a id=\"more\"></a><hr><h1 id=\"防盗链配置\"><a href=\"#防盗链配置\" class=\"headerlink\" title=\"防盗链配置\"></a>防盗链配置</h1><ul><li><p>防盗链是为了防止外站引用本站的资源，导致本站流量上升，占用带宽资源；</p></li><li><p>防盗链的配置就是让资源只能在本站域名引用，不让其他域名引用，即<code>referer</code>，在虚拟主机配置里增加以下配置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.cn\"</span></span><br><span class=\"line\">    ServerName xtears.cn</span><br><span class=\"line\">    ServerAlias www.abc.com www.123.com</span><br><span class=\"line\">    &lt;Directory /data/wwwroot/xtears.cn&gt;</span><br><span class=\"line\">        SetEnvIfNoCase Referer <span class=\"string\">\"http://xtears.cn\"</span> local_ref</span><br><span class=\"line\">        SetEnvIfNoCase Referer <span class=\"string\">\"http://abc.com\"</span> local_ref</span><br><span class=\"line\">        SetEnvIfNoCase Referer <span class=\"string\">\"^$\"</span> local_ref</span><br><span class=\"line\">        &lt;filesmatch <span class=\"string\">\"\\.(txt|doc|mp3|zip|rar|jpg|gif)\"</span>&gt;</span><br><span class=\"line\">            Order Allow,Deny</span><br><span class=\"line\">            Allow from env=local_ref</span><br><span class=\"line\">        &lt;/filesmatch&gt;</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.cn-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\"</span> common </span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><ul><li>这里Directory设置了两个域名白名单：xtears.cn和abc.com，FilesMatch配置设置了需要做防盗链的文件格式，FilesMatch可以不区分大小写，然后在FilesMatch中配置了访问控制，让白名单的域名允许引用，其他的引用被Deny。</li><li>在两个白名单域名后面有一个空referer：<code>SetEnvIfNoCase Referer &quot;^$&quot; local_ref</code>，空referer是指直接访问资源链接，并不是其他站点引用之后访问的，所以为了防止用户直接复制资源源地址访问被403拒绝，这里增加允许空referer的访问。</li></ul></li><li><p>使用<code>curl -e &quot;http://domain.com&quot; -x127.0.0.1:80 xtears.cn/red.jpg -I</code>可以模拟referer，选项<code>-e</code>用来指定referer：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -e <span class=\"string\">\"http://www.qq.com\"</span> -x118.24.153.130:80 xtears.cn/red.jpg -I</span><br><span class=\"line\">HTTP/1.1 403 Forbidden</span><br><span class=\"line\">Date: Thu, 31 May 2018 14:55:40 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br></pre></td></tr></table></figure><ul><li>可以看到访问被403拒绝，而如果注释掉空Referer，直接访问也会返回403错误：</li></ul><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/403.png\" alt=\"403\"></p></li></ul><h1 id=\"访问控制\"><a href=\"#访问控制\" class=\"headerlink\" title=\"访问控制\"></a>访问控制</h1><h2 id=\"Directory\"><a href=\"#Directory\" class=\"headerlink\" title=\"Directory\"></a>Directory</h2><ul><li><p>之前设置管理员的二次认证，在这个基础上，还可以进一步配置访问控制，只允许指定IP地址能够访问页面，Directory访问控制配置如下，写入虚拟主机配置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.cn\"</span></span><br><span class=\"line\">    ServerName xtears.cn</span><br><span class=\"line\">    ServerAlias www.abc.com www.123.com</span><br><span class=\"line\">    &lt;Directory /data/wwwroot/xtears.cn/admin&gt;</span><br><span class=\"line\">        Order deny,allow</span><br><span class=\"line\">        Deny from all</span><br><span class=\"line\">        Allow from 127.0.0.1</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Directory /data/wwwroot/xtears.cn&gt;</span><br><span class=\"line\">        SetEnvIfNoCase Referer <span class=\"string\">\"http://xtears.cn\"</span> local_ref</span><br><span class=\"line\">        SetEnvIfNoCase Referer <span class=\"string\">\"http://abc.com\"</span> local_ref</span><br><span class=\"line\">        <span class=\"comment\">#SetEnvIfNoCase Referer \"^$\" local_ref</span></span><br><span class=\"line\">        &lt;filesmatch <span class=\"string\">\"\\.(txt|doc|mp3|zip|rar|jpg|gif)\"</span>&gt;</span><br><span class=\"line\">            Order Allow,Deny</span><br><span class=\"line\">            Allow from env=local_ref</span><br><span class=\"line\">        &lt;/filesmatch&gt;</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.cn-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\"</span> common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>这里为了防止两个Directory冲突，所以将访问控制放在了上面，其中<code>Order</code>是定义访问控制的顺序，即先执行deny的语句还是allow的语句，控制语句不论是否匹配，都会按照Order的顺序执行，所以这里如果访问来自127.0.0.1，那么会先被deny拒绝，然后再被允许访问。</p></li><li><p>更新配置后，创建网站根目录下的admin目录和网页文件，然后在服务器本地尝试访问，结果被允许访问：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># curl -x127.0.0.1:80 xtears.cn/admin/index.php -I</span></span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Date: Thu, 31 May 2018 15:14:54 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">X-Powered-By: PHP/5.6.32</span><br><span class=\"line\">Content-Type: text/html; charset=UTF-8</span><br></pre></td></tr></table></figure></li><li><p>从其他IP访问，返回403状态码：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80 xtears.cn/admin/index.php -I</span><br><span class=\"line\">HTTP/1.1 403 Forbidden</span><br><span class=\"line\">Date: Thu, 31 May 2018 15:18:02 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"FilesMatch\"><a href=\"#FilesMatch\" class=\"headerlink\" title=\"FilesMatch\"></a>FilesMatch</h2><ul><li><p>上面的访问控制是控制目录的访问，另外也可以对链接或者文件进行访问控制，比如访问的链接后面带有参数的情况，这时就可以用FilesMatch来进行访问控制；</p></li><li><p>虚拟主机配置文件配置如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.cn\"</span></span><br><span class=\"line\">    ServerName xtears.cn</span><br><span class=\"line\">    ServerAlias www.abc.com www.123.com</span><br><span class=\"line\">    &lt;Directory /data/wwwroot/xtears.cn&gt;</span><br><span class=\"line\">        &lt;FilesMatch admin.php(.*)&gt;</span><br><span class=\"line\">        Order deny,allow</span><br><span class=\"line\">        Deny from all</span><br><span class=\"line\">        Allow from 127.0.0.1</span><br><span class=\"line\">        &lt;/FilesMatch&gt;</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.cn-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\"</span> common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>admin.php(.*)</code>是为了匹配地址后面带有参数的情况，测试如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># curl -x118.24.153.130:80 'xtears.cn/admin.php?asd' -I</span></span><br><span class=\"line\">HTTP/1.1 403 Forbidden</span><br><span class=\"line\">Date: Thu, 31 May 2018 16:13:04 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># curl -x127.0.0.1:80 'xtears.cn/admin.php?asd' -I</span></span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Date: Thu, 31 May 2018 16:13:22 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">X-Powered-By: PHP/5.6.32</span><br><span class=\"line\">Content-Type: text/html; charset=UTF-8</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"其他访问控制\"><a href=\"#其他访问控制\" class=\"headerlink\" title=\"其他访问控制\"></a>其他访问控制</h2><ul><li><p>禁止访问指定目录/文件，如不允许访问.inc扩展名文件，保护php类库，虚拟主机配置增加如下内容:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Files ~ <span class=\"string\">\"\\.inc$\"</span>&gt;</span><br><span class=\"line\">    Order allow,deny</span><br><span class=\"line\">    Deny from all</span><br><span class=\"line\">&lt;/Files&gt;</span><br></pre></td></tr></table></figure></li><li><p>禁止访问指定目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Directory ~ <span class=\"string\">\"^/var/www/(.+/)*[0-9]&#123;3&#125;\"</span>&gt;</span><br><span class=\"line\">    Order allow,deny</span><br><span class=\"line\">    Deny from all</span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></li><li><p>通过文件匹配来禁止，如禁止访问图片：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;FilesMatch \\.(gif|jpe?g|png)$&gt;</span><br><span class=\"line\">    Order allow,deny</span><br><span class=\"line\">    Deny from all</span><br><span class=\"line\">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure></li><li><p>针对URL相对路径的访问控制：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Location /dir/&gt;</span><br><span class=\"line\">    Order allow,deny</span><br><span class=\"line\">    Deny from all</span><br><span class=\"line\">&lt;/Location&gt;</span><br></pre></td></tr></table></figure></li><li><p>禁止某些IP访问：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Directory <span class=\"string\">\"/var/www/web/\"</span>&gt;</span><br><span class=\"line\">\tOrder allow,deny</span><br><span class=\"line\">\tAllow from all</span><br><span class=\"line\">\tDeny from 10.0.0.1 <span class=\"comment\">#阻止ip</span></span><br><span class=\"line\">\tDeny from 192.168.0.0/24 <span class=\"comment\">#阻止ip段</span></span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></li><li><p>允许某些IP访问，适合内部或合作公司访问:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Directory <span class=\"string\">\"/var/www/web/\"</span>&gt;</span><br><span class=\"line\">\tOrder deny,allow</span><br><span class=\"line\">\tDeny from all</span><br><span class=\"line\">\tAll from example.com <span class=\"comment\">#允许域名</span></span><br><span class=\"line\">\tAll from 10.0.0.1\t<span class=\"comment\">#允许一个IP</span></span><br><span class=\"line\">\tAll from 10.0.0.1 10.0.0.2\t<span class=\"comment\">#允许多个IP</span></span><br><span class=\"line\">\tAllow from 10.1.0.0/255.255.0.0\t<span class=\"comment\">#允许一个IP段、掩码对</span></span><br><span class=\"line\">\tAll from 10.0.1 192.168\t<span class=\"comment\">#允许一个IP段，ip段后面不写</span></span><br><span class=\"line\">\tAll from 192.168.0.0/24</span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"Apache禁止trace\"><a href=\"#Apache禁止trace\" class=\"headerlink\" title=\"Apache禁止trace\"></a>Apache禁止trace</h1><ul><li><p>禁止Trace和Track这两种调试web服务器链接的http凡是，可以防止xss攻击，具体可以使用rewrite功能实现：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RewriteEngine On</span><br><span class=\"line\">RewriteCond %&#123;REQUEST_METHOD&#125;^TRACE</span><br><span class=\"line\">RewriteRule .* - [F]</span><br></pre></td></tr></table></figure><ul><li>或者再apache配置文件中配置<code>TraceEnable off</code>参数项。</li></ul></li></ul><h1 id=\"Apache配置https\"><a href=\"#Apache配置https\" class=\"headerlink\" title=\"Apache配置https\"></a>Apache配置https</h1><ul><li><p>首先下载openssl源码包并使用默认配置编译，默认将安装到<code>/usr/local/ssl</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxf openssl-0.9.8k.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> openssl-0.9.8k</span><br><span class=\"line\">./config   </span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>然后编译apache指定ssl支持，可以编译为静态模块或动态模块：</p><ul><li>静态：<code>--enable-ssl=static --with-ssl=/usr/local/ssl</code></li><li>动态：<code>--enable-ssl=shared --with-ssl=/usr/local/ssl</code></li><li>动态编译的情况会在module目录生成<code>mod_ssl.so</code>文件，并且需要在httpd.conf中加入<code>LoadModule ssl_module modules/mod_ssl.so</code>。</li></ul></li><li><p>接着创建私钥：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/ssl/bin</span><br><span class=\"line\">openssl genrsa -out server.key 2048</span><br><span class=\"line\">//如果需要对server.key添加保护密码，使用 -des3 扩展命令。Windows环境下不支持加密格式私钥，Linux环境下使用加密格式私钥时，每次重启Apache都需要您输入该私钥密码（例：openssl genrsa -des3 -out server.key 2048）</span><br><span class=\"line\">cp server.key /usr/<span class=\"built_in\">local</span>/apache/conf/ssl.key/</span><br></pre></td></tr></table></figure></li><li><p>之后生成证书请求(CSR)文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># openssl req -new -key server.key -out certreq.csr</span></span><br><span class=\"line\">Country Name：                           //所在国家的ISO标准代号，中国为CN   </span><br><span class=\"line\">State or Province Name：                 //单位所在地省/自治区/直辖市   </span><br><span class=\"line\">Locality Name：                          //单位所在地的市/县/区   </span><br><span class=\"line\">Organization Name：                      //单位/机构/企业合法的名称   </span><br><span class=\"line\">Organizational Unit Name：               //部门名称   </span><br><span class=\"line\">Common Name：                            //通用名，例如：www.itrus.com.cn。此项必须与访问提供SSL服务的服务器时所应用的域名完全匹配。   </span><br><span class=\"line\">Email Address：                          //邮件地址，不必输入，直接回车跳过   </span><br><span class=\"line\"><span class=\"string\">\"extra\"</span>attributes                        //以下信息不必输入，回车跳过直到命令执行完毕。</span><br></pre></td></tr></table></figure></li><li><p>将生成的certreq.csr文件提交到证书申请机构，等待CA证书签发，服务器证书密钥对必须配对使用，私钥丢失会导致证书不可用。</p></li><li><p>将签发的两张中级CA证书内容保存到<code>conf/ssl.crt/intermediatebundle.crt</code>文件中，并将服务器证书内容保存到<code>ssl.crt/server.crt</code>文件中。</p></li><li><p>在httpd.conf中增加以下内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Listen 443</span><br><span class=\"line\">NameVirtualHost *:443</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tDocumentRoot <span class=\"string\">\"/data/web/www\"</span></span><br><span class=\"line\">\tServerName aaa.com:443</span><br><span class=\"line\">\tErrorLog <span class=\"string\">\"logs/error.log\"</span></span><br><span class=\"line\">\tCustomLog <span class=\"string\">\"logs/access.log\"</span> combined</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tSSLEngine on</span><br><span class=\"line\">\t\tSSLCertificateFile /usr/<span class=\"built_in\">local</span>/apache/conf/ssl.crt/server.crt</span><br><span class=\"line\">\t\tSSLCertificateKeyFile /usr/<span class=\"built_in\">local</span>/apache/conf/ssl.key/server.key</span><br><span class=\"line\">\t\tSSLCertificateChainFile /usr/<span class=\"built_in\">local</span>/apache/conf/ssl.crt/intermediatebundle.crt</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:37 GMT+0800 (CST) --><p>本文主要介绍Apache如何配置防盗链，以及访问控制Directory和FilesMatch。</p>","more":"<hr><h1 id=\"防盗链配置\"><a href=\"#防盗链配置\" class=\"headerlink\" title=\"防盗链配置\"></a>防盗链配置</h1><ul><li><p>防盗链是为了防止外站引用本站的资源，导致本站流量上升，占用带宽资源；</p></li><li><p>防盗链的配置就是让资源只能在本站域名引用，不让其他域名引用，即<code>referer</code>，在虚拟主机配置里增加以下配置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.cn\"</span></span><br><span class=\"line\">    ServerName xtears.cn</span><br><span class=\"line\">    ServerAlias www.abc.com www.123.com</span><br><span class=\"line\">    &lt;Directory /data/wwwroot/xtears.cn&gt;</span><br><span class=\"line\">        SetEnvIfNoCase Referer <span class=\"string\">\"http://xtears.cn\"</span> local_ref</span><br><span class=\"line\">        SetEnvIfNoCase Referer <span class=\"string\">\"http://abc.com\"</span> local_ref</span><br><span class=\"line\">        SetEnvIfNoCase Referer <span class=\"string\">\"^$\"</span> local_ref</span><br><span class=\"line\">        &lt;filesmatch <span class=\"string\">\"\\.(txt|doc|mp3|zip|rar|jpg|gif)\"</span>&gt;</span><br><span class=\"line\">            Order Allow,Deny</span><br><span class=\"line\">            Allow from env=local_ref</span><br><span class=\"line\">        &lt;/filesmatch&gt;</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.cn-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\"</span> common </span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><ul><li>这里Directory设置了两个域名白名单：xtears.cn和abc.com，FilesMatch配置设置了需要做防盗链的文件格式，FilesMatch可以不区分大小写，然后在FilesMatch中配置了访问控制，让白名单的域名允许引用，其他的引用被Deny。</li><li>在两个白名单域名后面有一个空referer：<code>SetEnvIfNoCase Referer &quot;^$&quot; local_ref</code>，空referer是指直接访问资源链接，并不是其他站点引用之后访问的，所以为了防止用户直接复制资源源地址访问被403拒绝，这里增加允许空referer的访问。</li></ul></li><li><p>使用<code>curl -e &quot;http://domain.com&quot; -x127.0.0.1:80 xtears.cn/red.jpg -I</code>可以模拟referer，选项<code>-e</code>用来指定referer：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -e <span class=\"string\">\"http://www.qq.com\"</span> -x118.24.153.130:80 xtears.cn/red.jpg -I</span><br><span class=\"line\">HTTP/1.1 403 Forbidden</span><br><span class=\"line\">Date: Thu, 31 May 2018 14:55:40 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br></pre></td></tr></table></figure><ul><li>可以看到访问被403拒绝，而如果注释掉空Referer，直接访问也会返回403错误：</li></ul><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/403.png\" alt=\"403\"></p></li></ul><h1 id=\"访问控制\"><a href=\"#访问控制\" class=\"headerlink\" title=\"访问控制\"></a>访问控制</h1><h2 id=\"Directory\"><a href=\"#Directory\" class=\"headerlink\" title=\"Directory\"></a>Directory</h2><ul><li><p>之前设置管理员的二次认证，在这个基础上，还可以进一步配置访问控制，只允许指定IP地址能够访问页面，Directory访问控制配置如下，写入虚拟主机配置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.cn\"</span></span><br><span class=\"line\">    ServerName xtears.cn</span><br><span class=\"line\">    ServerAlias www.abc.com www.123.com</span><br><span class=\"line\">    &lt;Directory /data/wwwroot/xtears.cn/admin&gt;</span><br><span class=\"line\">        Order deny,allow</span><br><span class=\"line\">        Deny from all</span><br><span class=\"line\">        Allow from 127.0.0.1</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Directory /data/wwwroot/xtears.cn&gt;</span><br><span class=\"line\">        SetEnvIfNoCase Referer <span class=\"string\">\"http://xtears.cn\"</span> local_ref</span><br><span class=\"line\">        SetEnvIfNoCase Referer <span class=\"string\">\"http://abc.com\"</span> local_ref</span><br><span class=\"line\">        <span class=\"comment\">#SetEnvIfNoCase Referer \"^$\" local_ref</span></span><br><span class=\"line\">        &lt;filesmatch <span class=\"string\">\"\\.(txt|doc|mp3|zip|rar|jpg|gif)\"</span>&gt;</span><br><span class=\"line\">            Order Allow,Deny</span><br><span class=\"line\">            Allow from env=local_ref</span><br><span class=\"line\">        &lt;/filesmatch&gt;</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.cn-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\"</span> common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>这里为了防止两个Directory冲突，所以将访问控制放在了上面，其中<code>Order</code>是定义访问控制的顺序，即先执行deny的语句还是allow的语句，控制语句不论是否匹配，都会按照Order的顺序执行，所以这里如果访问来自127.0.0.1，那么会先被deny拒绝，然后再被允许访问。</p></li><li><p>更新配置后，创建网站根目录下的admin目录和网页文件，然后在服务器本地尝试访问，结果被允许访问：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># curl -x127.0.0.1:80 xtears.cn/admin/index.php -I</span></span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Date: Thu, 31 May 2018 15:14:54 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">X-Powered-By: PHP/5.6.32</span><br><span class=\"line\">Content-Type: text/html; charset=UTF-8</span><br></pre></td></tr></table></figure></li><li><p>从其他IP访问，返回403状态码：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80 xtears.cn/admin/index.php -I</span><br><span class=\"line\">HTTP/1.1 403 Forbidden</span><br><span class=\"line\">Date: Thu, 31 May 2018 15:18:02 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"FilesMatch\"><a href=\"#FilesMatch\" class=\"headerlink\" title=\"FilesMatch\"></a>FilesMatch</h2><ul><li><p>上面的访问控制是控制目录的访问，另外也可以对链接或者文件进行访问控制，比如访问的链接后面带有参数的情况，这时就可以用FilesMatch来进行访问控制；</p></li><li><p>虚拟主机配置文件配置如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.cn\"</span></span><br><span class=\"line\">    ServerName xtears.cn</span><br><span class=\"line\">    ServerAlias www.abc.com www.123.com</span><br><span class=\"line\">    &lt;Directory /data/wwwroot/xtears.cn&gt;</span><br><span class=\"line\">        &lt;FilesMatch admin.php(.*)&gt;</span><br><span class=\"line\">        Order deny,allow</span><br><span class=\"line\">        Deny from all</span><br><span class=\"line\">        Allow from 127.0.0.1</span><br><span class=\"line\">        &lt;/FilesMatch&gt;</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.cn-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\"</span> common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>admin.php(.*)</code>是为了匹配地址后面带有参数的情况，测试如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># curl -x118.24.153.130:80 'xtears.cn/admin.php?asd' -I</span></span><br><span class=\"line\">HTTP/1.1 403 Forbidden</span><br><span class=\"line\">Date: Thu, 31 May 2018 16:13:04 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># curl -x127.0.0.1:80 'xtears.cn/admin.php?asd' -I</span></span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Date: Thu, 31 May 2018 16:13:22 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">X-Powered-By: PHP/5.6.32</span><br><span class=\"line\">Content-Type: text/html; charset=UTF-8</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"其他访问控制\"><a href=\"#其他访问控制\" class=\"headerlink\" title=\"其他访问控制\"></a>其他访问控制</h2><ul><li><p>禁止访问指定目录/文件，如不允许访问.inc扩展名文件，保护php类库，虚拟主机配置增加如下内容:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Files ~ <span class=\"string\">\"\\.inc$\"</span>&gt;</span><br><span class=\"line\">    Order allow,deny</span><br><span class=\"line\">    Deny from all</span><br><span class=\"line\">&lt;/Files&gt;</span><br></pre></td></tr></table></figure></li><li><p>禁止访问指定目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Directory ~ <span class=\"string\">\"^/var/www/(.+/)*[0-9]&#123;3&#125;\"</span>&gt;</span><br><span class=\"line\">    Order allow,deny</span><br><span class=\"line\">    Deny from all</span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></li><li><p>通过文件匹配来禁止，如禁止访问图片：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;FilesMatch \\.(gif|jpe?g|png)$&gt;</span><br><span class=\"line\">    Order allow,deny</span><br><span class=\"line\">    Deny from all</span><br><span class=\"line\">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure></li><li><p>针对URL相对路径的访问控制：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Location /dir/&gt;</span><br><span class=\"line\">    Order allow,deny</span><br><span class=\"line\">    Deny from all</span><br><span class=\"line\">&lt;/Location&gt;</span><br></pre></td></tr></table></figure></li><li><p>禁止某些IP访问：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Directory <span class=\"string\">\"/var/www/web/\"</span>&gt;</span><br><span class=\"line\">\tOrder allow,deny</span><br><span class=\"line\">\tAllow from all</span><br><span class=\"line\">\tDeny from 10.0.0.1 <span class=\"comment\">#阻止ip</span></span><br><span class=\"line\">\tDeny from 192.168.0.0/24 <span class=\"comment\">#阻止ip段</span></span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></li><li><p>允许某些IP访问，适合内部或合作公司访问:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Directory <span class=\"string\">\"/var/www/web/\"</span>&gt;</span><br><span class=\"line\">\tOrder deny,allow</span><br><span class=\"line\">\tDeny from all</span><br><span class=\"line\">\tAll from example.com <span class=\"comment\">#允许域名</span></span><br><span class=\"line\">\tAll from 10.0.0.1\t<span class=\"comment\">#允许一个IP</span></span><br><span class=\"line\">\tAll from 10.0.0.1 10.0.0.2\t<span class=\"comment\">#允许多个IP</span></span><br><span class=\"line\">\tAllow from 10.1.0.0/255.255.0.0\t<span class=\"comment\">#允许一个IP段、掩码对</span></span><br><span class=\"line\">\tAll from 10.0.1 192.168\t<span class=\"comment\">#允许一个IP段，ip段后面不写</span></span><br><span class=\"line\">\tAll from 192.168.0.0/24</span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"Apache禁止trace\"><a href=\"#Apache禁止trace\" class=\"headerlink\" title=\"Apache禁止trace\"></a>Apache禁止trace</h1><ul><li><p>禁止Trace和Track这两种调试web服务器链接的http凡是，可以防止xss攻击，具体可以使用rewrite功能实现：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RewriteEngine On</span><br><span class=\"line\">RewriteCond %&#123;REQUEST_METHOD&#125;^TRACE</span><br><span class=\"line\">RewriteRule .* - [F]</span><br></pre></td></tr></table></figure><ul><li>或者再apache配置文件中配置<code>TraceEnable off</code>参数项。</li></ul></li></ul><h1 id=\"Apache配置https\"><a href=\"#Apache配置https\" class=\"headerlink\" title=\"Apache配置https\"></a>Apache配置https</h1><ul><li><p>首先下载openssl源码包并使用默认配置编译，默认将安装到<code>/usr/local/ssl</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxf openssl-0.9.8k.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> openssl-0.9.8k</span><br><span class=\"line\">./config   </span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>然后编译apache指定ssl支持，可以编译为静态模块或动态模块：</p><ul><li>静态：<code>--enable-ssl=static --with-ssl=/usr/local/ssl</code></li><li>动态：<code>--enable-ssl=shared --with-ssl=/usr/local/ssl</code></li><li>动态编译的情况会在module目录生成<code>mod_ssl.so</code>文件，并且需要在httpd.conf中加入<code>LoadModule ssl_module modules/mod_ssl.so</code>。</li></ul></li><li><p>接着创建私钥：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/ssl/bin</span><br><span class=\"line\">openssl genrsa -out server.key 2048</span><br><span class=\"line\">//如果需要对server.key添加保护密码，使用 -des3 扩展命令。Windows环境下不支持加密格式私钥，Linux环境下使用加密格式私钥时，每次重启Apache都需要您输入该私钥密码（例：openssl genrsa -des3 -out server.key 2048）</span><br><span class=\"line\">cp server.key /usr/<span class=\"built_in\">local</span>/apache/conf/ssl.key/</span><br></pre></td></tr></table></figure></li><li><p>之后生成证书请求(CSR)文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># openssl req -new -key server.key -out certreq.csr</span></span><br><span class=\"line\">Country Name：                           //所在国家的ISO标准代号，中国为CN   </span><br><span class=\"line\">State or Province Name：                 //单位所在地省/自治区/直辖市   </span><br><span class=\"line\">Locality Name：                          //单位所在地的市/县/区   </span><br><span class=\"line\">Organization Name：                      //单位/机构/企业合法的名称   </span><br><span class=\"line\">Organizational Unit Name：               //部门名称   </span><br><span class=\"line\">Common Name：                            //通用名，例如：www.itrus.com.cn。此项必须与访问提供SSL服务的服务器时所应用的域名完全匹配。   </span><br><span class=\"line\">Email Address：                          //邮件地址，不必输入，直接回车跳过   </span><br><span class=\"line\"><span class=\"string\">\"extra\"</span>attributes                        //以下信息不必输入，回车跳过直到命令执行完毕。</span><br></pre></td></tr></table></figure></li><li><p>将生成的certreq.csr文件提交到证书申请机构，等待CA证书签发，服务器证书密钥对必须配对使用，私钥丢失会导致证书不可用。</p></li><li><p>将签发的两张中级CA证书内容保存到<code>conf/ssl.crt/intermediatebundle.crt</code>文件中，并将服务器证书内容保存到<code>ssl.crt/server.crt</code>文件中。</p></li><li><p>在httpd.conf中增加以下内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Listen 443</span><br><span class=\"line\">NameVirtualHost *:443</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tDocumentRoot <span class=\"string\">\"/data/web/www\"</span></span><br><span class=\"line\">\tServerName aaa.com:443</span><br><span class=\"line\">\tErrorLog <span class=\"string\">\"logs/error.log\"</span></span><br><span class=\"line\">\tCustomLog <span class=\"string\">\"logs/access.log\"</span> combined</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tSSLEngine on</span><br><span class=\"line\">\t\tSSLCertificateFile /usr/<span class=\"built_in\">local</span>/apache/conf/ssl.crt/server.crt</span><br><span class=\"line\">\t\tSSLCertificateKeyFile /usr/<span class=\"built_in\">local</span>/apache/conf/ssl.key/server.key</span><br><span class=\"line\">\t\tSSLCertificateChainFile /usr/<span class=\"built_in\">local</span>/apache/conf/ssl.crt/intermediatebundle.crt</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->"},{"title":"Apache访问控制(2)及php相关配置","author":"Evobot","abbrlink":"5d3ade62","date":"2018-06-01T16:01:28.000Z","image":null,"_content":"\n\n\n本文主要介绍如何限制指定目录不解析php文件、以及如何限制user_agent，并且介绍了php相关的配置。\n\n<!--more-->\n\n---\n\n# 访问控制\n\n## 禁止php解析\n\n- 站点中可能会有上传的功能，如图片上传，如果不加以限制，那么可能被上传php文件，导致能够被解析，被上传恶意文件引起安全风险；\n\n- 针对上面的问题，可以限制上传目录的php解析权限，让这些目录无法解析php文件，同时也可以对上传的php文件进行控制，deny上传php格式的文件，返回403错误，配置虚拟主机配置文件如下：\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.cn\"\n      ServerName xtears.cn\n      ServerAlias www.abc.com www.123.com\n      <Directory /data/wwwroot/xtears.cn/upload>\n          php_admin_flag engine off\n          <FilesMatch (.*)\\.php(.*)>\n              Order allow,deny\n              Deny from all\n          </FilesMatch>\n      </Directory>\n      ErrorLog \"logs/xtears.cn-error_log\"\n      CustomLog \"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\" common\n  </VirtualHost>\n  ```\n\n- 这里主要的核心配置为`php_admin_flag engine off`，至于`FilesMatch`项的配置也可以不配置，但是不配置的情况下，上传的php能够查看其源代码。\n\n- 更新配置文件后，网站根目录中创建upload目录，并放入一个php文件，使用curl访问查看配置生效情况：\n\n  ```bash\n  $ curl -x118.24.153.130:80 xtears.cn/upload/upload.php -I\n  HTTP/1.1 403 Forbidden\n  Date: Fri, 01 Jun 2018 16:23:27 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  Content-Type: text/html; charset=iso-8859-1\n  ```\n\n  ```bash\n  //去掉FilesMatch配置\n  $ curl -x118.24.153.130:80 xtears.cn/upload/upload.php\n  <?php\n  echo \"12312\"\n  ?>\n  ```\n\n  - 可以看到直接输出了php文件的源代码，文件并没有被解析，如果在浏览器中访问，则会下载php文件，同样不会被解析。\n\n## 限制user_agent\n\n- user_agent可以理解为浏览器标识，有时候网站可能会受到CC攻击，即利用大量肉鸡同时对网站发起访问，从未导致网站瘫痪；\n\n- 而限制user_agent解决这个问题，是因为大量的肉鸡访问，其user_agent都是一样的，并且在短时间内同时有大量的访问，对于这种情况，就需要限制user_agent，减轻服务器压力，对其返回403请求；\n\n- 虚拟主机配置如下：\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.cn\"\n      ServerName xtears.cn\n      ServerAlias www.abc.com www.123.com\n      <IfModule mod_rewrite.c>\n          RewriteEngine on\n          RewriteCond %{HTTP_USER_AGENT} .*curl.* [NC,OR]\n          RewriteCond %{HTTP_USER_AGENT} .*baidu.com.* [NC]\n          RewriteRule  .*  -  [F]\n      </IfModule>\n      ErrorLog \"logs/xtears.cn-error_log\"\n      CustomLog \"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\" common\n  </VirtualHost>\n  \n  ```\n\n- 上面的配置中使用了rewrite模块，定义了条件`%{HTTP_USER_AGENT}`,匹配`curl`和`baidu.com`的user_agent，NC表示忽略大小写，OR表示两个条件的关系为或关系，如果没有OR，则表示条件与，`RewriteRule`中的`[F]`则表示forbidden；\n\n- 更新配置文件后，使用`curl`的`-A`选项指定user_agent：\n\n  ```bash\n  $ curl -x118.24.153.130:80 xtears.cn/admin.php -I            \n  HTTP/1.1 403 Forbidden\n  Date: Fri, 01 Jun 2018 17:01:20 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  Content-Type: text/html; charset=iso-8859-1\n  //匹配到user_agent为curl，返回403状态码。\n  \n  $ curl -A \"EVOBOT.CN\" -x118.24.153.130:80 xtears.cn/admin.php -I\n  HTTP/1.1 200 OK\n  Date: Fri, 01 Jun 2018 17:03:56 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  X-Powered-By: PHP/5.6.32\n  Content-Type: text/html; charset=UTF-8\n  //使用-A指定其他的user_agent，则能正常访问\n  \n  ```\n\n- 查看日志如下：\n\n  ```bash\n  118.113.205.248 - - [02/Jun/2018:01:13:10 +0800] \"HEAD http://xtears.cn/admin.php HTTP/1.1\" 403 - \"-\" \"curl/7.47.0\"\n  118.113.205.248 - - [02/Jun/2018:01:13:12 +0800] \"HEAD http://xtears.cn/admin.php HTTP/1.1\" 403 - \"-\" \"curl/7.47.0\"\n  \n  122.228.199.114 - - [02/Jun/2018:01:14:29 +0800] \"HEAD http://xtears.cn/admin.php HTTP/1.1\" 200 - \"-\" \"EVOBOT.CN\"\n  222.186.129.155 - - [02/Jun/2018:01:14:29 +0800] \"HEAD http://xtears.cn/admin.php HTTP/1.1\" 200 - \"-\" \"EVOBOT.CN\"\n  ```\n\n# PHP相关配置\n\n## php配置文件\n\n- 查看PHP配置文件位置：\n\n  ```bash\n  /usr/local/php/bin/php -i | grep -i \"loaded configuration file\"\n  \n  ```\n\n  - 由于这种方式查看的配置文件与网站所使用的并不一定是同一个php配置文件，所以一般使用访问phpinfo()的页面来查看php配置文件所在；\n\n  ![phpinfo](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/phpinfo.png)\n\n- 这里看到配置文件路径，但并未加载配置文件，从php源码包内复制配置文件到查看到的配置文件目录下：\n\n  ```bash\n  # cp /usr/local/src/php-5.6.32/php.ini-development /usr/local/php/etc/php.ini\n  ```\n\n- 重新更新apache配置后，刷新phpinfo页面即可看到加载的配置文件；\n\n## php.ini配置\n\n### 禁用函数\n\n- 常配置的是关闭函数`disable_functions`，以下为可以禁止的较危险的函数：\n\n  ```bash\n  eval, assert, popen, passthru, escapeshellarg, escapeshellcmd, passthru, exec, system, chroot, scandir, chgrp, chown,shell_exec, proc_get_status, ini_alter, ini_restore, dl, pfsockopen, openlog, svslog, readlink, symlink, leak, popepassthru, stream_socket_server, popen, proc_open, proc_close, phpinfo\n  \n  ```\n\n- 这里将phpinfo函数也禁用，防止泄露服务器相关信息，在`php.ini`中将上面的函数写到`disable_functions`后面：\n\n  ```bash\n  disable_functions = eval, assert, popen, passthru, escapeshellarg, escapeshellcmd, passthru, exec, system, chroot, scandir, chgrp, chown,shell_exec, proc_get_status, ini_alter, ini_restore, dl, pfsockopen, openlog, svslog, readlink, symlink, leak, popepassthru, stream_socket_server, popen, proc_open, proc_close, phpinfo\n  \n  ```\n\n- 禁用之后，访问到含有被禁用函数的页面时，会显示错误信息，如:\n\n  > **Warning**: phpinfo() has been disabled for security reasons in **/data/wwwroot/xtears.cn/index.php** on line **2** \n\n\n### 时区设置\n\n- 在php.ini中将`date.timezone`定义为相应位置，可以为`Asia/Shanghai`或`Asia/Chongqing`：\n\n  ```bash\n  [Date]\n  ; Defines the default timezone used by the date functions\n  ; http://php.net/date.timezone\n  date.timezone = Asia/Shanghai\n  ```\n\n### 错误信息及日志\n\n- 在上面禁用函数配置中，当访问到有被禁用的函数页面中，会将错误信息打印在浏览器中，这样也是不安全的，在php.ini中将错误信息关闭：\n\n  ```bash\n  display_errors = Off\n  ```\n\n- 关闭了错误信息后，再次访问被禁用函数的页面，会显示空白，这样又不利于我们定位问题，所以同时还需要打开错误日志：\n\n  ```bash\n  log_errors = On\n  ```\n\n- 打开错误日志开关后，定义错误日志路径`error_log`：\n\n  ```bash\n  ; Log errors to specified file. PHP's default behavior is to leave this value\n  ; empty.\n  ; http://php.net/error-log\n  ; Example:\n  error_log = /tmp/php_errors.log\t# 取消注释，定义日志路径\n  ; Log errors to syslog (Event Log on Windows).\n  ;error_log = syslog\n  \n  ```\n\n- 接着定义日志级别`error_reporting`：\n\n  ```bash\n  ; Common Values:\n  ;   E_ALL (Show all errors, warnings and notices including coding standards.)\n  ;   E_ALL & ~E_NOTICE  (Show all errors, except for notices)\n  ;   E_ALL & ~E_NOTICE & ~E_STRICT  (Show all errors, except for notices and coding standards warnings.)\n  ;   E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR  (Show only errors)\n  ; Default Value: E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED\n  ; Development Value: E_ALL\n  ; Production Value: E_ALL & ~E_DEPRECATED & ~E_STRICT\n  ; http://php.net/error-reporting\n  error_reporting = E_ALL\t# 默认为E_ALL\n  \n  ```\n\n  > 一般生产环境使用`E_ALL & ~E_NOTICE`日志级别，排除NOTICE日志，记录所有错误。`E_ALL`则记录所有日志。\n\n- 重新加载配置文件后，查看`/tmp`下是否生成日志：\n\n  ```bash\n  [root@evobot ~]# ls -l /tmp/php_errors.log \n  -rw-r--r-- 1 daemon daemon 1035936 6月   2 17:02 /tmp/php_errors.log\n  ```\n\n  > 这个php日志的属主和属组都是httpd的启动用户。\n\n### 目录隔离\n\n- 为了防止一个网站被攻击后影响其他网站，所以需要对站点配置`open_basedir`，让网站被攻击后只能限定在站点内，不能到其他目录去；\n\n- 打开php.ini配置文件，配置`open_basedir`如下：\n\n  ```bash\n  open_basedir = /data/wwwroot/xtears.cn:/tmp\n  \n  ```\n\n- 经过上面的配置，那么用户访问就只能在xtears.cn目录内和/tmp目录内，/tmp是apache默认临时文件目录，如果不加的话会导致上传文件等发生错误。如果将目录改成其他错误路径，则会报500状态码：\n\n  ```bash\n  [root@evobot ~]# curl -A 'EVOBOT' -x118.24.153.130:80 xtears.cn/index.php -I\n  HTTP/1.0 500 Internal Server Error\n  Date: Sat, 02 Jun 2018 09:21:10 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  X-Powered-By: PHP/5.6.32\n  Connection: close\n  Content-Type: text/html; charset=UTF-8\n  ```\n\n- **在php.ini做目录隔离只能对一个站点有效，如果有多个站点，那么会导致别的站点也无法正常访问，所以应该在Apache的虚拟主机配置文件中定义basedir，在虚拟主机中增加`php_admin_value`配置**：\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.cn\"\n      ServerName xtears.cn\n      ServerAlias www.abc.com www.123.com\n      php_admin_value open_basedir \"/data/wwwroot/xtears.cn:/tmp/\"\n      <IfModule mod_rewrite.c>\n          RewriteEngine on\n          RewriteCond %{HTTP_USER_AGENT} .*curl.* [NC,OR]\n          RewriteCond %{HTTP_USER_AGENT} .*baidu.com.* [NC]\n          RewriteRule  .*  -  [F]\n      </IfModule>\n      ErrorLog \"logs/xtears.cn-error_log\"\n      CustomLog \"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\" combined\n  </VirtualHost>\n  \n  ```\n\n- 上面的`php_admin_value open_basedir`配置就只对当前的虚拟主机生效，`php_admin_value`不仅可以定义`open_basedir`针对其他的如错误日志等等也可以进行配置；\n\n# Apache压缩功能\n\n- 由于服务器带宽资源非常昂贵，所以能够对html、css、js等静态元素进行压缩，能够节约大量资源，apache的压缩功能需要模块`deflate`支持，使用`apachectl -l `查看是否有`mod_deflate`:\n\n  ```bash\n  # /usr/local/apache2.4/bin/apachectl -l | grep deflate\n  # ls /usr/local/apache2.4/modules/ | grep deflate\n  mod_deflate.so\n  \n  ```\n\n  > 如果上面的命令都没找到模块的话，则表示apache不支持压缩，需要重新编译或以扩展形式安装，重新编译需要使用选项`--enable-deflate=shared`\n\n- 找到了deflate模块，则在httpd.conf中增加或打开`LoadModule deflate_module modules/mod_deflate.so`注释；\n\n- 然后继续增加如下配置：\n\n  ```bash\n  <IfModule deflate_module>\n  DeflateCompressionLevel 5\n  AddOutputFilterByType DEFLATE text/html text/plain text/xml\n  AddOutputFilter DEFLATE js css\n  </IfModule>\n  ```\n\n  > 其中DeflateCompressionLevel指压缩等级，从1-9，9为最高等级。\n\n# Apache自定义header\n\n- 自定义header需要模块`headers_module`，使用`/usr/local/apache2.4/bin/apachectl -M | grep header`查看是否加载了模块；\n\n- 然后在`httpd.conf`中打开模块注释，并添加一下内容：\n\n  ```bash\n  <IfModule headers_module>\n      RequestHeader unset Proxy early\n      Header add MyHeader \"xtears header\"\n  </IfModule>\n  \n  ```\n\n- 使用curl查看header是否生效：\n\n  ```bash\n  $ curl -A 'evobot' -x118.24.153.130:80 xtears.cn -I\n  HTTP/1.1 200 OK\n  Date: Sat, 02 Jun 2018 10:11:47 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  X-Powered-By: PHP/5.6.32\n  MyHeader: xtears header\n  Content-Type: text/html; charset=UTF-8\n  \n  ```\n\n# Apache的keepalive\n\n- 在APACHE的httpd.conf中，KeepAlive是指保持连接活跃，类似于Mysql的永久连接。如果将KeepAlive设置为On，那么来自同一客户端的请求就不需要再一次连接，避免每次请求都要新建一个连接而加重服务器的负担。\n\n-  KeepAlive的连接活跃时间是受KeepAliveTimeOut限制的。如果第二次请求和第一次请求之间超过KeepAliveTimeOut的时间的话，第一次连接就会中断，再新建第二个连接。所以一般情况下，图片较多的网站应该把KeepAlive设为On。\n\n- 如果KeepAliveTimeOut设置的时间过短，例如设置为1秒，那么APACHE就会频繁的建立新连接，当然会耗费不少的资源；反之，如果KeepAliveTimeOut设置的时间过长，例如设置为300秒，那么APACHE中会有很多无用的连接会占用服务器的资源，\n\n- 所以，到底要把KeepAliveTimeOut设置为多少，要看网站的流量、服务器的配置而定。其实，这和MySql的机制有点相似，KeepAlive相当于mysql_connect或mysql_pconnect，KeepAliveTimeOut相当于wait_timeout。\n\n- httpd.conf中，增加配置如下：\n\n  ```bash\n  KeepAlive On\n  KeepAliveTimeOut 3\n  \n  ```\n\n---\n\n","source":"_posts/Apache限制相关配置及php相关配置.md","raw":"---\ntitle: Apache访问控制(2)及php相关配置\nauthor: Evobot\nabbrlink: 5d3ade62\ndate: 2018-06-02 00:01:28\ncategories: LAMP\ntags:\n  - Linux\n  - Centos\n  - PHP\n  - Apache\nimage:\n---\n\n\n\n本文主要介绍如何限制指定目录不解析php文件、以及如何限制user_agent，并且介绍了php相关的配置。\n\n<!--more-->\n\n---\n\n# 访问控制\n\n## 禁止php解析\n\n- 站点中可能会有上传的功能，如图片上传，如果不加以限制，那么可能被上传php文件，导致能够被解析，被上传恶意文件引起安全风险；\n\n- 针对上面的问题，可以限制上传目录的php解析权限，让这些目录无法解析php文件，同时也可以对上传的php文件进行控制，deny上传php格式的文件，返回403错误，配置虚拟主机配置文件如下：\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.cn\"\n      ServerName xtears.cn\n      ServerAlias www.abc.com www.123.com\n      <Directory /data/wwwroot/xtears.cn/upload>\n          php_admin_flag engine off\n          <FilesMatch (.*)\\.php(.*)>\n              Order allow,deny\n              Deny from all\n          </FilesMatch>\n      </Directory>\n      ErrorLog \"logs/xtears.cn-error_log\"\n      CustomLog \"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\" common\n  </VirtualHost>\n  ```\n\n- 这里主要的核心配置为`php_admin_flag engine off`，至于`FilesMatch`项的配置也可以不配置，但是不配置的情况下，上传的php能够查看其源代码。\n\n- 更新配置文件后，网站根目录中创建upload目录，并放入一个php文件，使用curl访问查看配置生效情况：\n\n  ```bash\n  $ curl -x118.24.153.130:80 xtears.cn/upload/upload.php -I\n  HTTP/1.1 403 Forbidden\n  Date: Fri, 01 Jun 2018 16:23:27 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  Content-Type: text/html; charset=iso-8859-1\n  ```\n\n  ```bash\n  //去掉FilesMatch配置\n  $ curl -x118.24.153.130:80 xtears.cn/upload/upload.php\n  <?php\n  echo \"12312\"\n  ?>\n  ```\n\n  - 可以看到直接输出了php文件的源代码，文件并没有被解析，如果在浏览器中访问，则会下载php文件，同样不会被解析。\n\n## 限制user_agent\n\n- user_agent可以理解为浏览器标识，有时候网站可能会受到CC攻击，即利用大量肉鸡同时对网站发起访问，从未导致网站瘫痪；\n\n- 而限制user_agent解决这个问题，是因为大量的肉鸡访问，其user_agent都是一样的，并且在短时间内同时有大量的访问，对于这种情况，就需要限制user_agent，减轻服务器压力，对其返回403请求；\n\n- 虚拟主机配置如下：\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.cn\"\n      ServerName xtears.cn\n      ServerAlias www.abc.com www.123.com\n      <IfModule mod_rewrite.c>\n          RewriteEngine on\n          RewriteCond %{HTTP_USER_AGENT} .*curl.* [NC,OR]\n          RewriteCond %{HTTP_USER_AGENT} .*baidu.com.* [NC]\n          RewriteRule  .*  -  [F]\n      </IfModule>\n      ErrorLog \"logs/xtears.cn-error_log\"\n      CustomLog \"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\" common\n  </VirtualHost>\n  \n  ```\n\n- 上面的配置中使用了rewrite模块，定义了条件`%{HTTP_USER_AGENT}`,匹配`curl`和`baidu.com`的user_agent，NC表示忽略大小写，OR表示两个条件的关系为或关系，如果没有OR，则表示条件与，`RewriteRule`中的`[F]`则表示forbidden；\n\n- 更新配置文件后，使用`curl`的`-A`选项指定user_agent：\n\n  ```bash\n  $ curl -x118.24.153.130:80 xtears.cn/admin.php -I            \n  HTTP/1.1 403 Forbidden\n  Date: Fri, 01 Jun 2018 17:01:20 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  Content-Type: text/html; charset=iso-8859-1\n  //匹配到user_agent为curl，返回403状态码。\n  \n  $ curl -A \"EVOBOT.CN\" -x118.24.153.130:80 xtears.cn/admin.php -I\n  HTTP/1.1 200 OK\n  Date: Fri, 01 Jun 2018 17:03:56 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  X-Powered-By: PHP/5.6.32\n  Content-Type: text/html; charset=UTF-8\n  //使用-A指定其他的user_agent，则能正常访问\n  \n  ```\n\n- 查看日志如下：\n\n  ```bash\n  118.113.205.248 - - [02/Jun/2018:01:13:10 +0800] \"HEAD http://xtears.cn/admin.php HTTP/1.1\" 403 - \"-\" \"curl/7.47.0\"\n  118.113.205.248 - - [02/Jun/2018:01:13:12 +0800] \"HEAD http://xtears.cn/admin.php HTTP/1.1\" 403 - \"-\" \"curl/7.47.0\"\n  \n  122.228.199.114 - - [02/Jun/2018:01:14:29 +0800] \"HEAD http://xtears.cn/admin.php HTTP/1.1\" 200 - \"-\" \"EVOBOT.CN\"\n  222.186.129.155 - - [02/Jun/2018:01:14:29 +0800] \"HEAD http://xtears.cn/admin.php HTTP/1.1\" 200 - \"-\" \"EVOBOT.CN\"\n  ```\n\n# PHP相关配置\n\n## php配置文件\n\n- 查看PHP配置文件位置：\n\n  ```bash\n  /usr/local/php/bin/php -i | grep -i \"loaded configuration file\"\n  \n  ```\n\n  - 由于这种方式查看的配置文件与网站所使用的并不一定是同一个php配置文件，所以一般使用访问phpinfo()的页面来查看php配置文件所在；\n\n  ![phpinfo](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/phpinfo.png)\n\n- 这里看到配置文件路径，但并未加载配置文件，从php源码包内复制配置文件到查看到的配置文件目录下：\n\n  ```bash\n  # cp /usr/local/src/php-5.6.32/php.ini-development /usr/local/php/etc/php.ini\n  ```\n\n- 重新更新apache配置后，刷新phpinfo页面即可看到加载的配置文件；\n\n## php.ini配置\n\n### 禁用函数\n\n- 常配置的是关闭函数`disable_functions`，以下为可以禁止的较危险的函数：\n\n  ```bash\n  eval, assert, popen, passthru, escapeshellarg, escapeshellcmd, passthru, exec, system, chroot, scandir, chgrp, chown,shell_exec, proc_get_status, ini_alter, ini_restore, dl, pfsockopen, openlog, svslog, readlink, symlink, leak, popepassthru, stream_socket_server, popen, proc_open, proc_close, phpinfo\n  \n  ```\n\n- 这里将phpinfo函数也禁用，防止泄露服务器相关信息，在`php.ini`中将上面的函数写到`disable_functions`后面：\n\n  ```bash\n  disable_functions = eval, assert, popen, passthru, escapeshellarg, escapeshellcmd, passthru, exec, system, chroot, scandir, chgrp, chown,shell_exec, proc_get_status, ini_alter, ini_restore, dl, pfsockopen, openlog, svslog, readlink, symlink, leak, popepassthru, stream_socket_server, popen, proc_open, proc_close, phpinfo\n  \n  ```\n\n- 禁用之后，访问到含有被禁用函数的页面时，会显示错误信息，如:\n\n  > **Warning**: phpinfo() has been disabled for security reasons in **/data/wwwroot/xtears.cn/index.php** on line **2** \n\n\n### 时区设置\n\n- 在php.ini中将`date.timezone`定义为相应位置，可以为`Asia/Shanghai`或`Asia/Chongqing`：\n\n  ```bash\n  [Date]\n  ; Defines the default timezone used by the date functions\n  ; http://php.net/date.timezone\n  date.timezone = Asia/Shanghai\n  ```\n\n### 错误信息及日志\n\n- 在上面禁用函数配置中，当访问到有被禁用的函数页面中，会将错误信息打印在浏览器中，这样也是不安全的，在php.ini中将错误信息关闭：\n\n  ```bash\n  display_errors = Off\n  ```\n\n- 关闭了错误信息后，再次访问被禁用函数的页面，会显示空白，这样又不利于我们定位问题，所以同时还需要打开错误日志：\n\n  ```bash\n  log_errors = On\n  ```\n\n- 打开错误日志开关后，定义错误日志路径`error_log`：\n\n  ```bash\n  ; Log errors to specified file. PHP's default behavior is to leave this value\n  ; empty.\n  ; http://php.net/error-log\n  ; Example:\n  error_log = /tmp/php_errors.log\t# 取消注释，定义日志路径\n  ; Log errors to syslog (Event Log on Windows).\n  ;error_log = syslog\n  \n  ```\n\n- 接着定义日志级别`error_reporting`：\n\n  ```bash\n  ; Common Values:\n  ;   E_ALL (Show all errors, warnings and notices including coding standards.)\n  ;   E_ALL & ~E_NOTICE  (Show all errors, except for notices)\n  ;   E_ALL & ~E_NOTICE & ~E_STRICT  (Show all errors, except for notices and coding standards warnings.)\n  ;   E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR  (Show only errors)\n  ; Default Value: E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED\n  ; Development Value: E_ALL\n  ; Production Value: E_ALL & ~E_DEPRECATED & ~E_STRICT\n  ; http://php.net/error-reporting\n  error_reporting = E_ALL\t# 默认为E_ALL\n  \n  ```\n\n  > 一般生产环境使用`E_ALL & ~E_NOTICE`日志级别，排除NOTICE日志，记录所有错误。`E_ALL`则记录所有日志。\n\n- 重新加载配置文件后，查看`/tmp`下是否生成日志：\n\n  ```bash\n  [root@evobot ~]# ls -l /tmp/php_errors.log \n  -rw-r--r-- 1 daemon daemon 1035936 6月   2 17:02 /tmp/php_errors.log\n  ```\n\n  > 这个php日志的属主和属组都是httpd的启动用户。\n\n### 目录隔离\n\n- 为了防止一个网站被攻击后影响其他网站，所以需要对站点配置`open_basedir`，让网站被攻击后只能限定在站点内，不能到其他目录去；\n\n- 打开php.ini配置文件，配置`open_basedir`如下：\n\n  ```bash\n  open_basedir = /data/wwwroot/xtears.cn:/tmp\n  \n  ```\n\n- 经过上面的配置，那么用户访问就只能在xtears.cn目录内和/tmp目录内，/tmp是apache默认临时文件目录，如果不加的话会导致上传文件等发生错误。如果将目录改成其他错误路径，则会报500状态码：\n\n  ```bash\n  [root@evobot ~]# curl -A 'EVOBOT' -x118.24.153.130:80 xtears.cn/index.php -I\n  HTTP/1.0 500 Internal Server Error\n  Date: Sat, 02 Jun 2018 09:21:10 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  X-Powered-By: PHP/5.6.32\n  Connection: close\n  Content-Type: text/html; charset=UTF-8\n  ```\n\n- **在php.ini做目录隔离只能对一个站点有效，如果有多个站点，那么会导致别的站点也无法正常访问，所以应该在Apache的虚拟主机配置文件中定义basedir，在虚拟主机中增加`php_admin_value`配置**：\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.cn\"\n      ServerName xtears.cn\n      ServerAlias www.abc.com www.123.com\n      php_admin_value open_basedir \"/data/wwwroot/xtears.cn:/tmp/\"\n      <IfModule mod_rewrite.c>\n          RewriteEngine on\n          RewriteCond %{HTTP_USER_AGENT} .*curl.* [NC,OR]\n          RewriteCond %{HTTP_USER_AGENT} .*baidu.com.* [NC]\n          RewriteRule  .*  -  [F]\n      </IfModule>\n      ErrorLog \"logs/xtears.cn-error_log\"\n      CustomLog \"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\" combined\n  </VirtualHost>\n  \n  ```\n\n- 上面的`php_admin_value open_basedir`配置就只对当前的虚拟主机生效，`php_admin_value`不仅可以定义`open_basedir`针对其他的如错误日志等等也可以进行配置；\n\n# Apache压缩功能\n\n- 由于服务器带宽资源非常昂贵，所以能够对html、css、js等静态元素进行压缩，能够节约大量资源，apache的压缩功能需要模块`deflate`支持，使用`apachectl -l `查看是否有`mod_deflate`:\n\n  ```bash\n  # /usr/local/apache2.4/bin/apachectl -l | grep deflate\n  # ls /usr/local/apache2.4/modules/ | grep deflate\n  mod_deflate.so\n  \n  ```\n\n  > 如果上面的命令都没找到模块的话，则表示apache不支持压缩，需要重新编译或以扩展形式安装，重新编译需要使用选项`--enable-deflate=shared`\n\n- 找到了deflate模块，则在httpd.conf中增加或打开`LoadModule deflate_module modules/mod_deflate.so`注释；\n\n- 然后继续增加如下配置：\n\n  ```bash\n  <IfModule deflate_module>\n  DeflateCompressionLevel 5\n  AddOutputFilterByType DEFLATE text/html text/plain text/xml\n  AddOutputFilter DEFLATE js css\n  </IfModule>\n  ```\n\n  > 其中DeflateCompressionLevel指压缩等级，从1-9，9为最高等级。\n\n# Apache自定义header\n\n- 自定义header需要模块`headers_module`，使用`/usr/local/apache2.4/bin/apachectl -M | grep header`查看是否加载了模块；\n\n- 然后在`httpd.conf`中打开模块注释，并添加一下内容：\n\n  ```bash\n  <IfModule headers_module>\n      RequestHeader unset Proxy early\n      Header add MyHeader \"xtears header\"\n  </IfModule>\n  \n  ```\n\n- 使用curl查看header是否生效：\n\n  ```bash\n  $ curl -A 'evobot' -x118.24.153.130:80 xtears.cn -I\n  HTTP/1.1 200 OK\n  Date: Sat, 02 Jun 2018 10:11:47 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  X-Powered-By: PHP/5.6.32\n  MyHeader: xtears header\n  Content-Type: text/html; charset=UTF-8\n  \n  ```\n\n# Apache的keepalive\n\n- 在APACHE的httpd.conf中，KeepAlive是指保持连接活跃，类似于Mysql的永久连接。如果将KeepAlive设置为On，那么来自同一客户端的请求就不需要再一次连接，避免每次请求都要新建一个连接而加重服务器的负担。\n\n-  KeepAlive的连接活跃时间是受KeepAliveTimeOut限制的。如果第二次请求和第一次请求之间超过KeepAliveTimeOut的时间的话，第一次连接就会中断，再新建第二个连接。所以一般情况下，图片较多的网站应该把KeepAlive设为On。\n\n- 如果KeepAliveTimeOut设置的时间过短，例如设置为1秒，那么APACHE就会频繁的建立新连接，当然会耗费不少的资源；反之，如果KeepAliveTimeOut设置的时间过长，例如设置为300秒，那么APACHE中会有很多无用的连接会占用服务器的资源，\n\n- 所以，到底要把KeepAliveTimeOut设置为多少，要看网站的流量、服务器的配置而定。其实，这和MySql的机制有点相似，KeepAlive相当于mysql_connect或mysql_pconnect，KeepAliveTimeOut相当于wait_timeout。\n\n- httpd.conf中，增加配置如下：\n\n  ```bash\n  KeepAlive On\n  KeepAliveTimeOut 3\n  \n  ```\n\n---\n\n","slug":"Apache限制相关配置及php相关配置","published":1,"updated":"2018-06-05T06:56:10.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gaz6v0009u1jxm0mx05oe","content":"<!-- build time:Tue Jun 05 2018 16:57:37 GMT+0800 (CST) --><p>本文主要介绍如何限制指定目录不解析php文件、以及如何限制user_agent，并且介绍了php相关的配置。</p><a id=\"more\"></a><hr><h1 id=\"访问控制\"><a href=\"#访问控制\" class=\"headerlink\" title=\"访问控制\"></a>访问控制</h1><h2 id=\"禁止php解析\"><a href=\"#禁止php解析\" class=\"headerlink\" title=\"禁止php解析\"></a>禁止php解析</h2><ul><li><p>站点中可能会有上传的功能，如图片上传，如果不加以限制，那么可能被上传php文件，导致能够被解析，被上传恶意文件引起安全风险；</p></li><li><p>针对上面的问题，可以限制上传目录的php解析权限，让这些目录无法解析php文件，同时也可以对上传的php文件进行控制，deny上传php格式的文件，返回403错误，配置虚拟主机配置文件如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.cn\"</span></span><br><span class=\"line\">    ServerName xtears.cn</span><br><span class=\"line\">    ServerAlias www.abc.com www.123.com</span><br><span class=\"line\">    &lt;Directory /data/wwwroot/xtears.cn/upload&gt;</span><br><span class=\"line\">        php_admin_flag engine off</span><br><span class=\"line\">        &lt;FilesMatch (.*)\\.php(.*)&gt;</span><br><span class=\"line\">            Order allow,deny</span><br><span class=\"line\">            Deny from all</span><br><span class=\"line\">        &lt;/FilesMatch&gt;</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.cn-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\"</span> common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>这里主要的核心配置为<code>php_admin_flag engine off</code>，至于<code>FilesMatch</code>项的配置也可以不配置，但是不配置的情况下，上传的php能够查看其源代码。</p></li><li><p>更新配置文件后，网站根目录中创建upload目录，并放入一个php文件，使用curl访问查看配置生效情况：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80 xtears.cn/upload/upload.php -I</span><br><span class=\"line\">HTTP/1.1 403 Forbidden</span><br><span class=\"line\">Date: Fri, 01 Jun 2018 16:23:27 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//去掉FilesMatch配置</span><br><span class=\"line\">$ curl -x118.24.153.130:80 xtears.cn/upload/upload.php</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"12312\"</span></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure><ul><li>可以看到直接输出了php文件的源代码，文件并没有被解析，如果在浏览器中访问，则会下载php文件，同样不会被解析。</li></ul></li></ul><h2 id=\"限制user-agent\"><a href=\"#限制user-agent\" class=\"headerlink\" title=\"限制user_agent\"></a>限制user_agent</h2><ul><li><p>user_agent可以理解为浏览器标识，有时候网站可能会受到CC攻击，即利用大量肉鸡同时对网站发起访问，从未导致网站瘫痪；</p></li><li><p>而限制user_agent解决这个问题，是因为大量的肉鸡访问，其user_agent都是一样的，并且在短时间内同时有大量的访问，对于这种情况，就需要限制user_agent，减轻服务器压力，对其返回403请求；</p></li><li><p>虚拟主机配置如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.cn\"</span></span><br><span class=\"line\">    ServerName xtears.cn</span><br><span class=\"line\">    ServerAlias www.abc.com www.123.com</span><br><span class=\"line\">    &lt;IfModule mod_rewrite.c&gt;</span><br><span class=\"line\">        RewriteEngine on</span><br><span class=\"line\">        RewriteCond %&#123;HTTP_USER_AGENT&#125; .*curl.* [NC,OR]</span><br><span class=\"line\">        RewriteCond %&#123;HTTP_USER_AGENT&#125; .*baidu.com.* [NC]</span><br><span class=\"line\">        RewriteRule  .*  -  [F]</span><br><span class=\"line\">    &lt;/IfModule&gt;</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.cn-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\"</span> common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>上面的配置中使用了rewrite模块，定义了条件<code>%{HTTP_USER_AGENT}</code>,匹配<code>curl</code>和<code>baidu.com</code>的user_agent，NC表示忽略大小写，OR表示两个条件的关系为或关系，如果没有OR，则表示条件与，<code>RewriteRule</code>中的<code>[F]</code>则表示forbidden；</p></li><li><p>更新配置文件后，使用<code>curl</code>的<code>-A</code>选项指定user_agent：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80 xtears.cn/admin.php -I            </span><br><span class=\"line\">HTTP/1.1 403 Forbidden</span><br><span class=\"line\">Date: Fri, 01 Jun 2018 17:01:20 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br><span class=\"line\">//匹配到user_agent为curl，返回403状态码。</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl -A <span class=\"string\">\"EVOBOT.CN\"</span> -x118.24.153.130:80 xtears.cn/admin.php -I</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Date: Fri, 01 Jun 2018 17:03:56 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">X-Powered-By: PHP/5.6.32</span><br><span class=\"line\">Content-Type: text/html; charset=UTF-8</span><br><span class=\"line\">//使用-A指定其他的user_agent，则能正常访问</span><br></pre></td></tr></table></figure></li><li><p>查看日志如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">118.113.205.248 - - [02/Jun/2018:01:13:10 +0800] <span class=\"string\">\"HEAD http://xtears.cn/admin.php HTTP/1.1\"</span> 403 - <span class=\"string\">\"-\"</span> <span class=\"string\">\"curl/7.47.0\"</span></span><br><span class=\"line\">118.113.205.248 - - [02/Jun/2018:01:13:12 +0800] <span class=\"string\">\"HEAD http://xtears.cn/admin.php HTTP/1.1\"</span> 403 - <span class=\"string\">\"-\"</span> <span class=\"string\">\"curl/7.47.0\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">122.228.199.114 - - [02/Jun/2018:01:14:29 +0800] <span class=\"string\">\"HEAD http://xtears.cn/admin.php HTTP/1.1\"</span> 200 - <span class=\"string\">\"-\"</span> <span class=\"string\">\"EVOBOT.CN\"</span></span><br><span class=\"line\">222.186.129.155 - - [02/Jun/2018:01:14:29 +0800] <span class=\"string\">\"HEAD http://xtears.cn/admin.php HTTP/1.1\"</span> 200 - <span class=\"string\">\"-\"</span> <span class=\"string\">\"EVOBOT.CN\"</span></span><br></pre></td></tr></table></figure></li></ul><h1 id=\"PHP相关配置\"><a href=\"#PHP相关配置\" class=\"headerlink\" title=\"PHP相关配置\"></a>PHP相关配置</h1><h2 id=\"php配置文件\"><a href=\"#php配置文件\" class=\"headerlink\" title=\"php配置文件\"></a>php配置文件</h2><ul><li><p>查看PHP配置文件位置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/<span class=\"built_in\">local</span>/php/bin/php -i | grep -i <span class=\"string\">\"loaded configuration file\"</span></span><br></pre></td></tr></table></figure><ul><li>由于这种方式查看的配置文件与网站所使用的并不一定是同一个php配置文件，所以一般使用访问phpinfo()的页面来查看php配置文件所在；</li></ul><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/phpinfo.png\" alt=\"phpinfo\"></p></li><li><p>这里看到配置文件路径，但并未加载配置文件，从php源码包内复制配置文件到查看到的配置文件目录下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cp /usr/local/src/php-5.6.32/php.ini-development /usr/local/php/etc/php.ini</span></span><br></pre></td></tr></table></figure></li><li><p>重新更新apache配置后，刷新phpinfo页面即可看到加载的配置文件；</p></li></ul><h2 id=\"php-ini配置\"><a href=\"#php-ini配置\" class=\"headerlink\" title=\"php.ini配置\"></a>php.ini配置</h2><h3 id=\"禁用函数\"><a href=\"#禁用函数\" class=\"headerlink\" title=\"禁用函数\"></a>禁用函数</h3><ul><li><p>常配置的是关闭函数<code>disable_functions</code>，以下为可以禁止的较危险的函数：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>, assert, popen, passthru, escapeshellarg, escapeshellcmd, passthru, <span class=\"built_in\">exec</span>, system, chroot, scandir, chgrp, chown,shell_exec, proc_get_status, ini_alter, ini_restore, dl, pfsockopen, openlog, svslog, readlink, symlink, leak, popepassthru, stream_socket_server, popen, proc_open, proc_close, phpinfo</span><br></pre></td></tr></table></figure></li><li><p>这里将phpinfo函数也禁用，防止泄露服务器相关信息，在<code>php.ini</code>中将上面的函数写到<code>disable_functions</code>后面：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disable_functions = <span class=\"built_in\">eval</span>, assert, popen, passthru, escapeshellarg, escapeshellcmd, passthru, <span class=\"built_in\">exec</span>, system, chroot, scandir, chgrp, chown,shell_exec, proc_get_status, ini_alter, ini_restore, dl, pfsockopen, openlog, svslog, readlink, symlink, leak, popepassthru, stream_socket_server, popen, proc_open, proc_close, phpinfo</span><br></pre></td></tr></table></figure></li><li><p>禁用之后，访问到含有被禁用函数的页面时，会显示错误信息，如:</p><blockquote><p><strong>Warning</strong>: phpinfo() has been disabled for security reasons in <strong>/data/wwwroot/xtears.cn/index.php</strong> on line <strong>2</strong></p></blockquote></li></ul><h3 id=\"时区设置\"><a href=\"#时区设置\" class=\"headerlink\" title=\"时区设置\"></a>时区设置</h3><ul><li><p>在php.ini中将<code>date.timezone</code>定义为相应位置，可以为<code>Asia/Shanghai</code>或<code>Asia/Chongqing</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Date]</span><br><span class=\"line\">; Defines the default timezone used by the date <span class=\"built_in\">functions</span></span><br><span class=\"line\">; http://php.net/date.timezone</span><br><span class=\"line\">date.timezone = Asia/Shanghai</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"错误信息及日志\"><a href=\"#错误信息及日志\" class=\"headerlink\" title=\"错误信息及日志\"></a>错误信息及日志</h3><ul><li><p>在上面禁用函数配置中，当访问到有被禁用的函数页面中，会将错误信息打印在浏览器中，这样也是不安全的，在php.ini中将错误信息关闭：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display_errors = Off</span><br></pre></td></tr></table></figure></li><li><p>关闭了错误信息后，再次访问被禁用函数的页面，会显示空白，这样又不利于我们定位问题，所以同时还需要打开错误日志：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_errors = On</span><br></pre></td></tr></table></figure></li><li><p>打开错误日志开关后，定义错误日志路径<code>error_log</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; Log errors to specified file. PHP<span class=\"string\">'s default behavior is to leave this value</span></span><br><span class=\"line\"><span class=\"string\">; empty.</span></span><br><span class=\"line\"><span class=\"string\">; http://php.net/error-log</span></span><br><span class=\"line\"><span class=\"string\">; Example:</span></span><br><span class=\"line\"><span class=\"string\">error_log = /tmp/php_errors.log\t# 取消注释，定义日志路径</span></span><br><span class=\"line\"><span class=\"string\">; Log errors to syslog (Event Log on Windows).</span></span><br><span class=\"line\"><span class=\"string\">;error_log = syslog</span></span><br></pre></td></tr></table></figure></li><li><p>接着定义日志级别<code>error_reporting</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; Common Values:</span><br><span class=\"line\">;   E_ALL (Show all errors, warnings and notices including coding standards.)</span><br><span class=\"line\">;   E_ALL &amp; ~E_NOTICE  (Show all errors, except <span class=\"keyword\">for</span> notices)</span><br><span class=\"line\">;   E_ALL &amp; ~E_NOTICE &amp; ~E_STRICT  (Show all errors, except <span class=\"keyword\">for</span> notices and coding standards warnings.)</span><br><span class=\"line\">;   E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR  (Show only errors)</span><br><span class=\"line\">; Default Value: E_ALL &amp; ~E_NOTICE &amp; ~E_STRICT &amp; ~E_DEPRECATED</span><br><span class=\"line\">; Development Value: E_ALL</span><br><span class=\"line\">; Production Value: E_ALL &amp; ~E_DEPRECATED &amp; ~E_STRICT</span><br><span class=\"line\">; http://php.net/error-reporting</span><br><span class=\"line\">error_reporting = E_ALL\t<span class=\"comment\"># 默认为E_ALL</span></span><br></pre></td></tr></table></figure><blockquote><p>一般生产环境使用<code>E_ALL &amp; ~E_NOTICE</code>日志级别，排除NOTICE日志，记录所有错误。<code>E_ALL</code>则记录所有日志。</p></blockquote></li><li><p>重新加载配置文件后，查看<code>/tmp</code>下是否生成日志：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -l /tmp/php_errors.log </span></span><br><span class=\"line\">-rw-r--r-- 1 daemon daemon 1035936 6月   2 17:02 /tmp/php_errors.log</span><br></pre></td></tr></table></figure><blockquote><p>这个php日志的属主和属组都是httpd的启动用户。</p></blockquote></li></ul><h3 id=\"目录隔离\"><a href=\"#目录隔离\" class=\"headerlink\" title=\"目录隔离\"></a>目录隔离</h3><ul><li><p>为了防止一个网站被攻击后影响其他网站，所以需要对站点配置<code>open_basedir</code>，让网站被攻击后只能限定在站点内，不能到其他目录去；</p></li><li><p>打开php.ini配置文件，配置<code>open_basedir</code>如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open_basedir = /data/wwwroot/xtears.cn:/tmp</span><br></pre></td></tr></table></figure></li><li><p>经过上面的配置，那么用户访问就只能在xtears.cn目录内和/tmp目录内，/tmp是apache默认临时文件目录，如果不加的话会导致上传文件等发生错误。如果将目录改成其他错误路径，则会报500状态码：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># curl -A 'EVOBOT' -x118.24.153.130:80 xtears.cn/index.php -I</span></span><br><span class=\"line\">HTTP/1.0 500 Internal Server Error</span><br><span class=\"line\">Date: Sat, 02 Jun 2018 09:21:10 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">X-Powered-By: PHP/5.6.32</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Content-Type: text/html; charset=UTF-8</span><br></pre></td></tr></table></figure></li><li><p><strong>在php.ini做目录隔离只能对一个站点有效，如果有多个站点，那么会导致别的站点也无法正常访问，所以应该在Apache的虚拟主机配置文件中定义basedir，在虚拟主机中增加<code>php_admin_value</code>配置</strong>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.cn\"</span></span><br><span class=\"line\">    ServerName xtears.cn</span><br><span class=\"line\">    ServerAlias www.abc.com www.123.com</span><br><span class=\"line\">    php_admin_value open_basedir <span class=\"string\">\"/data/wwwroot/xtears.cn:/tmp/\"</span></span><br><span class=\"line\">    &lt;IfModule mod_rewrite.c&gt;</span><br><span class=\"line\">        RewriteEngine on</span><br><span class=\"line\">        RewriteCond %&#123;HTTP_USER_AGENT&#125; .*curl.* [NC,OR]</span><br><span class=\"line\">        RewriteCond %&#123;HTTP_USER_AGENT&#125; .*baidu.com.* [NC]</span><br><span class=\"line\">        RewriteRule  .*  -  [F]</span><br><span class=\"line\">    &lt;/IfModule&gt;</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.cn-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\"</span> combined</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>上面的<code>php_admin_value open_basedir</code>配置就只对当前的虚拟主机生效，<code>php_admin_value</code>不仅可以定义<code>open_basedir</code>针对其他的如错误日志等等也可以进行配置；</p></li></ul><h1 id=\"Apache压缩功能\"><a href=\"#Apache压缩功能\" class=\"headerlink\" title=\"Apache压缩功能\"></a>Apache压缩功能</h1><ul><li><p>由于服务器带宽资源非常昂贵，所以能够对html、css、js等静态元素进行压缩，能够节约大量资源，apache的压缩功能需要模块<code>deflate</code>支持，使用<code>apachectl -l</code>查看是否有<code>mod_deflate</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /usr/local/apache2.4/bin/apachectl -l | grep deflate</span></span><br><span class=\"line\"><span class=\"comment\"># ls /usr/local/apache2.4/modules/ | grep deflate</span></span><br><span class=\"line\">mod_deflate.so</span><br></pre></td></tr></table></figure><blockquote><p>如果上面的命令都没找到模块的话，则表示apache不支持压缩，需要重新编译或以扩展形式安装，重新编译需要使用选项<code>--enable-deflate=shared</code></p></blockquote></li><li><p>找到了deflate模块，则在httpd.conf中增加或打开<code>LoadModule deflate_module modules/mod_deflate.so</code>注释；</p></li><li><p>然后继续增加如下配置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule deflate_module&gt;</span><br><span class=\"line\">DeflateCompressionLevel 5</span><br><span class=\"line\">AddOutputFilterByType DEFLATE text/html text/plain text/xml</span><br><span class=\"line\">AddOutputFilter DEFLATE js css</span><br><span class=\"line\">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><blockquote><p>其中DeflateCompressionLevel指压缩等级，从1-9，9为最高等级。</p></blockquote></li></ul><h1 id=\"Apache自定义header\"><a href=\"#Apache自定义header\" class=\"headerlink\" title=\"Apache自定义header\"></a>Apache自定义header</h1><ul><li><p>自定义header需要模块<code>headers_module</code>，使用<code>/usr/local/apache2.4/bin/apachectl -M | grep header</code>查看是否加载了模块；</p></li><li><p>然后在<code>httpd.conf</code>中打开模块注释，并添加一下内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule headers_module&gt;</span><br><span class=\"line\">    RequestHeader <span class=\"built_in\">unset</span> Proxy early</span><br><span class=\"line\">    Header add MyHeader <span class=\"string\">\"xtears header\"</span></span><br><span class=\"line\">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用curl查看header是否生效：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -A <span class=\"string\">'evobot'</span> -x118.24.153.130:80 xtears.cn -I</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Date: Sat, 02 Jun 2018 10:11:47 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">X-Powered-By: PHP/5.6.32</span><br><span class=\"line\">MyHeader: xtears header</span><br><span class=\"line\">Content-Type: text/html; charset=UTF-8</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"Apache的keepalive\"><a href=\"#Apache的keepalive\" class=\"headerlink\" title=\"Apache的keepalive\"></a>Apache的keepalive</h1><ul><li><p>在APACHE的httpd.conf中，KeepAlive是指保持连接活跃，类似于Mysql的永久连接。如果将KeepAlive设置为On，那么来自同一客户端的请求就不需要再一次连接，避免每次请求都要新建一个连接而加重服务器的负担。</p></li><li><p>KeepAlive的连接活跃时间是受KeepAliveTimeOut限制的。如果第二次请求和第一次请求之间超过KeepAliveTimeOut的时间的话，第一次连接就会中断，再新建第二个连接。所以一般情况下，图片较多的网站应该把KeepAlive设为On。</p></li><li><p>如果KeepAliveTimeOut设置的时间过短，例如设置为1秒，那么APACHE就会频繁的建立新连接，当然会耗费不少的资源；反之，如果KeepAliveTimeOut设置的时间过长，例如设置为300秒，那么APACHE中会有很多无用的连接会占用服务器的资源，</p></li><li><p>所以，到底要把KeepAliveTimeOut设置为多少，要看网站的流量、服务器的配置而定。其实，这和MySql的机制有点相似，KeepAlive相当于mysql_connect或mysql_pconnect，KeepAliveTimeOut相当于wait_timeout。</p></li><li><p>httpd.conf中，增加配置如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KeepAlive On</span><br><span class=\"line\">KeepAliveTimeOut 3</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:37 GMT+0800 (CST) --><p>本文主要介绍如何限制指定目录不解析php文件、以及如何限制user_agent，并且介绍了php相关的配置。</p>","more":"<hr><h1 id=\"访问控制\"><a href=\"#访问控制\" class=\"headerlink\" title=\"访问控制\"></a>访问控制</h1><h2 id=\"禁止php解析\"><a href=\"#禁止php解析\" class=\"headerlink\" title=\"禁止php解析\"></a>禁止php解析</h2><ul><li><p>站点中可能会有上传的功能，如图片上传，如果不加以限制，那么可能被上传php文件，导致能够被解析，被上传恶意文件引起安全风险；</p></li><li><p>针对上面的问题，可以限制上传目录的php解析权限，让这些目录无法解析php文件，同时也可以对上传的php文件进行控制，deny上传php格式的文件，返回403错误，配置虚拟主机配置文件如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.cn\"</span></span><br><span class=\"line\">    ServerName xtears.cn</span><br><span class=\"line\">    ServerAlias www.abc.com www.123.com</span><br><span class=\"line\">    &lt;Directory /data/wwwroot/xtears.cn/upload&gt;</span><br><span class=\"line\">        php_admin_flag engine off</span><br><span class=\"line\">        &lt;FilesMatch (.*)\\.php(.*)&gt;</span><br><span class=\"line\">            Order allow,deny</span><br><span class=\"line\">            Deny from all</span><br><span class=\"line\">        &lt;/FilesMatch&gt;</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.cn-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\"</span> common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>这里主要的核心配置为<code>php_admin_flag engine off</code>，至于<code>FilesMatch</code>项的配置也可以不配置，但是不配置的情况下，上传的php能够查看其源代码。</p></li><li><p>更新配置文件后，网站根目录中创建upload目录，并放入一个php文件，使用curl访问查看配置生效情况：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80 xtears.cn/upload/upload.php -I</span><br><span class=\"line\">HTTP/1.1 403 Forbidden</span><br><span class=\"line\">Date: Fri, 01 Jun 2018 16:23:27 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//去掉FilesMatch配置</span><br><span class=\"line\">$ curl -x118.24.153.130:80 xtears.cn/upload/upload.php</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"12312\"</span></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure><ul><li>可以看到直接输出了php文件的源代码，文件并没有被解析，如果在浏览器中访问，则会下载php文件，同样不会被解析。</li></ul></li></ul><h2 id=\"限制user-agent\"><a href=\"#限制user-agent\" class=\"headerlink\" title=\"限制user_agent\"></a>限制user_agent</h2><ul><li><p>user_agent可以理解为浏览器标识，有时候网站可能会受到CC攻击，即利用大量肉鸡同时对网站发起访问，从未导致网站瘫痪；</p></li><li><p>而限制user_agent解决这个问题，是因为大量的肉鸡访问，其user_agent都是一样的，并且在短时间内同时有大量的访问，对于这种情况，就需要限制user_agent，减轻服务器压力，对其返回403请求；</p></li><li><p>虚拟主机配置如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.cn\"</span></span><br><span class=\"line\">    ServerName xtears.cn</span><br><span class=\"line\">    ServerAlias www.abc.com www.123.com</span><br><span class=\"line\">    &lt;IfModule mod_rewrite.c&gt;</span><br><span class=\"line\">        RewriteEngine on</span><br><span class=\"line\">        RewriteCond %&#123;HTTP_USER_AGENT&#125; .*curl.* [NC,OR]</span><br><span class=\"line\">        RewriteCond %&#123;HTTP_USER_AGENT&#125; .*baidu.com.* [NC]</span><br><span class=\"line\">        RewriteRule  .*  -  [F]</span><br><span class=\"line\">    &lt;/IfModule&gt;</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.cn-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\"</span> common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>上面的配置中使用了rewrite模块，定义了条件<code>%{HTTP_USER_AGENT}</code>,匹配<code>curl</code>和<code>baidu.com</code>的user_agent，NC表示忽略大小写，OR表示两个条件的关系为或关系，如果没有OR，则表示条件与，<code>RewriteRule</code>中的<code>[F]</code>则表示forbidden；</p></li><li><p>更新配置文件后，使用<code>curl</code>的<code>-A</code>选项指定user_agent：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80 xtears.cn/admin.php -I            </span><br><span class=\"line\">HTTP/1.1 403 Forbidden</span><br><span class=\"line\">Date: Fri, 01 Jun 2018 17:01:20 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br><span class=\"line\">//匹配到user_agent为curl，返回403状态码。</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl -A <span class=\"string\">\"EVOBOT.CN\"</span> -x118.24.153.130:80 xtears.cn/admin.php -I</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Date: Fri, 01 Jun 2018 17:03:56 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">X-Powered-By: PHP/5.6.32</span><br><span class=\"line\">Content-Type: text/html; charset=UTF-8</span><br><span class=\"line\">//使用-A指定其他的user_agent，则能正常访问</span><br></pre></td></tr></table></figure></li><li><p>查看日志如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">118.113.205.248 - - [02/Jun/2018:01:13:10 +0800] <span class=\"string\">\"HEAD http://xtears.cn/admin.php HTTP/1.1\"</span> 403 - <span class=\"string\">\"-\"</span> <span class=\"string\">\"curl/7.47.0\"</span></span><br><span class=\"line\">118.113.205.248 - - [02/Jun/2018:01:13:12 +0800] <span class=\"string\">\"HEAD http://xtears.cn/admin.php HTTP/1.1\"</span> 403 - <span class=\"string\">\"-\"</span> <span class=\"string\">\"curl/7.47.0\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">122.228.199.114 - - [02/Jun/2018:01:14:29 +0800] <span class=\"string\">\"HEAD http://xtears.cn/admin.php HTTP/1.1\"</span> 200 - <span class=\"string\">\"-\"</span> <span class=\"string\">\"EVOBOT.CN\"</span></span><br><span class=\"line\">222.186.129.155 - - [02/Jun/2018:01:14:29 +0800] <span class=\"string\">\"HEAD http://xtears.cn/admin.php HTTP/1.1\"</span> 200 - <span class=\"string\">\"-\"</span> <span class=\"string\">\"EVOBOT.CN\"</span></span><br></pre></td></tr></table></figure></li></ul><h1 id=\"PHP相关配置\"><a href=\"#PHP相关配置\" class=\"headerlink\" title=\"PHP相关配置\"></a>PHP相关配置</h1><h2 id=\"php配置文件\"><a href=\"#php配置文件\" class=\"headerlink\" title=\"php配置文件\"></a>php配置文件</h2><ul><li><p>查看PHP配置文件位置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/<span class=\"built_in\">local</span>/php/bin/php -i | grep -i <span class=\"string\">\"loaded configuration file\"</span></span><br></pre></td></tr></table></figure><ul><li>由于这种方式查看的配置文件与网站所使用的并不一定是同一个php配置文件，所以一般使用访问phpinfo()的页面来查看php配置文件所在；</li></ul><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/phpinfo.png\" alt=\"phpinfo\"></p></li><li><p>这里看到配置文件路径，但并未加载配置文件，从php源码包内复制配置文件到查看到的配置文件目录下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cp /usr/local/src/php-5.6.32/php.ini-development /usr/local/php/etc/php.ini</span></span><br></pre></td></tr></table></figure></li><li><p>重新更新apache配置后，刷新phpinfo页面即可看到加载的配置文件；</p></li></ul><h2 id=\"php-ini配置\"><a href=\"#php-ini配置\" class=\"headerlink\" title=\"php.ini配置\"></a>php.ini配置</h2><h3 id=\"禁用函数\"><a href=\"#禁用函数\" class=\"headerlink\" title=\"禁用函数\"></a>禁用函数</h3><ul><li><p>常配置的是关闭函数<code>disable_functions</code>，以下为可以禁止的较危险的函数：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>, assert, popen, passthru, escapeshellarg, escapeshellcmd, passthru, <span class=\"built_in\">exec</span>, system, chroot, scandir, chgrp, chown,shell_exec, proc_get_status, ini_alter, ini_restore, dl, pfsockopen, openlog, svslog, readlink, symlink, leak, popepassthru, stream_socket_server, popen, proc_open, proc_close, phpinfo</span><br></pre></td></tr></table></figure></li><li><p>这里将phpinfo函数也禁用，防止泄露服务器相关信息，在<code>php.ini</code>中将上面的函数写到<code>disable_functions</code>后面：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disable_functions = <span class=\"built_in\">eval</span>, assert, popen, passthru, escapeshellarg, escapeshellcmd, passthru, <span class=\"built_in\">exec</span>, system, chroot, scandir, chgrp, chown,shell_exec, proc_get_status, ini_alter, ini_restore, dl, pfsockopen, openlog, svslog, readlink, symlink, leak, popepassthru, stream_socket_server, popen, proc_open, proc_close, phpinfo</span><br></pre></td></tr></table></figure></li><li><p>禁用之后，访问到含有被禁用函数的页面时，会显示错误信息，如:</p><blockquote><p><strong>Warning</strong>: phpinfo() has been disabled for security reasons in <strong>/data/wwwroot/xtears.cn/index.php</strong> on line <strong>2</strong></p></blockquote></li></ul><h3 id=\"时区设置\"><a href=\"#时区设置\" class=\"headerlink\" title=\"时区设置\"></a>时区设置</h3><ul><li><p>在php.ini中将<code>date.timezone</code>定义为相应位置，可以为<code>Asia/Shanghai</code>或<code>Asia/Chongqing</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Date]</span><br><span class=\"line\">; Defines the default timezone used by the date <span class=\"built_in\">functions</span></span><br><span class=\"line\">; http://php.net/date.timezone</span><br><span class=\"line\">date.timezone = Asia/Shanghai</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"错误信息及日志\"><a href=\"#错误信息及日志\" class=\"headerlink\" title=\"错误信息及日志\"></a>错误信息及日志</h3><ul><li><p>在上面禁用函数配置中，当访问到有被禁用的函数页面中，会将错误信息打印在浏览器中，这样也是不安全的，在php.ini中将错误信息关闭：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display_errors = Off</span><br></pre></td></tr></table></figure></li><li><p>关闭了错误信息后，再次访问被禁用函数的页面，会显示空白，这样又不利于我们定位问题，所以同时还需要打开错误日志：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_errors = On</span><br></pre></td></tr></table></figure></li><li><p>打开错误日志开关后，定义错误日志路径<code>error_log</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; Log errors to specified file. PHP<span class=\"string\">'s default behavior is to leave this value</span></span><br><span class=\"line\"><span class=\"string\">; empty.</span></span><br><span class=\"line\"><span class=\"string\">; http://php.net/error-log</span></span><br><span class=\"line\"><span class=\"string\">; Example:</span></span><br><span class=\"line\"><span class=\"string\">error_log = /tmp/php_errors.log\t# 取消注释，定义日志路径</span></span><br><span class=\"line\"><span class=\"string\">; Log errors to syslog (Event Log on Windows).</span></span><br><span class=\"line\"><span class=\"string\">;error_log = syslog</span></span><br></pre></td></tr></table></figure></li><li><p>接着定义日志级别<code>error_reporting</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; Common Values:</span><br><span class=\"line\">;   E_ALL (Show all errors, warnings and notices including coding standards.)</span><br><span class=\"line\">;   E_ALL &amp; ~E_NOTICE  (Show all errors, except <span class=\"keyword\">for</span> notices)</span><br><span class=\"line\">;   E_ALL &amp; ~E_NOTICE &amp; ~E_STRICT  (Show all errors, except <span class=\"keyword\">for</span> notices and coding standards warnings.)</span><br><span class=\"line\">;   E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR  (Show only errors)</span><br><span class=\"line\">; Default Value: E_ALL &amp; ~E_NOTICE &amp; ~E_STRICT &amp; ~E_DEPRECATED</span><br><span class=\"line\">; Development Value: E_ALL</span><br><span class=\"line\">; Production Value: E_ALL &amp; ~E_DEPRECATED &amp; ~E_STRICT</span><br><span class=\"line\">; http://php.net/error-reporting</span><br><span class=\"line\">error_reporting = E_ALL\t<span class=\"comment\"># 默认为E_ALL</span></span><br></pre></td></tr></table></figure><blockquote><p>一般生产环境使用<code>E_ALL &amp; ~E_NOTICE</code>日志级别，排除NOTICE日志，记录所有错误。<code>E_ALL</code>则记录所有日志。</p></blockquote></li><li><p>重新加载配置文件后，查看<code>/tmp</code>下是否生成日志：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -l /tmp/php_errors.log </span></span><br><span class=\"line\">-rw-r--r-- 1 daemon daemon 1035936 6月   2 17:02 /tmp/php_errors.log</span><br></pre></td></tr></table></figure><blockquote><p>这个php日志的属主和属组都是httpd的启动用户。</p></blockquote></li></ul><h3 id=\"目录隔离\"><a href=\"#目录隔离\" class=\"headerlink\" title=\"目录隔离\"></a>目录隔离</h3><ul><li><p>为了防止一个网站被攻击后影响其他网站，所以需要对站点配置<code>open_basedir</code>，让网站被攻击后只能限定在站点内，不能到其他目录去；</p></li><li><p>打开php.ini配置文件，配置<code>open_basedir</code>如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open_basedir = /data/wwwroot/xtears.cn:/tmp</span><br></pre></td></tr></table></figure></li><li><p>经过上面的配置，那么用户访问就只能在xtears.cn目录内和/tmp目录内，/tmp是apache默认临时文件目录，如果不加的话会导致上传文件等发生错误。如果将目录改成其他错误路径，则会报500状态码：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># curl -A 'EVOBOT' -x118.24.153.130:80 xtears.cn/index.php -I</span></span><br><span class=\"line\">HTTP/1.0 500 Internal Server Error</span><br><span class=\"line\">Date: Sat, 02 Jun 2018 09:21:10 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">X-Powered-By: PHP/5.6.32</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Content-Type: text/html; charset=UTF-8</span><br></pre></td></tr></table></figure></li><li><p><strong>在php.ini做目录隔离只能对一个站点有效，如果有多个站点，那么会导致别的站点也无法正常访问，所以应该在Apache的虚拟主机配置文件中定义basedir，在虚拟主机中增加<code>php_admin_value</code>配置</strong>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.cn\"</span></span><br><span class=\"line\">    ServerName xtears.cn</span><br><span class=\"line\">    ServerAlias www.abc.com www.123.com</span><br><span class=\"line\">    php_admin_value open_basedir <span class=\"string\">\"/data/wwwroot/xtears.cn:/tmp/\"</span></span><br><span class=\"line\">    &lt;IfModule mod_rewrite.c&gt;</span><br><span class=\"line\">        RewriteEngine on</span><br><span class=\"line\">        RewriteCond %&#123;HTTP_USER_AGENT&#125; .*curl.* [NC,OR]</span><br><span class=\"line\">        RewriteCond %&#123;HTTP_USER_AGENT&#125; .*baidu.com.* [NC]</span><br><span class=\"line\">        RewriteRule  .*  -  [F]</span><br><span class=\"line\">    &lt;/IfModule&gt;</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.cn-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"|/usr/local/apache2.4/bin/rotatelogs -l logs/xtears.cn-access_%Y%m%d.log 86400\"</span> combined</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>上面的<code>php_admin_value open_basedir</code>配置就只对当前的虚拟主机生效，<code>php_admin_value</code>不仅可以定义<code>open_basedir</code>针对其他的如错误日志等等也可以进行配置；</p></li></ul><h1 id=\"Apache压缩功能\"><a href=\"#Apache压缩功能\" class=\"headerlink\" title=\"Apache压缩功能\"></a>Apache压缩功能</h1><ul><li><p>由于服务器带宽资源非常昂贵，所以能够对html、css、js等静态元素进行压缩，能够节约大量资源，apache的压缩功能需要模块<code>deflate</code>支持，使用<code>apachectl -l</code>查看是否有<code>mod_deflate</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /usr/local/apache2.4/bin/apachectl -l | grep deflate</span></span><br><span class=\"line\"><span class=\"comment\"># ls /usr/local/apache2.4/modules/ | grep deflate</span></span><br><span class=\"line\">mod_deflate.so</span><br></pre></td></tr></table></figure><blockquote><p>如果上面的命令都没找到模块的话，则表示apache不支持压缩，需要重新编译或以扩展形式安装，重新编译需要使用选项<code>--enable-deflate=shared</code></p></blockquote></li><li><p>找到了deflate模块，则在httpd.conf中增加或打开<code>LoadModule deflate_module modules/mod_deflate.so</code>注释；</p></li><li><p>然后继续增加如下配置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule deflate_module&gt;</span><br><span class=\"line\">DeflateCompressionLevel 5</span><br><span class=\"line\">AddOutputFilterByType DEFLATE text/html text/plain text/xml</span><br><span class=\"line\">AddOutputFilter DEFLATE js css</span><br><span class=\"line\">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><blockquote><p>其中DeflateCompressionLevel指压缩等级，从1-9，9为最高等级。</p></blockquote></li></ul><h1 id=\"Apache自定义header\"><a href=\"#Apache自定义header\" class=\"headerlink\" title=\"Apache自定义header\"></a>Apache自定义header</h1><ul><li><p>自定义header需要模块<code>headers_module</code>，使用<code>/usr/local/apache2.4/bin/apachectl -M | grep header</code>查看是否加载了模块；</p></li><li><p>然后在<code>httpd.conf</code>中打开模块注释，并添加一下内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule headers_module&gt;</span><br><span class=\"line\">    RequestHeader <span class=\"built_in\">unset</span> Proxy early</span><br><span class=\"line\">    Header add MyHeader <span class=\"string\">\"xtears header\"</span></span><br><span class=\"line\">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用curl查看header是否生效：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -A <span class=\"string\">'evobot'</span> -x118.24.153.130:80 xtears.cn -I</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Date: Sat, 02 Jun 2018 10:11:47 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">X-Powered-By: PHP/5.6.32</span><br><span class=\"line\">MyHeader: xtears header</span><br><span class=\"line\">Content-Type: text/html; charset=UTF-8</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"Apache的keepalive\"><a href=\"#Apache的keepalive\" class=\"headerlink\" title=\"Apache的keepalive\"></a>Apache的keepalive</h1><ul><li><p>在APACHE的httpd.conf中，KeepAlive是指保持连接活跃，类似于Mysql的永久连接。如果将KeepAlive设置为On，那么来自同一客户端的请求就不需要再一次连接，避免每次请求都要新建一个连接而加重服务器的负担。</p></li><li><p>KeepAlive的连接活跃时间是受KeepAliveTimeOut限制的。如果第二次请求和第一次请求之间超过KeepAliveTimeOut的时间的话，第一次连接就会中断，再新建第二个连接。所以一般情况下，图片较多的网站应该把KeepAlive设为On。</p></li><li><p>如果KeepAliveTimeOut设置的时间过短，例如设置为1秒，那么APACHE就会频繁的建立新连接，当然会耗费不少的资源；反之，如果KeepAliveTimeOut设置的时间过长，例如设置为300秒，那么APACHE中会有很多无用的连接会占用服务器的资源，</p></li><li><p>所以，到底要把KeepAliveTimeOut设置为多少，要看网站的流量、服务器的配置而定。其实，这和MySql的机制有点相似，KeepAlive相当于mysql_connect或mysql_pconnect，KeepAliveTimeOut相当于wait_timeout。</p></li><li><p>httpd.conf中，增加配置如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KeepAlive On</span><br><span class=\"line\">KeepAliveTimeOut 3</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->"},{"title":"Centos7系列:find命令和文件名后缀","author":"Evobot","abbrlink":"f4c9d6be","date":"2018-03-30T13:13:03.000Z","image":null,"_content":"\n\n\n**find**命令是Linux下的搜索命令，功能非常强大，能够进行多条件精确搜索，本文主要介绍**find**命令的常用选项和用法，并介绍Linux下的文件名后缀相关知识。\n\n<!-- more -->\n\n---\n\n# 搜索命令\n\n## locate搜索\n- 默认centos未带有`locate`命令，需要安装**mlocate**软件包，`yum install -y mlocate`\n- 安装完成后，首次使用需要更新数据库，否则提示如下：\n```bash\n[root@localhost ~]# locate ls\nlocate: 无法执行 stat () `/var/lib/mlocate/mlocate.db': 没有那个文件或目录\n```\n- 更新数据库使用`updatedb`命令，搜索使用`locate [keyword]`即可搜索。\n\n------------\n\n## find搜索\n### find的命令语法\n- find基础语法为`find [path] -type [d|f|b|c|s|l] -name [filename|dirname]`,**-type**.**-name**都是find命令的参数之一，在使用中可以省略一些参数，**-name**中文件名或目录名支持通配。\n- 文件的type类型**'d'**代表目录，**'l'**代表软链接，**'f'**代表文件，**'b'**代表块设备，**'s'**代表socket文件，**'c'**代表字符串设备.\n```bash\n[root@localhost ~]# find /dev/ -type b\n/dev/sda3\n/dev/sda2\n/dev/sda1\n/dev/sda\n/dev/sr0\n```\n### find命令时间参数\n- `stat`命令用来查看文件的详细信息，包括块大小，访问时间等；更改系统语言使用`LANG=en`。\n\n#### **ctime**状态时间\n- `ctime`(Change Time)记录文件权限，所有者、所属组，inode，文件大小等文件属性最后一次被修改的时间，单位为天。\n```bash\n[root@localhost ~]# chown :lux files.ini \n[root@localhost ~]# stat files.ini \n  File: 'files.ini'\n  Size: 80            Blocks: 8          IO Block: 4096   regular file\nDevice: 803h/2051d    Inode: 67157950    Links: 1\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: ( 1000/     lux)\nContext: unconfined_u:object_r:admin_home_t:s0\nAccess: 2017-10-25 23:10:21.886836753 +0800\nModify: 2017-10-27 22:46:28.963602514 +0800\nChange: 2017-10-27 23:00:52.041127046 +0800\n Birth: -\n```\n- find中`ctime`参数使用形式为`-ctime [+-][n]`，减号为`ctime`在n天以内，加号为`ctime`在n天以前：\n```bash\n[root@localhost ~]# find . -type f -ctime -1 \n./.bash_history\n./files.ini\n./image.img\n./virtual.img\n[root@localhost ~]# ll ./image.img\n-rw-r--r--. 2 root root 134217728 Oct 27 21:37 ./image.img\n[root@localhost ~]# date\nFri Oct 27 23:20:32 CST 2017\n```\n\n#### **mtime**修改时间\n- `mtime`(Modity Time)记录最后一次对文件内容进行增加删除的时间，单位为天。\n```bash\n[root@localhost ~]# echo \"1234\" >> files.ini \n[root@localhost ~]# stat files.ini \n  File: 'files.ini'\n  Size: 80            Blocks: 8          IO Block: 4096   regular file\nDevice: 803h/2051d    Inode: 67157950    Links: 1\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)\nContext: unconfined_u:object_r:admin_home_t:s0\nAccess: 2017-10-25 23:10:21.886836753 +0800\nModify: 2017-10-27 22:46:28.963602514 +0800\nChange: 2017-10-27 22:46:28.963602514 +0800\n Birth: -\n```\n- 更改`mtime`,则`ctime`一定会变，因为增删内容导致文件大小变化，使`ctime`时间变化。\n- find中`mtime`和`ctime`的用法一致，查看`mtime`在n天以前或n天以内:\n```bash\n[root@localhost ~]# find /etc/ -type f -mtime +5 -name \"*.sh\"\n/etc/profile.d/colorgrep.sh\n/etc/profile.d/which2.sh\n/etc/profile.d/less.sh\n/etc/profile.d/colorls.sh\n/etc/profile.d/256term.sh\n/etc/profile.d/lang.sh\n/etc/dhcp/dhclient.d/chrony.sh\n/etc/kernel/postinst.d/51-dracut-rescue-postinst.sh\n[root@localhost ~]# ll /etc/profile.d/less.sh\n-rw-r--r--. 1 root root 121 Jul 31  2015 /etc/profile.d/less.sh\n[root@localhost ~]# date\nFri Oct 27 23:31:31 CST 2017\n```\n\n#### **atime**访问时间\n- `atime`(Access Time)记录文件内容最后一次被查看的时间，单位为天。\n```bash\n[root@localhost ~]# cat files.ini \nroot:x:0:0:root:/root:/bin/bash\nbin:x:1:1:bin:/bin:/sbin/nologin\n1234\n1234\n1234\n[root@localhost ~]# stat files.ini \n  File: 'files.ini'\n  Size: 80            Blocks: 8          IO Block: 4096   regular file\nDevice: 803h/2051d    Inode: 67157950    Links: 1\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: ( 1000/     lux)\nContext: unconfined_u:object_r:admin_home_t:s0\nAccess: 2017-10-27 23:08:40.668946564 +0800\nModify: 2017-10-27 22:46:28.963602514 +0800\nChange: 2017-10-27 23:00:52.041127046 +0800\n Birth: -\n```\n- `atime`同样和`mtime`、`ctime`使用方法相同：\n```bash\n[root@localhost ~]# find . -type f -atime -1 -name \"*.ini\"\n./files.ini\n[root@localhost ~]# ll files.ini \n-rw-r--r--. 1 root lux 80 Oct 27 22:46 files.ini\n```\n#### **mmin**修改时间\n- `mmin`参数用来查找n分钟之前或n分钟之内的文件，使用方法同`mtime`等相同,单位为分钟。\n```bash\n[root@localhost ~]# find . -mmin -120 -type f \n./files.ini\n```\n### find其他参数\n#### inum按inode查找\n- `inum`参数用来依据inode号查找文件，比如有多个inode号相同的文件，使用`-inum [inode]`.\n```bash\n[root@localhost ~]# ls -i virtual.img \n75 virtual.img\n[root@localhost ~]# find / -inum 75 -type f -mtime -1\n/root/virtual.img\n/tmp/image.img\n```\n#### size按文件大小查找\n- `-size`参数可以制定需要查找的文件大小，如`-size -10K``-size +10M`:\n```bash\n#查找小于1b的文件\n[root@localhost ~]# find . -size -1b -type f \n./dirname/firstdir/file1.txt\n./dirname/.files.txt.swp\n./dirname/.files.txt.swx\n./dirname/files.txt\n./dirname/.file2.txt\n./dirname/file2.txt\n[root@localhost ~]# ll ./dirname/firstdir/file1.txt\n-rw-r--r--. 1 root lux 0 Oct 25 23:21 ./dirname/firstdir/file1.txt\n```\n#### 'o'条件或\n- `-o`参数可以让find的搜索条件使用或，即搜索条件满足其中一个即可：\n```bash\n[root@localhost ~]# find /tmp/ -size +10M -o -mtime -1 -o -type f -o -name \"image*\" \n/tmp/\n/tmp/anaconda-ks.cfg\n/tmp/file.txt\n/tmp/image.img\n```\n\n### find的exec选项\n- `exec`选项可以对find搜索出来的结果做进一步的处理，例如对搜索结果执行`mv`、`ls`等命令.\n- `exec`的使用方法，`find [path] -[arg] -[exec] [command] {} \\;`，其中`{}`代表find搜索出来的结果，命令结尾的`\\;`之后可以继续添加`-exec`选项。\n```bash\n[root@localhost ~]# find . -mmin -120 -type f -exec ls -l {} \\;\n-rw-r--r--. 1 root lux 80 Oct 27 22:46 ./files.ini\n[root@localhost ~]# mv virtual.img.bak virtual.img\n[root@localhost ~]# find . -size +10M -type f -exec ls -l {} \\; -exec mv {} {}.bak \\; -exec ls -l \\;\n-rw-r--r--. 2 root root 134217728 Oct 27 21:37 ./virtual.img\ntotal 131084\n-rw-------. 1 root root      1422 Aug 19 07:25 anaconda-ks.cfg\n-rw-r--r--. 1 root lux         80 Oct 27 22:46 files.ini\n-rw-r--r--. 2 root root 134217728 Oct 27 21:37 virtual.img.bak\n```\n# 文件名后缀\n\n- 在我们使用过程中，创建的文件经常会带后缀名，比如`.txt`、`.sh`等；\n\n- 但实际上在Linux中，文件的类型并不是依靠后缀名区分，之所以添加后缀名，主要是方便用户区分；\n\n- 想要准确判断一个文件的类型，可以使用`file`命令：\n\n  ```bash\n  [root@localhost ~]# file install.log\n  install.log: UTF-8 Unicode text\n\n  [root@localhost ~]# ls -l /var/mail\n  lrwxrwxrwx 1 root root 10 08-13 00:11 /var/mail -> spool/mail\n\n  [root@localhost ~]# file /var/mail\n  /var/mail: symbolic link to `spool/mail'\n  ```\n\n  ---","source":"_posts/Centos7系列-find命令和文件名后缀.md","raw":"---\ntitle: Centos7系列:find命令和文件名后缀\nauthor: Evobot\nabbrlink: f4c9d6be\ndate: 2018-03-30 21:13:03\ncategories: Centos7\ntags: [Linux, Centos]\nimage:\n---\n\n\n\n**find**命令是Linux下的搜索命令，功能非常强大，能够进行多条件精确搜索，本文主要介绍**find**命令的常用选项和用法，并介绍Linux下的文件名后缀相关知识。\n\n<!-- more -->\n\n---\n\n# 搜索命令\n\n## locate搜索\n- 默认centos未带有`locate`命令，需要安装**mlocate**软件包，`yum install -y mlocate`\n- 安装完成后，首次使用需要更新数据库，否则提示如下：\n```bash\n[root@localhost ~]# locate ls\nlocate: 无法执行 stat () `/var/lib/mlocate/mlocate.db': 没有那个文件或目录\n```\n- 更新数据库使用`updatedb`命令，搜索使用`locate [keyword]`即可搜索。\n\n------------\n\n## find搜索\n### find的命令语法\n- find基础语法为`find [path] -type [d|f|b|c|s|l] -name [filename|dirname]`,**-type**.**-name**都是find命令的参数之一，在使用中可以省略一些参数，**-name**中文件名或目录名支持通配。\n- 文件的type类型**'d'**代表目录，**'l'**代表软链接，**'f'**代表文件，**'b'**代表块设备，**'s'**代表socket文件，**'c'**代表字符串设备.\n```bash\n[root@localhost ~]# find /dev/ -type b\n/dev/sda3\n/dev/sda2\n/dev/sda1\n/dev/sda\n/dev/sr0\n```\n### find命令时间参数\n- `stat`命令用来查看文件的详细信息，包括块大小，访问时间等；更改系统语言使用`LANG=en`。\n\n#### **ctime**状态时间\n- `ctime`(Change Time)记录文件权限，所有者、所属组，inode，文件大小等文件属性最后一次被修改的时间，单位为天。\n```bash\n[root@localhost ~]# chown :lux files.ini \n[root@localhost ~]# stat files.ini \n  File: 'files.ini'\n  Size: 80            Blocks: 8          IO Block: 4096   regular file\nDevice: 803h/2051d    Inode: 67157950    Links: 1\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: ( 1000/     lux)\nContext: unconfined_u:object_r:admin_home_t:s0\nAccess: 2017-10-25 23:10:21.886836753 +0800\nModify: 2017-10-27 22:46:28.963602514 +0800\nChange: 2017-10-27 23:00:52.041127046 +0800\n Birth: -\n```\n- find中`ctime`参数使用形式为`-ctime [+-][n]`，减号为`ctime`在n天以内，加号为`ctime`在n天以前：\n```bash\n[root@localhost ~]# find . -type f -ctime -1 \n./.bash_history\n./files.ini\n./image.img\n./virtual.img\n[root@localhost ~]# ll ./image.img\n-rw-r--r--. 2 root root 134217728 Oct 27 21:37 ./image.img\n[root@localhost ~]# date\nFri Oct 27 23:20:32 CST 2017\n```\n\n#### **mtime**修改时间\n- `mtime`(Modity Time)记录最后一次对文件内容进行增加删除的时间，单位为天。\n```bash\n[root@localhost ~]# echo \"1234\" >> files.ini \n[root@localhost ~]# stat files.ini \n  File: 'files.ini'\n  Size: 80            Blocks: 8          IO Block: 4096   regular file\nDevice: 803h/2051d    Inode: 67157950    Links: 1\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)\nContext: unconfined_u:object_r:admin_home_t:s0\nAccess: 2017-10-25 23:10:21.886836753 +0800\nModify: 2017-10-27 22:46:28.963602514 +0800\nChange: 2017-10-27 22:46:28.963602514 +0800\n Birth: -\n```\n- 更改`mtime`,则`ctime`一定会变，因为增删内容导致文件大小变化，使`ctime`时间变化。\n- find中`mtime`和`ctime`的用法一致，查看`mtime`在n天以前或n天以内:\n```bash\n[root@localhost ~]# find /etc/ -type f -mtime +5 -name \"*.sh\"\n/etc/profile.d/colorgrep.sh\n/etc/profile.d/which2.sh\n/etc/profile.d/less.sh\n/etc/profile.d/colorls.sh\n/etc/profile.d/256term.sh\n/etc/profile.d/lang.sh\n/etc/dhcp/dhclient.d/chrony.sh\n/etc/kernel/postinst.d/51-dracut-rescue-postinst.sh\n[root@localhost ~]# ll /etc/profile.d/less.sh\n-rw-r--r--. 1 root root 121 Jul 31  2015 /etc/profile.d/less.sh\n[root@localhost ~]# date\nFri Oct 27 23:31:31 CST 2017\n```\n\n#### **atime**访问时间\n- `atime`(Access Time)记录文件内容最后一次被查看的时间，单位为天。\n```bash\n[root@localhost ~]# cat files.ini \nroot:x:0:0:root:/root:/bin/bash\nbin:x:1:1:bin:/bin:/sbin/nologin\n1234\n1234\n1234\n[root@localhost ~]# stat files.ini \n  File: 'files.ini'\n  Size: 80            Blocks: 8          IO Block: 4096   regular file\nDevice: 803h/2051d    Inode: 67157950    Links: 1\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: ( 1000/     lux)\nContext: unconfined_u:object_r:admin_home_t:s0\nAccess: 2017-10-27 23:08:40.668946564 +0800\nModify: 2017-10-27 22:46:28.963602514 +0800\nChange: 2017-10-27 23:00:52.041127046 +0800\n Birth: -\n```\n- `atime`同样和`mtime`、`ctime`使用方法相同：\n```bash\n[root@localhost ~]# find . -type f -atime -1 -name \"*.ini\"\n./files.ini\n[root@localhost ~]# ll files.ini \n-rw-r--r--. 1 root lux 80 Oct 27 22:46 files.ini\n```\n#### **mmin**修改时间\n- `mmin`参数用来查找n分钟之前或n分钟之内的文件，使用方法同`mtime`等相同,单位为分钟。\n```bash\n[root@localhost ~]# find . -mmin -120 -type f \n./files.ini\n```\n### find其他参数\n#### inum按inode查找\n- `inum`参数用来依据inode号查找文件，比如有多个inode号相同的文件，使用`-inum [inode]`.\n```bash\n[root@localhost ~]# ls -i virtual.img \n75 virtual.img\n[root@localhost ~]# find / -inum 75 -type f -mtime -1\n/root/virtual.img\n/tmp/image.img\n```\n#### size按文件大小查找\n- `-size`参数可以制定需要查找的文件大小，如`-size -10K``-size +10M`:\n```bash\n#查找小于1b的文件\n[root@localhost ~]# find . -size -1b -type f \n./dirname/firstdir/file1.txt\n./dirname/.files.txt.swp\n./dirname/.files.txt.swx\n./dirname/files.txt\n./dirname/.file2.txt\n./dirname/file2.txt\n[root@localhost ~]# ll ./dirname/firstdir/file1.txt\n-rw-r--r--. 1 root lux 0 Oct 25 23:21 ./dirname/firstdir/file1.txt\n```\n#### 'o'条件或\n- `-o`参数可以让find的搜索条件使用或，即搜索条件满足其中一个即可：\n```bash\n[root@localhost ~]# find /tmp/ -size +10M -o -mtime -1 -o -type f -o -name \"image*\" \n/tmp/\n/tmp/anaconda-ks.cfg\n/tmp/file.txt\n/tmp/image.img\n```\n\n### find的exec选项\n- `exec`选项可以对find搜索出来的结果做进一步的处理，例如对搜索结果执行`mv`、`ls`等命令.\n- `exec`的使用方法，`find [path] -[arg] -[exec] [command] {} \\;`，其中`{}`代表find搜索出来的结果，命令结尾的`\\;`之后可以继续添加`-exec`选项。\n```bash\n[root@localhost ~]# find . -mmin -120 -type f -exec ls -l {} \\;\n-rw-r--r--. 1 root lux 80 Oct 27 22:46 ./files.ini\n[root@localhost ~]# mv virtual.img.bak virtual.img\n[root@localhost ~]# find . -size +10M -type f -exec ls -l {} \\; -exec mv {} {}.bak \\; -exec ls -l \\;\n-rw-r--r--. 2 root root 134217728 Oct 27 21:37 ./virtual.img\ntotal 131084\n-rw-------. 1 root root      1422 Aug 19 07:25 anaconda-ks.cfg\n-rw-r--r--. 1 root lux         80 Oct 27 22:46 files.ini\n-rw-r--r--. 2 root root 134217728 Oct 27 21:37 virtual.img.bak\n```\n# 文件名后缀\n\n- 在我们使用过程中，创建的文件经常会带后缀名，比如`.txt`、`.sh`等；\n\n- 但实际上在Linux中，文件的类型并不是依靠后缀名区分，之所以添加后缀名，主要是方便用户区分；\n\n- 想要准确判断一个文件的类型，可以使用`file`命令：\n\n  ```bash\n  [root@localhost ~]# file install.log\n  install.log: UTF-8 Unicode text\n\n  [root@localhost ~]# ls -l /var/mail\n  lrwxrwxrwx 1 root root 10 08-13 00:11 /var/mail -> spool/mail\n\n  [root@localhost ~]# file /var/mail\n  /var/mail: symbolic link to `spool/mail'\n  ```\n\n  ---","slug":"Centos7系列-find命令和文件名后缀","published":1,"updated":"2018-06-02T13:01:29.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gaz73000au1jxnhxe02j8","content":"<!-- build time:Tue Jun 05 2018 16:57:37 GMT+0800 (CST) --><p><strong>find</strong>命令是Linux下的搜索命令，功能非常强大，能够进行多条件精确搜索，本文主要介绍<strong>find</strong>命令的常用选项和用法，并介绍Linux下的文件名后缀相关知识。</p><a id=\"more\"></a><hr><h1 id=\"搜索命令\"><a href=\"#搜索命令\" class=\"headerlink\" title=\"搜索命令\"></a>搜索命令</h1><h2 id=\"locate搜索\"><a href=\"#locate搜索\" class=\"headerlink\" title=\"locate搜索\"></a>locate搜索</h2><ul><li>默认centos未带有<code>locate</code>命令，需要安装<strong>mlocate</strong>软件包，<code>yum install -y mlocate</code></li><li><p>安装完成后，首次使用需要更新数据库，否则提示如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># locate ls</span></span><br><span class=\"line\">locate: 无法执行 <span class=\"built_in\">stat</span> () `/var/lib/mlocate/mlocate.db<span class=\"string\">': 没有那个文件或目录</span></span><br></pre></td></tr></table></figure></li><li><p>更新数据库使用<code>updatedb</code>命令，搜索使用<code>locate [keyword]</code>即可搜索。</p></li></ul><hr><h2 id=\"find搜索\"><a href=\"#find搜索\" class=\"headerlink\" title=\"find搜索\"></a>find搜索</h2><h3 id=\"find的命令语法\"><a href=\"#find的命令语法\" class=\"headerlink\" title=\"find的命令语法\"></a>find的命令语法</h3><ul><li>find基础语法为<code>find [path] -type [d|f|b|c|s|l] -name [filename|dirname]</code>,<strong>-type</strong>.<strong>-name</strong>都是find命令的参数之一，在使用中可以省略一些参数，<strong>-name</strong>中文件名或目录名支持通配。</li><li>文件的type类型<strong>‘d’</strong>代表目录，<strong>‘l’</strong>代表软链接，<strong>‘f’</strong>代表文件，<strong>‘b’</strong>代表块设备，<strong>‘s’</strong>代表socket文件，<strong>‘c’</strong>代表字符串设备.<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># find /dev/ -type b</span></span><br><span class=\"line\">/dev/sda3</span><br><span class=\"line\">/dev/sda2</span><br><span class=\"line\">/dev/sda1</span><br><span class=\"line\">/dev/sda</span><br><span class=\"line\">/dev/sr0</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"find命令时间参数\"><a href=\"#find命令时间参数\" class=\"headerlink\" title=\"find命令时间参数\"></a>find命令时间参数</h3><ul><li><code>stat</code>命令用来查看文件的详细信息，包括块大小，访问时间等；更改系统语言使用<code>LANG=en</code>。</li></ul><h4 id=\"ctime状态时间\"><a href=\"#ctime状态时间\" class=\"headerlink\" title=\"ctime状态时间\"></a><strong>ctime</strong>状态时间</h4><ul><li><p><code>ctime</code>(Change Time)记录文件权限，所有者、所属组，inode，文件大小等文件属性最后一次被修改的时间，单位为天。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chown :lux files.ini </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># stat files.ini </span></span><br><span class=\"line\">  File: <span class=\"string\">'files.ini'</span></span><br><span class=\"line\">  Size: 80            Blocks: 8          IO Block: 4096   regular file</span><br><span class=\"line\">Device: 803h/2051d    Inode: 67157950    Links: 1</span><br><span class=\"line\">Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: ( 1000/     lux)</span><br><span class=\"line\">Context: unconfined_u:object_r:admin_home_t:s0</span><br><span class=\"line\">Access: 2017-10-25 23:10:21.886836753 +0800</span><br><span class=\"line\">Modify: 2017-10-27 22:46:28.963602514 +0800</span><br><span class=\"line\">Change: 2017-10-27 23:00:52.041127046 +0800</span><br><span class=\"line\"> Birth: -</span><br></pre></td></tr></table></figure></li><li><p>find中<code>ctime</code>参数使用形式为<code>-ctime [+-][n]</code>，减号为<code>ctime</code>在n天以内，加号为<code>ctime</code>在n天以前：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># find . -type f -ctime -1 </span></span><br><span class=\"line\">./.bash_history</span><br><span class=\"line\">./files.ini</span><br><span class=\"line\">./image.img</span><br><span class=\"line\">./virtual.img</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll ./image.img</span></span><br><span class=\"line\">-rw-r--r--. 2 root root 134217728 Oct 27 21:37 ./image.img</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># date</span></span><br><span class=\"line\">Fri Oct 27 23:20:32 CST 2017</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"mtime修改时间\"><a href=\"#mtime修改时间\" class=\"headerlink\" title=\"mtime修改时间\"></a><strong>mtime</strong>修改时间</h4><ul><li><p><code>mtime</code>(Modity Time)记录最后一次对文件内容进行增加删除的时间，单位为天。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># echo \"1234\" &gt;&gt; files.ini </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># stat files.ini </span></span><br><span class=\"line\">  File: <span class=\"string\">'files.ini'</span></span><br><span class=\"line\">  Size: 80            Blocks: 8          IO Block: 4096   regular file</span><br><span class=\"line\">Device: 803h/2051d    Inode: 67157950    Links: 1</span><br><span class=\"line\">Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class=\"line\">Context: unconfined_u:object_r:admin_home_t:s0</span><br><span class=\"line\">Access: 2017-10-25 23:10:21.886836753 +0800</span><br><span class=\"line\">Modify: 2017-10-27 22:46:28.963602514 +0800</span><br><span class=\"line\">Change: 2017-10-27 22:46:28.963602514 +0800</span><br><span class=\"line\"> Birth: -</span><br></pre></td></tr></table></figure></li><li><p>更改<code>mtime</code>,则<code>ctime</code>一定会变，因为增删内容导致文件大小变化，使<code>ctime</code>时间变化。</p></li><li>find中<code>mtime</code>和<code>ctime</code>的用法一致，查看<code>mtime</code>在n天以前或n天以内:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># find /etc/ -type f -mtime +5 -name \"*.sh\"</span></span><br><span class=\"line\">/etc/profile.d/colorgrep.sh</span><br><span class=\"line\">/etc/profile.d/which2.sh</span><br><span class=\"line\">/etc/profile.d/less.sh</span><br><span class=\"line\">/etc/profile.d/colorls.sh</span><br><span class=\"line\">/etc/profile.d/256term.sh</span><br><span class=\"line\">/etc/profile.d/lang.sh</span><br><span class=\"line\">/etc/dhcp/dhclient.d/chrony.sh</span><br><span class=\"line\">/etc/kernel/postinst.d/51-dracut-rescue-postinst.sh</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll /etc/profile.d/less.sh</span></span><br><span class=\"line\">-rw-r--r--. 1 root root 121 Jul 31  2015 /etc/profile.d/less.sh</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># date</span></span><br><span class=\"line\">Fri Oct 27 23:31:31 CST 2017</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"atime访问时间\"><a href=\"#atime访问时间\" class=\"headerlink\" title=\"atime访问时间\"></a><strong>atime</strong>访问时间</h4><ul><li><p><code>atime</code>(Access Time)记录文件内容最后一次被查看的时间，单位为天。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cat files.ini </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">1234</span><br><span class=\"line\">1234</span><br><span class=\"line\">1234</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># stat files.ini </span></span><br><span class=\"line\">  File: <span class=\"string\">'files.ini'</span></span><br><span class=\"line\">  Size: 80            Blocks: 8          IO Block: 4096   regular file</span><br><span class=\"line\">Device: 803h/2051d    Inode: 67157950    Links: 1</span><br><span class=\"line\">Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: ( 1000/     lux)</span><br><span class=\"line\">Context: unconfined_u:object_r:admin_home_t:s0</span><br><span class=\"line\">Access: 2017-10-27 23:08:40.668946564 +0800</span><br><span class=\"line\">Modify: 2017-10-27 22:46:28.963602514 +0800</span><br><span class=\"line\">Change: 2017-10-27 23:00:52.041127046 +0800</span><br><span class=\"line\"> Birth: -</span><br></pre></td></tr></table></figure></li><li><p><code>atime</code>同样和<code>mtime</code>、<code>ctime</code>使用方法相同：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># find . -type f -atime -1 -name \"*.ini\"</span></span><br><span class=\"line\">./files.ini</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll files.ini </span></span><br><span class=\"line\">-rw-r--r--. 1 root lux 80 Oct 27 22:46 files.ini</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"mmin修改时间\"><a href=\"#mmin修改时间\" class=\"headerlink\" title=\"mmin修改时间\"></a><strong>mmin</strong>修改时间</h4><ul><li><code>mmin</code>参数用来查找n分钟之前或n分钟之内的文件，使用方法同<code>mtime</code>等相同,单位为分钟。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># find . -mmin -120 -type f </span></span><br><span class=\"line\">./files.ini</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"find其他参数\"><a href=\"#find其他参数\" class=\"headerlink\" title=\"find其他参数\"></a>find其他参数</h3><h4 id=\"inum按inode查找\"><a href=\"#inum按inode查找\" class=\"headerlink\" title=\"inum按inode查找\"></a>inum按inode查找</h4><ul><li><code>inum</code>参数用来依据inode号查找文件，比如有多个inode号相同的文件，使用<code>-inum [inode]</code>.<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -i virtual.img </span></span><br><span class=\"line\">75 virtual.img</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># find / -inum 75 -type f -mtime -1</span></span><br><span class=\"line\">/root/virtual.img</span><br><span class=\"line\">/tmp/image.img</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"size按文件大小查找\"><a href=\"#size按文件大小查找\" class=\"headerlink\" title=\"size按文件大小查找\"></a>size按文件大小查找</h4><ul><li><code>-size</code>参数可以制定需要查找的文件大小，如<code>-size -10K`</code>-size +10M`:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查找小于1b的文件</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># find . -size -1b -type f </span></span><br><span class=\"line\">./dirname/firstdir/file1.txt</span><br><span class=\"line\">./dirname/.files.txt.swp</span><br><span class=\"line\">./dirname/.files.txt.swx</span><br><span class=\"line\">./dirname/files.txt</span><br><span class=\"line\">./dirname/.file2.txt</span><br><span class=\"line\">./dirname/file2.txt</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll ./dirname/firstdir/file1.txt</span></span><br><span class=\"line\">-rw-r--r--. 1 root lux 0 Oct 25 23:21 ./dirname/firstdir/file1.txt</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"‘o’条件或\"><a href=\"#‘o’条件或\" class=\"headerlink\" title=\"‘o’条件或\"></a>‘o’条件或</h4><ul><li><code>-o</code>参数可以让find的搜索条件使用或，即搜索条件满足其中一个即可：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># find /tmp/ -size +10M -o -mtime -1 -o -type f -o -name \"image*\" </span></span><br><span class=\"line\">/tmp/</span><br><span class=\"line\">/tmp/anaconda-ks.cfg</span><br><span class=\"line\">/tmp/file.txt</span><br><span class=\"line\">/tmp/image.img</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"find的exec选项\"><a href=\"#find的exec选项\" class=\"headerlink\" title=\"find的exec选项\"></a>find的exec选项</h3><ul><li><code>exec</code>选项可以对find搜索出来的结果做进一步的处理，例如对搜索结果执行<code>mv</code>、<code>ls</code>等命令.</li><li><code>exec</code>的使用方法，<code>find [path] -[arg] -[exec] [command] {} \\;</code>，其中<code>{}</code>代表find搜索出来的结果，命令结尾的<code>\\;</code>之后可以继续添加<code>-exec</code>选项。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># find . -mmin -120 -type f -exec ls -l &#123;&#125; \\;</span></span><br><span class=\"line\">-rw-r--r--. 1 root lux 80 Oct 27 22:46 ./files.ini</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mv virtual.img.bak virtual.img</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># find . -size +10M -type f -exec ls -l &#123;&#125; \\; -exec mv &#123;&#125; &#123;&#125;.bak \\; -exec ls -l \\;</span></span><br><span class=\"line\">-rw-r--r--. 2 root root 134217728 Oct 27 21:37 ./virtual.img</span><br><span class=\"line\">total 131084</span><br><span class=\"line\">-rw-------. 1 root root      1422 Aug 19 07:25 anaconda-ks.cfg</span><br><span class=\"line\">-rw-r--r--. 1 root lux         80 Oct 27 22:46 files.ini</span><br><span class=\"line\">-rw-r--r--. 2 root root 134217728 Oct 27 21:37 virtual.img.bak</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"文件名后缀\"><a href=\"#文件名后缀\" class=\"headerlink\" title=\"文件名后缀\"></a>文件名后缀</h1><ul><li><p>在我们使用过程中，创建的文件经常会带后缀名，比如<code>.txt</code>、<code>.sh</code>等；</p></li><li><p>但实际上在Linux中，文件的类型并不是依靠后缀名区分，之所以添加后缀名，主要是方便用户区分；</p></li><li><p>想要准确判断一个文件的类型，可以使用<code>file</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># file install.log</span></span><br><span class=\"line\">install.log: UTF-8 Unicode text</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -l /var/mail</span></span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 08-13 00:11 /var/mail -&gt; spool/mail</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># file /var/mail</span></span><br><span class=\"line\">/var/mail: symbolic link to `spool/mail<span class=\"string\">'</span></span><br></pre></td></tr></table></figure><hr></li></ul><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:37 GMT+0800 (CST) --><p><strong>find</strong>命令是Linux下的搜索命令，功能非常强大，能够进行多条件精确搜索，本文主要介绍<strong>find</strong>命令的常用选项和用法，并介绍Linux下的文件名后缀相关知识。</p>","more":"<hr><h1 id=\"搜索命令\"><a href=\"#搜索命令\" class=\"headerlink\" title=\"搜索命令\"></a>搜索命令</h1><h2 id=\"locate搜索\"><a href=\"#locate搜索\" class=\"headerlink\" title=\"locate搜索\"></a>locate搜索</h2><ul><li>默认centos未带有<code>locate</code>命令，需要安装<strong>mlocate</strong>软件包，<code>yum install -y mlocate</code></li><li><p>安装完成后，首次使用需要更新数据库，否则提示如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># locate ls</span></span><br><span class=\"line\">locate: 无法执行 <span class=\"built_in\">stat</span> () `/var/lib/mlocate/mlocate.db<span class=\"string\">': 没有那个文件或目录</span></span><br></pre></td></tr></table></figure></li><li><p>更新数据库使用<code>updatedb</code>命令，搜索使用<code>locate [keyword]</code>即可搜索。</p></li></ul><hr><h2 id=\"find搜索\"><a href=\"#find搜索\" class=\"headerlink\" title=\"find搜索\"></a>find搜索</h2><h3 id=\"find的命令语法\"><a href=\"#find的命令语法\" class=\"headerlink\" title=\"find的命令语法\"></a>find的命令语法</h3><ul><li>find基础语法为<code>find [path] -type [d|f|b|c|s|l] -name [filename|dirname]</code>,<strong>-type</strong>.<strong>-name</strong>都是find命令的参数之一，在使用中可以省略一些参数，<strong>-name</strong>中文件名或目录名支持通配。</li><li>文件的type类型<strong>‘d’</strong>代表目录，<strong>‘l’</strong>代表软链接，<strong>‘f’</strong>代表文件，<strong>‘b’</strong>代表块设备，<strong>‘s’</strong>代表socket文件，<strong>‘c’</strong>代表字符串设备.<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># find /dev/ -type b</span></span><br><span class=\"line\">/dev/sda3</span><br><span class=\"line\">/dev/sda2</span><br><span class=\"line\">/dev/sda1</span><br><span class=\"line\">/dev/sda</span><br><span class=\"line\">/dev/sr0</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"find命令时间参数\"><a href=\"#find命令时间参数\" class=\"headerlink\" title=\"find命令时间参数\"></a>find命令时间参数</h3><ul><li><code>stat</code>命令用来查看文件的详细信息，包括块大小，访问时间等；更改系统语言使用<code>LANG=en</code>。</li></ul><h4 id=\"ctime状态时间\"><a href=\"#ctime状态时间\" class=\"headerlink\" title=\"ctime状态时间\"></a><strong>ctime</strong>状态时间</h4><ul><li><p><code>ctime</code>(Change Time)记录文件权限，所有者、所属组，inode，文件大小等文件属性最后一次被修改的时间，单位为天。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chown :lux files.ini </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># stat files.ini </span></span><br><span class=\"line\">  File: <span class=\"string\">'files.ini'</span></span><br><span class=\"line\">  Size: 80            Blocks: 8          IO Block: 4096   regular file</span><br><span class=\"line\">Device: 803h/2051d    Inode: 67157950    Links: 1</span><br><span class=\"line\">Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: ( 1000/     lux)</span><br><span class=\"line\">Context: unconfined_u:object_r:admin_home_t:s0</span><br><span class=\"line\">Access: 2017-10-25 23:10:21.886836753 +0800</span><br><span class=\"line\">Modify: 2017-10-27 22:46:28.963602514 +0800</span><br><span class=\"line\">Change: 2017-10-27 23:00:52.041127046 +0800</span><br><span class=\"line\"> Birth: -</span><br></pre></td></tr></table></figure></li><li><p>find中<code>ctime</code>参数使用形式为<code>-ctime [+-][n]</code>，减号为<code>ctime</code>在n天以内，加号为<code>ctime</code>在n天以前：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># find . -type f -ctime -1 </span></span><br><span class=\"line\">./.bash_history</span><br><span class=\"line\">./files.ini</span><br><span class=\"line\">./image.img</span><br><span class=\"line\">./virtual.img</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll ./image.img</span></span><br><span class=\"line\">-rw-r--r--. 2 root root 134217728 Oct 27 21:37 ./image.img</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># date</span></span><br><span class=\"line\">Fri Oct 27 23:20:32 CST 2017</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"mtime修改时间\"><a href=\"#mtime修改时间\" class=\"headerlink\" title=\"mtime修改时间\"></a><strong>mtime</strong>修改时间</h4><ul><li><p><code>mtime</code>(Modity Time)记录最后一次对文件内容进行增加删除的时间，单位为天。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># echo \"1234\" &gt;&gt; files.ini </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># stat files.ini </span></span><br><span class=\"line\">  File: <span class=\"string\">'files.ini'</span></span><br><span class=\"line\">  Size: 80            Blocks: 8          IO Block: 4096   regular file</span><br><span class=\"line\">Device: 803h/2051d    Inode: 67157950    Links: 1</span><br><span class=\"line\">Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class=\"line\">Context: unconfined_u:object_r:admin_home_t:s0</span><br><span class=\"line\">Access: 2017-10-25 23:10:21.886836753 +0800</span><br><span class=\"line\">Modify: 2017-10-27 22:46:28.963602514 +0800</span><br><span class=\"line\">Change: 2017-10-27 22:46:28.963602514 +0800</span><br><span class=\"line\"> Birth: -</span><br></pre></td></tr></table></figure></li><li><p>更改<code>mtime</code>,则<code>ctime</code>一定会变，因为增删内容导致文件大小变化，使<code>ctime</code>时间变化。</p></li><li>find中<code>mtime</code>和<code>ctime</code>的用法一致，查看<code>mtime</code>在n天以前或n天以内:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># find /etc/ -type f -mtime +5 -name \"*.sh\"</span></span><br><span class=\"line\">/etc/profile.d/colorgrep.sh</span><br><span class=\"line\">/etc/profile.d/which2.sh</span><br><span class=\"line\">/etc/profile.d/less.sh</span><br><span class=\"line\">/etc/profile.d/colorls.sh</span><br><span class=\"line\">/etc/profile.d/256term.sh</span><br><span class=\"line\">/etc/profile.d/lang.sh</span><br><span class=\"line\">/etc/dhcp/dhclient.d/chrony.sh</span><br><span class=\"line\">/etc/kernel/postinst.d/51-dracut-rescue-postinst.sh</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll /etc/profile.d/less.sh</span></span><br><span class=\"line\">-rw-r--r--. 1 root root 121 Jul 31  2015 /etc/profile.d/less.sh</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># date</span></span><br><span class=\"line\">Fri Oct 27 23:31:31 CST 2017</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"atime访问时间\"><a href=\"#atime访问时间\" class=\"headerlink\" title=\"atime访问时间\"></a><strong>atime</strong>访问时间</h4><ul><li><p><code>atime</code>(Access Time)记录文件内容最后一次被查看的时间，单位为天。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cat files.ini </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">1234</span><br><span class=\"line\">1234</span><br><span class=\"line\">1234</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># stat files.ini </span></span><br><span class=\"line\">  File: <span class=\"string\">'files.ini'</span></span><br><span class=\"line\">  Size: 80            Blocks: 8          IO Block: 4096   regular file</span><br><span class=\"line\">Device: 803h/2051d    Inode: 67157950    Links: 1</span><br><span class=\"line\">Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: ( 1000/     lux)</span><br><span class=\"line\">Context: unconfined_u:object_r:admin_home_t:s0</span><br><span class=\"line\">Access: 2017-10-27 23:08:40.668946564 +0800</span><br><span class=\"line\">Modify: 2017-10-27 22:46:28.963602514 +0800</span><br><span class=\"line\">Change: 2017-10-27 23:00:52.041127046 +0800</span><br><span class=\"line\"> Birth: -</span><br></pre></td></tr></table></figure></li><li><p><code>atime</code>同样和<code>mtime</code>、<code>ctime</code>使用方法相同：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># find . -type f -atime -1 -name \"*.ini\"</span></span><br><span class=\"line\">./files.ini</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll files.ini </span></span><br><span class=\"line\">-rw-r--r--. 1 root lux 80 Oct 27 22:46 files.ini</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"mmin修改时间\"><a href=\"#mmin修改时间\" class=\"headerlink\" title=\"mmin修改时间\"></a><strong>mmin</strong>修改时间</h4><ul><li><code>mmin</code>参数用来查找n分钟之前或n分钟之内的文件，使用方法同<code>mtime</code>等相同,单位为分钟。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># find . -mmin -120 -type f </span></span><br><span class=\"line\">./files.ini</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"find其他参数\"><a href=\"#find其他参数\" class=\"headerlink\" title=\"find其他参数\"></a>find其他参数</h3><h4 id=\"inum按inode查找\"><a href=\"#inum按inode查找\" class=\"headerlink\" title=\"inum按inode查找\"></a>inum按inode查找</h4><ul><li><code>inum</code>参数用来依据inode号查找文件，比如有多个inode号相同的文件，使用<code>-inum [inode]</code>.<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -i virtual.img </span></span><br><span class=\"line\">75 virtual.img</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># find / -inum 75 -type f -mtime -1</span></span><br><span class=\"line\">/root/virtual.img</span><br><span class=\"line\">/tmp/image.img</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"size按文件大小查找\"><a href=\"#size按文件大小查找\" class=\"headerlink\" title=\"size按文件大小查找\"></a>size按文件大小查找</h4><ul><li><code>-size</code>参数可以制定需要查找的文件大小，如<code>-size -10K`</code>-size +10M`:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查找小于1b的文件</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># find . -size -1b -type f </span></span><br><span class=\"line\">./dirname/firstdir/file1.txt</span><br><span class=\"line\">./dirname/.files.txt.swp</span><br><span class=\"line\">./dirname/.files.txt.swx</span><br><span class=\"line\">./dirname/files.txt</span><br><span class=\"line\">./dirname/.file2.txt</span><br><span class=\"line\">./dirname/file2.txt</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll ./dirname/firstdir/file1.txt</span></span><br><span class=\"line\">-rw-r--r--. 1 root lux 0 Oct 25 23:21 ./dirname/firstdir/file1.txt</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"‘o’条件或\"><a href=\"#‘o’条件或\" class=\"headerlink\" title=\"‘o’条件或\"></a>‘o’条件或</h4><ul><li><code>-o</code>参数可以让find的搜索条件使用或，即搜索条件满足其中一个即可：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># find /tmp/ -size +10M -o -mtime -1 -o -type f -o -name \"image*\" </span></span><br><span class=\"line\">/tmp/</span><br><span class=\"line\">/tmp/anaconda-ks.cfg</span><br><span class=\"line\">/tmp/file.txt</span><br><span class=\"line\">/tmp/image.img</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"find的exec选项\"><a href=\"#find的exec选项\" class=\"headerlink\" title=\"find的exec选项\"></a>find的exec选项</h3><ul><li><code>exec</code>选项可以对find搜索出来的结果做进一步的处理，例如对搜索结果执行<code>mv</code>、<code>ls</code>等命令.</li><li><code>exec</code>的使用方法，<code>find [path] -[arg] -[exec] [command] {} \\;</code>，其中<code>{}</code>代表find搜索出来的结果，命令结尾的<code>\\;</code>之后可以继续添加<code>-exec</code>选项。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># find . -mmin -120 -type f -exec ls -l &#123;&#125; \\;</span></span><br><span class=\"line\">-rw-r--r--. 1 root lux 80 Oct 27 22:46 ./files.ini</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mv virtual.img.bak virtual.img</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># find . -size +10M -type f -exec ls -l &#123;&#125; \\; -exec mv &#123;&#125; &#123;&#125;.bak \\; -exec ls -l \\;</span></span><br><span class=\"line\">-rw-r--r--. 2 root root 134217728 Oct 27 21:37 ./virtual.img</span><br><span class=\"line\">total 131084</span><br><span class=\"line\">-rw-------. 1 root root      1422 Aug 19 07:25 anaconda-ks.cfg</span><br><span class=\"line\">-rw-r--r--. 1 root lux         80 Oct 27 22:46 files.ini</span><br><span class=\"line\">-rw-r--r--. 2 root root 134217728 Oct 27 21:37 virtual.img.bak</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"文件名后缀\"><a href=\"#文件名后缀\" class=\"headerlink\" title=\"文件名后缀\"></a>文件名后缀</h1><ul><li><p>在我们使用过程中，创建的文件经常会带后缀名，比如<code>.txt</code>、<code>.sh</code>等；</p></li><li><p>但实际上在Linux中，文件的类型并不是依靠后缀名区分，之所以添加后缀名，主要是方便用户区分；</p></li><li><p>想要准确判断一个文件的类型，可以使用<code>file</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># file install.log</span></span><br><span class=\"line\">install.log: UTF-8 Unicode text</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -l /var/mail</span></span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 08-13 00:11 /var/mail -&gt; spool/mail</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># file /var/mail</span></span><br><span class=\"line\">/var/mail: symbolic link to `spool/mail<span class=\"string\">'</span></span><br></pre></td></tr></table></figure><hr></li></ul><!-- rebuild by neat -->"},{"title":"Centos7系列:使用ssh远程管理系统","author":"Evobot","abbrlink":"cb3f93e8","date":"2018-03-21T14:59:10.000Z","image":"http://p5qynomrl.bkt.clouddn.com/1521646685090x27m0c8b.png?imageslim","photo":null,"_content":"\n虚拟机里安装的系统，无法使用鼠标，无法复制粘贴，使用起来不太方便，所以一般都会使用SSH客户端来管理Linux系统，这里使用PuTTY和Xshell来远程连接Centos7，并且使用密钥认证来保证连接的安全。\n\n<!-- more -->\n\n# 使用PuTTY和Xshell远程管理系统\n\n## PuTTY的使用\n\n- PuTTY是一个SSH/Telnet客户端，可以让我们方便的登陆管理远程机器，可以在这里[下载](https://the.earth.li/~sgtatham/putty/latest/w32/putty-0.70-installer.msi)。\n\n\n- 打开软件，界面如下：\n\n  ![PuTTY](http://p5qynomrl.bkt.clouddn.com/1521645606365crhs2ghy.png?imageslim)\n\n- PuTTY的具体设置可以参考这篇博文：[Putty工具保存配置的小技巧](http://blog.csdn.net/tianlesoftware/article/details/5831605)\n\n- 点击**Open**就可以看到登陆窗口：\n\n  ![登陆窗口](http://p5qynomrl.bkt.clouddn.com/15216461185495xjxn33b.png?imageslim)\n\n- 与在虚拟机中登陆相同，输入用户名root和密码，就可以登陆到Centos系统。\n\n## Xshell的使用\n\n- Xshell与PuTTY相比，功能更强大，界面也更美观。\n\n- Xshell打开时会显示会话窗口，我们点击新建来创建一个新的连接：\n\n  ![Xshell](http://p5qynomrl.bkt.clouddn.com/1521646685090x27m0c8b.png?imageslim)\n\n- 新建会话如下，填写主机的名称，IP地址以及端口号，SSH协议默认为22端口：\n\n  ![新建会话](http://p5qynomrl.bkt.clouddn.com/1521646893899i9spdd1t.png?imageslim)\n\n- 其余我们可以设置用户身份验证，输入用户面密码或者使用密钥认证，还要外观配置等等，更加详细的Xshell配置，可以参考这篇博文：[Xshell学习](https://www.cnblogs.com/perseverancevictory/p/4910145.html)\n\n# 密钥认证\n\n- 密钥认证使用一对公钥和私钥来对连接主机的会话进行安全认证，在服务器上放置公钥，本地电脑放置私钥，这样在以后连接时，就只有与公钥配对的私钥主机能够连接服务器，以确保登陆的用户是可信任的。\n\n## PuTTY使用密钥认证\n\n- 安装PuTTY时，默认安装的有`PuTTYgen`软件，打开软件，点击**Generate**来生成密钥对,在生成时需要晃动鼠标加快生成速度：\n\n  ![PuTTYgen](http://p5qynomrl.bkt.clouddn.com/1521648026211ycih6g5o.png?imageslim)\n\n- 如图所示，红框1内就是生成的公钥，点击红框2的**Save private key**，将私钥保存到本地。\n\n  ![生成密钥](http://p5qynomrl.bkt.clouddn.com/1521648266102nqn3osvx.png?imageslim********)\n\n## 添加公钥到Centos\n\n- 登陆到主机，创建隐藏目录`.ssh`,我们的公钥都需要写入这个目录下的`authorize_keys`文件内：\n\n```bash\n[root@localhost ~]# mkdir .ssh\n[root@localhost ~]# chmod 700 .ssh/\t# 更改目录权限\n[root@localhost ~]# touch .ssh/authorized_keys\n```\n\n- 然后打开`authorized_keys`文件，将生成的公钥字符串粘贴到文件内保存退出；\n- 之后还需要关闭`selinux`，使用命令`setenforce 0`临时关闭selinux；\n- 接下来在PuTTY中配置会话的私钥，如下图，选中已经保存的私钥，然后在session内保存即可：\n\n  ![加载私钥](http://p5qynomrl.bkt.clouddn.com/1521649098132szmq5m5r.png?imageslim)\n\n- 点击Open，输入用户名root，这时就不用输入密码即可登陆到系统：\n  \n  ![密钥登陆](http://p5qynomrl.bkt.clouddn.com/1521649365052zfmeg2wi.png?imageslim)\n\n## Xshell使用密钥认证\n\n- Xshell生成密钥只需要在窗口菜单栏点击**工具**-**新建用户密钥生成向导**，点击两次下一步到设置密钥的名称以及密钥加密密码：\n\n  ![Xshell生成密钥](http://p5qynomrl.bkt.clouddn.com/1521649669179f475f92v.png?imageslim)\n\n- 点击下一步会显示生成的公钥字符串，与之前添加公钥的方式相同，到Centos中添加公钥。\n\n- 然后在Xshell的窗口中打开会话属性，在用户身份验证中配置私钥即可：\n\n  ![Xshell密钥登陆](http://p5qynomrl.bkt.clouddn.com/15216501748407pz0kf1w.png?imageslim)\n\n- 之后我们点击连接就不再需要输入用户名密码即可登陆。\n\n---\n\n","source":"_posts/Centos7系列-使用ssh远程管理系统.md","raw":"---\ntitle: 'Centos7系列:使用ssh远程管理系统'\nauthor: Evobot\nabbrlink: cb3f93e8\ndate: 2018-03-21 22:59:10\ncategories: Centos7\ntags: [Linux, Centos]\nimage: http://p5qynomrl.bkt.clouddn.com/1521646685090x27m0c8b.png?imageslim\nphoto:\n---\n\n虚拟机里安装的系统，无法使用鼠标，无法复制粘贴，使用起来不太方便，所以一般都会使用SSH客户端来管理Linux系统，这里使用PuTTY和Xshell来远程连接Centos7，并且使用密钥认证来保证连接的安全。\n\n<!-- more -->\n\n# 使用PuTTY和Xshell远程管理系统\n\n## PuTTY的使用\n\n- PuTTY是一个SSH/Telnet客户端，可以让我们方便的登陆管理远程机器，可以在这里[下载](https://the.earth.li/~sgtatham/putty/latest/w32/putty-0.70-installer.msi)。\n\n\n- 打开软件，界面如下：\n\n  ![PuTTY](http://p5qynomrl.bkt.clouddn.com/1521645606365crhs2ghy.png?imageslim)\n\n- PuTTY的具体设置可以参考这篇博文：[Putty工具保存配置的小技巧](http://blog.csdn.net/tianlesoftware/article/details/5831605)\n\n- 点击**Open**就可以看到登陆窗口：\n\n  ![登陆窗口](http://p5qynomrl.bkt.clouddn.com/15216461185495xjxn33b.png?imageslim)\n\n- 与在虚拟机中登陆相同，输入用户名root和密码，就可以登陆到Centos系统。\n\n## Xshell的使用\n\n- Xshell与PuTTY相比，功能更强大，界面也更美观。\n\n- Xshell打开时会显示会话窗口，我们点击新建来创建一个新的连接：\n\n  ![Xshell](http://p5qynomrl.bkt.clouddn.com/1521646685090x27m0c8b.png?imageslim)\n\n- 新建会话如下，填写主机的名称，IP地址以及端口号，SSH协议默认为22端口：\n\n  ![新建会话](http://p5qynomrl.bkt.clouddn.com/1521646893899i9spdd1t.png?imageslim)\n\n- 其余我们可以设置用户身份验证，输入用户面密码或者使用密钥认证，还要外观配置等等，更加详细的Xshell配置，可以参考这篇博文：[Xshell学习](https://www.cnblogs.com/perseverancevictory/p/4910145.html)\n\n# 密钥认证\n\n- 密钥认证使用一对公钥和私钥来对连接主机的会话进行安全认证，在服务器上放置公钥，本地电脑放置私钥，这样在以后连接时，就只有与公钥配对的私钥主机能够连接服务器，以确保登陆的用户是可信任的。\n\n## PuTTY使用密钥认证\n\n- 安装PuTTY时，默认安装的有`PuTTYgen`软件，打开软件，点击**Generate**来生成密钥对,在生成时需要晃动鼠标加快生成速度：\n\n  ![PuTTYgen](http://p5qynomrl.bkt.clouddn.com/1521648026211ycih6g5o.png?imageslim)\n\n- 如图所示，红框1内就是生成的公钥，点击红框2的**Save private key**，将私钥保存到本地。\n\n  ![生成密钥](http://p5qynomrl.bkt.clouddn.com/1521648266102nqn3osvx.png?imageslim********)\n\n## 添加公钥到Centos\n\n- 登陆到主机，创建隐藏目录`.ssh`,我们的公钥都需要写入这个目录下的`authorize_keys`文件内：\n\n```bash\n[root@localhost ~]# mkdir .ssh\n[root@localhost ~]# chmod 700 .ssh/\t# 更改目录权限\n[root@localhost ~]# touch .ssh/authorized_keys\n```\n\n- 然后打开`authorized_keys`文件，将生成的公钥字符串粘贴到文件内保存退出；\n- 之后还需要关闭`selinux`，使用命令`setenforce 0`临时关闭selinux；\n- 接下来在PuTTY中配置会话的私钥，如下图，选中已经保存的私钥，然后在session内保存即可：\n\n  ![加载私钥](http://p5qynomrl.bkt.clouddn.com/1521649098132szmq5m5r.png?imageslim)\n\n- 点击Open，输入用户名root，这时就不用输入密码即可登陆到系统：\n  \n  ![密钥登陆](http://p5qynomrl.bkt.clouddn.com/1521649365052zfmeg2wi.png?imageslim)\n\n## Xshell使用密钥认证\n\n- Xshell生成密钥只需要在窗口菜单栏点击**工具**-**新建用户密钥生成向导**，点击两次下一步到设置密钥的名称以及密钥加密密码：\n\n  ![Xshell生成密钥](http://p5qynomrl.bkt.clouddn.com/1521649669179f475f92v.png?imageslim)\n\n- 点击下一步会显示生成的公钥字符串，与之前添加公钥的方式相同，到Centos中添加公钥。\n\n- 然后在Xshell的窗口中打开会话属性，在用户身份验证中配置私钥即可：\n\n  ![Xshell密钥登陆](http://p5qynomrl.bkt.clouddn.com/15216501748407pz0kf1w.png?imageslim)\n\n- 之后我们点击连接就不再需要输入用户名密码即可登陆。\n\n---\n\n","slug":"Centos7系列-使用ssh远程管理系统","published":1,"updated":"2018-06-02T13:01:29.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gaz7f000du1jxmzmv0fey","content":"<!-- build time:Tue Jun 05 2018 16:57:37 GMT+0800 (CST) --><p>虚拟机里安装的系统，无法使用鼠标，无法复制粘贴，使用起来不太方便，所以一般都会使用SSH客户端来管理Linux系统，这里使用PuTTY和Xshell来远程连接Centos7，并且使用密钥认证来保证连接的安全。</p><a id=\"more\"></a><h1 id=\"使用PuTTY和Xshell远程管理系统\"><a href=\"#使用PuTTY和Xshell远程管理系统\" class=\"headerlink\" title=\"使用PuTTY和Xshell远程管理系统\"></a>使用PuTTY和Xshell远程管理系统</h1><h2 id=\"PuTTY的使用\"><a href=\"#PuTTY的使用\" class=\"headerlink\" title=\"PuTTY的使用\"></a>PuTTY的使用</h2><ul><li>PuTTY是一个SSH/Telnet客户端，可以让我们方便的登陆管理远程机器，可以在这里<a href=\"https://the.earth.li/~sgtatham/putty/latest/w32/putty-0.70-installer.msi\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">下载</a>。</li></ul><ul><li><p>打开软件，界面如下：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1521645606365crhs2ghy.png?imageslim\" alt=\"PuTTY\"></p></li><li><p>PuTTY的具体设置可以参考这篇博文：<a href=\"http://blog.csdn.net/tianlesoftware/article/details/5831605\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Putty工具保存配置的小技巧</a></p></li><li><p>点击<strong>Open</strong>就可以看到登陆窗口：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/15216461185495xjxn33b.png?imageslim\" alt=\"登陆窗口\"></p></li><li><p>与在虚拟机中登陆相同，输入用户名root和密码，就可以登陆到Centos系统。</p></li></ul><h2 id=\"Xshell的使用\"><a href=\"#Xshell的使用\" class=\"headerlink\" title=\"Xshell的使用\"></a>Xshell的使用</h2><ul><li><p>Xshell与PuTTY相比，功能更强大，界面也更美观。</p></li><li><p>Xshell打开时会显示会话窗口，我们点击新建来创建一个新的连接：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1521646685090x27m0c8b.png?imageslim\" alt=\"Xshell\"></p></li><li><p>新建会话如下，填写主机的名称，IP地址以及端口号，SSH协议默认为22端口：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1521646893899i9spdd1t.png?imageslim\" alt=\"新建会话\"></p></li><li><p>其余我们可以设置用户身份验证，输入用户面密码或者使用密钥认证，还要外观配置等等，更加详细的Xshell配置，可以参考这篇博文：<a href=\"https://www.cnblogs.com/perseverancevictory/p/4910145.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Xshell学习</a></p></li></ul><h1 id=\"密钥认证\"><a href=\"#密钥认证\" class=\"headerlink\" title=\"密钥认证\"></a>密钥认证</h1><ul><li>密钥认证使用一对公钥和私钥来对连接主机的会话进行安全认证，在服务器上放置公钥，本地电脑放置私钥，这样在以后连接时，就只有与公钥配对的私钥主机能够连接服务器，以确保登陆的用户是可信任的。</li></ul><h2 id=\"PuTTY使用密钥认证\"><a href=\"#PuTTY使用密钥认证\" class=\"headerlink\" title=\"PuTTY使用密钥认证\"></a>PuTTY使用密钥认证</h2><ul><li><p>安装PuTTY时，默认安装的有<code>PuTTYgen</code>软件，打开软件，点击<strong>Generate</strong>来生成密钥对,在生成时需要晃动鼠标加快生成速度：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1521648026211ycih6g5o.png?imageslim\" alt=\"PuTTYgen\"></p></li><li><p>如图所示，红框1内就是生成的公钥，点击红框2的<strong>Save private key</strong>，将私钥保存到本地。</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1521648266102nqn3osvx.png?imageslim********\" alt=\"生成密钥\"></p></li></ul><h2 id=\"添加公钥到Centos\"><a href=\"#添加公钥到Centos\" class=\"headerlink\" title=\"添加公钥到Centos\"></a>添加公钥到Centos</h2><ul><li>登陆到主机，创建隐藏目录<code>.ssh</code>,我们的公钥都需要写入这个目录下的<code>authorize_keys</code>文件内：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkdir .ssh</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chmod 700 .ssh/\t# 更改目录权限</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># touch .ssh/authorized_keys</span></span><br></pre></td></tr></table></figure><ul><li>然后打开<code>authorized_keys</code>文件，将生成的公钥字符串粘贴到文件内保存退出；</li><li>之后还需要关闭<code>selinux</code>，使用命令<code>setenforce 0</code>临时关闭selinux；</li><li><p>接下来在PuTTY中配置会话的私钥，如下图，选中已经保存的私钥，然后在session内保存即可：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1521649098132szmq5m5r.png?imageslim\" alt=\"加载私钥\"></p></li><li><p>点击Open，输入用户名root，这时就不用输入密码即可登陆到系统：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1521649365052zfmeg2wi.png?imageslim\" alt=\"密钥登陆\"></p></li></ul><h2 id=\"Xshell使用密钥认证\"><a href=\"#Xshell使用密钥认证\" class=\"headerlink\" title=\"Xshell使用密钥认证\"></a>Xshell使用密钥认证</h2><ul><li><p>Xshell生成密钥只需要在窗口菜单栏点击<strong>工具</strong>-<strong>新建用户密钥生成向导</strong>，点击两次下一步到设置密钥的名称以及密钥加密密码：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1521649669179f475f92v.png?imageslim\" alt=\"Xshell生成密钥\"></p></li><li><p>点击下一步会显示生成的公钥字符串，与之前添加公钥的方式相同，到Centos中添加公钥。</p></li><li><p>然后在Xshell的窗口中打开会话属性，在用户身份验证中配置私钥即可：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/15216501748407pz0kf1w.png?imageslim\" alt=\"Xshell密钥登陆\"></p></li><li><p>之后我们点击连接就不再需要输入用户名密码即可登陆。</p></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:37 GMT+0800 (CST) --><p>虚拟机里安装的系统，无法使用鼠标，无法复制粘贴，使用起来不太方便，所以一般都会使用SSH客户端来管理Linux系统，这里使用PuTTY和Xshell来远程连接Centos7，并且使用密钥认证来保证连接的安全。</p>","more":"<h1 id=\"使用PuTTY和Xshell远程管理系统\"><a href=\"#使用PuTTY和Xshell远程管理系统\" class=\"headerlink\" title=\"使用PuTTY和Xshell远程管理系统\"></a>使用PuTTY和Xshell远程管理系统</h1><h2 id=\"PuTTY的使用\"><a href=\"#PuTTY的使用\" class=\"headerlink\" title=\"PuTTY的使用\"></a>PuTTY的使用</h2><ul><li>PuTTY是一个SSH/Telnet客户端，可以让我们方便的登陆管理远程机器，可以在这里<a href=\"https://the.earth.li/~sgtatham/putty/latest/w32/putty-0.70-installer.msi\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">下载</a>。</li></ul><ul><li><p>打开软件，界面如下：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1521645606365crhs2ghy.png?imageslim\" alt=\"PuTTY\"></p></li><li><p>PuTTY的具体设置可以参考这篇博文：<a href=\"http://blog.csdn.net/tianlesoftware/article/details/5831605\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Putty工具保存配置的小技巧</a></p></li><li><p>点击<strong>Open</strong>就可以看到登陆窗口：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/15216461185495xjxn33b.png?imageslim\" alt=\"登陆窗口\"></p></li><li><p>与在虚拟机中登陆相同，输入用户名root和密码，就可以登陆到Centos系统。</p></li></ul><h2 id=\"Xshell的使用\"><a href=\"#Xshell的使用\" class=\"headerlink\" title=\"Xshell的使用\"></a>Xshell的使用</h2><ul><li><p>Xshell与PuTTY相比，功能更强大，界面也更美观。</p></li><li><p>Xshell打开时会显示会话窗口，我们点击新建来创建一个新的连接：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1521646685090x27m0c8b.png?imageslim\" alt=\"Xshell\"></p></li><li><p>新建会话如下，填写主机的名称，IP地址以及端口号，SSH协议默认为22端口：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1521646893899i9spdd1t.png?imageslim\" alt=\"新建会话\"></p></li><li><p>其余我们可以设置用户身份验证，输入用户面密码或者使用密钥认证，还要外观配置等等，更加详细的Xshell配置，可以参考这篇博文：<a href=\"https://www.cnblogs.com/perseverancevictory/p/4910145.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Xshell学习</a></p></li></ul><h1 id=\"密钥认证\"><a href=\"#密钥认证\" class=\"headerlink\" title=\"密钥认证\"></a>密钥认证</h1><ul><li>密钥认证使用一对公钥和私钥来对连接主机的会话进行安全认证，在服务器上放置公钥，本地电脑放置私钥，这样在以后连接时，就只有与公钥配对的私钥主机能够连接服务器，以确保登陆的用户是可信任的。</li></ul><h2 id=\"PuTTY使用密钥认证\"><a href=\"#PuTTY使用密钥认证\" class=\"headerlink\" title=\"PuTTY使用密钥认证\"></a>PuTTY使用密钥认证</h2><ul><li><p>安装PuTTY时，默认安装的有<code>PuTTYgen</code>软件，打开软件，点击<strong>Generate</strong>来生成密钥对,在生成时需要晃动鼠标加快生成速度：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1521648026211ycih6g5o.png?imageslim\" alt=\"PuTTYgen\"></p></li><li><p>如图所示，红框1内就是生成的公钥，点击红框2的<strong>Save private key</strong>，将私钥保存到本地。</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1521648266102nqn3osvx.png?imageslim********\" alt=\"生成密钥\"></p></li></ul><h2 id=\"添加公钥到Centos\"><a href=\"#添加公钥到Centos\" class=\"headerlink\" title=\"添加公钥到Centos\"></a>添加公钥到Centos</h2><ul><li>登陆到主机，创建隐藏目录<code>.ssh</code>,我们的公钥都需要写入这个目录下的<code>authorize_keys</code>文件内：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkdir .ssh</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chmod 700 .ssh/\t# 更改目录权限</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># touch .ssh/authorized_keys</span></span><br></pre></td></tr></table></figure><ul><li>然后打开<code>authorized_keys</code>文件，将生成的公钥字符串粘贴到文件内保存退出；</li><li>之后还需要关闭<code>selinux</code>，使用命令<code>setenforce 0</code>临时关闭selinux；</li><li><p>接下来在PuTTY中配置会话的私钥，如下图，选中已经保存的私钥，然后在session内保存即可：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1521649098132szmq5m5r.png?imageslim\" alt=\"加载私钥\"></p></li><li><p>点击Open，输入用户名root，这时就不用输入密码即可登陆到系统：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1521649365052zfmeg2wi.png?imageslim\" alt=\"密钥登陆\"></p></li></ul><h2 id=\"Xshell使用密钥认证\"><a href=\"#Xshell使用密钥认证\" class=\"headerlink\" title=\"Xshell使用密钥认证\"></a>Xshell使用密钥认证</h2><ul><li><p>Xshell生成密钥只需要在窗口菜单栏点击<strong>工具</strong>-<strong>新建用户密钥生成向导</strong>，点击两次下一步到设置密钥的名称以及密钥加密密码：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1521649669179f475f92v.png?imageslim\" alt=\"Xshell生成密钥\"></p></li><li><p>点击下一步会显示生成的公钥字符串，与之前添加公钥的方式相同，到Centos中添加公钥。</p></li><li><p>然后在Xshell的窗口中打开会话属性，在用户身份验证中配置私钥即可：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/15216501748407pz0kf1w.png?imageslim\" alt=\"Xshell密钥登陆\"></p></li><li><p>之后我们点击连接就不再需要输入用户名密码即可登陆。</p></li></ul><hr><!-- rebuild by neat -->"},{"title":"Centos7系列:单用户及救援模式和虚拟机克隆操作","author":"Evobot","image":"http://p5qynomrl.bkt.clouddn.com/1521312295772z2f2ptcr.png?imageslim","abbrlink":"19bc2f97","date":"2018-03-22T14:21:04.000Z","photo":null,"_content":"\n对于忘记root密码的情况，我们可以进入Centos的单用户模式或者使用安装光盘进入救援模式，来修改我们的root密码，下面为如何进入单用户模式和救援模式并修改root密码的详细步骤。另外介绍了如何在VMware中克隆虚拟机并在Linux中使用SSH相互登陆。\n<!-- more -->\n\n# Centos7单用户模式\n\n## 配置单用户模式\n\n1. 在Centos7启动界面下，对第一个启动项按**e**键进入配置界面。\n  ![grub配置](http://p5qynomrl.bkt.clouddn.com/1521312295772z2f2ptcr.png?imageslim)\n2. 将光标定位到`linux16`开头的行，再将光标移动到**ro**位置。\n  ![启动项配置](http://p5qynomrl.bkt.clouddn.com/15213123237461a612knk.png?imageslim)\n3. 将**ro**只读修改为**rw**读写模式，并且添加`init=/sysroot/bin/sh`在**rw**后面。\n  ![修改启动项](http://p5qynomrl.bkt.clouddn.com/1521312341229joes7584.png?imageslim)\n4. **sysroot**就是我们原先的系统root路径，完成之后，按**Ctrl+x**键，保存退出。\n\n## 进入单用户模式\n\n- 进入到系统后，需要切换到我们原有系统的环境下再继续操作，所以首先执行`chroot /sysroot/`命令切换到我们原系统**root**环境。\n\n  ```bash\n  :/# chroot /sysroot/\n  ```\n\n## 修改系统语言编码\n\n- 为了防止出现乱码的情况，首先修改系统语言环境为英文。\n\n  ```bash\n  :/# LANG=en\n  ```\n\n## 修改root密码\n\n- 这时候我们执行`passwd root`来修改root的密码。\n\n  ```bash\n  :/# passwd root\n  Changing password for user root.\n  New password:\n  Retype new password:\n  ```\n\n## 创建autorelabel文件\n\n- 修改完密码后，还需要创建**autorelabel**文件，这样重启才能进入系统。\n\n  ```bash\n  :/# touch /.autorelabel\n  ```\n\n- 执行完所有操作后重启计算机即可使用新的密码登陆root账户。\n\n# Centos7救援模式\n\n## 系统运行级别\n\n- centos一共有0~6这7个运行级别，没有图形界面的情况下，默认运行级别为3，下面的命令可以查看系统的所有运行级别：\n\n  ```bash\n  [root@centos ~]# ls -l /usr/lib/systemd/system/runlevel*target\n  lrwxrwxrwx 1 root root 15 Mar 12 16:48 /usr/lib/systemd/system/runlevel0.target -> poweroff.target\n  lrwxrwxrwx 1 root root 13 Mar 12 16:48 /usr/lib/systemd/system/runlevel1.target -> rescue.target\n  lrwxrwxrwx 1 root root 17 Mar 12 16:48 /usr/lib/systemd/system/runlevel2.target -> multi-user.target\n  lrwxrwxrwx 1 root root 17 Mar 12 16:48 /usr/lib/systemd/system/runlevel3.target -> multi-user.target\n  lrwxrwxrwx 1 root root 17 Mar 12 16:48 /usr/lib/systemd/system/runlevel4.target -> multi-user.target\n  lrwxrwxrwx 1 root root 16 Mar 12 16:48 /usr/lib/systemd/system/runlevel5.target -> graphical.target\n  lrwxrwxrwx 1 root root 13 Mar 12 16:48 /usr/lib/systemd/system/runlevel6.target -> reboot.target\n  ```\n\n- 其中的`runlevel`后面的数字就是对应的运行级别，在Centos7中，单用户模式对应的其实是`rescue.target`；\n\n- 7个运行级别所对应的模式如下表：\n\n|    运行级别     |    对应target     |                对应模式                |\n| :-------------: | :---------------: | :------------------------------------: |\n|    runlevel0    |  poweroff.target  |                  关机                  |\n|    runlevel1    |   rescue.target   |               单用户模式               |\n| runlevel2、3、4 | multi-user.target | 多用户模式，无图形界面 |\n|    runlevel5    | graphical.target  |                图形界面                |\n|    runlevel6    |   reboot.target   |                  重启                  |\n\n\n## Centos7救援模式\n\n- 有些主机为grub进行了加密，这样在忘记了密码的情况下，就无法进入单用户模式；而救援模式则是使用安装系统时的安装光盘来进行修改密码的操作。\n\n- 将虚拟机关机，设置光驱为安装系统时的安装光盘，选择VMware菜单中的虚拟机-电源-打开电源时进入固件；\n\n- 在BIOS中选择boot，使用**+-**号将CD-ROM移到首位，再按**F10**保存退出；\n\n  ![bios设置](http://p5qynomrl.bkt.clouddn.com/152173531953668h6dyus.png?imageslim)\n\n- 进入安装光盘的启动界面，选择第三项`Troubleshooting`，然后选择`Rescue a CentOS system`回车两次；\n\n- 然后进入交互界面，输入1表示`Continue`回车，然后再次回车进入shell；\n\n- 这时会有提示`chroot /mnt/sysimage`，这个`sysimage`就是我们原系统的根目录，执行这条命令的作用与单用户模式的`chroot /sysroot/`相同；\n\n- `chroot`之后就会进入bash，然后使用`passwd`命令更改root密码并重启系统即可，重启系统时，需要修改BIOS启动项为`Hard Drive`或者将光驱镜像取消。\n\n# 虚拟机克隆\n\n虚拟机克隆可以让我们在不用创建新虚拟机的情况下，从原虚拟机克隆出一个新的虚拟机来使用。\n\n- 关闭虚拟机，选择VMware菜单上的虚拟机-管理-克隆，进入克隆虚拟机向导界面；\n\n- 选择克隆自虚拟机中的当前状态-创建链接克隆，然后为克隆的虚拟机命名并指定存储位置；\n\n- 启动克隆出来的虚拟机，登陆系统，这时系统的IP地址与原虚拟机是相同的，所以我们需要修改系统的IP地址，并删除配置文件中的UUID行，然后重启网络服务；\n\n- 之后修改系统的主机名，使用`hostname`命令可以查看系统的主机名，使用`hostnamectl set-hostname evobot02`来设置新的主机名，然后退出重新登陆，新的主机名即可生效：\n\n  ```bash\n  [root@localhost ~]# hostname\n  localhost.localdomain\n  [root@localhost ~]# hostnamectl set-hostname evobot02\n  [root@localhost ~]# hostname\n  evobot02\n  [root@evobot02 ~]# logout\n  [root@evobot02 ~]#\n  ```\n\n- 系统的主机名配置文件为`/etc/hostname`。\n\n\n# Linux相互登陆\n\n在实际使用中，经常需要从一台Linux服务器登陆到另一台Linux服务器，这时候就需要掌握如何在两台Linux之间相互登陆的知识。\n\n##  ssh命令登陆\n\n- 命令`w`可以查看有哪些客户端登陆到系统：\n\n  ```bash\n  [root@evobot02 ~]# w\n   01:15:29 up 26 min,  2 users,  load average: 0.00, 0.01, 0.02\n  USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\n  root     tty1                      01:07    8:25   0.01s  0.01s -bash\n  root     pts/0    192.168.253.1    01:07    1.00s  0.05s  0.03s w\n  ```\n\n- 使用命令`ssh ip`可以登陆另一个Linux系统：\n\n  ```bash\n  [root@evobot02 ~]# ssh 192.168.253.133\n  The authenticity of host '192.168.253.133 (192.168.253.133)' can't be established.\n  ECDSA key fingerprint is SHA256:kXUH0kDjliChKsWQTmWL/uDammTO8OYDHj4CaQE4oYw.\n  ECDSA key fingerprint is MD5:e5:87:58:2d:d9:a1:38:12:b6:36:a0:41:d2:b9:50:ab.\n  Are you sure you want to continue connecting (yes/no)? yes\n  Last login: Fri Mar 23 01:21:14 2018 from 192.168.253.134\n  [root@evobot01 ~]#\n  [root@evobot01 ~]# w\n   01:22:59 up 28 min,  2 users,  load average: 0.00, 0.01, 0.05\n  USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\n  root     pts/0    192.168.253.134  01:22    3.00s  0.05s  0.03s w\n  root     pts/1    192.168.253.1    01:14    7:31   0.03s  0.03s -bash\n  ```\n\n- 可以看到主机名已经变成了evobot01，`w`命令看到有从IP`192.168.253.134`登陆的用户；\n\n- `ssh`命令的标准写法是`ssh username@ip -p port`，在不指定username的情况下，是使用当前系统的用户名去连接对端主机，`-p`参数是指定ssh的端口：\n\n  ```bash\n  [root@evobot01 ~]# ssh root@192.168.253.134 -p 22\n  The authenticity of host '192.168.253.134 (192.168.253.134)' can't be established.\n  ECDSA key fingerprint is SHA256:kXUH0kDjliChKsWQTmWL/uDammTO8OYDHj4CaQE4oYw.\n  ECDSA key fingerprint is MD5:e5:87:58:2d:d9:a1:38:12:b6:36:a0:41:d2:b9:50:ab.\n  Are you sure you want to continue connecting (yes/no)? yes\n  Warning: Permanently added '192.168.253.134' (ECDSA) to the list of known hosts.\n  root@192.168.253.134's password:\n  Last login: Fri Mar 23 01:07:25 2018 from 192.168.253.1\n  ```\n\n## 密钥登陆\n\n两台Linux之间也可以使用密钥登陆，首先需要生成主机的ssh密钥对，然后将公钥添加到对端机器的`authorized_keys`文件。\n\n- 生成密钥对，使用`ssh-keygen`命令：\n\n  ```bash\n  [root@evobot01 ~]# ssh-keygen\n  Generating public/private rsa key pair.\n  Enter file in which to save the key (/root/.ssh/id_rsa):# 指定存储密钥的路径，回车即可\n  Enter passphrase (empty for no passphrase):\t\t# 设置密钥密码，为空即可\n  Enter same passphrase again:\t# 再次输入密码\n  Your identification has been saved in /root/.ssh/id_rsa.\t# 私钥\n  Your public key has been saved in /root/.ssh/id_rsa.pub.\t# 公钥\n  The key fingerprint is:\n  SHA256:Ccn7HtJMEgDJvcPNRCZoC9vxp+91r65zq4+r7S4Iaoo root@evobot01\n  The key's randomart image is:\n  +---[RSA 2048]----+\n  | ..=o.o          |\n  |. * .=..         |\n  | = = ==          |\n  |. o = ++ .       |\n  |     +o S        |\n  |  . .  *         |\n  | . . o. * .      |\n  |o.  . o=.+..     |\n  |E    .o=XO=o.    |\n  +----[SHA256]-----+\n  ```\n\n- 生成的密钥对默认在家目录的`.ssh/`目录下，然后将公钥的内容写入对端机器`authorized_keys`;\n\n- 关闭selinux后，就可以使用密钥认证登陆对端主机：\n\n  ```bash\n  [root@evobot01 ~]# cat .ssh/id_rsa.pub\n  ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDsHTIbFZs6WtQzBXZCwul5fqb7pVGcISVnzD69MmsDIyTnPL3F7M0Rl/a6nQcYC+G3s+OR+d+hjNrOcceTX+odZdCnzcRkALwS1r45KcxGpic7m9vMh3Kj04hhTbhCmZJTm9TTSSjhOyF/hNhKavIOfUPJdYy6SS7zAO3GLr67rwg8tmL/qf3muVvhdAXg2lZh0xQXJa7IB/XBq4zYb32sQs6RGE2Sf4NnzTC6IpSYUWfucMJCaZeevCraYe7fo3kuh8fa7kWj+qwbuBLHojzfcEro7elpur4qh+OdNHCeR+gcpC51qrtyvYj9JtRRKoHq1ZG6VJRRFSV+Dvo9vSnX root@evobot01\n  [root@evobot01 ~]# ssh root@192.168.253.134 -p 22\n  Last login: Fri Mar 23 01:30:56 2018 from 192.168.253.1\n  ```\n\n---\n\n","source":"_posts/Centos7系列-单用户及救援模式和虚拟机克隆操作.md","raw":"---\ntitle: 'Centos7系列:单用户及救援模式和虚拟机克隆操作'\nauthor: Evobot\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\nimage: 'http://p5qynomrl.bkt.clouddn.com/1521312295772z2f2ptcr.png?imageslim'\nabbrlink: 19bc2f97\ndate: 2018-03-22 22:21:04\nphoto:\n---\n\n对于忘记root密码的情况，我们可以进入Centos的单用户模式或者使用安装光盘进入救援模式，来修改我们的root密码，下面为如何进入单用户模式和救援模式并修改root密码的详细步骤。另外介绍了如何在VMware中克隆虚拟机并在Linux中使用SSH相互登陆。\n<!-- more -->\n\n# Centos7单用户模式\n\n## 配置单用户模式\n\n1. 在Centos7启动界面下，对第一个启动项按**e**键进入配置界面。\n  ![grub配置](http://p5qynomrl.bkt.clouddn.com/1521312295772z2f2ptcr.png?imageslim)\n2. 将光标定位到`linux16`开头的行，再将光标移动到**ro**位置。\n  ![启动项配置](http://p5qynomrl.bkt.clouddn.com/15213123237461a612knk.png?imageslim)\n3. 将**ro**只读修改为**rw**读写模式，并且添加`init=/sysroot/bin/sh`在**rw**后面。\n  ![修改启动项](http://p5qynomrl.bkt.clouddn.com/1521312341229joes7584.png?imageslim)\n4. **sysroot**就是我们原先的系统root路径，完成之后，按**Ctrl+x**键，保存退出。\n\n## 进入单用户模式\n\n- 进入到系统后，需要切换到我们原有系统的环境下再继续操作，所以首先执行`chroot /sysroot/`命令切换到我们原系统**root**环境。\n\n  ```bash\n  :/# chroot /sysroot/\n  ```\n\n## 修改系统语言编码\n\n- 为了防止出现乱码的情况，首先修改系统语言环境为英文。\n\n  ```bash\n  :/# LANG=en\n  ```\n\n## 修改root密码\n\n- 这时候我们执行`passwd root`来修改root的密码。\n\n  ```bash\n  :/# passwd root\n  Changing password for user root.\n  New password:\n  Retype new password:\n  ```\n\n## 创建autorelabel文件\n\n- 修改完密码后，还需要创建**autorelabel**文件，这样重启才能进入系统。\n\n  ```bash\n  :/# touch /.autorelabel\n  ```\n\n- 执行完所有操作后重启计算机即可使用新的密码登陆root账户。\n\n# Centos7救援模式\n\n## 系统运行级别\n\n- centos一共有0~6这7个运行级别，没有图形界面的情况下，默认运行级别为3，下面的命令可以查看系统的所有运行级别：\n\n  ```bash\n  [root@centos ~]# ls -l /usr/lib/systemd/system/runlevel*target\n  lrwxrwxrwx 1 root root 15 Mar 12 16:48 /usr/lib/systemd/system/runlevel0.target -> poweroff.target\n  lrwxrwxrwx 1 root root 13 Mar 12 16:48 /usr/lib/systemd/system/runlevel1.target -> rescue.target\n  lrwxrwxrwx 1 root root 17 Mar 12 16:48 /usr/lib/systemd/system/runlevel2.target -> multi-user.target\n  lrwxrwxrwx 1 root root 17 Mar 12 16:48 /usr/lib/systemd/system/runlevel3.target -> multi-user.target\n  lrwxrwxrwx 1 root root 17 Mar 12 16:48 /usr/lib/systemd/system/runlevel4.target -> multi-user.target\n  lrwxrwxrwx 1 root root 16 Mar 12 16:48 /usr/lib/systemd/system/runlevel5.target -> graphical.target\n  lrwxrwxrwx 1 root root 13 Mar 12 16:48 /usr/lib/systemd/system/runlevel6.target -> reboot.target\n  ```\n\n- 其中的`runlevel`后面的数字就是对应的运行级别，在Centos7中，单用户模式对应的其实是`rescue.target`；\n\n- 7个运行级别所对应的模式如下表：\n\n|    运行级别     |    对应target     |                对应模式                |\n| :-------------: | :---------------: | :------------------------------------: |\n|    runlevel0    |  poweroff.target  |                  关机                  |\n|    runlevel1    |   rescue.target   |               单用户模式               |\n| runlevel2、3、4 | multi-user.target | 多用户模式，无图形界面 |\n|    runlevel5    | graphical.target  |                图形界面                |\n|    runlevel6    |   reboot.target   |                  重启                  |\n\n\n## Centos7救援模式\n\n- 有些主机为grub进行了加密，这样在忘记了密码的情况下，就无法进入单用户模式；而救援模式则是使用安装系统时的安装光盘来进行修改密码的操作。\n\n- 将虚拟机关机，设置光驱为安装系统时的安装光盘，选择VMware菜单中的虚拟机-电源-打开电源时进入固件；\n\n- 在BIOS中选择boot，使用**+-**号将CD-ROM移到首位，再按**F10**保存退出；\n\n  ![bios设置](http://p5qynomrl.bkt.clouddn.com/152173531953668h6dyus.png?imageslim)\n\n- 进入安装光盘的启动界面，选择第三项`Troubleshooting`，然后选择`Rescue a CentOS system`回车两次；\n\n- 然后进入交互界面，输入1表示`Continue`回车，然后再次回车进入shell；\n\n- 这时会有提示`chroot /mnt/sysimage`，这个`sysimage`就是我们原系统的根目录，执行这条命令的作用与单用户模式的`chroot /sysroot/`相同；\n\n- `chroot`之后就会进入bash，然后使用`passwd`命令更改root密码并重启系统即可，重启系统时，需要修改BIOS启动项为`Hard Drive`或者将光驱镜像取消。\n\n# 虚拟机克隆\n\n虚拟机克隆可以让我们在不用创建新虚拟机的情况下，从原虚拟机克隆出一个新的虚拟机来使用。\n\n- 关闭虚拟机，选择VMware菜单上的虚拟机-管理-克隆，进入克隆虚拟机向导界面；\n\n- 选择克隆自虚拟机中的当前状态-创建链接克隆，然后为克隆的虚拟机命名并指定存储位置；\n\n- 启动克隆出来的虚拟机，登陆系统，这时系统的IP地址与原虚拟机是相同的，所以我们需要修改系统的IP地址，并删除配置文件中的UUID行，然后重启网络服务；\n\n- 之后修改系统的主机名，使用`hostname`命令可以查看系统的主机名，使用`hostnamectl set-hostname evobot02`来设置新的主机名，然后退出重新登陆，新的主机名即可生效：\n\n  ```bash\n  [root@localhost ~]# hostname\n  localhost.localdomain\n  [root@localhost ~]# hostnamectl set-hostname evobot02\n  [root@localhost ~]# hostname\n  evobot02\n  [root@evobot02 ~]# logout\n  [root@evobot02 ~]#\n  ```\n\n- 系统的主机名配置文件为`/etc/hostname`。\n\n\n# Linux相互登陆\n\n在实际使用中，经常需要从一台Linux服务器登陆到另一台Linux服务器，这时候就需要掌握如何在两台Linux之间相互登陆的知识。\n\n##  ssh命令登陆\n\n- 命令`w`可以查看有哪些客户端登陆到系统：\n\n  ```bash\n  [root@evobot02 ~]# w\n   01:15:29 up 26 min,  2 users,  load average: 0.00, 0.01, 0.02\n  USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\n  root     tty1                      01:07    8:25   0.01s  0.01s -bash\n  root     pts/0    192.168.253.1    01:07    1.00s  0.05s  0.03s w\n  ```\n\n- 使用命令`ssh ip`可以登陆另一个Linux系统：\n\n  ```bash\n  [root@evobot02 ~]# ssh 192.168.253.133\n  The authenticity of host '192.168.253.133 (192.168.253.133)' can't be established.\n  ECDSA key fingerprint is SHA256:kXUH0kDjliChKsWQTmWL/uDammTO8OYDHj4CaQE4oYw.\n  ECDSA key fingerprint is MD5:e5:87:58:2d:d9:a1:38:12:b6:36:a0:41:d2:b9:50:ab.\n  Are you sure you want to continue connecting (yes/no)? yes\n  Last login: Fri Mar 23 01:21:14 2018 from 192.168.253.134\n  [root@evobot01 ~]#\n  [root@evobot01 ~]# w\n   01:22:59 up 28 min,  2 users,  load average: 0.00, 0.01, 0.05\n  USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\n  root     pts/0    192.168.253.134  01:22    3.00s  0.05s  0.03s w\n  root     pts/1    192.168.253.1    01:14    7:31   0.03s  0.03s -bash\n  ```\n\n- 可以看到主机名已经变成了evobot01，`w`命令看到有从IP`192.168.253.134`登陆的用户；\n\n- `ssh`命令的标准写法是`ssh username@ip -p port`，在不指定username的情况下，是使用当前系统的用户名去连接对端主机，`-p`参数是指定ssh的端口：\n\n  ```bash\n  [root@evobot01 ~]# ssh root@192.168.253.134 -p 22\n  The authenticity of host '192.168.253.134 (192.168.253.134)' can't be established.\n  ECDSA key fingerprint is SHA256:kXUH0kDjliChKsWQTmWL/uDammTO8OYDHj4CaQE4oYw.\n  ECDSA key fingerprint is MD5:e5:87:58:2d:d9:a1:38:12:b6:36:a0:41:d2:b9:50:ab.\n  Are you sure you want to continue connecting (yes/no)? yes\n  Warning: Permanently added '192.168.253.134' (ECDSA) to the list of known hosts.\n  root@192.168.253.134's password:\n  Last login: Fri Mar 23 01:07:25 2018 from 192.168.253.1\n  ```\n\n## 密钥登陆\n\n两台Linux之间也可以使用密钥登陆，首先需要生成主机的ssh密钥对，然后将公钥添加到对端机器的`authorized_keys`文件。\n\n- 生成密钥对，使用`ssh-keygen`命令：\n\n  ```bash\n  [root@evobot01 ~]# ssh-keygen\n  Generating public/private rsa key pair.\n  Enter file in which to save the key (/root/.ssh/id_rsa):# 指定存储密钥的路径，回车即可\n  Enter passphrase (empty for no passphrase):\t\t# 设置密钥密码，为空即可\n  Enter same passphrase again:\t# 再次输入密码\n  Your identification has been saved in /root/.ssh/id_rsa.\t# 私钥\n  Your public key has been saved in /root/.ssh/id_rsa.pub.\t# 公钥\n  The key fingerprint is:\n  SHA256:Ccn7HtJMEgDJvcPNRCZoC9vxp+91r65zq4+r7S4Iaoo root@evobot01\n  The key's randomart image is:\n  +---[RSA 2048]----+\n  | ..=o.o          |\n  |. * .=..         |\n  | = = ==          |\n  |. o = ++ .       |\n  |     +o S        |\n  |  . .  *         |\n  | . . o. * .      |\n  |o.  . o=.+..     |\n  |E    .o=XO=o.    |\n  +----[SHA256]-----+\n  ```\n\n- 生成的密钥对默认在家目录的`.ssh/`目录下，然后将公钥的内容写入对端机器`authorized_keys`;\n\n- 关闭selinux后，就可以使用密钥认证登陆对端主机：\n\n  ```bash\n  [root@evobot01 ~]# cat .ssh/id_rsa.pub\n  ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDsHTIbFZs6WtQzBXZCwul5fqb7pVGcISVnzD69MmsDIyTnPL3F7M0Rl/a6nQcYC+G3s+OR+d+hjNrOcceTX+odZdCnzcRkALwS1r45KcxGpic7m9vMh3Kj04hhTbhCmZJTm9TTSSjhOyF/hNhKavIOfUPJdYy6SS7zAO3GLr67rwg8tmL/qf3muVvhdAXg2lZh0xQXJa7IB/XBq4zYb32sQs6RGE2Sf4NnzTC6IpSYUWfucMJCaZeevCraYe7fo3kuh8fa7kWj+qwbuBLHojzfcEro7elpur4qh+OdNHCeR+gcpC51qrtyvYj9JtRRKoHq1ZG6VJRRFSV+Dvo9vSnX root@evobot01\n  [root@evobot01 ~]# ssh root@192.168.253.134 -p 22\n  Last login: Fri Mar 23 01:30:56 2018 from 192.168.253.1\n  ```\n\n---\n\n","slug":"Centos7系列-单用户及救援模式和虚拟机克隆操作","published":1,"updated":"2018-06-02T13:01:29.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gaz7l000eu1jx3for6i7j","content":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>对于忘记root密码的情况，我们可以进入Centos的单用户模式或者使用安装光盘进入救援模式，来修改我们的root密码，下面为如何进入单用户模式和救援模式并修改root密码的详细步骤。另外介绍了如何在VMware中克隆虚拟机并在Linux中使用SSH相互登陆。<br><a id=\"more\"></a></p><h1 id=\"Centos7单用户模式\"><a href=\"#Centos7单用户模式\" class=\"headerlink\" title=\"Centos7单用户模式\"></a>Centos7单用户模式</h1><h2 id=\"配置单用户模式\"><a href=\"#配置单用户模式\" class=\"headerlink\" title=\"配置单用户模式\"></a>配置单用户模式</h2><ol><li>在Centos7启动界面下，对第一个启动项按<strong>e</strong>键进入配置界面。<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521312295772z2f2ptcr.png?imageslim\" alt=\"grub配置\"></li><li>将光标定位到<code>linux16</code>开头的行，再将光标移动到<strong>ro</strong>位置。<br><img src=\"http://p5qynomrl.bkt.clouddn.com/15213123237461a612knk.png?imageslim\" alt=\"启动项配置\"></li><li>将<strong>ro</strong>只读修改为<strong>rw</strong>读写模式，并且添加<code>init=/sysroot/bin/sh</code>在<strong>rw</strong>后面。<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521312341229joes7584.png?imageslim\" alt=\"修改启动项\"></li><li><strong>sysroot</strong>就是我们原先的系统root路径，完成之后，按<strong>Ctrl+x</strong>键，保存退出。</li></ol><h2 id=\"进入单用户模式\"><a href=\"#进入单用户模式\" class=\"headerlink\" title=\"进入单用户模式\"></a>进入单用户模式</h2><ul><li><p>进入到系统后，需要切换到我们原有系统的环境下再继续操作，所以首先执行<code>chroot /sysroot/</code>命令切换到我们原系统<strong>root</strong>环境。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:/<span class=\"comment\"># chroot /sysroot/</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"修改系统语言编码\"><a href=\"#修改系统语言编码\" class=\"headerlink\" title=\"修改系统语言编码\"></a>修改系统语言编码</h2><ul><li><p>为了防止出现乱码的情况，首先修改系统语言环境为英文。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:/<span class=\"comment\"># LANG=en</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"修改root密码\"><a href=\"#修改root密码\" class=\"headerlink\" title=\"修改root密码\"></a>修改root密码</h2><ul><li><p>这时候我们执行<code>passwd root</code>来修改root的密码。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:/<span class=\"comment\"># passwd root</span></span><br><span class=\"line\">Changing password <span class=\"keyword\">for</span> user root.</span><br><span class=\"line\">New password:</span><br><span class=\"line\">Retype new password:</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"创建autorelabel文件\"><a href=\"#创建autorelabel文件\" class=\"headerlink\" title=\"创建autorelabel文件\"></a>创建autorelabel文件</h2><ul><li><p>修改完密码后，还需要创建<strong>autorelabel</strong>文件，这样重启才能进入系统。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:/<span class=\"comment\"># touch /.autorelabel</span></span><br></pre></td></tr></table></figure></li><li><p>执行完所有操作后重启计算机即可使用新的密码登陆root账户。</p></li></ul><h1 id=\"Centos7救援模式\"><a href=\"#Centos7救援模式\" class=\"headerlink\" title=\"Centos7救援模式\"></a>Centos7救援模式</h1><h2 id=\"系统运行级别\"><a href=\"#系统运行级别\" class=\"headerlink\" title=\"系统运行级别\"></a>系统运行级别</h2><ul><li><p>centos一共有0~6这7个运行级别，没有图形界面的情况下，默认运行级别为3，下面的命令可以查看系统的所有运行级别：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos ~]<span class=\"comment\"># ls -l /usr/lib/systemd/system/runlevel*target</span></span><br><span class=\"line\">lrwxrwxrwx 1 root root 15 Mar 12 16:48 /usr/lib/systemd/system/runlevel0.target -&gt; poweroff.target</span><br><span class=\"line\">lrwxrwxrwx 1 root root 13 Mar 12 16:48 /usr/lib/systemd/system/runlevel1.target -&gt; rescue.target</span><br><span class=\"line\">lrwxrwxrwx 1 root root 17 Mar 12 16:48 /usr/lib/systemd/system/runlevel2.target -&gt; multi-user.target</span><br><span class=\"line\">lrwxrwxrwx 1 root root 17 Mar 12 16:48 /usr/lib/systemd/system/runlevel3.target -&gt; multi-user.target</span><br><span class=\"line\">lrwxrwxrwx 1 root root 17 Mar 12 16:48 /usr/lib/systemd/system/runlevel4.target -&gt; multi-user.target</span><br><span class=\"line\">lrwxrwxrwx 1 root root 16 Mar 12 16:48 /usr/lib/systemd/system/runlevel5.target -&gt; graphical.target</span><br><span class=\"line\">lrwxrwxrwx 1 root root 13 Mar 12 16:48 /usr/lib/systemd/system/runlevel6.target -&gt; reboot.target</span><br></pre></td></tr></table></figure></li><li><p>其中的<code>runlevel</code>后面的数字就是对应的运行级别，在Centos7中，单用户模式对应的其实是<code>rescue.target</code>；</p></li><li><p>7个运行级别所对应的模式如下表：</p></li></ul><table><thead><tr><th style=\"text-align:center\">运行级别</th><th style=\"text-align:center\">对应target</th><th style=\"text-align:center\">对应模式</th></tr></thead><tbody><tr><td style=\"text-align:center\">runlevel0</td><td style=\"text-align:center\">poweroff.target</td><td style=\"text-align:center\">关机</td></tr><tr><td style=\"text-align:center\">runlevel1</td><td style=\"text-align:center\">rescue.target</td><td style=\"text-align:center\">单用户模式</td></tr><tr><td style=\"text-align:center\">runlevel2、3、4</td><td style=\"text-align:center\">multi-user.target</td><td style=\"text-align:center\">多用户模式，无图形界面</td></tr><tr><td style=\"text-align:center\">runlevel5</td><td style=\"text-align:center\">graphical.target</td><td style=\"text-align:center\">图形界面</td></tr><tr><td style=\"text-align:center\">runlevel6</td><td style=\"text-align:center\">reboot.target</td><td style=\"text-align:center\">重启</td></tr></tbody></table><h2 id=\"Centos7救援模式-1\"><a href=\"#Centos7救援模式-1\" class=\"headerlink\" title=\"Centos7救援模式\"></a>Centos7救援模式</h2><ul><li><p>有些主机为grub进行了加密，这样在忘记了密码的情况下，就无法进入单用户模式；而救援模式则是使用安装系统时的安装光盘来进行修改密码的操作。</p></li><li><p>将虚拟机关机，设置光驱为安装系统时的安装光盘，选择VMware菜单中的虚拟机-电源-打开电源时进入固件；</p></li><li><p>在BIOS中选择boot，使用<strong>+-</strong>号将CD-ROM移到首位，再按<strong>F10</strong>保存退出；</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/152173531953668h6dyus.png?imageslim\" alt=\"bios设置\"></p></li><li><p>进入安装光盘的启动界面，选择第三项<code>Troubleshooting</code>，然后选择<code>Rescue a CentOS system</code>回车两次；</p></li><li><p>然后进入交互界面，输入1表示<code>Continue</code>回车，然后再次回车进入shell；</p></li><li><p>这时会有提示<code>chroot /mnt/sysimage</code>，这个<code>sysimage</code>就是我们原系统的根目录，执行这条命令的作用与单用户模式的<code>chroot /sysroot/</code>相同；</p></li><li><p><code>chroot</code>之后就会进入bash，然后使用<code>passwd</code>命令更改root密码并重启系统即可，重启系统时，需要修改BIOS启动项为<code>Hard Drive</code>或者将光驱镜像取消。</p></li></ul><h1 id=\"虚拟机克隆\"><a href=\"#虚拟机克隆\" class=\"headerlink\" title=\"虚拟机克隆\"></a>虚拟机克隆</h1><p>虚拟机克隆可以让我们在不用创建新虚拟机的情况下，从原虚拟机克隆出一个新的虚拟机来使用。</p><ul><li><p>关闭虚拟机，选择VMware菜单上的虚拟机-管理-克隆，进入克隆虚拟机向导界面；</p></li><li><p>选择克隆自虚拟机中的当前状态-创建链接克隆，然后为克隆的虚拟机命名并指定存储位置；</p></li><li><p>启动克隆出来的虚拟机，登陆系统，这时系统的IP地址与原虚拟机是相同的，所以我们需要修改系统的IP地址，并删除配置文件中的UUID行，然后重启网络服务；</p></li><li><p>之后修改系统的主机名，使用<code>hostname</code>命令可以查看系统的主机名，使用<code>hostnamectl set-hostname evobot02</code>来设置新的主机名，然后退出重新登陆，新的主机名即可生效：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># hostname</span></span><br><span class=\"line\">localhost.localdomain</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># hostnamectl set-hostname evobot02</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># hostname</span></span><br><span class=\"line\">evobot02</span><br><span class=\"line\">[root@evobot02 ~]<span class=\"comment\"># logout</span></span><br><span class=\"line\">[root@evobot02 ~]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure></li><li><p>系统的主机名配置文件为<code>/etc/hostname</code>。</p></li></ul><h1 id=\"Linux相互登陆\"><a href=\"#Linux相互登陆\" class=\"headerlink\" title=\"Linux相互登陆\"></a>Linux相互登陆</h1><p>在实际使用中，经常需要从一台Linux服务器登陆到另一台Linux服务器，这时候就需要掌握如何在两台Linux之间相互登陆的知识。</p><h2 id=\"ssh命令登陆\"><a href=\"#ssh命令登陆\" class=\"headerlink\" title=\"ssh命令登陆\"></a>ssh命令登陆</h2><ul><li><p>命令<code>w</code>可以查看有哪些客户端登陆到系统：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot02 ~]<span class=\"comment\"># w</span></span><br><span class=\"line\"> 01:15:29 up 26 min,  2 users,  load average: 0.00, 0.01, 0.02</span><br><span class=\"line\">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class=\"line\">root     tty1                      01:07    8:25   0.01s  0.01s -bash</span><br><span class=\"line\">root     pts/0    192.168.253.1    01:07    1.00s  0.05s  0.03s w</span><br></pre></td></tr></table></figure></li><li><p>使用命令<code>ssh ip</code>可以登陆另一个Linux系统：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot02 ~]<span class=\"comment\"># ssh 192.168.253.133</span></span><br><span class=\"line\">The authenticity of host <span class=\"string\">'192.168.253.133 (192.168.253.133)'</span> can<span class=\"string\">'t be established.</span></span><br><span class=\"line\"><span class=\"string\">ECDSA key fingerprint is SHA256:kXUH0kDjliChKsWQTmWL/uDammTO8OYDHj4CaQE4oYw.</span></span><br><span class=\"line\"><span class=\"string\">ECDSA key fingerprint is MD5:e5:87:58:2d:d9:a1:38:12:b6:36:a0:41:d2:b9:50:ab.</span></span><br><span class=\"line\"><span class=\"string\">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class=\"line\"><span class=\"string\">Last login: Fri Mar 23 01:21:14 2018 from 192.168.253.134</span></span><br><span class=\"line\"><span class=\"string\">[root@evobot01 ~]#</span></span><br><span class=\"line\"><span class=\"string\">[root@evobot01 ~]# w</span></span><br><span class=\"line\"><span class=\"string\"> 01:22:59 up 28 min,  2 users,  load average: 0.00, 0.01, 0.05</span></span><br><span class=\"line\"><span class=\"string\">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span></span><br><span class=\"line\"><span class=\"string\">root     pts/0    192.168.253.134  01:22    3.00s  0.05s  0.03s w</span></span><br><span class=\"line\"><span class=\"string\">root     pts/1    192.168.253.1    01:14    7:31   0.03s  0.03s -bash</span></span><br></pre></td></tr></table></figure></li><li><p>可以看到主机名已经变成了evobot01，<code>w</code>命令看到有从IP<code>192.168.253.134</code>登陆的用户；</p></li><li><p><code>ssh</code>命令的标准写法是<code>ssh username@ip -p port</code>，在不指定username的情况下，是使用当前系统的用户名去连接对端主机，<code>-p</code>参数是指定ssh的端口：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot01 ~]<span class=\"comment\"># ssh root@192.168.253.134 -p 22</span></span><br><span class=\"line\">The authenticity of host <span class=\"string\">'192.168.253.134 (192.168.253.134)'</span> can<span class=\"string\">'t be established.</span></span><br><span class=\"line\"><span class=\"string\">ECDSA key fingerprint is SHA256:kXUH0kDjliChKsWQTmWL/uDammTO8OYDHj4CaQE4oYw.</span></span><br><span class=\"line\"><span class=\"string\">ECDSA key fingerprint is MD5:e5:87:58:2d:d9:a1:38:12:b6:36:a0:41:d2:b9:50:ab.</span></span><br><span class=\"line\"><span class=\"string\">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class=\"line\"><span class=\"string\">Warning: Permanently added '</span>192.168.253.134<span class=\"string\">' (ECDSA) to the list of known hosts.</span></span><br><span class=\"line\"><span class=\"string\">root@192.168.253.134'</span>s password:</span><br><span class=\"line\">Last login: Fri Mar 23 01:07:25 2018 from 192.168.253.1</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"密钥登陆\"><a href=\"#密钥登陆\" class=\"headerlink\" title=\"密钥登陆\"></a>密钥登陆</h2><p>两台Linux之间也可以使用密钥登陆，首先需要生成主机的ssh密钥对，然后将公钥添加到对端机器的<code>authorized_keys</code>文件。</p><ul><li><p>生成密钥对，使用<code>ssh-keygen</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot01 ~]<span class=\"comment\"># ssh-keygen</span></span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/root/.ssh/id_rsa):<span class=\"comment\"># 指定存储密钥的路径，回车即可</span></span><br><span class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase):\t\t<span class=\"comment\"># 设置密钥密码，为空即可</span></span><br><span class=\"line\">Enter same passphrase again:\t<span class=\"comment\"># 再次输入密码</span></span><br><span class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> /root/.ssh/id_rsa.\t<span class=\"comment\"># 私钥</span></span><br><span class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> /root/.ssh/id_rsa.pub.\t<span class=\"comment\"># 公钥</span></span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">SHA256:Ccn7HtJMEgDJvcPNRCZoC9vxp+91r65zq4+r7S4Iaoo root@evobot01</span><br><span class=\"line\">The key<span class=\"string\">'s randomart image is:</span></span><br><span class=\"line\"><span class=\"string\">+---[RSA 2048]----+</span></span><br><span class=\"line\"><span class=\"string\">| ..=o.o          |</span></span><br><span class=\"line\"><span class=\"string\">|. * .=..         |</span></span><br><span class=\"line\"><span class=\"string\">| = = ==          |</span></span><br><span class=\"line\"><span class=\"string\">|. o = ++ .       |</span></span><br><span class=\"line\"><span class=\"string\">|     +o S        |</span></span><br><span class=\"line\"><span class=\"string\">|  . .  *         |</span></span><br><span class=\"line\"><span class=\"string\">| . . o. * .      |</span></span><br><span class=\"line\"><span class=\"string\">|o.  . o=.+..     |</span></span><br><span class=\"line\"><span class=\"string\">|E    .o=XO=o.    |</span></span><br><span class=\"line\"><span class=\"string\">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure></li><li><p>生成的密钥对默认在家目录的<code>.ssh/</code>目录下，然后将公钥的内容写入对端机器<code>authorized_keys</code>;</p></li><li><p>关闭selinux后，就可以使用密钥认证登陆对端主机：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot01 ~]<span class=\"comment\"># cat .ssh/id_rsa.pub</span></span><br><span class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDsHTIbFZs6WtQzBXZCwul5fqb7pVGcISVnzD69MmsDIyTnPL3F7M0Rl/a6nQcYC+G3s+OR+d+hjNrOcceTX+odZdCnzcRkALwS1r45KcxGpic7m9vMh3Kj04hhTbhCmZJTm9TTSSjhOyF/hNhKavIOfUPJdYy6SS7zAO3GLr67rwg8tmL/qf3muVvhdAXg2lZh0xQXJa7IB/XBq4zYb32sQs6RGE2Sf4NnzTC6IpSYUWfucMJCaZeevCraYe7fo3kuh8fa7kWj+qwbuBLHojzfcEro7elpur4qh+OdNHCeR+gcpC51qrtyvYj9JtRRKoHq1ZG6VJRRFSV+Dvo9vSnX root@evobot01</span><br><span class=\"line\">[root@evobot01 ~]<span class=\"comment\"># ssh root@192.168.253.134 -p 22</span></span><br><span class=\"line\">Last login: Fri Mar 23 01:30:56 2018 from 192.168.253.1</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>对于忘记root密码的情况，我们可以进入Centos的单用户模式或者使用安装光盘进入救援模式，来修改我们的root密码，下面为如何进入单用户模式和救援模式并修改root密码的详细步骤。另外介绍了如何在VMware中克隆虚拟机并在Linux中使用SSH相互登陆。<br>","more":"</p><h1 id=\"Centos7单用户模式\"><a href=\"#Centos7单用户模式\" class=\"headerlink\" title=\"Centos7单用户模式\"></a>Centos7单用户模式</h1><h2 id=\"配置单用户模式\"><a href=\"#配置单用户模式\" class=\"headerlink\" title=\"配置单用户模式\"></a>配置单用户模式</h2><ol><li>在Centos7启动界面下，对第一个启动项按<strong>e</strong>键进入配置界面。<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521312295772z2f2ptcr.png?imageslim\" alt=\"grub配置\"></li><li>将光标定位到<code>linux16</code>开头的行，再将光标移动到<strong>ro</strong>位置。<br><img src=\"http://p5qynomrl.bkt.clouddn.com/15213123237461a612knk.png?imageslim\" alt=\"启动项配置\"></li><li>将<strong>ro</strong>只读修改为<strong>rw</strong>读写模式，并且添加<code>init=/sysroot/bin/sh</code>在<strong>rw</strong>后面。<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521312341229joes7584.png?imageslim\" alt=\"修改启动项\"></li><li><strong>sysroot</strong>就是我们原先的系统root路径，完成之后，按<strong>Ctrl+x</strong>键，保存退出。</li></ol><h2 id=\"进入单用户模式\"><a href=\"#进入单用户模式\" class=\"headerlink\" title=\"进入单用户模式\"></a>进入单用户模式</h2><ul><li><p>进入到系统后，需要切换到我们原有系统的环境下再继续操作，所以首先执行<code>chroot /sysroot/</code>命令切换到我们原系统<strong>root</strong>环境。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:/<span class=\"comment\"># chroot /sysroot/</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"修改系统语言编码\"><a href=\"#修改系统语言编码\" class=\"headerlink\" title=\"修改系统语言编码\"></a>修改系统语言编码</h2><ul><li><p>为了防止出现乱码的情况，首先修改系统语言环境为英文。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:/<span class=\"comment\"># LANG=en</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"修改root密码\"><a href=\"#修改root密码\" class=\"headerlink\" title=\"修改root密码\"></a>修改root密码</h2><ul><li><p>这时候我们执行<code>passwd root</code>来修改root的密码。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:/<span class=\"comment\"># passwd root</span></span><br><span class=\"line\">Changing password <span class=\"keyword\">for</span> user root.</span><br><span class=\"line\">New password:</span><br><span class=\"line\">Retype new password:</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"创建autorelabel文件\"><a href=\"#创建autorelabel文件\" class=\"headerlink\" title=\"创建autorelabel文件\"></a>创建autorelabel文件</h2><ul><li><p>修改完密码后，还需要创建<strong>autorelabel</strong>文件，这样重启才能进入系统。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:/<span class=\"comment\"># touch /.autorelabel</span></span><br></pre></td></tr></table></figure></li><li><p>执行完所有操作后重启计算机即可使用新的密码登陆root账户。</p></li></ul><h1 id=\"Centos7救援模式\"><a href=\"#Centos7救援模式\" class=\"headerlink\" title=\"Centos7救援模式\"></a>Centos7救援模式</h1><h2 id=\"系统运行级别\"><a href=\"#系统运行级别\" class=\"headerlink\" title=\"系统运行级别\"></a>系统运行级别</h2><ul><li><p>centos一共有0~6这7个运行级别，没有图形界面的情况下，默认运行级别为3，下面的命令可以查看系统的所有运行级别：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos ~]<span class=\"comment\"># ls -l /usr/lib/systemd/system/runlevel*target</span></span><br><span class=\"line\">lrwxrwxrwx 1 root root 15 Mar 12 16:48 /usr/lib/systemd/system/runlevel0.target -&gt; poweroff.target</span><br><span class=\"line\">lrwxrwxrwx 1 root root 13 Mar 12 16:48 /usr/lib/systemd/system/runlevel1.target -&gt; rescue.target</span><br><span class=\"line\">lrwxrwxrwx 1 root root 17 Mar 12 16:48 /usr/lib/systemd/system/runlevel2.target -&gt; multi-user.target</span><br><span class=\"line\">lrwxrwxrwx 1 root root 17 Mar 12 16:48 /usr/lib/systemd/system/runlevel3.target -&gt; multi-user.target</span><br><span class=\"line\">lrwxrwxrwx 1 root root 17 Mar 12 16:48 /usr/lib/systemd/system/runlevel4.target -&gt; multi-user.target</span><br><span class=\"line\">lrwxrwxrwx 1 root root 16 Mar 12 16:48 /usr/lib/systemd/system/runlevel5.target -&gt; graphical.target</span><br><span class=\"line\">lrwxrwxrwx 1 root root 13 Mar 12 16:48 /usr/lib/systemd/system/runlevel6.target -&gt; reboot.target</span><br></pre></td></tr></table></figure></li><li><p>其中的<code>runlevel</code>后面的数字就是对应的运行级别，在Centos7中，单用户模式对应的其实是<code>rescue.target</code>；</p></li><li><p>7个运行级别所对应的模式如下表：</p></li></ul><table><thead><tr><th style=\"text-align:center\">运行级别</th><th style=\"text-align:center\">对应target</th><th style=\"text-align:center\">对应模式</th></tr></thead><tbody><tr><td style=\"text-align:center\">runlevel0</td><td style=\"text-align:center\">poweroff.target</td><td style=\"text-align:center\">关机</td></tr><tr><td style=\"text-align:center\">runlevel1</td><td style=\"text-align:center\">rescue.target</td><td style=\"text-align:center\">单用户模式</td></tr><tr><td style=\"text-align:center\">runlevel2、3、4</td><td style=\"text-align:center\">multi-user.target</td><td style=\"text-align:center\">多用户模式，无图形界面</td></tr><tr><td style=\"text-align:center\">runlevel5</td><td style=\"text-align:center\">graphical.target</td><td style=\"text-align:center\">图形界面</td></tr><tr><td style=\"text-align:center\">runlevel6</td><td style=\"text-align:center\">reboot.target</td><td style=\"text-align:center\">重启</td></tr></tbody></table><h2 id=\"Centos7救援模式-1\"><a href=\"#Centos7救援模式-1\" class=\"headerlink\" title=\"Centos7救援模式\"></a>Centos7救援模式</h2><ul><li><p>有些主机为grub进行了加密，这样在忘记了密码的情况下，就无法进入单用户模式；而救援模式则是使用安装系统时的安装光盘来进行修改密码的操作。</p></li><li><p>将虚拟机关机，设置光驱为安装系统时的安装光盘，选择VMware菜单中的虚拟机-电源-打开电源时进入固件；</p></li><li><p>在BIOS中选择boot，使用<strong>+-</strong>号将CD-ROM移到首位，再按<strong>F10</strong>保存退出；</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/152173531953668h6dyus.png?imageslim\" alt=\"bios设置\"></p></li><li><p>进入安装光盘的启动界面，选择第三项<code>Troubleshooting</code>，然后选择<code>Rescue a CentOS system</code>回车两次；</p></li><li><p>然后进入交互界面，输入1表示<code>Continue</code>回车，然后再次回车进入shell；</p></li><li><p>这时会有提示<code>chroot /mnt/sysimage</code>，这个<code>sysimage</code>就是我们原系统的根目录，执行这条命令的作用与单用户模式的<code>chroot /sysroot/</code>相同；</p></li><li><p><code>chroot</code>之后就会进入bash，然后使用<code>passwd</code>命令更改root密码并重启系统即可，重启系统时，需要修改BIOS启动项为<code>Hard Drive</code>或者将光驱镜像取消。</p></li></ul><h1 id=\"虚拟机克隆\"><a href=\"#虚拟机克隆\" class=\"headerlink\" title=\"虚拟机克隆\"></a>虚拟机克隆</h1><p>虚拟机克隆可以让我们在不用创建新虚拟机的情况下，从原虚拟机克隆出一个新的虚拟机来使用。</p><ul><li><p>关闭虚拟机，选择VMware菜单上的虚拟机-管理-克隆，进入克隆虚拟机向导界面；</p></li><li><p>选择克隆自虚拟机中的当前状态-创建链接克隆，然后为克隆的虚拟机命名并指定存储位置；</p></li><li><p>启动克隆出来的虚拟机，登陆系统，这时系统的IP地址与原虚拟机是相同的，所以我们需要修改系统的IP地址，并删除配置文件中的UUID行，然后重启网络服务；</p></li><li><p>之后修改系统的主机名，使用<code>hostname</code>命令可以查看系统的主机名，使用<code>hostnamectl set-hostname evobot02</code>来设置新的主机名，然后退出重新登陆，新的主机名即可生效：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># hostname</span></span><br><span class=\"line\">localhost.localdomain</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># hostnamectl set-hostname evobot02</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># hostname</span></span><br><span class=\"line\">evobot02</span><br><span class=\"line\">[root@evobot02 ~]<span class=\"comment\"># logout</span></span><br><span class=\"line\">[root@evobot02 ~]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure></li><li><p>系统的主机名配置文件为<code>/etc/hostname</code>。</p></li></ul><h1 id=\"Linux相互登陆\"><a href=\"#Linux相互登陆\" class=\"headerlink\" title=\"Linux相互登陆\"></a>Linux相互登陆</h1><p>在实际使用中，经常需要从一台Linux服务器登陆到另一台Linux服务器，这时候就需要掌握如何在两台Linux之间相互登陆的知识。</p><h2 id=\"ssh命令登陆\"><a href=\"#ssh命令登陆\" class=\"headerlink\" title=\"ssh命令登陆\"></a>ssh命令登陆</h2><ul><li><p>命令<code>w</code>可以查看有哪些客户端登陆到系统：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot02 ~]<span class=\"comment\"># w</span></span><br><span class=\"line\"> 01:15:29 up 26 min,  2 users,  load average: 0.00, 0.01, 0.02</span><br><span class=\"line\">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class=\"line\">root     tty1                      01:07    8:25   0.01s  0.01s -bash</span><br><span class=\"line\">root     pts/0    192.168.253.1    01:07    1.00s  0.05s  0.03s w</span><br></pre></td></tr></table></figure></li><li><p>使用命令<code>ssh ip</code>可以登陆另一个Linux系统：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot02 ~]<span class=\"comment\"># ssh 192.168.253.133</span></span><br><span class=\"line\">The authenticity of host <span class=\"string\">'192.168.253.133 (192.168.253.133)'</span> can<span class=\"string\">'t be established.</span></span><br><span class=\"line\"><span class=\"string\">ECDSA key fingerprint is SHA256:kXUH0kDjliChKsWQTmWL/uDammTO8OYDHj4CaQE4oYw.</span></span><br><span class=\"line\"><span class=\"string\">ECDSA key fingerprint is MD5:e5:87:58:2d:d9:a1:38:12:b6:36:a0:41:d2:b9:50:ab.</span></span><br><span class=\"line\"><span class=\"string\">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class=\"line\"><span class=\"string\">Last login: Fri Mar 23 01:21:14 2018 from 192.168.253.134</span></span><br><span class=\"line\"><span class=\"string\">[root@evobot01 ~]#</span></span><br><span class=\"line\"><span class=\"string\">[root@evobot01 ~]# w</span></span><br><span class=\"line\"><span class=\"string\"> 01:22:59 up 28 min,  2 users,  load average: 0.00, 0.01, 0.05</span></span><br><span class=\"line\"><span class=\"string\">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span></span><br><span class=\"line\"><span class=\"string\">root     pts/0    192.168.253.134  01:22    3.00s  0.05s  0.03s w</span></span><br><span class=\"line\"><span class=\"string\">root     pts/1    192.168.253.1    01:14    7:31   0.03s  0.03s -bash</span></span><br></pre></td></tr></table></figure></li><li><p>可以看到主机名已经变成了evobot01，<code>w</code>命令看到有从IP<code>192.168.253.134</code>登陆的用户；</p></li><li><p><code>ssh</code>命令的标准写法是<code>ssh username@ip -p port</code>，在不指定username的情况下，是使用当前系统的用户名去连接对端主机，<code>-p</code>参数是指定ssh的端口：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot01 ~]<span class=\"comment\"># ssh root@192.168.253.134 -p 22</span></span><br><span class=\"line\">The authenticity of host <span class=\"string\">'192.168.253.134 (192.168.253.134)'</span> can<span class=\"string\">'t be established.</span></span><br><span class=\"line\"><span class=\"string\">ECDSA key fingerprint is SHA256:kXUH0kDjliChKsWQTmWL/uDammTO8OYDHj4CaQE4oYw.</span></span><br><span class=\"line\"><span class=\"string\">ECDSA key fingerprint is MD5:e5:87:58:2d:d9:a1:38:12:b6:36:a0:41:d2:b9:50:ab.</span></span><br><span class=\"line\"><span class=\"string\">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class=\"line\"><span class=\"string\">Warning: Permanently added '</span>192.168.253.134<span class=\"string\">' (ECDSA) to the list of known hosts.</span></span><br><span class=\"line\"><span class=\"string\">root@192.168.253.134'</span>s password:</span><br><span class=\"line\">Last login: Fri Mar 23 01:07:25 2018 from 192.168.253.1</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"密钥登陆\"><a href=\"#密钥登陆\" class=\"headerlink\" title=\"密钥登陆\"></a>密钥登陆</h2><p>两台Linux之间也可以使用密钥登陆，首先需要生成主机的ssh密钥对，然后将公钥添加到对端机器的<code>authorized_keys</code>文件。</p><ul><li><p>生成密钥对，使用<code>ssh-keygen</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot01 ~]<span class=\"comment\"># ssh-keygen</span></span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/root/.ssh/id_rsa):<span class=\"comment\"># 指定存储密钥的路径，回车即可</span></span><br><span class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase):\t\t<span class=\"comment\"># 设置密钥密码，为空即可</span></span><br><span class=\"line\">Enter same passphrase again:\t<span class=\"comment\"># 再次输入密码</span></span><br><span class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> /root/.ssh/id_rsa.\t<span class=\"comment\"># 私钥</span></span><br><span class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> /root/.ssh/id_rsa.pub.\t<span class=\"comment\"># 公钥</span></span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">SHA256:Ccn7HtJMEgDJvcPNRCZoC9vxp+91r65zq4+r7S4Iaoo root@evobot01</span><br><span class=\"line\">The key<span class=\"string\">'s randomart image is:</span></span><br><span class=\"line\"><span class=\"string\">+---[RSA 2048]----+</span></span><br><span class=\"line\"><span class=\"string\">| ..=o.o          |</span></span><br><span class=\"line\"><span class=\"string\">|. * .=..         |</span></span><br><span class=\"line\"><span class=\"string\">| = = ==          |</span></span><br><span class=\"line\"><span class=\"string\">|. o = ++ .       |</span></span><br><span class=\"line\"><span class=\"string\">|     +o S        |</span></span><br><span class=\"line\"><span class=\"string\">|  . .  *         |</span></span><br><span class=\"line\"><span class=\"string\">| . . o. * .      |</span></span><br><span class=\"line\"><span class=\"string\">|o.  . o=.+..     |</span></span><br><span class=\"line\"><span class=\"string\">|E    .o=XO=o.    |</span></span><br><span class=\"line\"><span class=\"string\">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure></li><li><p>生成的密钥对默认在家目录的<code>.ssh/</code>目录下，然后将公钥的内容写入对端机器<code>authorized_keys</code>;</p></li><li><p>关闭selinux后，就可以使用密钥认证登陆对端主机：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot01 ~]<span class=\"comment\"># cat .ssh/id_rsa.pub</span></span><br><span class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDsHTIbFZs6WtQzBXZCwul5fqb7pVGcISVnzD69MmsDIyTnPL3F7M0Rl/a6nQcYC+G3s+OR+d+hjNrOcceTX+odZdCnzcRkALwS1r45KcxGpic7m9vMh3Kj04hhTbhCmZJTm9TTSSjhOyF/hNhKavIOfUPJdYy6SS7zAO3GLr67rwg8tmL/qf3muVvhdAXg2lZh0xQXJa7IB/XBq4zYb32sQs6RGE2Sf4NnzTC6IpSYUWfucMJCaZeevCraYe7fo3kuh8fa7kWj+qwbuBLHojzfcEro7elpur4qh+OdNHCeR+gcpC51qrtyvYj9JtRRKoHq1ZG6VJRRFSV+Dvo9vSnX root@evobot01</span><br><span class=\"line\">[root@evobot01 ~]<span class=\"comment\"># ssh root@192.168.253.134 -p 22</span></span><br><span class=\"line\">Last login: Fri Mar 23 01:30:56 2018 from 192.168.253.1</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->"},{"title":"Centos7系列:文件及目录管理相关命令(一)","author":"Evobot","abbrlink":"9e44b9f5","date":"2018-03-23T14:04:24.000Z","image":null,"photo":null,"_content":"\n本文主要介绍Centos7的目录结构，文件类型，以及一些基础命令，如`ls`、`alias`命令，来进一步了解Centos系统的基本操作。\n\n![Linux目录结构](http://p5qynomrl.bkt.clouddn.com/linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.jpg)\n\n<!-- more -->\n\n---\n\n# 系统目录结构\n\n- Linux的系统目录组织方式是树形的，从根目录`/`开始，其下又有多个子目录：\n\n  ```bash\n  [root@evobot ~]# ls /\n  bin   dev  home  lib64       media  opt   root  sbin  sys  usr\n  boot  etc  lib   lost+found  mnt    proc  run   srv   tmp  var\n  ```\n\n- 我们的shell提示符是`[root@evobot ~]#`，其中**root**表示当前用户名，**evobot**表示主机名，**~**表示当前所在目录为家目录，root用户的家目录就是根目录下的`root`目录，后面的** \\# **表示当前是root用户，如果是普通用户，则是**$**符号，普通用户的家目录都在根目录下的`home`目录下；\n\n- 家目录主要是存贮与用户相关的配置文件；\n\n- 我们可以使用`tree`命令直观的看出系统的目录结构，默认Centos并没有安装`tree`命令，使用`yum -y install tree`即可安装该命令，`tree`命令的参数`-L`可以指定显示的目录层数：\n\n```bash\n  [root@evobot ~]# tree -L 1 /\n  /\n  |-- bin -> usr/bin\n  |-- boot\n  |-- dev\n  |-- etc\n  |-- home\n  |-- lib -> usr/lib\n  |-- lib64 -> usr/lib64\n  |-- lost+found\n  |-- media\n  |-- mnt\n  |-- opt\n  |-- proc\n  |-- root\n  |-- run\n  |-- sbin -> usr/sbin\n  |-- srv\n  |-- sys\n  |-- tmp\n  |-- usr\n  `-- var\n\n  20 directories, 0 files\n```\n\n- 系统目录作用说明\n<style>\ntable th:first-of-type {\n    width: 85px;\n}\ntable th {\n    text-align: center;\n}\n</style>\n\n\n|    目录名     | 说明                                                         |\n| :-----------: | ----------------------------------------------------------- |\n|     /bin      | bin目录主要存放的是系统的命令，我们所使用的命令如`ls`、`yum`等，都存放于bin目录下，bin目录不止有`/bin`，还有`/usr/bin/`、`/usr/sbin/`、`/sbin/`也是同样的作用，区别是`sbin`目录下的命令是超级用户root使用的命令； |\n|     /boot     | boot目录主要存放系统的启动文件，当我们启动系统时，进入的`grub`界面，就是存放在boot目录下； |\n|     /dev      | dev目录是存放设备文件的目录，在Linux系统中，一切皆文件，所以即使是硬盘，光驱，在目录下呈现的也是一个文件； |\n| /lib & /lib64 | lib及lib64是存放系统的库文件的目录，很多命令会依赖库文件，查看一个命令依赖哪些库，可以使用`ldd`命令：`ldd /bin/ls`; |\n|     /proc     | 系统进程目录，系统的每个进程都会在这个目录下创建自己的进程文件和目录；在proc目录下存在以数字命名的目录，这就是进程的PID，在PID目录下可以看到`cwd`文件指向一个位置，这就是进程运行所在的目录； |\n|     /run      | 进程运行存放临时文件的目录，在系统重启或关机后目录会清空；   |\n|     /srv      | 存放服务产生的文件，默认为空；                               |\n|     /sys      | 存放系统内核相关的文件，一般不会使用到这个目录；             |\n|     /tmp      | 临时目录，任何用户都可以在其下创建文件；                     |\n|     /usr      | 系统用户使用到的命令或文件、库文件的存放位置；一般安装的服务都会放在/usr/local目录下； |\n|     /var      | 存放系统运行相关的文件，如日志/var/log；进程PID等。          |\n\n# ls命令\n\n## 命令语法\n\n- ls命令主要用来显示目标列表，是使用率较高的命令，同时Centos系统默认ls命令的输出信息会进行彩色加亮显示，以区分不同了类型的文件。\n- ls的语法是`ls (选项) (目录或文件)`；\n\n## 常用选项\n\n| 选项 | 作用                                                         |\n| :--: | ------------------------------------------------------------ |\n| `-l` | 输出详细信息，从左到右分别是文件类型、权限、硬链接数、所有者、组、文件大小、最后修改时间以及文件名 ； |\n| `-i` | 显示文件的索引节点号，即`inode`号，`inode`记录文件存储在磁盘的所在块和区信息，如果两个文件inode号一样，则两个文件相同； |\n| `-h` | 人性化显示文件大小，会在文件大小后显示单位，如`K`,`MB`;      |\n| `-a` | 显示所有文件及目录，包括`.`开头的隐藏文件和目录，而`.`和`..`表示当前目录和上层目录，`.`所表示的当前目录的详细信息中的硬链接数，也表示当前目录下有多少个子目录； |\n| `-t` | 以时间顺序排序显示，越晚的排在越上面；                       |\n| `-d` | 只列出目录本身，不列出目录下的文件和子目录；                 |\n\n- 系统中还存在着命令的别名，比如`ll`就等于`ls -l`，查看别名代表的详细命令，可以使用`which (命令)`来查看：\n\n  ```bash\n  [root@evobot ~]# ll\n  total 4\n  drwxr-xr-x 2 root root 4096 Mar 12 17:42 source\n  [root@evobot ~]# which ll\n  alias ll='ls -l --color=auto'\t# --color=auto表示彩色高亮显示\n  \t/bin/ls\n  ```\n\n# 文件类型\n\n- 在使用`ls -l`命令时，左边第一位表示文件的类型，文件类型有以下几种：\n\n| 符号表示 | 代表类型                                         |\n| :------: | ----------------------------------------------- |\n|   `d`    | 表示目录；                                       |\n|   `-`    | 表示普通文件，如文本文档，二进制文件；           |\n|   `c`    | 表示字符串设备，如键盘，鼠标设备文件；           |\n|   `l`    | 表示软连接文件，类似于windows的快捷方式；        |\n|   `b`    | 块设备，如光驱，磁盘文件；                       |\n|   `s`    | 表示socket文件，socket文件是进程用来通信的文件。 |\n\n# 命令别名\n\n## 查看命令别名\n\n- 前面使用`which`查看命令别名所表示的实际命令，而命令别名是使用`alias`来定义的；\n\n- 执行`alias`可以查看系统所有的命令别名和其所代表的实际命令：\n\n  ```bash\n  [root@evobot ~]# alias\n  alias cp='cp -i'\n  alias egrep='egrep --color=auto'\n  alias fgrep='fgrep --color=auto'\n  alias grep='grep --color=auto'\n  alias l.='ls -d .* --color=auto'\n  alias ll='ls -l --color=auto'\n  alias ls='ls --color=auto'\n  alias mv='mv -i'\n  alias rm='rm -i'\n  alias which='alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'\n  ```\n\n- 可以看到`which`命令其实也是命令别名，实际上`which`是在系统的`PATH`环境变量所指向的目录中区查找我们要查看的命令，查看`PAHT`环境变量：\n\n  ```bash\n  [root@evobot ~]# echo $PATH\n  /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin\n  ```\n\n## 设置别名\n\n- 设置别名可以直接使用`alias (别名) (原命令 -选项/参数)`来设置：\n\n  ```bash\n  [root@evobot ~]# alias show='ls -lha'\n  [root@evobot ~]# show\n  total 52K\n  dr-xr-x---.  6 root root 4.0K Mar 14 23:22 .\n  dr-xr-xr-x. 18 root root 4.0K Mar 24 00:04 ..\n  -rw-------   1 root root 3.7K Mar 24 00:04 .bash_history\n  -rw-r--r--.  1 root root   18 Dec 29  2013 .bash_logout\n  -rw-r--r--.  1 root root  176 Dec 29  2013 .bash_profile\n  -rw-r--r--.  1 root root  176 Dec 29  2013 .bashrc\n  drwxr-xr-x   3 root root 4.0K Mar  8 15:46 .cache\n  drwxr-xr-x   3 root root 4.0K Mar  8 15:46 .config\n  -rw-r--r--.  1 root root  100 Dec 29  2013 .cshrc\n  drwxr-xr-x   2 root root 4.0K Mar 12 17:42 source\n  drwx------   2 root root 4.0K Mar 12 14:25 .ssh\n  -rw-r--r--.  1 root root  129 Dec 29  2013 .tcshrc\n  -rw-------   1 root root 3.9K Mar 14 23:22 .viminfo\n  ```\n\n- 想要取消命令别名，则使用`unalias (别名)`即可，`unalias`有一个`-a`参数，可以取消系统所有的命令别名：\n\n  ```bash\n  [root@evobot ~]# unalias show\n  [root@evobot ~]# show\n  -bash: show: command not found\n  ```\n\n- 这样直接使用命令设置命令的别名，只会作用于当前登陆的操作，一旦退出登陆或重启，使用`alias`命令直接设置的别名也会被清除，如果需要每次登陆都能使用别名，则需要将相应的`alias`命令写入`/etc/bashrc`文件中，如果限定指定用户的别名，则写入用户家目录下的`.bashrc`文件中。\n\n---\n\n","source":"_posts/Centos7系列-文件及目录管理(一).md","raw":"---\ntitle: 'Centos7系列:文件及目录管理相关命令(一)'\nauthor: Evobot\nabbrlink: 9e44b9f5\ndate: 2018-03-23 22:04:24\ncategories: Centos7\ntags: [Linux, Centos]\nimage: \nphoto:\n---\n\n本文主要介绍Centos7的目录结构，文件类型，以及一些基础命令，如`ls`、`alias`命令，来进一步了解Centos系统的基本操作。\n\n![Linux目录结构](http://p5qynomrl.bkt.clouddn.com/linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.jpg)\n\n<!-- more -->\n\n---\n\n# 系统目录结构\n\n- Linux的系统目录组织方式是树形的，从根目录`/`开始，其下又有多个子目录：\n\n  ```bash\n  [root@evobot ~]# ls /\n  bin   dev  home  lib64       media  opt   root  sbin  sys  usr\n  boot  etc  lib   lost+found  mnt    proc  run   srv   tmp  var\n  ```\n\n- 我们的shell提示符是`[root@evobot ~]#`，其中**root**表示当前用户名，**evobot**表示主机名，**~**表示当前所在目录为家目录，root用户的家目录就是根目录下的`root`目录，后面的** \\# **表示当前是root用户，如果是普通用户，则是**$**符号，普通用户的家目录都在根目录下的`home`目录下；\n\n- 家目录主要是存贮与用户相关的配置文件；\n\n- 我们可以使用`tree`命令直观的看出系统的目录结构，默认Centos并没有安装`tree`命令，使用`yum -y install tree`即可安装该命令，`tree`命令的参数`-L`可以指定显示的目录层数：\n\n```bash\n  [root@evobot ~]# tree -L 1 /\n  /\n  |-- bin -> usr/bin\n  |-- boot\n  |-- dev\n  |-- etc\n  |-- home\n  |-- lib -> usr/lib\n  |-- lib64 -> usr/lib64\n  |-- lost+found\n  |-- media\n  |-- mnt\n  |-- opt\n  |-- proc\n  |-- root\n  |-- run\n  |-- sbin -> usr/sbin\n  |-- srv\n  |-- sys\n  |-- tmp\n  |-- usr\n  `-- var\n\n  20 directories, 0 files\n```\n\n- 系统目录作用说明\n<style>\ntable th:first-of-type {\n    width: 85px;\n}\ntable th {\n    text-align: center;\n}\n</style>\n\n\n|    目录名     | 说明                                                         |\n| :-----------: | ----------------------------------------------------------- |\n|     /bin      | bin目录主要存放的是系统的命令，我们所使用的命令如`ls`、`yum`等，都存放于bin目录下，bin目录不止有`/bin`，还有`/usr/bin/`、`/usr/sbin/`、`/sbin/`也是同样的作用，区别是`sbin`目录下的命令是超级用户root使用的命令； |\n|     /boot     | boot目录主要存放系统的启动文件，当我们启动系统时，进入的`grub`界面，就是存放在boot目录下； |\n|     /dev      | dev目录是存放设备文件的目录，在Linux系统中，一切皆文件，所以即使是硬盘，光驱，在目录下呈现的也是一个文件； |\n| /lib & /lib64 | lib及lib64是存放系统的库文件的目录，很多命令会依赖库文件，查看一个命令依赖哪些库，可以使用`ldd`命令：`ldd /bin/ls`; |\n|     /proc     | 系统进程目录，系统的每个进程都会在这个目录下创建自己的进程文件和目录；在proc目录下存在以数字命名的目录，这就是进程的PID，在PID目录下可以看到`cwd`文件指向一个位置，这就是进程运行所在的目录； |\n|     /run      | 进程运行存放临时文件的目录，在系统重启或关机后目录会清空；   |\n|     /srv      | 存放服务产生的文件，默认为空；                               |\n|     /sys      | 存放系统内核相关的文件，一般不会使用到这个目录；             |\n|     /tmp      | 临时目录，任何用户都可以在其下创建文件；                     |\n|     /usr      | 系统用户使用到的命令或文件、库文件的存放位置；一般安装的服务都会放在/usr/local目录下； |\n|     /var      | 存放系统运行相关的文件，如日志/var/log；进程PID等。          |\n\n# ls命令\n\n## 命令语法\n\n- ls命令主要用来显示目标列表，是使用率较高的命令，同时Centos系统默认ls命令的输出信息会进行彩色加亮显示，以区分不同了类型的文件。\n- ls的语法是`ls (选项) (目录或文件)`；\n\n## 常用选项\n\n| 选项 | 作用                                                         |\n| :--: | ------------------------------------------------------------ |\n| `-l` | 输出详细信息，从左到右分别是文件类型、权限、硬链接数、所有者、组、文件大小、最后修改时间以及文件名 ； |\n| `-i` | 显示文件的索引节点号，即`inode`号，`inode`记录文件存储在磁盘的所在块和区信息，如果两个文件inode号一样，则两个文件相同； |\n| `-h` | 人性化显示文件大小，会在文件大小后显示单位，如`K`,`MB`;      |\n| `-a` | 显示所有文件及目录，包括`.`开头的隐藏文件和目录，而`.`和`..`表示当前目录和上层目录，`.`所表示的当前目录的详细信息中的硬链接数，也表示当前目录下有多少个子目录； |\n| `-t` | 以时间顺序排序显示，越晚的排在越上面；                       |\n| `-d` | 只列出目录本身，不列出目录下的文件和子目录；                 |\n\n- 系统中还存在着命令的别名，比如`ll`就等于`ls -l`，查看别名代表的详细命令，可以使用`which (命令)`来查看：\n\n  ```bash\n  [root@evobot ~]# ll\n  total 4\n  drwxr-xr-x 2 root root 4096 Mar 12 17:42 source\n  [root@evobot ~]# which ll\n  alias ll='ls -l --color=auto'\t# --color=auto表示彩色高亮显示\n  \t/bin/ls\n  ```\n\n# 文件类型\n\n- 在使用`ls -l`命令时，左边第一位表示文件的类型，文件类型有以下几种：\n\n| 符号表示 | 代表类型                                         |\n| :------: | ----------------------------------------------- |\n|   `d`    | 表示目录；                                       |\n|   `-`    | 表示普通文件，如文本文档，二进制文件；           |\n|   `c`    | 表示字符串设备，如键盘，鼠标设备文件；           |\n|   `l`    | 表示软连接文件，类似于windows的快捷方式；        |\n|   `b`    | 块设备，如光驱，磁盘文件；                       |\n|   `s`    | 表示socket文件，socket文件是进程用来通信的文件。 |\n\n# 命令别名\n\n## 查看命令别名\n\n- 前面使用`which`查看命令别名所表示的实际命令，而命令别名是使用`alias`来定义的；\n\n- 执行`alias`可以查看系统所有的命令别名和其所代表的实际命令：\n\n  ```bash\n  [root@evobot ~]# alias\n  alias cp='cp -i'\n  alias egrep='egrep --color=auto'\n  alias fgrep='fgrep --color=auto'\n  alias grep='grep --color=auto'\n  alias l.='ls -d .* --color=auto'\n  alias ll='ls -l --color=auto'\n  alias ls='ls --color=auto'\n  alias mv='mv -i'\n  alias rm='rm -i'\n  alias which='alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'\n  ```\n\n- 可以看到`which`命令其实也是命令别名，实际上`which`是在系统的`PATH`环境变量所指向的目录中区查找我们要查看的命令，查看`PAHT`环境变量：\n\n  ```bash\n  [root@evobot ~]# echo $PATH\n  /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin\n  ```\n\n## 设置别名\n\n- 设置别名可以直接使用`alias (别名) (原命令 -选项/参数)`来设置：\n\n  ```bash\n  [root@evobot ~]# alias show='ls -lha'\n  [root@evobot ~]# show\n  total 52K\n  dr-xr-x---.  6 root root 4.0K Mar 14 23:22 .\n  dr-xr-xr-x. 18 root root 4.0K Mar 24 00:04 ..\n  -rw-------   1 root root 3.7K Mar 24 00:04 .bash_history\n  -rw-r--r--.  1 root root   18 Dec 29  2013 .bash_logout\n  -rw-r--r--.  1 root root  176 Dec 29  2013 .bash_profile\n  -rw-r--r--.  1 root root  176 Dec 29  2013 .bashrc\n  drwxr-xr-x   3 root root 4.0K Mar  8 15:46 .cache\n  drwxr-xr-x   3 root root 4.0K Mar  8 15:46 .config\n  -rw-r--r--.  1 root root  100 Dec 29  2013 .cshrc\n  drwxr-xr-x   2 root root 4.0K Mar 12 17:42 source\n  drwx------   2 root root 4.0K Mar 12 14:25 .ssh\n  -rw-r--r--.  1 root root  129 Dec 29  2013 .tcshrc\n  -rw-------   1 root root 3.9K Mar 14 23:22 .viminfo\n  ```\n\n- 想要取消命令别名，则使用`unalias (别名)`即可，`unalias`有一个`-a`参数，可以取消系统所有的命令别名：\n\n  ```bash\n  [root@evobot ~]# unalias show\n  [root@evobot ~]# show\n  -bash: show: command not found\n  ```\n\n- 这样直接使用命令设置命令的别名，只会作用于当前登陆的操作，一旦退出登陆或重启，使用`alias`命令直接设置的别名也会被清除，如果需要每次登陆都能使用别名，则需要将相应的`alias`命令写入`/etc/bashrc`文件中，如果限定指定用户的别名，则写入用户家目录下的`.bashrc`文件中。\n\n---\n\n","slug":"Centos7系列-文件及目录管理(一)","published":1,"updated":"2018-06-02T13:01:29.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gaz7t000ju1jxrp9b0upr","content":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>本文主要介绍Centos7的目录结构，文件类型，以及一些基础命令，如<code>ls</code>、<code>alias</code>命令，来进一步了解Centos系统的基本操作。</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.jpg\" alt=\"Linux目录结构\"></p><a id=\"more\"></a><hr><h1 id=\"系统目录结构\"><a href=\"#系统目录结构\" class=\"headerlink\" title=\"系统目录结构\"></a>系统目录结构</h1><ul><li><p>Linux的系统目录组织方式是树形的，从根目录<code>/</code>开始，其下又有多个子目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls /</span></span><br><span class=\"line\">bin   dev  home  lib64       media  opt   root  sbin  sys  usr</span><br><span class=\"line\">boot  etc  lib   lost+found  mnt    proc  run   srv   tmp  var</span><br></pre></td></tr></table></figure></li><li><p>我们的shell提示符是<code>[root@evobot ~]#</code>，其中<strong>root</strong>表示当前用户名，<strong>evobot</strong>表示主机名，<strong>~</strong>表示当前所在目录为家目录，root用户的家目录就是根目录下的<code>root</code>目录，后面的<strong> # </strong>表示当前是root用户，如果是普通用户，则是<strong>$</strong>符号，普通用户的家目录都在根目录下的<code>home</code>目录下；</p></li><li><p>家目录主要是存贮与用户相关的配置文件；</p></li><li><p>我们可以使用<code>tree</code>命令直观的看出系统的目录结构，默认Centos并没有安装<code>tree</code>命令，使用<code>yum -y install tree</code>即可安装该命令，<code>tree</code>命令的参数<code>-L</code>可以指定显示的目录层数：</p></li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tree -L 1 /</span></span><br><span class=\"line\">/</span><br><span class=\"line\">|-- bin -&gt; usr/bin</span><br><span class=\"line\">|-- boot</span><br><span class=\"line\">|-- dev</span><br><span class=\"line\">|-- etc</span><br><span class=\"line\">|-- home</span><br><span class=\"line\">|-- lib -&gt; usr/lib</span><br><span class=\"line\">|-- lib64 -&gt; usr/lib64</span><br><span class=\"line\">|-- lost+found</span><br><span class=\"line\">|-- media</span><br><span class=\"line\">|-- mnt</span><br><span class=\"line\">|-- opt</span><br><span class=\"line\">|-- proc</span><br><span class=\"line\">|-- root</span><br><span class=\"line\">|-- run</span><br><span class=\"line\">|-- sbin -&gt; usr/sbin</span><br><span class=\"line\">|-- srv</span><br><span class=\"line\">|-- sys</span><br><span class=\"line\">|-- tmp</span><br><span class=\"line\">|-- usr</span><br><span class=\"line\">`-- var</span><br><span class=\"line\"></span><br><span class=\"line\">20 directories, 0 files</span><br></pre></td></tr></table></figure><ul><li>系统目录作用说明<style>table th:first-of-type{width:85px}table th{text-align:center}</style></li></ul><table><thead><tr><th style=\"text-align:center\">目录名</th><th>说明</th></tr></thead><tbody><tr><td style=\"text-align:center\">/bin</td><td>bin目录主要存放的是系统的命令，我们所使用的命令如<code>ls</code>、<code>yum</code>等，都存放于bin目录下，bin目录不止有<code>/bin</code>，还有<code>/usr/bin/</code>、<code>/usr/sbin/</code>、<code>/sbin/</code>也是同样的作用，区别是<code>sbin</code>目录下的命令是超级用户root使用的命令；</td></tr><tr><td style=\"text-align:center\">/boot</td><td>boot目录主要存放系统的启动文件，当我们启动系统时，进入的<code>grub</code>界面，就是存放在boot目录下；</td></tr><tr><td style=\"text-align:center\">/dev</td><td>dev目录是存放设备文件的目录，在Linux系统中，一切皆文件，所以即使是硬盘，光驱，在目录下呈现的也是一个文件；</td></tr><tr><td style=\"text-align:center\">/lib &amp; /lib64</td><td>lib及lib64是存放系统的库文件的目录，很多命令会依赖库文件，查看一个命令依赖哪些库，可以使用<code>ldd</code>命令：<code>ldd /bin/ls</code>;</td></tr><tr><td style=\"text-align:center\">/proc</td><td>系统进程目录，系统的每个进程都会在这个目录下创建自己的进程文件和目录；在proc目录下存在以数字命名的目录，这就是进程的PID，在PID目录下可以看到<code>cwd</code>文件指向一个位置，这就是进程运行所在的目录；</td></tr><tr><td style=\"text-align:center\">/run</td><td>进程运行存放临时文件的目录，在系统重启或关机后目录会清空；</td></tr><tr><td style=\"text-align:center\">/srv</td><td>存放服务产生的文件，默认为空；</td></tr><tr><td style=\"text-align:center\">/sys</td><td>存放系统内核相关的文件，一般不会使用到这个目录；</td></tr><tr><td style=\"text-align:center\">/tmp</td><td>临时目录，任何用户都可以在其下创建文件；</td></tr><tr><td style=\"text-align:center\">/usr</td><td>系统用户使用到的命令或文件、库文件的存放位置；一般安装的服务都会放在/usr/local目录下；</td></tr><tr><td style=\"text-align:center\">/var</td><td>存放系统运行相关的文件，如日志/var/log；进程PID等。</td></tr></tbody></table><h1 id=\"ls命令\"><a href=\"#ls命令\" class=\"headerlink\" title=\"ls命令\"></a>ls命令</h1><h2 id=\"命令语法\"><a href=\"#命令语法\" class=\"headerlink\" title=\"命令语法\"></a>命令语法</h2><ul><li>ls命令主要用来显示目标列表，是使用率较高的命令，同时Centos系统默认ls命令的输出信息会进行彩色加亮显示，以区分不同了类型的文件。</li><li>ls的语法是<code>ls (选项) (目录或文件)</code>；</li></ul><h2 id=\"常用选项\"><a href=\"#常用选项\" class=\"headerlink\" title=\"常用选项\"></a>常用选项</h2><table><thead><tr><th style=\"text-align:center\">选项</th><th>作用</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>-l</code></td><td>输出详细信息，从左到右分别是文件类型、权限、硬链接数、所有者、组、文件大小、最后修改时间以及文件名 ；</td></tr><tr><td style=\"text-align:center\"><code>-i</code></td><td>显示文件的索引节点号，即<code>inode</code>号，<code>inode</code>记录文件存储在磁盘的所在块和区信息，如果两个文件inode号一样，则两个文件相同；</td></tr><tr><td style=\"text-align:center\"><code>-h</code></td><td>人性化显示文件大小，会在文件大小后显示单位，如<code>K</code>,<code>MB</code>;</td></tr><tr><td style=\"text-align:center\"><code>-a</code></td><td>显示所有文件及目录，包括<code>.</code>开头的隐藏文件和目录，而<code>.</code>和<code>..</code>表示当前目录和上层目录，<code>.</code>所表示的当前目录的详细信息中的硬链接数，也表示当前目录下有多少个子目录；</td></tr><tr><td style=\"text-align:center\"><code>-t</code></td><td>以时间顺序排序显示，越晚的排在越上面；</td></tr><tr><td style=\"text-align:center\"><code>-d</code></td><td>只列出目录本身，不列出目录下的文件和子目录；</td></tr></tbody></table><ul><li><p>系统中还存在着命令的别名，比如<code>ll</code>就等于<code>ls -l</code>，查看别名代表的详细命令，可以使用<code>which (命令)</code>来查看：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ll</span></span><br><span class=\"line\">total 4</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Mar 12 17:42 <span class=\"built_in\">source</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># which ll</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> ll=<span class=\"string\">'ls -l --color=auto'</span>\t<span class=\"comment\"># --color=auto表示彩色高亮显示</span></span><br><span class=\"line\">\t/bin/ls</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"文件类型\"><a href=\"#文件类型\" class=\"headerlink\" title=\"文件类型\"></a>文件类型</h1><ul><li>在使用<code>ls -l</code>命令时，左边第一位表示文件的类型，文件类型有以下几种：</li></ul><table><thead><tr><th style=\"text-align:center\">符号表示</th><th>代表类型</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>d</code></td><td>表示目录；</td></tr><tr><td style=\"text-align:center\"><code>-</code></td><td>表示普通文件，如文本文档，二进制文件；</td></tr><tr><td style=\"text-align:center\"><code>c</code></td><td>表示字符串设备，如键盘，鼠标设备文件；</td></tr><tr><td style=\"text-align:center\"><code>l</code></td><td>表示软连接文件，类似于windows的快捷方式；</td></tr><tr><td style=\"text-align:center\"><code>b</code></td><td>块设备，如光驱，磁盘文件；</td></tr><tr><td style=\"text-align:center\"><code>s</code></td><td>表示socket文件，socket文件是进程用来通信的文件。</td></tr></tbody></table><h1 id=\"命令别名\"><a href=\"#命令别名\" class=\"headerlink\" title=\"命令别名\"></a>命令别名</h1><h2 id=\"查看命令别名\"><a href=\"#查看命令别名\" class=\"headerlink\" title=\"查看命令别名\"></a>查看命令别名</h2><ul><li><p>前面使用<code>which</code>查看命令别名所表示的实际命令，而命令别名是使用<code>alias</code>来定义的；</p></li><li><p>执行<code>alias</code>可以查看系统所有的命令别名和其所代表的实际命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># alias</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> cp=<span class=\"string\">'cp -i'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> egrep=<span class=\"string\">'egrep --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> fgrep=<span class=\"string\">'fgrep --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> grep=<span class=\"string\">'grep --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> l.=<span class=\"string\">'ls -d .* --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> ll=<span class=\"string\">'ls -l --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> ls=<span class=\"string\">'ls --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> mv=<span class=\"string\">'mv -i'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> rm=<span class=\"string\">'rm -i'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> <span class=\"built_in\">which</span>=<span class=\"string\">'alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'</span></span><br></pre></td></tr></table></figure></li><li><p>可以看到<code>which</code>命令其实也是命令别名，实际上<code>which</code>是在系统的<code>PATH</code>环境变量所指向的目录中区查找我们要查看的命令，查看<code>PAHT</code>环境变量：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo $PATH</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/sbin:/usr/<span class=\"built_in\">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"设置别名\"><a href=\"#设置别名\" class=\"headerlink\" title=\"设置别名\"></a>设置别名</h2><ul><li><p>设置别名可以直接使用<code>alias (别名) (原命令 -选项/参数)</code>来设置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># alias show='ls -lha'</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># show</span></span><br><span class=\"line\">total 52K</span><br><span class=\"line\">dr-xr-x---.  6 root root 4.0K Mar 14 23:22 .</span><br><span class=\"line\">dr-xr-xr-x. 18 root root 4.0K Mar 24 00:04 ..</span><br><span class=\"line\">-rw-------   1 root root 3.7K Mar 24 00:04 .bash_history</span><br><span class=\"line\">-rw-r--r--.  1 root root   18 Dec 29  2013 .bash_logout</span><br><span class=\"line\">-rw-r--r--.  1 root root  176 Dec 29  2013 .bash_profile</span><br><span class=\"line\">-rw-r--r--.  1 root root  176 Dec 29  2013 .bashrc</span><br><span class=\"line\">drwxr-xr-x   3 root root 4.0K Mar  8 15:46 .cache</span><br><span class=\"line\">drwxr-xr-x   3 root root 4.0K Mar  8 15:46 .config</span><br><span class=\"line\">-rw-r--r--.  1 root root  100 Dec 29  2013 .cshrc</span><br><span class=\"line\">drwxr-xr-x   2 root root 4.0K Mar 12 17:42 <span class=\"built_in\">source</span></span><br><span class=\"line\">drwx------   2 root root 4.0K Mar 12 14:25 .ssh</span><br><span class=\"line\">-rw-r--r--.  1 root root  129 Dec 29  2013 .tcshrc</span><br><span class=\"line\">-rw-------   1 root root 3.9K Mar 14 23:22 .viminfo</span><br></pre></td></tr></table></figure></li><li><p>想要取消命令别名，则使用<code>unalias (别名)</code>即可，<code>unalias</code>有一个<code>-a</code>参数，可以取消系统所有的命令别名：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># unalias show</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># show</span></span><br><span class=\"line\">-bash: show: <span class=\"built_in\">command</span> not found</span><br></pre></td></tr></table></figure></li><li><p>这样直接使用命令设置命令的别名，只会作用于当前登陆的操作，一旦退出登陆或重启，使用<code>alias</code>命令直接设置的别名也会被清除，如果需要每次登陆都能使用别名，则需要将相应的<code>alias</code>命令写入<code>/etc/bashrc</code>文件中，如果限定指定用户的别名，则写入用户家目录下的<code>.bashrc</code>文件中。</p></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>本文主要介绍Centos7的目录结构，文件类型，以及一些基础命令，如<code>ls</code>、<code>alias</code>命令，来进一步了解Centos系统的基本操作。</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.jpg\" alt=\"Linux目录结构\"></p>","more":"<hr><h1 id=\"系统目录结构\"><a href=\"#系统目录结构\" class=\"headerlink\" title=\"系统目录结构\"></a>系统目录结构</h1><ul><li><p>Linux的系统目录组织方式是树形的，从根目录<code>/</code>开始，其下又有多个子目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls /</span></span><br><span class=\"line\">bin   dev  home  lib64       media  opt   root  sbin  sys  usr</span><br><span class=\"line\">boot  etc  lib   lost+found  mnt    proc  run   srv   tmp  var</span><br></pre></td></tr></table></figure></li><li><p>我们的shell提示符是<code>[root@evobot ~]#</code>，其中<strong>root</strong>表示当前用户名，<strong>evobot</strong>表示主机名，<strong>~</strong>表示当前所在目录为家目录，root用户的家目录就是根目录下的<code>root</code>目录，后面的<strong> # </strong>表示当前是root用户，如果是普通用户，则是<strong>$</strong>符号，普通用户的家目录都在根目录下的<code>home</code>目录下；</p></li><li><p>家目录主要是存贮与用户相关的配置文件；</p></li><li><p>我们可以使用<code>tree</code>命令直观的看出系统的目录结构，默认Centos并没有安装<code>tree</code>命令，使用<code>yum -y install tree</code>即可安装该命令，<code>tree</code>命令的参数<code>-L</code>可以指定显示的目录层数：</p></li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tree -L 1 /</span></span><br><span class=\"line\">/</span><br><span class=\"line\">|-- bin -&gt; usr/bin</span><br><span class=\"line\">|-- boot</span><br><span class=\"line\">|-- dev</span><br><span class=\"line\">|-- etc</span><br><span class=\"line\">|-- home</span><br><span class=\"line\">|-- lib -&gt; usr/lib</span><br><span class=\"line\">|-- lib64 -&gt; usr/lib64</span><br><span class=\"line\">|-- lost+found</span><br><span class=\"line\">|-- media</span><br><span class=\"line\">|-- mnt</span><br><span class=\"line\">|-- opt</span><br><span class=\"line\">|-- proc</span><br><span class=\"line\">|-- root</span><br><span class=\"line\">|-- run</span><br><span class=\"line\">|-- sbin -&gt; usr/sbin</span><br><span class=\"line\">|-- srv</span><br><span class=\"line\">|-- sys</span><br><span class=\"line\">|-- tmp</span><br><span class=\"line\">|-- usr</span><br><span class=\"line\">`-- var</span><br><span class=\"line\"></span><br><span class=\"line\">20 directories, 0 files</span><br></pre></td></tr></table></figure><ul><li>系统目录作用说明<style>table th:first-of-type{width:85px}table th{text-align:center}</style></li></ul><table><thead><tr><th style=\"text-align:center\">目录名</th><th>说明</th></tr></thead><tbody><tr><td style=\"text-align:center\">/bin</td><td>bin目录主要存放的是系统的命令，我们所使用的命令如<code>ls</code>、<code>yum</code>等，都存放于bin目录下，bin目录不止有<code>/bin</code>，还有<code>/usr/bin/</code>、<code>/usr/sbin/</code>、<code>/sbin/</code>也是同样的作用，区别是<code>sbin</code>目录下的命令是超级用户root使用的命令；</td></tr><tr><td style=\"text-align:center\">/boot</td><td>boot目录主要存放系统的启动文件，当我们启动系统时，进入的<code>grub</code>界面，就是存放在boot目录下；</td></tr><tr><td style=\"text-align:center\">/dev</td><td>dev目录是存放设备文件的目录，在Linux系统中，一切皆文件，所以即使是硬盘，光驱，在目录下呈现的也是一个文件；</td></tr><tr><td style=\"text-align:center\">/lib &amp; /lib64</td><td>lib及lib64是存放系统的库文件的目录，很多命令会依赖库文件，查看一个命令依赖哪些库，可以使用<code>ldd</code>命令：<code>ldd /bin/ls</code>;</td></tr><tr><td style=\"text-align:center\">/proc</td><td>系统进程目录，系统的每个进程都会在这个目录下创建自己的进程文件和目录；在proc目录下存在以数字命名的目录，这就是进程的PID，在PID目录下可以看到<code>cwd</code>文件指向一个位置，这就是进程运行所在的目录；</td></tr><tr><td style=\"text-align:center\">/run</td><td>进程运行存放临时文件的目录，在系统重启或关机后目录会清空；</td></tr><tr><td style=\"text-align:center\">/srv</td><td>存放服务产生的文件，默认为空；</td></tr><tr><td style=\"text-align:center\">/sys</td><td>存放系统内核相关的文件，一般不会使用到这个目录；</td></tr><tr><td style=\"text-align:center\">/tmp</td><td>临时目录，任何用户都可以在其下创建文件；</td></tr><tr><td style=\"text-align:center\">/usr</td><td>系统用户使用到的命令或文件、库文件的存放位置；一般安装的服务都会放在/usr/local目录下；</td></tr><tr><td style=\"text-align:center\">/var</td><td>存放系统运行相关的文件，如日志/var/log；进程PID等。</td></tr></tbody></table><h1 id=\"ls命令\"><a href=\"#ls命令\" class=\"headerlink\" title=\"ls命令\"></a>ls命令</h1><h2 id=\"命令语法\"><a href=\"#命令语法\" class=\"headerlink\" title=\"命令语法\"></a>命令语法</h2><ul><li>ls命令主要用来显示目标列表，是使用率较高的命令，同时Centos系统默认ls命令的输出信息会进行彩色加亮显示，以区分不同了类型的文件。</li><li>ls的语法是<code>ls (选项) (目录或文件)</code>；</li></ul><h2 id=\"常用选项\"><a href=\"#常用选项\" class=\"headerlink\" title=\"常用选项\"></a>常用选项</h2><table><thead><tr><th style=\"text-align:center\">选项</th><th>作用</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>-l</code></td><td>输出详细信息，从左到右分别是文件类型、权限、硬链接数、所有者、组、文件大小、最后修改时间以及文件名 ；</td></tr><tr><td style=\"text-align:center\"><code>-i</code></td><td>显示文件的索引节点号，即<code>inode</code>号，<code>inode</code>记录文件存储在磁盘的所在块和区信息，如果两个文件inode号一样，则两个文件相同；</td></tr><tr><td style=\"text-align:center\"><code>-h</code></td><td>人性化显示文件大小，会在文件大小后显示单位，如<code>K</code>,<code>MB</code>;</td></tr><tr><td style=\"text-align:center\"><code>-a</code></td><td>显示所有文件及目录，包括<code>.</code>开头的隐藏文件和目录，而<code>.</code>和<code>..</code>表示当前目录和上层目录，<code>.</code>所表示的当前目录的详细信息中的硬链接数，也表示当前目录下有多少个子目录；</td></tr><tr><td style=\"text-align:center\"><code>-t</code></td><td>以时间顺序排序显示，越晚的排在越上面；</td></tr><tr><td style=\"text-align:center\"><code>-d</code></td><td>只列出目录本身，不列出目录下的文件和子目录；</td></tr></tbody></table><ul><li><p>系统中还存在着命令的别名，比如<code>ll</code>就等于<code>ls -l</code>，查看别名代表的详细命令，可以使用<code>which (命令)</code>来查看：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ll</span></span><br><span class=\"line\">total 4</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Mar 12 17:42 <span class=\"built_in\">source</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># which ll</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> ll=<span class=\"string\">'ls -l --color=auto'</span>\t<span class=\"comment\"># --color=auto表示彩色高亮显示</span></span><br><span class=\"line\">\t/bin/ls</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"文件类型\"><a href=\"#文件类型\" class=\"headerlink\" title=\"文件类型\"></a>文件类型</h1><ul><li>在使用<code>ls -l</code>命令时，左边第一位表示文件的类型，文件类型有以下几种：</li></ul><table><thead><tr><th style=\"text-align:center\">符号表示</th><th>代表类型</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>d</code></td><td>表示目录；</td></tr><tr><td style=\"text-align:center\"><code>-</code></td><td>表示普通文件，如文本文档，二进制文件；</td></tr><tr><td style=\"text-align:center\"><code>c</code></td><td>表示字符串设备，如键盘，鼠标设备文件；</td></tr><tr><td style=\"text-align:center\"><code>l</code></td><td>表示软连接文件，类似于windows的快捷方式；</td></tr><tr><td style=\"text-align:center\"><code>b</code></td><td>块设备，如光驱，磁盘文件；</td></tr><tr><td style=\"text-align:center\"><code>s</code></td><td>表示socket文件，socket文件是进程用来通信的文件。</td></tr></tbody></table><h1 id=\"命令别名\"><a href=\"#命令别名\" class=\"headerlink\" title=\"命令别名\"></a>命令别名</h1><h2 id=\"查看命令别名\"><a href=\"#查看命令别名\" class=\"headerlink\" title=\"查看命令别名\"></a>查看命令别名</h2><ul><li><p>前面使用<code>which</code>查看命令别名所表示的实际命令，而命令别名是使用<code>alias</code>来定义的；</p></li><li><p>执行<code>alias</code>可以查看系统所有的命令别名和其所代表的实际命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># alias</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> cp=<span class=\"string\">'cp -i'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> egrep=<span class=\"string\">'egrep --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> fgrep=<span class=\"string\">'fgrep --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> grep=<span class=\"string\">'grep --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> l.=<span class=\"string\">'ls -d .* --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> ll=<span class=\"string\">'ls -l --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> ls=<span class=\"string\">'ls --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> mv=<span class=\"string\">'mv -i'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> rm=<span class=\"string\">'rm -i'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> <span class=\"built_in\">which</span>=<span class=\"string\">'alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'</span></span><br></pre></td></tr></table></figure></li><li><p>可以看到<code>which</code>命令其实也是命令别名，实际上<code>which</code>是在系统的<code>PATH</code>环境变量所指向的目录中区查找我们要查看的命令，查看<code>PAHT</code>环境变量：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo $PATH</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/sbin:/usr/<span class=\"built_in\">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"设置别名\"><a href=\"#设置别名\" class=\"headerlink\" title=\"设置别名\"></a>设置别名</h2><ul><li><p>设置别名可以直接使用<code>alias (别名) (原命令 -选项/参数)</code>来设置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># alias show='ls -lha'</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># show</span></span><br><span class=\"line\">total 52K</span><br><span class=\"line\">dr-xr-x---.  6 root root 4.0K Mar 14 23:22 .</span><br><span class=\"line\">dr-xr-xr-x. 18 root root 4.0K Mar 24 00:04 ..</span><br><span class=\"line\">-rw-------   1 root root 3.7K Mar 24 00:04 .bash_history</span><br><span class=\"line\">-rw-r--r--.  1 root root   18 Dec 29  2013 .bash_logout</span><br><span class=\"line\">-rw-r--r--.  1 root root  176 Dec 29  2013 .bash_profile</span><br><span class=\"line\">-rw-r--r--.  1 root root  176 Dec 29  2013 .bashrc</span><br><span class=\"line\">drwxr-xr-x   3 root root 4.0K Mar  8 15:46 .cache</span><br><span class=\"line\">drwxr-xr-x   3 root root 4.0K Mar  8 15:46 .config</span><br><span class=\"line\">-rw-r--r--.  1 root root  100 Dec 29  2013 .cshrc</span><br><span class=\"line\">drwxr-xr-x   2 root root 4.0K Mar 12 17:42 <span class=\"built_in\">source</span></span><br><span class=\"line\">drwx------   2 root root 4.0K Mar 12 14:25 .ssh</span><br><span class=\"line\">-rw-r--r--.  1 root root  129 Dec 29  2013 .tcshrc</span><br><span class=\"line\">-rw-------   1 root root 3.9K Mar 14 23:22 .viminfo</span><br></pre></td></tr></table></figure></li><li><p>想要取消命令别名，则使用<code>unalias (别名)</code>即可，<code>unalias</code>有一个<code>-a</code>参数，可以取消系统所有的命令别名：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># unalias show</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># show</span></span><br><span class=\"line\">-bash: show: <span class=\"built_in\">command</span> not found</span><br></pre></td></tr></table></figure></li><li><p>这样直接使用命令设置命令的别名，只会作用于当前登陆的操作，一旦退出登陆或重启，使用<code>alias</code>命令直接设置的别名也会被清除，如果需要每次登陆都能使用别名，则需要将相应的<code>alias</code>命令写入<code>/etc/bashrc</code>文件中，如果限定指定用户的别名，则写入用户家目录下的<code>.bashrc</code>文件中。</p></li></ul><hr><!-- rebuild by neat -->"},{"title":"Centos7系列:文件及目录管理相关命令(二)","author":"Evobot","abbrlink":"fd76e245","date":"2018-03-26T13:50:06.000Z","image":"http://p5qynomrl.bkt.clouddn.com/1522076578398hgl3ncm4.png?imageslim","_content":"本文主要介绍Linux相对和绝对路径的概念，以及cd命令、mkdir、rmdir命令和rm几个操作文件及目录的命令。文章封面的`rm -rf /*`命令会导致系统崩溃，请勿尝试~\t\n\n<!-- more -->\n\n# 相对及绝对路径\n\n## 绝对路径\n\n- 由于Linux的目录结构是树型结构，所以从根目录开始的路径，就称之为绝对路径，比如网卡配置文件：\n\n  ```bash\n  [lux@evobot ~]$ ls /etc/sysconfig/network-scripts/ifcfg-eth0 \n  /etc/sysconfig/network-scripts/ifcfg-eth0\n  ```\n\n- 绝对路径能够保证我们不论在什么位置，都能找到自己想要的文件或目录。\n\n## pwd命令\n\n- 当我们想知道自己当前所在目录的绝对路径时，可以执行`pwd`命令得到当前路径的绝对路径:\n\n  ```bash\n  [lux@evobot ~]$ pwd\n  /home/lux\n  ```\n\n## 相对路径\n\n- 相对路径的意思是指相对于当前所在目录的路径，比如在家目录，需要查看`.ssh`目录时，并不需要输入从根目录开始的绝对路径，例如：\n\n  ```bash\n  [root@evobot ~]# ls .ssh/authorized_keys \n  .ssh/authorized_keys\n  ```\n\n- 可以从上面看到，`.ssh`相对当前目录家目录，可以直接查看而不需要输入绝对路径查找文件。\n\n# cd命令\n\n- `cd`命令用于进入到目录，如进入根目录`cd /`，另外`cd`命令还有一些小技巧，如切换到上次的目录`cd -`，切换到上层目录`cd ..`;\n- 直接输入`cd`命令，则会进入到当前用户的家目录下，同样的`cd ~`具有相同的功能。\n\n# 创建和删除目录\n\n## mkdir创建目录\n\n- `mkdir`命令用于创建目录，可以使用绝对路径和相对路径的方式：\n\n  ```bash\n  [root@evobot ~]# mkdir /tmp/evobot1\n  [root@evobot ~]# mkdir evobot2\n  [root@evobot ~]# ls /tmp/\n  evobot1\n  [root@evobot ~]# ls \n  evobot2\n  ```\n\n- 创建多级目录使用选项`mkdir -p`：\n\n  ```bash\n  [root@evobot ~]# mkdir -p evobot3/dir1\n  [root@evobot ~]# ls\n  evobot2  evobot3\n  [root@evobot ~]# ls evobot3/\n  dir1\n  ```\n\n- `mkdir -v`选项可以可视化创建目录，即显示创建目录的过程:\n\n  ```bash\n  [root@evobot ~]# mkdir -pv evobot3/dir2/dir3/dir4\n  mkdir: 已创建目录 \"evobot3/dir2\"\n  mkdir: 已创建目录 \"evobot3/dir2/dir3\"\n  mkdir: 已创建目录 \"evobot3/dir2/dir3/dir4\"\n  ```\n\n## 删除目录\n\n- 删除目录可以使用`rmdir`命令，但是删除的前提时目录为空，即目录存在目录和文件时，都无法删除：\n\n  ```bash\n  [root@evobot ~]# rmdir evobot3/dir2\n  rmdir: 删除 \"evobot3/dir2\" 失败: 目录非空\n  ```\n\n- `rmdir`同样有`-p`选项，可以级联删除，但是容易出现操作失误，因为`-p`操作会将目录下空目录均删除。\n\n## rm删除命令\n\n### 删除文件\n\n- `rm`命令也是删除的命令，而且可以删除文件和目录：\n\n  ```bash\n  [root@evobot ~]# touch evobot3/dir2/dir3/dir4/test1\n  [[root@evobot ~]# tree  evobot3/\n  evobot3/\n  |-- dir1\n  `-- dir2\n      `-- dir3\n          `-- dir4\n              `-- test1\n\n  4 directories, 1 file\n  [root@evobot ~]# rm evobot3/dir2/dir3/dir4/test1 \n  rm：是否删除普通空文件 \"evobot3/dir2/dir3/dir4/test1\"？y\n  ```\n\n- `rm`命令在操作时会寻味是否删除，输入`y`即可同意删除文件；\n\n- `touch`命令用来创建一个空文件，使用方法为`touch (文件名)`;\n\n- 如果不想在使用`rm`删除文件时提示是否删除，可以使用`rm -f`选项，强制删除文件:\n\n  ```bash\n  [root@evobot ~]# !touch\t# 重复执行最后一次执行过的touch命令\n  touch evobot3/dir2/dir3/dir4/test1\n  [root@evobot ~]# rm -f evobot3/dir2/dir3/dir4/test1 \n  ```\n\n### 删除目录\n\n- `rm`删除目录需要使用`-r`选项，同样在未使用`-f`选项时，会交互式询问是否删除：\n\n  ```bash\n  [root@evobot ~]# rm -r evobot3/dir2/dir3/\n  rm：是否进入目录\"evobot3/dir2/dir3/\"? y\n  rm：是否删除目录 \"evobot3/dir2/dir3/dir4\"？y\n  rm：是否删除目录 \"evobot3/dir2/dir3/\"？y\n  [root@evobot ~]# rm -rf evobot3/dir\n  dir1/ dir2/ \n  [root@evobot ~]# rm -rf evobot3/dir2/\n  ```\n\n- 当使用`-f`选项时，即使文件或目录不存在，也不会提示出错。\n\n---\n\n","source":"_posts/Centos7系列-文件及目录管理(二).md","raw":"---\ntitle: 'Centos7系列:文件及目录管理相关命令(二)'\nauthor: Evobot\nabbrlink: fd76e245\ndate: 2018-03-26 21:50:06\ncategories: Centos7\ntags: [Linux, Centos]\nimage: http://p5qynomrl.bkt.clouddn.com/1522076578398hgl3ncm4.png?imageslim\n---\n本文主要介绍Linux相对和绝对路径的概念，以及cd命令、mkdir、rmdir命令和rm几个操作文件及目录的命令。文章封面的`rm -rf /*`命令会导致系统崩溃，请勿尝试~\t\n\n<!-- more -->\n\n# 相对及绝对路径\n\n## 绝对路径\n\n- 由于Linux的目录结构是树型结构，所以从根目录开始的路径，就称之为绝对路径，比如网卡配置文件：\n\n  ```bash\n  [lux@evobot ~]$ ls /etc/sysconfig/network-scripts/ifcfg-eth0 \n  /etc/sysconfig/network-scripts/ifcfg-eth0\n  ```\n\n- 绝对路径能够保证我们不论在什么位置，都能找到自己想要的文件或目录。\n\n## pwd命令\n\n- 当我们想知道自己当前所在目录的绝对路径时，可以执行`pwd`命令得到当前路径的绝对路径:\n\n  ```bash\n  [lux@evobot ~]$ pwd\n  /home/lux\n  ```\n\n## 相对路径\n\n- 相对路径的意思是指相对于当前所在目录的路径，比如在家目录，需要查看`.ssh`目录时，并不需要输入从根目录开始的绝对路径，例如：\n\n  ```bash\n  [root@evobot ~]# ls .ssh/authorized_keys \n  .ssh/authorized_keys\n  ```\n\n- 可以从上面看到，`.ssh`相对当前目录家目录，可以直接查看而不需要输入绝对路径查找文件。\n\n# cd命令\n\n- `cd`命令用于进入到目录，如进入根目录`cd /`，另外`cd`命令还有一些小技巧，如切换到上次的目录`cd -`，切换到上层目录`cd ..`;\n- 直接输入`cd`命令，则会进入到当前用户的家目录下，同样的`cd ~`具有相同的功能。\n\n# 创建和删除目录\n\n## mkdir创建目录\n\n- `mkdir`命令用于创建目录，可以使用绝对路径和相对路径的方式：\n\n  ```bash\n  [root@evobot ~]# mkdir /tmp/evobot1\n  [root@evobot ~]# mkdir evobot2\n  [root@evobot ~]# ls /tmp/\n  evobot1\n  [root@evobot ~]# ls \n  evobot2\n  ```\n\n- 创建多级目录使用选项`mkdir -p`：\n\n  ```bash\n  [root@evobot ~]# mkdir -p evobot3/dir1\n  [root@evobot ~]# ls\n  evobot2  evobot3\n  [root@evobot ~]# ls evobot3/\n  dir1\n  ```\n\n- `mkdir -v`选项可以可视化创建目录，即显示创建目录的过程:\n\n  ```bash\n  [root@evobot ~]# mkdir -pv evobot3/dir2/dir3/dir4\n  mkdir: 已创建目录 \"evobot3/dir2\"\n  mkdir: 已创建目录 \"evobot3/dir2/dir3\"\n  mkdir: 已创建目录 \"evobot3/dir2/dir3/dir4\"\n  ```\n\n## 删除目录\n\n- 删除目录可以使用`rmdir`命令，但是删除的前提时目录为空，即目录存在目录和文件时，都无法删除：\n\n  ```bash\n  [root@evobot ~]# rmdir evobot3/dir2\n  rmdir: 删除 \"evobot3/dir2\" 失败: 目录非空\n  ```\n\n- `rmdir`同样有`-p`选项，可以级联删除，但是容易出现操作失误，因为`-p`操作会将目录下空目录均删除。\n\n## rm删除命令\n\n### 删除文件\n\n- `rm`命令也是删除的命令，而且可以删除文件和目录：\n\n  ```bash\n  [root@evobot ~]# touch evobot3/dir2/dir3/dir4/test1\n  [[root@evobot ~]# tree  evobot3/\n  evobot3/\n  |-- dir1\n  `-- dir2\n      `-- dir3\n          `-- dir4\n              `-- test1\n\n  4 directories, 1 file\n  [root@evobot ~]# rm evobot3/dir2/dir3/dir4/test1 \n  rm：是否删除普通空文件 \"evobot3/dir2/dir3/dir4/test1\"？y\n  ```\n\n- `rm`命令在操作时会寻味是否删除，输入`y`即可同意删除文件；\n\n- `touch`命令用来创建一个空文件，使用方法为`touch (文件名)`;\n\n- 如果不想在使用`rm`删除文件时提示是否删除，可以使用`rm -f`选项，强制删除文件:\n\n  ```bash\n  [root@evobot ~]# !touch\t# 重复执行最后一次执行过的touch命令\n  touch evobot3/dir2/dir3/dir4/test1\n  [root@evobot ~]# rm -f evobot3/dir2/dir3/dir4/test1 \n  ```\n\n### 删除目录\n\n- `rm`删除目录需要使用`-r`选项，同样在未使用`-f`选项时，会交互式询问是否删除：\n\n  ```bash\n  [root@evobot ~]# rm -r evobot3/dir2/dir3/\n  rm：是否进入目录\"evobot3/dir2/dir3/\"? y\n  rm：是否删除目录 \"evobot3/dir2/dir3/dir4\"？y\n  rm：是否删除目录 \"evobot3/dir2/dir3/\"？y\n  [root@evobot ~]# rm -rf evobot3/dir\n  dir1/ dir2/ \n  [root@evobot ~]# rm -rf evobot3/dir2/\n  ```\n\n- 当使用`-f`选项时，即使文件或目录不存在，也不会提示出错。\n\n---\n\n","slug":"Centos7系列-文件及目录管理(二)","published":1,"updated":"2018-06-02T13:01:29.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gaz80000mu1jx7g4gisej","content":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>本文主要介绍Linux相对和绝对路径的概念，以及cd命令、mkdir、rmdir命令和rm几个操作文件及目录的命令。文章封面的<code>rm -rf /*</code>命令会导致系统崩溃，请勿尝试~</p><a id=\"more\"></a><h1 id=\"相对及绝对路径\"><a href=\"#相对及绝对路径\" class=\"headerlink\" title=\"相对及绝对路径\"></a>相对及绝对路径</h1><h2 id=\"绝对路径\"><a href=\"#绝对路径\" class=\"headerlink\" title=\"绝对路径\"></a>绝对路径</h2><ul><li><p>由于Linux的目录结构是树型结构，所以从根目录开始的路径，就称之为绝对路径，比如网卡配置文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@evobot ~]$ ls /etc/sysconfig/network-scripts/ifcfg-eth0 </span><br><span class=\"line\">/etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure></li><li><p>绝对路径能够保证我们不论在什么位置，都能找到自己想要的文件或目录。</p></li></ul><h2 id=\"pwd命令\"><a href=\"#pwd命令\" class=\"headerlink\" title=\"pwd命令\"></a>pwd命令</h2><ul><li><p>当我们想知道自己当前所在目录的绝对路径时，可以执行<code>pwd</code>命令得到当前路径的绝对路径:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">pwd</span></span><br><span class=\"line\">/home/lux</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"相对路径\"><a href=\"#相对路径\" class=\"headerlink\" title=\"相对路径\"></a>相对路径</h2><ul><li><p>相对路径的意思是指相对于当前所在目录的路径，比如在家目录，需要查看<code>.ssh</code>目录时，并不需要输入从根目录开始的绝对路径，例如：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls .ssh/authorized_keys </span></span><br><span class=\"line\">.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>可以从上面看到，<code>.ssh</code>相对当前目录家目录，可以直接查看而不需要输入绝对路径查找文件。</p></li></ul><h1 id=\"cd命令\"><a href=\"#cd命令\" class=\"headerlink\" title=\"cd命令\"></a>cd命令</h1><ul><li><code>cd</code>命令用于进入到目录，如进入根目录<code>cd /</code>，另外<code>cd</code>命令还有一些小技巧，如切换到上次的目录<code>cd -</code>，切换到上层目录<code>cd ..</code>;</li><li>直接输入<code>cd</code>命令，则会进入到当前用户的家目录下，同样的<code>cd ~</code>具有相同的功能。</li></ul><h1 id=\"创建和删除目录\"><a href=\"#创建和删除目录\" class=\"headerlink\" title=\"创建和删除目录\"></a>创建和删除目录</h1><h2 id=\"mkdir创建目录\"><a href=\"#mkdir创建目录\" class=\"headerlink\" title=\"mkdir创建目录\"></a>mkdir创建目录</h2><ul><li><p><code>mkdir</code>命令用于创建目录，可以使用绝对路径和相对路径的方式：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkdir /tmp/evobot1</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkdir evobot2</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls /tmp/</span></span><br><span class=\"line\">evobot1</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls </span></span><br><span class=\"line\">evobot2</span><br></pre></td></tr></table></figure></li><li><p>创建多级目录使用选项<code>mkdir -p</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkdir -p evobot3/dir1</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls</span></span><br><span class=\"line\">evobot2  evobot3</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls evobot3/</span></span><br><span class=\"line\">dir1</span><br></pre></td></tr></table></figure></li><li><p><code>mkdir -v</code>选项可以可视化创建目录，即显示创建目录的过程:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkdir -pv evobot3/dir2/dir3/dir4</span></span><br><span class=\"line\">mkdir: 已创建目录 <span class=\"string\">\"evobot3/dir2\"</span></span><br><span class=\"line\">mkdir: 已创建目录 <span class=\"string\">\"evobot3/dir2/dir3\"</span></span><br><span class=\"line\">mkdir: 已创建目录 <span class=\"string\">\"evobot3/dir2/dir3/dir4\"</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"删除目录\"><a href=\"#删除目录\" class=\"headerlink\" title=\"删除目录\"></a>删除目录</h2><ul><li><p>删除目录可以使用<code>rmdir</code>命令，但是删除的前提时目录为空，即目录存在目录和文件时，都无法删除：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># rmdir evobot3/dir2</span></span><br><span class=\"line\">rmdir: 删除 <span class=\"string\">\"evobot3/dir2\"</span> 失败: 目录非空</span><br></pre></td></tr></table></figure></li><li><p><code>rmdir</code>同样有<code>-p</code>选项，可以级联删除，但是容易出现操作失误，因为<code>-p</code>操作会将目录下空目录均删除。</p></li></ul><h2 id=\"rm删除命令\"><a href=\"#rm删除命令\" class=\"headerlink\" title=\"rm删除命令\"></a>rm删除命令</h2><h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3><ul><li><p><code>rm</code>命令也是删除的命令，而且可以删除文件和目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># touch evobot3/dir2/dir3/dir4/test1</span></span><br><span class=\"line\">[[root@evobot ~]<span class=\"comment\"># tree  evobot3/</span></span><br><span class=\"line\">evobot3/</span><br><span class=\"line\">|-- dir1</span><br><span class=\"line\">`-- dir2</span><br><span class=\"line\">    `-- dir3</span><br><span class=\"line\">        `-- dir4</span><br><span class=\"line\">            `-- test1</span><br><span class=\"line\"></span><br><span class=\"line\">4 directories, 1 file</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># rm evobot3/dir2/dir3/dir4/test1 </span></span><br><span class=\"line\">rm：是否删除普通空文件 <span class=\"string\">\"evobot3/dir2/dir3/dir4/test1\"</span>？y</span><br></pre></td></tr></table></figure></li><li><p><code>rm</code>命令在操作时会寻味是否删除，输入<code>y</code>即可同意删除文件；</p></li><li><p><code>touch</code>命令用来创建一个空文件，使用方法为<code>touch (文件名)</code>;</p></li><li><p>如果不想在使用<code>rm</code>删除文件时提示是否删除，可以使用<code>rm -f</code>选项，强制删除文件:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># !touch\t# 重复执行最后一次执行过的touch命令</span></span><br><span class=\"line\">touch evobot3/dir2/dir3/dir4/test1</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># rm -f evobot3/dir2/dir3/dir4/test1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id=\"删除目录-1\"><a href=\"#删除目录-1\" class=\"headerlink\" title=\"删除目录\"></a>删除目录</h3><ul><li><p><code>rm</code>删除目录需要使用<code>-r</code>选项，同样在未使用<code>-f</code>选项时，会交互式询问是否删除：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># rm -r evobot3/dir2/dir3/</span></span><br><span class=\"line\">rm：是否进入目录<span class=\"string\">\"evobot3/dir2/dir3/\"</span>? y</span><br><span class=\"line\">rm：是否删除目录 <span class=\"string\">\"evobot3/dir2/dir3/dir4\"</span>？y</span><br><span class=\"line\">rm：是否删除目录 <span class=\"string\">\"evobot3/dir2/dir3/\"</span>？y</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># rm -rf evobot3/dir</span></span><br><span class=\"line\">dir1/ dir2/ </span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># rm -rf evobot3/dir2/</span></span><br></pre></td></tr></table></figure></li><li><p>当使用<code>-f</code>选项时，即使文件或目录不存在，也不会提示出错。</p></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>本文主要介绍Linux相对和绝对路径的概念，以及cd命令、mkdir、rmdir命令和rm几个操作文件及目录的命令。文章封面的<code>rm -rf /*</code>命令会导致系统崩溃，请勿尝试~</p>","more":"<h1 id=\"相对及绝对路径\"><a href=\"#相对及绝对路径\" class=\"headerlink\" title=\"相对及绝对路径\"></a>相对及绝对路径</h1><h2 id=\"绝对路径\"><a href=\"#绝对路径\" class=\"headerlink\" title=\"绝对路径\"></a>绝对路径</h2><ul><li><p>由于Linux的目录结构是树型结构，所以从根目录开始的路径，就称之为绝对路径，比如网卡配置文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@evobot ~]$ ls /etc/sysconfig/network-scripts/ifcfg-eth0 </span><br><span class=\"line\">/etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure></li><li><p>绝对路径能够保证我们不论在什么位置，都能找到自己想要的文件或目录。</p></li></ul><h2 id=\"pwd命令\"><a href=\"#pwd命令\" class=\"headerlink\" title=\"pwd命令\"></a>pwd命令</h2><ul><li><p>当我们想知道自己当前所在目录的绝对路径时，可以执行<code>pwd</code>命令得到当前路径的绝对路径:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">pwd</span></span><br><span class=\"line\">/home/lux</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"相对路径\"><a href=\"#相对路径\" class=\"headerlink\" title=\"相对路径\"></a>相对路径</h2><ul><li><p>相对路径的意思是指相对于当前所在目录的路径，比如在家目录，需要查看<code>.ssh</code>目录时，并不需要输入从根目录开始的绝对路径，例如：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls .ssh/authorized_keys </span></span><br><span class=\"line\">.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>可以从上面看到，<code>.ssh</code>相对当前目录家目录，可以直接查看而不需要输入绝对路径查找文件。</p></li></ul><h1 id=\"cd命令\"><a href=\"#cd命令\" class=\"headerlink\" title=\"cd命令\"></a>cd命令</h1><ul><li><code>cd</code>命令用于进入到目录，如进入根目录<code>cd /</code>，另外<code>cd</code>命令还有一些小技巧，如切换到上次的目录<code>cd -</code>，切换到上层目录<code>cd ..</code>;</li><li>直接输入<code>cd</code>命令，则会进入到当前用户的家目录下，同样的<code>cd ~</code>具有相同的功能。</li></ul><h1 id=\"创建和删除目录\"><a href=\"#创建和删除目录\" class=\"headerlink\" title=\"创建和删除目录\"></a>创建和删除目录</h1><h2 id=\"mkdir创建目录\"><a href=\"#mkdir创建目录\" class=\"headerlink\" title=\"mkdir创建目录\"></a>mkdir创建目录</h2><ul><li><p><code>mkdir</code>命令用于创建目录，可以使用绝对路径和相对路径的方式：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkdir /tmp/evobot1</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkdir evobot2</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls /tmp/</span></span><br><span class=\"line\">evobot1</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls </span></span><br><span class=\"line\">evobot2</span><br></pre></td></tr></table></figure></li><li><p>创建多级目录使用选项<code>mkdir -p</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkdir -p evobot3/dir1</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls</span></span><br><span class=\"line\">evobot2  evobot3</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls evobot3/</span></span><br><span class=\"line\">dir1</span><br></pre></td></tr></table></figure></li><li><p><code>mkdir -v</code>选项可以可视化创建目录，即显示创建目录的过程:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkdir -pv evobot3/dir2/dir3/dir4</span></span><br><span class=\"line\">mkdir: 已创建目录 <span class=\"string\">\"evobot3/dir2\"</span></span><br><span class=\"line\">mkdir: 已创建目录 <span class=\"string\">\"evobot3/dir2/dir3\"</span></span><br><span class=\"line\">mkdir: 已创建目录 <span class=\"string\">\"evobot3/dir2/dir3/dir4\"</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"删除目录\"><a href=\"#删除目录\" class=\"headerlink\" title=\"删除目录\"></a>删除目录</h2><ul><li><p>删除目录可以使用<code>rmdir</code>命令，但是删除的前提时目录为空，即目录存在目录和文件时，都无法删除：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># rmdir evobot3/dir2</span></span><br><span class=\"line\">rmdir: 删除 <span class=\"string\">\"evobot3/dir2\"</span> 失败: 目录非空</span><br></pre></td></tr></table></figure></li><li><p><code>rmdir</code>同样有<code>-p</code>选项，可以级联删除，但是容易出现操作失误，因为<code>-p</code>操作会将目录下空目录均删除。</p></li></ul><h2 id=\"rm删除命令\"><a href=\"#rm删除命令\" class=\"headerlink\" title=\"rm删除命令\"></a>rm删除命令</h2><h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3><ul><li><p><code>rm</code>命令也是删除的命令，而且可以删除文件和目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># touch evobot3/dir2/dir3/dir4/test1</span></span><br><span class=\"line\">[[root@evobot ~]<span class=\"comment\"># tree  evobot3/</span></span><br><span class=\"line\">evobot3/</span><br><span class=\"line\">|-- dir1</span><br><span class=\"line\">`-- dir2</span><br><span class=\"line\">    `-- dir3</span><br><span class=\"line\">        `-- dir4</span><br><span class=\"line\">            `-- test1</span><br><span class=\"line\"></span><br><span class=\"line\">4 directories, 1 file</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># rm evobot3/dir2/dir3/dir4/test1 </span></span><br><span class=\"line\">rm：是否删除普通空文件 <span class=\"string\">\"evobot3/dir2/dir3/dir4/test1\"</span>？y</span><br></pre></td></tr></table></figure></li><li><p><code>rm</code>命令在操作时会寻味是否删除，输入<code>y</code>即可同意删除文件；</p></li><li><p><code>touch</code>命令用来创建一个空文件，使用方法为<code>touch (文件名)</code>;</p></li><li><p>如果不想在使用<code>rm</code>删除文件时提示是否删除，可以使用<code>rm -f</code>选项，强制删除文件:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># !touch\t# 重复执行最后一次执行过的touch命令</span></span><br><span class=\"line\">touch evobot3/dir2/dir3/dir4/test1</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># rm -f evobot3/dir2/dir3/dir4/test1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id=\"删除目录-1\"><a href=\"#删除目录-1\" class=\"headerlink\" title=\"删除目录\"></a>删除目录</h3><ul><li><p><code>rm</code>删除目录需要使用<code>-r</code>选项，同样在未使用<code>-f</code>选项时，会交互式询问是否删除：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># rm -r evobot3/dir2/dir3/</span></span><br><span class=\"line\">rm：是否进入目录<span class=\"string\">\"evobot3/dir2/dir3/\"</span>? y</span><br><span class=\"line\">rm：是否删除目录 <span class=\"string\">\"evobot3/dir2/dir3/dir4\"</span>？y</span><br><span class=\"line\">rm：是否删除目录 <span class=\"string\">\"evobot3/dir2/dir3/\"</span>？y</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># rm -rf evobot3/dir</span></span><br><span class=\"line\">dir1/ dir2/ </span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># rm -rf evobot3/dir2/</span></span><br></pre></td></tr></table></figure></li><li><p>当使用<code>-f</code>选项时，即使文件或目录不存在，也不会提示出错。</p></li></ul><hr><!-- rebuild by neat -->"},{"title":"Centos7系列:文件及目录管理相关命令(三)","author":"Evobot","abbrlink":"8385c26e","date":"2018-03-27T14:29:06.000Z","image":null,"_content":"> 主要介绍Linux环境变量PATH，以及移动`mv`、复制`cp`命令的使用，另外则是查看文档操作相关的命令:`cat`、`more`、`less`和`head`。\n\n<!-- more -->\n\n# 环境变量PATH\n\n## 查看PATH\n\n- 使用`which`命令可以查看命令的别名，而`which`命令并不是在整个系统去查找命令，而是从环境变量PATH的目录中去查找，查看PATH包含的目录，使用`echo $PATH`：\n\n  ```bash\n  [root@evobot ~]# echo $PATH\n  /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin\n  ```\n\n- 实际上在LInux中执行一个命令，是需要使用绝对路径才可以执行，但是有了PATH，我们执行命令时，系统会自动到PATH包含的目录下去查找调用。\n\n- 如果将一个命令放到不包含在PATH变量中的目录下，那么只能使用绝对路径的方式去执行这个命令：\n\n  ```bash\n  [root@evobot ~]# which ls\n  alias ls='ls --color=auto'\n  \t/bin/ls\n  [root@evobot ~]# cp /bin/ls /tmp/ls2\n  [root@evobot ~]# ls2\n  -bash: ls2: 未找到命令\n  [root@evobot ~]# /tmp/ls2\n  source\n  ```\n\n## 增加PATH包含的目录\n\n- 如果想将一个目录包含到PATH中，执行如下命令:\n\n  ```bash\n  [root@evobot ~]# PATH=$PATH:/tmp/\n  [root@evobot ~]# echo $PATH\n  /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/tmp/\n  [root@evobot ~]# ls2\n  source\n  ```\n\n- 上面的方式只会在当前登录用户的环境中生效，而要让新的环境变量永久生效，则需要将`PATH=$PATH:/tmp/`写入到`/etc/profile`文件末尾。\n\n  ![增加PATH](http://p5qynomrl.bkt.clouddn.com/1522162144804yntgfqme.png?imageslim)\n\n# 复制命令 cp\n\n- `cp`命令是LInux中用来复制文件和目录的命令，拷贝文件直接使用`cp (/文件路径/文件名) /目的路径/复制文件名`命令即可：\n\n  ```bash\n  [root@evobot ~]# cp source/go1.9.2.linux-amd64.tar.gz /tmp/test.tar.gz\n  [root@evobot ~]# ls /tmp/test.tar.gz \n  /tmp/test.tar.gz\n  ```\n\n- 如果要复制目录，则使用`cp -r`选项，并且最好在目录路径后添加`/`表示目录：\n\n  ```bash\n  [root@evobot ~]# ls source/\n  go1.9.2.linux-amd64.tar.gz  go1.9.2.linux-amd64.tar.gz.1\n  [root@evobot ~]# cp -r source/ /tmp/source2/\n  [root@evobot ~]# ls /tmp/source2/\n  go1.9.2.linux-amd64.tar.gz  go1.9.2.linux-amd64.tar.gz.1\n  ```\n\n- 当使用`cp -r`复制一个目录到目标，但目标目录已经存在的情况下，`cp -r`命令会将源目录放到目标目录下，当目标目录下同样存在与源目录同名的目录时，则会询问用户是否要覆盖目录：\n\n  ```bash\n  [root@evobot ~]# ls /tmp/source2/\n  go1.9.2.linux-amd64.tar.gz  go1.9.2.linux-amd64.tar.gz.1\n  [root@evobot ~]# cp -r source/ /tmp/source2/\n  [root@evobot ~]# tree /tmp/source2/\n  /tmp/source2/\n  |-- go1.9.2.linux-amd64.tar.gz\n  |-- go1.9.2.linux-amd64.tar.gz.1\n  `-- source\n      |-- go1.9.2.linux-amd64.tar.gz\n      `-- go1.9.2.linux-amd64.tar.gz.1\n\n  1 directory, 4 files\n  [root@evobot ~]# cp -r source/ /tmp/source2/\n  cp：是否覆盖\"/tmp/source2/source/go1.9.2.linux-amd64.tar.gz.1\"？ y\n  cp：是否覆盖\"/tmp/source2/source/go1.9.2.linux-amd64.tar.gz\"？ y\n  [root@evobot ~]# tree /tmp/source2/\n  /tmp/source2/\n  |-- go1.9.2.linux-amd64.tar.gz\n  |-- go1.9.2.linux-amd64.tar.gz.1\n  `-- source\n      |-- go1.9.2.linux-amd64.tar.gz\n      `-- go1.9.2.linux-amd64.tar.gz.1\n\n  1 directory, 4 files\n  ```\n\n# 移动命令mv\n\n- `mv`命令用来移动文件和目录，如果`mv`的源文件路径与目的路径相同，则是重命名的作用：\n\n  ```bash\n  [root@evobot source]# ls\n  go1.9.2.linux-amd64.tar.gz  go1.9.2.linux-amd64.tar.gz.1\n  [root@evobot source]# mv go1.9.2.linux-amd64.tar.gz go1.9.2.linux-amd64.zip\n  [root@evobot source]# ls\n  go1.9.2.linux-amd64.tar.gz.1  go1.9.2.linux-amd64.zip\n  [root@evobot source]# mv go1.9.2.linux-amd64.tar.gz.1 /tmp/\n  [root@evobot source]# ls\n  go1.9.2.linux-amd64.zip\n  [root@evobot source]# ls /tmp/\n  evobot1                       setRps.log\n  go1.9.2.linux-amd64.tar.gz.1\n  ```\n\n- `mv`命令也可以在移动文件的同时，将文件重命名:\n\n  ```bash\n  [root@evobot source]# mv test1.txt /tmp/test2.txt\n  [root@evobot source]# tree /tmp/\n  /tmp/\n  |-- net_affinity.log\n  |-- setRps.log\n  |-- systemd-private-e6b2bdd2f0d3443aa619bc608648720d-ntpd.service-F90V6C\n  |   `-- tmp\n  `-- test2.txt\n\n  2 directories, 3 files\n  ```\n\n- 同样的，当目的路径下存在同名文件时，`mv`命令会询问是否覆盖，也可以使用`mv -f`选项，强制覆盖。\n\n# 文档查看命令\n\n## cat及tac命令\n\n- `cat`命令用来查看文件内容，会将文件内容全部打印到屏幕上，使用`cat -a`选项则可以将所有字符打印出来，比如文件内容行尾结束符，而`cat -n`选项则可以打印行号；\n- 而`tac`命令则与`cat`命令相反，会将文件内容倒序打印出来。\n\n## more命令\n\n- `more`命令不会将文件内容一次性打印出来，而是会将文件内容显示一屏，按空格键则会显示下一屏内容，知道文件内容显示完则自动退出，而显示上一屏内容，按ctrl+b组合键。\n\n## less命令\n\n- `less`命令的操作与`more`类似，但是支持方向键上下滚动，同时`ctrl+f`也可以向后翻页，当翻页到文件末尾时，并不会同时退出显示，而是需要按`q`键退出；\n- 在`less`查看文件内容时，可以使用`/`后面跟需要查找的内容，来在文件内容中进行搜索，搜索出多个结果时，按`n`则向下查看下一个搜索结果，`N`向前查看搜索结果；\n- 使用`?`加搜索内容，则是从后向前搜索，同时`n`和`N`的功能与`/`搜索相反。\n- `less`命令还有一些快捷键，如`shift+g`跳转到末行，`g`跳转到首行。\n\n## head和tail命令\n\n- `head`命令默认查看文件内容前10行，而`tail`则是查看文件内容末尾10行；\n\n- `-n`选项则可以为`head`和`tail`指定显示的行数：\n\n  ```bash\n  [root@evobot source]# head -n 2 test.txt \n  root:x:0:0:root:/root:/bin/bash\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  [root@evobot source]# tail -n 3 test.txt \n  centos:x:1000:1000:Cloud User:/home/centos:/bin/bash\n  lux:x:1001:1001::/home/lux:/bin/bash\n  nginx:x:995:993:Nginx web server:/var/lib/nginx:/sbin/nologin\n  ```\n\n- `tail`的选项`-f`可以动态查看文件内容，当文件内容增加时，会打印到屏幕上。\n\n---","source":"_posts/Centos7系列-文件及目录管理相关命令-三.md","raw":"title: 'Centos7系列:文件及目录管理相关命令(三)'\nauthor: Evobot\nabbrlink: 8385c26e\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\ndate: 2018-03-27 22:29:06\nimage:\n---\n> 主要介绍Linux环境变量PATH，以及移动`mv`、复制`cp`命令的使用，另外则是查看文档操作相关的命令:`cat`、`more`、`less`和`head`。\n\n<!-- more -->\n\n# 环境变量PATH\n\n## 查看PATH\n\n- 使用`which`命令可以查看命令的别名，而`which`命令并不是在整个系统去查找命令，而是从环境变量PATH的目录中去查找，查看PATH包含的目录，使用`echo $PATH`：\n\n  ```bash\n  [root@evobot ~]# echo $PATH\n  /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin\n  ```\n\n- 实际上在LInux中执行一个命令，是需要使用绝对路径才可以执行，但是有了PATH，我们执行命令时，系统会自动到PATH包含的目录下去查找调用。\n\n- 如果将一个命令放到不包含在PATH变量中的目录下，那么只能使用绝对路径的方式去执行这个命令：\n\n  ```bash\n  [root@evobot ~]# which ls\n  alias ls='ls --color=auto'\n  \t/bin/ls\n  [root@evobot ~]# cp /bin/ls /tmp/ls2\n  [root@evobot ~]# ls2\n  -bash: ls2: 未找到命令\n  [root@evobot ~]# /tmp/ls2\n  source\n  ```\n\n## 增加PATH包含的目录\n\n- 如果想将一个目录包含到PATH中，执行如下命令:\n\n  ```bash\n  [root@evobot ~]# PATH=$PATH:/tmp/\n  [root@evobot ~]# echo $PATH\n  /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/tmp/\n  [root@evobot ~]# ls2\n  source\n  ```\n\n- 上面的方式只会在当前登录用户的环境中生效，而要让新的环境变量永久生效，则需要将`PATH=$PATH:/tmp/`写入到`/etc/profile`文件末尾。\n\n  ![增加PATH](http://p5qynomrl.bkt.clouddn.com/1522162144804yntgfqme.png?imageslim)\n\n# 复制命令 cp\n\n- `cp`命令是LInux中用来复制文件和目录的命令，拷贝文件直接使用`cp (/文件路径/文件名) /目的路径/复制文件名`命令即可：\n\n  ```bash\n  [root@evobot ~]# cp source/go1.9.2.linux-amd64.tar.gz /tmp/test.tar.gz\n  [root@evobot ~]# ls /tmp/test.tar.gz \n  /tmp/test.tar.gz\n  ```\n\n- 如果要复制目录，则使用`cp -r`选项，并且最好在目录路径后添加`/`表示目录：\n\n  ```bash\n  [root@evobot ~]# ls source/\n  go1.9.2.linux-amd64.tar.gz  go1.9.2.linux-amd64.tar.gz.1\n  [root@evobot ~]# cp -r source/ /tmp/source2/\n  [root@evobot ~]# ls /tmp/source2/\n  go1.9.2.linux-amd64.tar.gz  go1.9.2.linux-amd64.tar.gz.1\n  ```\n\n- 当使用`cp -r`复制一个目录到目标，但目标目录已经存在的情况下，`cp -r`命令会将源目录放到目标目录下，当目标目录下同样存在与源目录同名的目录时，则会询问用户是否要覆盖目录：\n\n  ```bash\n  [root@evobot ~]# ls /tmp/source2/\n  go1.9.2.linux-amd64.tar.gz  go1.9.2.linux-amd64.tar.gz.1\n  [root@evobot ~]# cp -r source/ /tmp/source2/\n  [root@evobot ~]# tree /tmp/source2/\n  /tmp/source2/\n  |-- go1.9.2.linux-amd64.tar.gz\n  |-- go1.9.2.linux-amd64.tar.gz.1\n  `-- source\n      |-- go1.9.2.linux-amd64.tar.gz\n      `-- go1.9.2.linux-amd64.tar.gz.1\n\n  1 directory, 4 files\n  [root@evobot ~]# cp -r source/ /tmp/source2/\n  cp：是否覆盖\"/tmp/source2/source/go1.9.2.linux-amd64.tar.gz.1\"？ y\n  cp：是否覆盖\"/tmp/source2/source/go1.9.2.linux-amd64.tar.gz\"？ y\n  [root@evobot ~]# tree /tmp/source2/\n  /tmp/source2/\n  |-- go1.9.2.linux-amd64.tar.gz\n  |-- go1.9.2.linux-amd64.tar.gz.1\n  `-- source\n      |-- go1.9.2.linux-amd64.tar.gz\n      `-- go1.9.2.linux-amd64.tar.gz.1\n\n  1 directory, 4 files\n  ```\n\n# 移动命令mv\n\n- `mv`命令用来移动文件和目录，如果`mv`的源文件路径与目的路径相同，则是重命名的作用：\n\n  ```bash\n  [root@evobot source]# ls\n  go1.9.2.linux-amd64.tar.gz  go1.9.2.linux-amd64.tar.gz.1\n  [root@evobot source]# mv go1.9.2.linux-amd64.tar.gz go1.9.2.linux-amd64.zip\n  [root@evobot source]# ls\n  go1.9.2.linux-amd64.tar.gz.1  go1.9.2.linux-amd64.zip\n  [root@evobot source]# mv go1.9.2.linux-amd64.tar.gz.1 /tmp/\n  [root@evobot source]# ls\n  go1.9.2.linux-amd64.zip\n  [root@evobot source]# ls /tmp/\n  evobot1                       setRps.log\n  go1.9.2.linux-amd64.tar.gz.1\n  ```\n\n- `mv`命令也可以在移动文件的同时，将文件重命名:\n\n  ```bash\n  [root@evobot source]# mv test1.txt /tmp/test2.txt\n  [root@evobot source]# tree /tmp/\n  /tmp/\n  |-- net_affinity.log\n  |-- setRps.log\n  |-- systemd-private-e6b2bdd2f0d3443aa619bc608648720d-ntpd.service-F90V6C\n  |   `-- tmp\n  `-- test2.txt\n\n  2 directories, 3 files\n  ```\n\n- 同样的，当目的路径下存在同名文件时，`mv`命令会询问是否覆盖，也可以使用`mv -f`选项，强制覆盖。\n\n# 文档查看命令\n\n## cat及tac命令\n\n- `cat`命令用来查看文件内容，会将文件内容全部打印到屏幕上，使用`cat -a`选项则可以将所有字符打印出来，比如文件内容行尾结束符，而`cat -n`选项则可以打印行号；\n- 而`tac`命令则与`cat`命令相反，会将文件内容倒序打印出来。\n\n## more命令\n\n- `more`命令不会将文件内容一次性打印出来，而是会将文件内容显示一屏，按空格键则会显示下一屏内容，知道文件内容显示完则自动退出，而显示上一屏内容，按ctrl+b组合键。\n\n## less命令\n\n- `less`命令的操作与`more`类似，但是支持方向键上下滚动，同时`ctrl+f`也可以向后翻页，当翻页到文件末尾时，并不会同时退出显示，而是需要按`q`键退出；\n- 在`less`查看文件内容时，可以使用`/`后面跟需要查找的内容，来在文件内容中进行搜索，搜索出多个结果时，按`n`则向下查看下一个搜索结果，`N`向前查看搜索结果；\n- 使用`?`加搜索内容，则是从后向前搜索，同时`n`和`N`的功能与`/`搜索相反。\n- `less`命令还有一些快捷键，如`shift+g`跳转到末行，`g`跳转到首行。\n\n## head和tail命令\n\n- `head`命令默认查看文件内容前10行，而`tail`则是查看文件内容末尾10行；\n\n- `-n`选项则可以为`head`和`tail`指定显示的行数：\n\n  ```bash\n  [root@evobot source]# head -n 2 test.txt \n  root:x:0:0:root:/root:/bin/bash\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  [root@evobot source]# tail -n 3 test.txt \n  centos:x:1000:1000:Cloud User:/home/centos:/bin/bash\n  lux:x:1001:1001::/home/lux:/bin/bash\n  nginx:x:995:993:Nginx web server:/var/lib/nginx:/sbin/nologin\n  ```\n\n- `tail`的选项`-f`可以动态查看文件内容，当文件内容增加时，会打印到屏幕上。\n\n---","slug":"Centos7系列-文件及目录管理相关命令-三","published":1,"updated":"2018-06-02T13:01:29.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gaz87000ru1jxh5kkp6y2","content":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><blockquote><p>主要介绍Linux环境变量PATH，以及移动<code>mv</code>、复制<code>cp</code>命令的使用，另外则是查看文档操作相关的命令:<code>cat</code>、<code>more</code>、<code>less</code>和<code>head</code>。</p></blockquote><a id=\"more\"></a><h1 id=\"环境变量PATH\"><a href=\"#环境变量PATH\" class=\"headerlink\" title=\"环境变量PATH\"></a>环境变量PATH</h1><h2 id=\"查看PATH\"><a href=\"#查看PATH\" class=\"headerlink\" title=\"查看PATH\"></a>查看PATH</h2><ul><li><p>使用<code>which</code>命令可以查看命令的别名，而<code>which</code>命令并不是在整个系统去查找命令，而是从环境变量PATH的目录中去查找，查看PATH包含的目录，使用<code>echo $PATH</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo $PATH</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/sbin:/usr/<span class=\"built_in\">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure></li><li><p>实际上在LInux中执行一个命令，是需要使用绝对路径才可以执行，但是有了PATH，我们执行命令时，系统会自动到PATH包含的目录下去查找调用。</p></li><li><p>如果将一个命令放到不包含在PATH变量中的目录下，那么只能使用绝对路径的方式去执行这个命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># which ls</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> ls=<span class=\"string\">'ls --color=auto'</span></span><br><span class=\"line\">\t/bin/ls</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cp /bin/ls /tmp/ls2</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls2</span></span><br><span class=\"line\">-bash: ls2: 未找到命令</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># /tmp/ls2</span></span><br><span class=\"line\"><span class=\"built_in\">source</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"增加PATH包含的目录\"><a href=\"#增加PATH包含的目录\" class=\"headerlink\" title=\"增加PATH包含的目录\"></a>增加PATH包含的目录</h2><ul><li><p>如果想将一个目录包含到PATH中，执行如下命令:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># PATH=$PATH:/tmp/</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo $PATH</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/sbin:/usr/<span class=\"built_in\">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/tmp/</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls2</span></span><br><span class=\"line\"><span class=\"built_in\">source</span></span><br></pre></td></tr></table></figure></li><li><p>上面的方式只会在当前登录用户的环境中生效，而要让新的环境变量永久生效，则需要将<code>PATH=$PATH:/tmp/</code>写入到<code>/etc/profile</code>文件末尾。</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1522162144804yntgfqme.png?imageslim\" alt=\"增加PATH\"></p></li></ul><h1 id=\"复制命令-cp\"><a href=\"#复制命令-cp\" class=\"headerlink\" title=\"复制命令 cp\"></a>复制命令 cp</h1><ul><li><p><code>cp</code>命令是LInux中用来复制文件和目录的命令，拷贝文件直接使用<code>cp (/文件路径/文件名) /目的路径/复制文件名</code>命令即可：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cp source/go1.9.2.linux-amd64.tar.gz /tmp/test.tar.gz</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls /tmp/test.tar.gz </span></span><br><span class=\"line\">/tmp/test.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>如果要复制目录，则使用<code>cp -r</code>选项，并且最好在目录路径后添加<code>/</code>表示目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls source/</span></span><br><span class=\"line\">go1.9.2.linux-amd64.tar.gz  go1.9.2.linux-amd64.tar.gz.1</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cp -r source/ /tmp/source2/</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls /tmp/source2/</span></span><br><span class=\"line\">go1.9.2.linux-amd64.tar.gz  go1.9.2.linux-amd64.tar.gz.1</span><br></pre></td></tr></table></figure></li><li><p>当使用<code>cp -r</code>复制一个目录到目标，但目标目录已经存在的情况下，<code>cp -r</code>命令会将源目录放到目标目录下，当目标目录下同样存在与源目录同名的目录时，则会询问用户是否要覆盖目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls /tmp/source2/</span></span><br><span class=\"line\">go1.9.2.linux-amd64.tar.gz  go1.9.2.linux-amd64.tar.gz.1</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cp -r source/ /tmp/source2/</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tree /tmp/source2/</span></span><br><span class=\"line\">/tmp/source2/</span><br><span class=\"line\">|-- go1.9.2.linux-amd64.tar.gz</span><br><span class=\"line\">|-- go1.9.2.linux-amd64.tar.gz.1</span><br><span class=\"line\">`-- <span class=\"built_in\">source</span></span><br><span class=\"line\">    |-- go1.9.2.linux-amd64.tar.gz</span><br><span class=\"line\">    `-- go1.9.2.linux-amd64.tar.gz.1</span><br><span class=\"line\"></span><br><span class=\"line\">1 directory, 4 files</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cp -r source/ /tmp/source2/</span></span><br><span class=\"line\">cp：是否覆盖<span class=\"string\">\"/tmp/source2/source/go1.9.2.linux-amd64.tar.gz.1\"</span>？ y</span><br><span class=\"line\">cp：是否覆盖<span class=\"string\">\"/tmp/source2/source/go1.9.2.linux-amd64.tar.gz\"</span>？ y</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tree /tmp/source2/</span></span><br><span class=\"line\">/tmp/source2/</span><br><span class=\"line\">|-- go1.9.2.linux-amd64.tar.gz</span><br><span class=\"line\">|-- go1.9.2.linux-amd64.tar.gz.1</span><br><span class=\"line\">`-- <span class=\"built_in\">source</span></span><br><span class=\"line\">    |-- go1.9.2.linux-amd64.tar.gz</span><br><span class=\"line\">    `-- go1.9.2.linux-amd64.tar.gz.1</span><br><span class=\"line\"></span><br><span class=\"line\">1 directory, 4 files</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"移动命令mv\"><a href=\"#移动命令mv\" class=\"headerlink\" title=\"移动命令mv\"></a>移动命令mv</h1><ul><li><p><code>mv</code>命令用来移动文件和目录，如果<code>mv</code>的源文件路径与目的路径相同，则是重命名的作用：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls</span></span><br><span class=\"line\">go1.9.2.linux-amd64.tar.gz  go1.9.2.linux-amd64.tar.gz.1</span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># mv go1.9.2.linux-amd64.tar.gz go1.9.2.linux-amd64.zip</span></span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls</span></span><br><span class=\"line\">go1.9.2.linux-amd64.tar.gz.1  go1.9.2.linux-amd64.zip</span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># mv go1.9.2.linux-amd64.tar.gz.1 /tmp/</span></span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls</span></span><br><span class=\"line\">go1.9.2.linux-amd64.zip</span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls /tmp/</span></span><br><span class=\"line\">evobot1                       setRps.log</span><br><span class=\"line\">go1.9.2.linux-amd64.tar.gz.1</span><br></pre></td></tr></table></figure></li><li><p><code>mv</code>命令也可以在移动文件的同时，将文件重命名:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># mv test1.txt /tmp/test2.txt</span></span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># tree /tmp/</span></span><br><span class=\"line\">/tmp/</span><br><span class=\"line\">|-- net_affinity.log</span><br><span class=\"line\">|-- setRps.log</span><br><span class=\"line\">|-- systemd-private-e6b2bdd2f0d3443aa619bc608648720d-ntpd.service-F90V6C</span><br><span class=\"line\">|   `-- tmp</span><br><span class=\"line\">`-- test2.txt</span><br><span class=\"line\"></span><br><span class=\"line\">2 directories, 3 files</span><br></pre></td></tr></table></figure></li><li><p>同样的，当目的路径下存在同名文件时，<code>mv</code>命令会询问是否覆盖，也可以使用<code>mv -f</code>选项，强制覆盖。</p></li></ul><h1 id=\"文档查看命令\"><a href=\"#文档查看命令\" class=\"headerlink\" title=\"文档查看命令\"></a>文档查看命令</h1><h2 id=\"cat及tac命令\"><a href=\"#cat及tac命令\" class=\"headerlink\" title=\"cat及tac命令\"></a>cat及tac命令</h2><ul><li><code>cat</code>命令用来查看文件内容，会将文件内容全部打印到屏幕上，使用<code>cat -a</code>选项则可以将所有字符打印出来，比如文件内容行尾结束符，而<code>cat -n</code>选项则可以打印行号；</li><li>而<code>tac</code>命令则与<code>cat</code>命令相反，会将文件内容倒序打印出来。</li></ul><h2 id=\"more命令\"><a href=\"#more命令\" class=\"headerlink\" title=\"more命令\"></a>more命令</h2><ul><li><code>more</code>命令不会将文件内容一次性打印出来，而是会将文件内容显示一屏，按空格键则会显示下一屏内容，知道文件内容显示完则自动退出，而显示上一屏内容，按ctrl+b组合键。</li></ul><h2 id=\"less命令\"><a href=\"#less命令\" class=\"headerlink\" title=\"less命令\"></a>less命令</h2><ul><li><code>less</code>命令的操作与<code>more</code>类似，但是支持方向键上下滚动，同时<code>ctrl+f</code>也可以向后翻页，当翻页到文件末尾时，并不会同时退出显示，而是需要按<code>q</code>键退出；</li><li>在<code>less</code>查看文件内容时，可以使用<code>/</code>后面跟需要查找的内容，来在文件内容中进行搜索，搜索出多个结果时，按<code>n</code>则向下查看下一个搜索结果，<code>N</code>向前查看搜索结果；</li><li>使用<code>?</code>加搜索内容，则是从后向前搜索，同时<code>n</code>和<code>N</code>的功能与<code>/</code>搜索相反。</li><li><code>less</code>命令还有一些快捷键，如<code>shift+g</code>跳转到末行，<code>g</code>跳转到首行。</li></ul><h2 id=\"head和tail命令\"><a href=\"#head和tail命令\" class=\"headerlink\" title=\"head和tail命令\"></a>head和tail命令</h2><ul><li><p><code>head</code>命令默认查看文件内容前10行，而<code>tail</code>则是查看文件内容末尾10行；</p></li><li><p><code>-n</code>选项则可以为<code>head</code>和<code>tail</code>指定显示的行数：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># head -n 2 test.txt </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># tail -n 3 test.txt </span></span><br><span class=\"line\">centos:x:1000:1000:Cloud User:/home/centos:/bin/bash</span><br><span class=\"line\">lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">nginx:x:995:993:Nginx web server:/var/lib/nginx:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p><code>tail</code>的选项<code>-f</code>可以动态查看文件内容，当文件内容增加时，会打印到屏幕上。</p></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><blockquote><p>主要介绍Linux环境变量PATH，以及移动<code>mv</code>、复制<code>cp</code>命令的使用，另外则是查看文档操作相关的命令:<code>cat</code>、<code>more</code>、<code>less</code>和<code>head</code>。</p></blockquote>","more":"<h1 id=\"环境变量PATH\"><a href=\"#环境变量PATH\" class=\"headerlink\" title=\"环境变量PATH\"></a>环境变量PATH</h1><h2 id=\"查看PATH\"><a href=\"#查看PATH\" class=\"headerlink\" title=\"查看PATH\"></a>查看PATH</h2><ul><li><p>使用<code>which</code>命令可以查看命令的别名，而<code>which</code>命令并不是在整个系统去查找命令，而是从环境变量PATH的目录中去查找，查看PATH包含的目录，使用<code>echo $PATH</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo $PATH</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/sbin:/usr/<span class=\"built_in\">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure></li><li><p>实际上在LInux中执行一个命令，是需要使用绝对路径才可以执行，但是有了PATH，我们执行命令时，系统会自动到PATH包含的目录下去查找调用。</p></li><li><p>如果将一个命令放到不包含在PATH变量中的目录下，那么只能使用绝对路径的方式去执行这个命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># which ls</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> ls=<span class=\"string\">'ls --color=auto'</span></span><br><span class=\"line\">\t/bin/ls</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cp /bin/ls /tmp/ls2</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls2</span></span><br><span class=\"line\">-bash: ls2: 未找到命令</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># /tmp/ls2</span></span><br><span class=\"line\"><span class=\"built_in\">source</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"增加PATH包含的目录\"><a href=\"#增加PATH包含的目录\" class=\"headerlink\" title=\"增加PATH包含的目录\"></a>增加PATH包含的目录</h2><ul><li><p>如果想将一个目录包含到PATH中，执行如下命令:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># PATH=$PATH:/tmp/</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo $PATH</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/sbin:/usr/<span class=\"built_in\">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/tmp/</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls2</span></span><br><span class=\"line\"><span class=\"built_in\">source</span></span><br></pre></td></tr></table></figure></li><li><p>上面的方式只会在当前登录用户的环境中生效，而要让新的环境变量永久生效，则需要将<code>PATH=$PATH:/tmp/</code>写入到<code>/etc/profile</code>文件末尾。</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1522162144804yntgfqme.png?imageslim\" alt=\"增加PATH\"></p></li></ul><h1 id=\"复制命令-cp\"><a href=\"#复制命令-cp\" class=\"headerlink\" title=\"复制命令 cp\"></a>复制命令 cp</h1><ul><li><p><code>cp</code>命令是LInux中用来复制文件和目录的命令，拷贝文件直接使用<code>cp (/文件路径/文件名) /目的路径/复制文件名</code>命令即可：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cp source/go1.9.2.linux-amd64.tar.gz /tmp/test.tar.gz</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls /tmp/test.tar.gz </span></span><br><span class=\"line\">/tmp/test.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>如果要复制目录，则使用<code>cp -r</code>选项，并且最好在目录路径后添加<code>/</code>表示目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls source/</span></span><br><span class=\"line\">go1.9.2.linux-amd64.tar.gz  go1.9.2.linux-amd64.tar.gz.1</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cp -r source/ /tmp/source2/</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls /tmp/source2/</span></span><br><span class=\"line\">go1.9.2.linux-amd64.tar.gz  go1.9.2.linux-amd64.tar.gz.1</span><br></pre></td></tr></table></figure></li><li><p>当使用<code>cp -r</code>复制一个目录到目标，但目标目录已经存在的情况下，<code>cp -r</code>命令会将源目录放到目标目录下，当目标目录下同样存在与源目录同名的目录时，则会询问用户是否要覆盖目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls /tmp/source2/</span></span><br><span class=\"line\">go1.9.2.linux-amd64.tar.gz  go1.9.2.linux-amd64.tar.gz.1</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cp -r source/ /tmp/source2/</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tree /tmp/source2/</span></span><br><span class=\"line\">/tmp/source2/</span><br><span class=\"line\">|-- go1.9.2.linux-amd64.tar.gz</span><br><span class=\"line\">|-- go1.9.2.linux-amd64.tar.gz.1</span><br><span class=\"line\">`-- <span class=\"built_in\">source</span></span><br><span class=\"line\">    |-- go1.9.2.linux-amd64.tar.gz</span><br><span class=\"line\">    `-- go1.9.2.linux-amd64.tar.gz.1</span><br><span class=\"line\"></span><br><span class=\"line\">1 directory, 4 files</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cp -r source/ /tmp/source2/</span></span><br><span class=\"line\">cp：是否覆盖<span class=\"string\">\"/tmp/source2/source/go1.9.2.linux-amd64.tar.gz.1\"</span>？ y</span><br><span class=\"line\">cp：是否覆盖<span class=\"string\">\"/tmp/source2/source/go1.9.2.linux-amd64.tar.gz\"</span>？ y</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tree /tmp/source2/</span></span><br><span class=\"line\">/tmp/source2/</span><br><span class=\"line\">|-- go1.9.2.linux-amd64.tar.gz</span><br><span class=\"line\">|-- go1.9.2.linux-amd64.tar.gz.1</span><br><span class=\"line\">`-- <span class=\"built_in\">source</span></span><br><span class=\"line\">    |-- go1.9.2.linux-amd64.tar.gz</span><br><span class=\"line\">    `-- go1.9.2.linux-amd64.tar.gz.1</span><br><span class=\"line\"></span><br><span class=\"line\">1 directory, 4 files</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"移动命令mv\"><a href=\"#移动命令mv\" class=\"headerlink\" title=\"移动命令mv\"></a>移动命令mv</h1><ul><li><p><code>mv</code>命令用来移动文件和目录，如果<code>mv</code>的源文件路径与目的路径相同，则是重命名的作用：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls</span></span><br><span class=\"line\">go1.9.2.linux-amd64.tar.gz  go1.9.2.linux-amd64.tar.gz.1</span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># mv go1.9.2.linux-amd64.tar.gz go1.9.2.linux-amd64.zip</span></span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls</span></span><br><span class=\"line\">go1.9.2.linux-amd64.tar.gz.1  go1.9.2.linux-amd64.zip</span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># mv go1.9.2.linux-amd64.tar.gz.1 /tmp/</span></span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls</span></span><br><span class=\"line\">go1.9.2.linux-amd64.zip</span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls /tmp/</span></span><br><span class=\"line\">evobot1                       setRps.log</span><br><span class=\"line\">go1.9.2.linux-amd64.tar.gz.1</span><br></pre></td></tr></table></figure></li><li><p><code>mv</code>命令也可以在移动文件的同时，将文件重命名:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># mv test1.txt /tmp/test2.txt</span></span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># tree /tmp/</span></span><br><span class=\"line\">/tmp/</span><br><span class=\"line\">|-- net_affinity.log</span><br><span class=\"line\">|-- setRps.log</span><br><span class=\"line\">|-- systemd-private-e6b2bdd2f0d3443aa619bc608648720d-ntpd.service-F90V6C</span><br><span class=\"line\">|   `-- tmp</span><br><span class=\"line\">`-- test2.txt</span><br><span class=\"line\"></span><br><span class=\"line\">2 directories, 3 files</span><br></pre></td></tr></table></figure></li><li><p>同样的，当目的路径下存在同名文件时，<code>mv</code>命令会询问是否覆盖，也可以使用<code>mv -f</code>选项，强制覆盖。</p></li></ul><h1 id=\"文档查看命令\"><a href=\"#文档查看命令\" class=\"headerlink\" title=\"文档查看命令\"></a>文档查看命令</h1><h2 id=\"cat及tac命令\"><a href=\"#cat及tac命令\" class=\"headerlink\" title=\"cat及tac命令\"></a>cat及tac命令</h2><ul><li><code>cat</code>命令用来查看文件内容，会将文件内容全部打印到屏幕上，使用<code>cat -a</code>选项则可以将所有字符打印出来，比如文件内容行尾结束符，而<code>cat -n</code>选项则可以打印行号；</li><li>而<code>tac</code>命令则与<code>cat</code>命令相反，会将文件内容倒序打印出来。</li></ul><h2 id=\"more命令\"><a href=\"#more命令\" class=\"headerlink\" title=\"more命令\"></a>more命令</h2><ul><li><code>more</code>命令不会将文件内容一次性打印出来，而是会将文件内容显示一屏，按空格键则会显示下一屏内容，知道文件内容显示完则自动退出，而显示上一屏内容，按ctrl+b组合键。</li></ul><h2 id=\"less命令\"><a href=\"#less命令\" class=\"headerlink\" title=\"less命令\"></a>less命令</h2><ul><li><code>less</code>命令的操作与<code>more</code>类似，但是支持方向键上下滚动，同时<code>ctrl+f</code>也可以向后翻页，当翻页到文件末尾时，并不会同时退出显示，而是需要按<code>q</code>键退出；</li><li>在<code>less</code>查看文件内容时，可以使用<code>/</code>后面跟需要查找的内容，来在文件内容中进行搜索，搜索出多个结果时，按<code>n</code>则向下查看下一个搜索结果，<code>N</code>向前查看搜索结果；</li><li>使用<code>?</code>加搜索内容，则是从后向前搜索，同时<code>n</code>和<code>N</code>的功能与<code>/</code>搜索相反。</li><li><code>less</code>命令还有一些快捷键，如<code>shift+g</code>跳转到末行，<code>g</code>跳转到首行。</li></ul><h2 id=\"head和tail命令\"><a href=\"#head和tail命令\" class=\"headerlink\" title=\"head和tail命令\"></a>head和tail命令</h2><ul><li><p><code>head</code>命令默认查看文件内容前10行，而<code>tail</code>则是查看文件内容末尾10行；</p></li><li><p><code>-n</code>选项则可以为<code>head</code>和<code>tail</code>指定显示的行数：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># head -n 2 test.txt </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># tail -n 3 test.txt </span></span><br><span class=\"line\">centos:x:1000:1000:Cloud User:/home/centos:/bin/bash</span><br><span class=\"line\">lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">nginx:x:995:993:Nginx web server:/var/lib/nginx:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p><code>tail</code>的选项<code>-f</code>可以动态查看文件内容，当文件内容增加时，会打印到屏幕上。</p></li></ul><hr><!-- rebuild by neat -->"},{"title":"Centos7系列:文件和目录权限(一)","author":"Evobot","abbrlink":"7af3ca57","date":"2018-03-28T13:00:04.000Z","image":null,"_content":"\n\n\n介绍文件和目录权限的概念，如何更改文件及目录的所有者和所属组的命令**chown**、介绍权限掩码**umask**，以及隐藏权限操作命令**lsattr**和**chattr**命令。\n\n<!-- more -->\n\n---\n\n# 文件和目录权限\n\n## 文件权限概念\n\n- 使用`ls -l`命令时，可以看到文件和目录的权限，权限一共有9位，分成3段，例如`rw-r--r--`，其中每一段的3位权限位分别表示**可读**、**可写**、**可执行**，使用`rwx`代表三种权限：\n\n  ```bash\n  [root@evobot source]# ls -l\n  总用量 256\n  -rw-r--r-- 1 root root 245760 3月  12 17:41 go1.9.2.linux-amd64.zip\n  -rw-r--r-- 1 root root   9051 3月  27 23:40 test.txt\n  ```\n\n- 第一段权限位表示文件所有者的权限，第二段代表文件所属组的权限，第三段表示除了所有者和所属组用户之外的其他用户权限，而文件的所有者和所属组则都是root：\n\n  ![文件权限](http://p5qynomrl.bkt.clouddn.com/15222440423936fdqcu2t.png?imageslim)\n\n- 文件的权限`rwx`也可以使用数字表示，其中`r=4`，`w=2`，`x=1`，所以`rwx`整段权限为7，例如`rw-r--r--`权限，`rw-`是**6**，`r--`是**4**，所以整个权限等于**644**。\n\n## 更改权限命令chmod\n\n- `chmod 755 /root/.ssh`，使用`chmod`加数字权限的方式来更改文件权限，或者`chmod +[rwx]`来单独增加权限，`chmod -[rwx]`来单独减少权限；\n\n- `chmod -R`，可以递归更改目录权限，使目录内的文件权限与目录相同；\n- chmod更改权限还可以写为`chmod u=rwx,g=r,o=r test.txt`的形式；\n- `chmod [ugoa][+-][rwx] test.txt`,其中\"u\",\"g\",\"o\"分别表示所有者，所属组，其他人，\"a\"表示所有，即[ugo]的权限均增加或减少。例如`chmod a+x test.txt`给所有者、所属组、其他人增加\"x\"权限,`chmod u+w test.txt`给所有者增加\"w\"权限。\n\n```bash\n[root@localhost ~]# chmod a+x test.txt \n[root@localhost ~]# ll\n总用量 4\ndrwxr-xr-x. 3 root root   15 10月 20 22:55 1\n-rw-------. 1 root root 1422 8月  19 07:25 anaconda-ks.cfg\n-rwxr-xr-x. 1 root root    0 10月 23 22:04 test.txt\n```\n\n```bash\n[root@localhost ~]# chmod g+w test.txt \n[root@localhost ~]# ll\n总用量 4\ndrwxr-xr-x. 3 root root   15 10月 20 22:55 1\n-rw-------. 1 root root 1422 8月  19 07:25 anaconda-ks.cfg\n-rwxrwxr-x. 1 root root    0 10月 23 22:04 test.txt\n```\n##  更改所有者、所属组\n\n### 更改所有者\n\n- `chown`命令可以更改文件或目录的所有者，命令格式为`chown (username) (filename)`：\n\n```bash\n[root@evobot source]# ls -l\n总用量 256\n-rw-r--r-- 1 root root 245760 3月  12 17:41 go1.9.2.linux-amd64.zip\n-rw-r--r-- 1 root root   9051 3月  27 23:40 test.txt\n[root@evobot source]# chown lux test.txt \n[root@evobot source]# ls -l test.txt \n-rw-r--r-- 1 lux root 9051 3月  27 23:40 test.txt\n```\n\n###  更改所属组\n\n- `chgrp`命令用来更改文件或目录的所属组：\n\n```bash\n[root@evobot source]# ls -l test.txt \n-rw-r--r-- 1 lux root 9051 3月  27 23:40 test.txt\n[root@evobot source]# chgrp lux test.txt \n[root@evobot source]# ls -l test.txt \n-rw-r--r-- 1 lux lux 9051 3月  27 23:40 test.txt\n```\n\n- 更改文件或目录也可以使用`chown`命令，只需要使用`:`分隔所有者和所属组，即可对文件更改所有者和所属组，如果只想更改所属组，在`:`前面的所有者留空即可：\n\n```bash\n[root@evobot source]# ls -l test.txt \n-rw-r--r-- 1 lux lux 9051 3月  27 23:40 test.txt\n[root@evobot source]# chown root:root test.txt \n[root@evobot source]# ls -l test.txt \n-rw-r--r-- 1 root root 9051 3月  27 23:40 test.txt\n[root@evobot source]# chown :lux test.txt \n[root@evobot source]# ls -l test.txt \n-rw-r--r-- 1 root lux 9051 3月  27 23:40 test.txt\n```\n\n- 使用`.`分隔所有者和所属组同样也可以对文件的所有者和所属组进行更改，如`chown .evobot secure.log`：\n\n```bash\n[root@evobot ~]# ll\n总用量 19148\n-rw------- 1 root root     1179 4月  27 00:02 secure.log\n\n[root@evobot ~]# chown .evobot secure.log\n\n[root@evobot ~]# ll\n总用量 19148\n-rw------- 1 root evobot     1179 4月  27 00:02 secure.log\n```\n\n- `chown`同样具有`-R`选项，可以在更改目录的所有者或所属组时，同时更改目录下的文件的所有者和所属组：\n\n```bash\n[root@evobot ~]# ls -l source/\n总用量 256\n-rw-r--r-- 1 root root 245760 3月  12 17:41 go1.9.2.linux-amd64.zip\n-rw-r--r-- 1 root lux    9051 3月  27 23:40 test.txt\n[root@evobot ~]# chown -R lux source/\n[root@evobot ~]# ls -l source/\n总用量 256\n-rw-r--r-- 1 lux root 245760 3月  12 17:41 go1.9.2.linux-amd64.zip\n-rw-r--r-- 1 lux lux    9051 3月  27 23:40 test.txt\n```\n\n# 权限掩码umask\n\n## umask概念\n\n- 在新建一个文件时，默认会给文件分配一个权限，这个权限其实就是由`umask`控制的：\n\n```bash\n[root@evobot ~]# mkdir evobot\n[root@evobot ~]# ls -ld evobot/\ndrwxr-xr-x 2 root root 4096 3月  28 22:04 evobot/\n[root@evobot ~]# umask\n0022\n```\n\n- 可以看到`umask`的值时`0022`，需要更改`umask`的值，直接使用`umask`加上要指定的权限掩码即可：\n\n```bash\n[root@evobot ~]# umask 0002\n[root@evobot ~]# umask\n0002\n[root@evobot ~]# mkdir evobot2\n[root@evobot ~]# touch file.txt\n[root@evobot ~]# ls -l\n总用量 12\ndrwxr-xr-x 2 root root 4096 3月  28 22:04 evobot\ndrwxrwxr-x 2 root root 4096 3月  28 22:08 evobot2\n-rw-rw-r-- 1 root root    0 3月  28 22:08 file.txt\n```\n\n- 从上面的示例中可以看到，目录的权限变成了775，文件的权限变成了664，这是因为Linux中目录必须有`x`权限，否则无法浏览目录；\n\n## 计算umask\n\n- 计算umask掩码所定义的文件和目录权限，是使用文件666，目录777权限去减去umask的权限，**注意并不是用数字权限减去umask，而是使用rwx形式相减！**\n\n  1. 例如umask更改为002，则目录权限为`rwxrwxrwx - -------w- = rwxrwxr-x`:\n\n  ```bash\n  [root@localhost ~]# mkdir mark\n  [root@localhost ~]# ll\n  总用量 4\n  -rw-------. 1 root root   1422 8月  19 07:25 anaconda-ks.cfg\n  drwxr-xr-x. 2 lux  root     18 10月 23 23:28 lux\n  drwxrwxr-x. 2 root root      6 10月 24 23:25 mark\n  -rwxrwxr-x. 1 lux  clikks    0 10月 23 22:04 test.txt\n  ```\n  2. 文件的权限则为`rw-rw-rw- - -------w- = rw-rw-r--`:\n\n  ```bash\n  [root@localhost ~]# touch umask_file.txt\n  [root@localhost ~]# ll umask_file.txt \n  -rw-rw-r--. 1 root root 0 10月 24 23:28 umask_file.txt\n  ```\n  3. 当用权限位减去umask时，若权限位为“-”，umask为\"r\"或\"w\"或\"x\"，则相减后依旧为\"-\"，例如当umask为003时，文件的权限为`rw-rw-rw- - -------wx = rw-rw-r--`,\"-\"减去\"x\"依旧为\"-\",目录权限为`rwxrwxrwx - -------wx = rwxrwxr--`:\n\n  ```bash\n  [root@localhost ~]# umask 003\n  [root@localhost ~]# touch maskfile.txt\n  [root@localhost ~]# mkdir mark2\n  [root@localhost ~]# ll maskfile.txt \n  -rw-rw-r--. 1 root root 0 10月 24 23:32 maskfile.txt\n  [root@localhost ~]# ls -ld mark2\n  drwxrwxr--. 2 root root 6 10月 24 23:33 mark2\n  ```\n\n\n# 隐藏权限\n\n## **chattr**增加隐藏权限\n\n- `chattr`有两个常用选项，`a`和`i`，使用`+-`来给文件或者目录增减权限。\n\n### 对文件附加权限\n\n1.  `chattr +a filename`给文件增加`a`权限，则文件可读可追加内容，不可删除，不可移动、改名。\n```bash\n[root@localhost ~]# chattr +a files.ini \n[root@localhost ~]# lsattr files.ini \n-----a---------- files.ini\n[root@localhost ~]# head -n2 /etc/passwd > files.ini \n-bash: files.ini: 不允许的操作\n[root@localhost ~]# head -n2 /etc/passwd >> files.ini \n[root@localhost ~]# rm files.ini \nrm：是否删除普通文件 \"files.ini\"？y\nrm: 无法删除\"files.ini\": 不允许的操作\n[root@localhost ~]# mv files.ini xxx.ini\nmv: 无法将\"files.ini\" 移动至\"xxx.ini\": 不允许的操作\n[root@localhost ~]# cp files.ini xxx.ini\n[root@localhost ~]# ls\nanaconda-ks.cfg  files.ini  xxx.ini\n```\n2. `chattr +i filename`命令给文件增加`i`权限，则文件可读不可写，不可追加内容，不可删除，不可移动，也不能`touch`更改文件时间。\n```bash\n[root@localhost ~]# chattr +i files.ini \n[root@localhost ~]# lsattr files.ini \n----ia---------- files.ini\n[root@localhost ~]# chattr -a files.ini \n[root@localhost ~]# lsattr files.ini \n----i----------- files.ini\n[root@localhost ~]# !head\nhead -n2 /etc/passwd >> files.ini \n-bash: files.ini: 权限不够\n[root@localhost ~]# head -n2 /etc/passwd > files.ini \n-bash: files.ini: 权限不够\n[root@localhost ~]# rm files.ini \nrm：是否删除普通文件 \"files.ini\"？y\nrm: 无法删除\"files.ini\": 不允许的操作\n[root@localhost ~]# mv files.ini xxx.ini\nmv：是否覆盖\"xxx.ini\"？ y\nmv: 无法将\"files.ini\" 移动至\"xxx.ini\": 不允许的操作\n[root@localhost ~]# lsattr \n---------------- ./anaconda-ks.cfg\n----i----------- ./files.ini\n---------------- ./xxx.ini\n```\n### 对目录附加权限\n\n1. `chattr +a dirname`给目录增加`a`权限，则目录不可改名，不可删除，目录下可以增加文件和目录，并对文件内容进行增加删除，但是不能对目录下的文件删除和更名。同样的也不能对目录下的子目录删除，更名、移动。\n```bash\n[root@localhost ~]# tree dirname/\ndirname/\n├── files.txt\n└── firstdir\n1 directory, 1 file\n[root@localhost ~]# chattr +a dirname/\n[root@localhost ~]# lsattr dirname/\n---------------- dirname/firstdir\n---------------- dirname/files.txt\n[root@localhost ~]# lsattr -d dirname/\n-----a---------- dirname/\n[root@localhost ~]# rm -r dirname/\nrm：是否进入目录\"dirname/\"? y\nrm：是否删除目录 \"dirname/firstdir\"？y\nrm: 无法删除\"dirname/firstdir\": 不允许的操作\n[root@localhost ~]# rm -r dirname/files.txt \nrm：是否删除普通空文件 \"dirname/files.txt\"？y     \nrm: 无法删除\"dirname/files.txt\": 不允许的操作\n[root@localhost ~]# mv dirname/ xxx\nmv: 无法将\"dirname/\" 移动至\"xxx\": 不允许的操作\n[root@localhost ~]# mkdir -p dirname/seconddir\n[root@localhost ~]# tree dirname/\ndirname/\n├── files.txt\n├── firstdir\n└── seconddir\n2 directories, 1 file\n[root@localhost ~]# rm -r dirname/seconddir/\nrm：是否删除目录 \"dirname/seconddir/\"？y\nrm: 无法删除\"dirname/seconddir/\": 不允许的操作\n[root@localhost ~]# head -n2 /etc/passwd > dirname/files.txt \n[root@localhost ~]# head -n2 /etc/passwd >> dirname/files.txt \n[root@localhost ~]# cat dirname/files.txt \nroot:x:0:0:root:/root:/bin/bash\nbin:x:1:1:bin:/bin:/sbin/nologin\nroot:x:0:0:root:/root:/bin/bash\nbin:x:1:1:bin:/bin:/sbin/nologin\n[root@localhost ~]# mv dirname/files.txt dirname/xxx.ini\nmv: 无法将\"dirname/files.txt\" 移动至\"dirname/xxx.ini\": 不允许的操作\n[root@localhost ~]# mv dirname/firstdir/ dirname/third\nmv: 无法将\"dirname/firstdir/\" 移动至\"dirname/third\": 不允许的操作\n[root@localhost ~]# rm -r dirname/firstdir/ \nrm：是否删除目录 \"dirname/firstdir/\"？y\nrm: 无法删除\"dirname/firstdir/\": 不允许的操作\n```\n2. `chattr +i dirname`给目录增加`i`权限，则目录无法删除、更名、增加文件和子目录，目录下的文件及子目录无法删除及更名，文件不能增加和删除内容。\n```bash\n[root@localhost ~]# chattr +i dirname/\n[root@localhost ~]# head -n2 >> dirname/files.ini \n-bash: dirname/files.ini: 权限不够\n[root@localhost ~]# head -n2 > dirname/files.ini \n-bash: dirname/files.ini: 权限不够\n[root@localhost ~]# mkdir -p dirname/second\nmkdir: 无法创建目录\"dirname/second\": 权限不够\n[root@localhost ~]# touch dirname/file2.txt\ntouch: 无法创建\"dirname/file2.txt\": 权限不够\n```\n\n- 删除文件的隐藏权限，使用`chattr -a filename`或者`chattr -i filename`命令。\n\n## **lsattr**查看隐藏权限\n- `lsattr`命令用来查看文件的隐藏权限，常用选项有`-d`查看目录权限， `-R`查看目录及目录下所有子目录及文件权限，`-a`查看目录内所有文件权限包括隐藏文件。\n\n```bash\n[root@localhost ~]# lsattr -d dirname/\n-----a---------- dirname/\n[root@localhost ~]# lsattr -R dirname/\n---------------- dirname/firstdir\n\ndirname/firstdir:\n---------------- dirname/firstdir/secdir\n\ndirname/firstdir/secdir:\n\n---------------- dirname/firstdir/file1.txt\n\n---------------- dirname/files.txt\n[root@localhost ~]# touch dirname/.file2.txt\n[root@localhost ~]# lsattr -a dirname/\n-----a---------- dirname/.\n---------------- dirname/..\n---------------- dirname/firstdir\n---------------- dirname/files.txt\n---------------- dirname/.file2.txt\n[root@localhost ~]# lsattr  dirname/\n---------------- dirname/firstdir\n---------------- dirname/files.txt\n[root@localhost ~]# lsattr -Ra dirname/\n-----a---------- dirname/.\n---------------- dirname/..\n---------------- dirname/firstdir\n\ndirname/firstdir:\n---------------- dirname/firstdir/.\n-----a---------- dirname/firstdir/..\n---------------- dirname/firstdir/secdir\n\ndirname/firstdir/secdir:\n---------------- dirname/firstdir/secdir/.\n---------------- dirname/firstdir/secdir/..\n\n---------------- dirname/firstdir/file1.txt\n\n---------------- dirname/files.txt\n---------------- dirname/.file2.txt\n```\n\n---\n\n","source":"_posts/Centos7系列-文件和目录权限(一).md","raw":"---\ntitle: 'Centos7系列:文件和目录权限(一)'\nauthor: Evobot\nabbrlink: 7af3ca57\ndate: 2018-03-28 21:00:04\ncategories: Centos7\ntags: [Linux, Centos]\nimage:\n---\n\n\n\n介绍文件和目录权限的概念，如何更改文件及目录的所有者和所属组的命令**chown**、介绍权限掩码**umask**，以及隐藏权限操作命令**lsattr**和**chattr**命令。\n\n<!-- more -->\n\n---\n\n# 文件和目录权限\n\n## 文件权限概念\n\n- 使用`ls -l`命令时，可以看到文件和目录的权限，权限一共有9位，分成3段，例如`rw-r--r--`，其中每一段的3位权限位分别表示**可读**、**可写**、**可执行**，使用`rwx`代表三种权限：\n\n  ```bash\n  [root@evobot source]# ls -l\n  总用量 256\n  -rw-r--r-- 1 root root 245760 3月  12 17:41 go1.9.2.linux-amd64.zip\n  -rw-r--r-- 1 root root   9051 3月  27 23:40 test.txt\n  ```\n\n- 第一段权限位表示文件所有者的权限，第二段代表文件所属组的权限，第三段表示除了所有者和所属组用户之外的其他用户权限，而文件的所有者和所属组则都是root：\n\n  ![文件权限](http://p5qynomrl.bkt.clouddn.com/15222440423936fdqcu2t.png?imageslim)\n\n- 文件的权限`rwx`也可以使用数字表示，其中`r=4`，`w=2`，`x=1`，所以`rwx`整段权限为7，例如`rw-r--r--`权限，`rw-`是**6**，`r--`是**4**，所以整个权限等于**644**。\n\n## 更改权限命令chmod\n\n- `chmod 755 /root/.ssh`，使用`chmod`加数字权限的方式来更改文件权限，或者`chmod +[rwx]`来单独增加权限，`chmod -[rwx]`来单独减少权限；\n\n- `chmod -R`，可以递归更改目录权限，使目录内的文件权限与目录相同；\n- chmod更改权限还可以写为`chmod u=rwx,g=r,o=r test.txt`的形式；\n- `chmod [ugoa][+-][rwx] test.txt`,其中\"u\",\"g\",\"o\"分别表示所有者，所属组，其他人，\"a\"表示所有，即[ugo]的权限均增加或减少。例如`chmod a+x test.txt`给所有者、所属组、其他人增加\"x\"权限,`chmod u+w test.txt`给所有者增加\"w\"权限。\n\n```bash\n[root@localhost ~]# chmod a+x test.txt \n[root@localhost ~]# ll\n总用量 4\ndrwxr-xr-x. 3 root root   15 10月 20 22:55 1\n-rw-------. 1 root root 1422 8月  19 07:25 anaconda-ks.cfg\n-rwxr-xr-x. 1 root root    0 10月 23 22:04 test.txt\n```\n\n```bash\n[root@localhost ~]# chmod g+w test.txt \n[root@localhost ~]# ll\n总用量 4\ndrwxr-xr-x. 3 root root   15 10月 20 22:55 1\n-rw-------. 1 root root 1422 8月  19 07:25 anaconda-ks.cfg\n-rwxrwxr-x. 1 root root    0 10月 23 22:04 test.txt\n```\n##  更改所有者、所属组\n\n### 更改所有者\n\n- `chown`命令可以更改文件或目录的所有者，命令格式为`chown (username) (filename)`：\n\n```bash\n[root@evobot source]# ls -l\n总用量 256\n-rw-r--r-- 1 root root 245760 3月  12 17:41 go1.9.2.linux-amd64.zip\n-rw-r--r-- 1 root root   9051 3月  27 23:40 test.txt\n[root@evobot source]# chown lux test.txt \n[root@evobot source]# ls -l test.txt \n-rw-r--r-- 1 lux root 9051 3月  27 23:40 test.txt\n```\n\n###  更改所属组\n\n- `chgrp`命令用来更改文件或目录的所属组：\n\n```bash\n[root@evobot source]# ls -l test.txt \n-rw-r--r-- 1 lux root 9051 3月  27 23:40 test.txt\n[root@evobot source]# chgrp lux test.txt \n[root@evobot source]# ls -l test.txt \n-rw-r--r-- 1 lux lux 9051 3月  27 23:40 test.txt\n```\n\n- 更改文件或目录也可以使用`chown`命令，只需要使用`:`分隔所有者和所属组，即可对文件更改所有者和所属组，如果只想更改所属组，在`:`前面的所有者留空即可：\n\n```bash\n[root@evobot source]# ls -l test.txt \n-rw-r--r-- 1 lux lux 9051 3月  27 23:40 test.txt\n[root@evobot source]# chown root:root test.txt \n[root@evobot source]# ls -l test.txt \n-rw-r--r-- 1 root root 9051 3月  27 23:40 test.txt\n[root@evobot source]# chown :lux test.txt \n[root@evobot source]# ls -l test.txt \n-rw-r--r-- 1 root lux 9051 3月  27 23:40 test.txt\n```\n\n- 使用`.`分隔所有者和所属组同样也可以对文件的所有者和所属组进行更改，如`chown .evobot secure.log`：\n\n```bash\n[root@evobot ~]# ll\n总用量 19148\n-rw------- 1 root root     1179 4月  27 00:02 secure.log\n\n[root@evobot ~]# chown .evobot secure.log\n\n[root@evobot ~]# ll\n总用量 19148\n-rw------- 1 root evobot     1179 4月  27 00:02 secure.log\n```\n\n- `chown`同样具有`-R`选项，可以在更改目录的所有者或所属组时，同时更改目录下的文件的所有者和所属组：\n\n```bash\n[root@evobot ~]# ls -l source/\n总用量 256\n-rw-r--r-- 1 root root 245760 3月  12 17:41 go1.9.2.linux-amd64.zip\n-rw-r--r-- 1 root lux    9051 3月  27 23:40 test.txt\n[root@evobot ~]# chown -R lux source/\n[root@evobot ~]# ls -l source/\n总用量 256\n-rw-r--r-- 1 lux root 245760 3月  12 17:41 go1.9.2.linux-amd64.zip\n-rw-r--r-- 1 lux lux    9051 3月  27 23:40 test.txt\n```\n\n# 权限掩码umask\n\n## umask概念\n\n- 在新建一个文件时，默认会给文件分配一个权限，这个权限其实就是由`umask`控制的：\n\n```bash\n[root@evobot ~]# mkdir evobot\n[root@evobot ~]# ls -ld evobot/\ndrwxr-xr-x 2 root root 4096 3月  28 22:04 evobot/\n[root@evobot ~]# umask\n0022\n```\n\n- 可以看到`umask`的值时`0022`，需要更改`umask`的值，直接使用`umask`加上要指定的权限掩码即可：\n\n```bash\n[root@evobot ~]# umask 0002\n[root@evobot ~]# umask\n0002\n[root@evobot ~]# mkdir evobot2\n[root@evobot ~]# touch file.txt\n[root@evobot ~]# ls -l\n总用量 12\ndrwxr-xr-x 2 root root 4096 3月  28 22:04 evobot\ndrwxrwxr-x 2 root root 4096 3月  28 22:08 evobot2\n-rw-rw-r-- 1 root root    0 3月  28 22:08 file.txt\n```\n\n- 从上面的示例中可以看到，目录的权限变成了775，文件的权限变成了664，这是因为Linux中目录必须有`x`权限，否则无法浏览目录；\n\n## 计算umask\n\n- 计算umask掩码所定义的文件和目录权限，是使用文件666，目录777权限去减去umask的权限，**注意并不是用数字权限减去umask，而是使用rwx形式相减！**\n\n  1. 例如umask更改为002，则目录权限为`rwxrwxrwx - -------w- = rwxrwxr-x`:\n\n  ```bash\n  [root@localhost ~]# mkdir mark\n  [root@localhost ~]# ll\n  总用量 4\n  -rw-------. 1 root root   1422 8月  19 07:25 anaconda-ks.cfg\n  drwxr-xr-x. 2 lux  root     18 10月 23 23:28 lux\n  drwxrwxr-x. 2 root root      6 10月 24 23:25 mark\n  -rwxrwxr-x. 1 lux  clikks    0 10月 23 22:04 test.txt\n  ```\n  2. 文件的权限则为`rw-rw-rw- - -------w- = rw-rw-r--`:\n\n  ```bash\n  [root@localhost ~]# touch umask_file.txt\n  [root@localhost ~]# ll umask_file.txt \n  -rw-rw-r--. 1 root root 0 10月 24 23:28 umask_file.txt\n  ```\n  3. 当用权限位减去umask时，若权限位为“-”，umask为\"r\"或\"w\"或\"x\"，则相减后依旧为\"-\"，例如当umask为003时，文件的权限为`rw-rw-rw- - -------wx = rw-rw-r--`,\"-\"减去\"x\"依旧为\"-\",目录权限为`rwxrwxrwx - -------wx = rwxrwxr--`:\n\n  ```bash\n  [root@localhost ~]# umask 003\n  [root@localhost ~]# touch maskfile.txt\n  [root@localhost ~]# mkdir mark2\n  [root@localhost ~]# ll maskfile.txt \n  -rw-rw-r--. 1 root root 0 10月 24 23:32 maskfile.txt\n  [root@localhost ~]# ls -ld mark2\n  drwxrwxr--. 2 root root 6 10月 24 23:33 mark2\n  ```\n\n\n# 隐藏权限\n\n## **chattr**增加隐藏权限\n\n- `chattr`有两个常用选项，`a`和`i`，使用`+-`来给文件或者目录增减权限。\n\n### 对文件附加权限\n\n1.  `chattr +a filename`给文件增加`a`权限，则文件可读可追加内容，不可删除，不可移动、改名。\n```bash\n[root@localhost ~]# chattr +a files.ini \n[root@localhost ~]# lsattr files.ini \n-----a---------- files.ini\n[root@localhost ~]# head -n2 /etc/passwd > files.ini \n-bash: files.ini: 不允许的操作\n[root@localhost ~]# head -n2 /etc/passwd >> files.ini \n[root@localhost ~]# rm files.ini \nrm：是否删除普通文件 \"files.ini\"？y\nrm: 无法删除\"files.ini\": 不允许的操作\n[root@localhost ~]# mv files.ini xxx.ini\nmv: 无法将\"files.ini\" 移动至\"xxx.ini\": 不允许的操作\n[root@localhost ~]# cp files.ini xxx.ini\n[root@localhost ~]# ls\nanaconda-ks.cfg  files.ini  xxx.ini\n```\n2. `chattr +i filename`命令给文件增加`i`权限，则文件可读不可写，不可追加内容，不可删除，不可移动，也不能`touch`更改文件时间。\n```bash\n[root@localhost ~]# chattr +i files.ini \n[root@localhost ~]# lsattr files.ini \n----ia---------- files.ini\n[root@localhost ~]# chattr -a files.ini \n[root@localhost ~]# lsattr files.ini \n----i----------- files.ini\n[root@localhost ~]# !head\nhead -n2 /etc/passwd >> files.ini \n-bash: files.ini: 权限不够\n[root@localhost ~]# head -n2 /etc/passwd > files.ini \n-bash: files.ini: 权限不够\n[root@localhost ~]# rm files.ini \nrm：是否删除普通文件 \"files.ini\"？y\nrm: 无法删除\"files.ini\": 不允许的操作\n[root@localhost ~]# mv files.ini xxx.ini\nmv：是否覆盖\"xxx.ini\"？ y\nmv: 无法将\"files.ini\" 移动至\"xxx.ini\": 不允许的操作\n[root@localhost ~]# lsattr \n---------------- ./anaconda-ks.cfg\n----i----------- ./files.ini\n---------------- ./xxx.ini\n```\n### 对目录附加权限\n\n1. `chattr +a dirname`给目录增加`a`权限，则目录不可改名，不可删除，目录下可以增加文件和目录，并对文件内容进行增加删除，但是不能对目录下的文件删除和更名。同样的也不能对目录下的子目录删除，更名、移动。\n```bash\n[root@localhost ~]# tree dirname/\ndirname/\n├── files.txt\n└── firstdir\n1 directory, 1 file\n[root@localhost ~]# chattr +a dirname/\n[root@localhost ~]# lsattr dirname/\n---------------- dirname/firstdir\n---------------- dirname/files.txt\n[root@localhost ~]# lsattr -d dirname/\n-----a---------- dirname/\n[root@localhost ~]# rm -r dirname/\nrm：是否进入目录\"dirname/\"? y\nrm：是否删除目录 \"dirname/firstdir\"？y\nrm: 无法删除\"dirname/firstdir\": 不允许的操作\n[root@localhost ~]# rm -r dirname/files.txt \nrm：是否删除普通空文件 \"dirname/files.txt\"？y     \nrm: 无法删除\"dirname/files.txt\": 不允许的操作\n[root@localhost ~]# mv dirname/ xxx\nmv: 无法将\"dirname/\" 移动至\"xxx\": 不允许的操作\n[root@localhost ~]# mkdir -p dirname/seconddir\n[root@localhost ~]# tree dirname/\ndirname/\n├── files.txt\n├── firstdir\n└── seconddir\n2 directories, 1 file\n[root@localhost ~]# rm -r dirname/seconddir/\nrm：是否删除目录 \"dirname/seconddir/\"？y\nrm: 无法删除\"dirname/seconddir/\": 不允许的操作\n[root@localhost ~]# head -n2 /etc/passwd > dirname/files.txt \n[root@localhost ~]# head -n2 /etc/passwd >> dirname/files.txt \n[root@localhost ~]# cat dirname/files.txt \nroot:x:0:0:root:/root:/bin/bash\nbin:x:1:1:bin:/bin:/sbin/nologin\nroot:x:0:0:root:/root:/bin/bash\nbin:x:1:1:bin:/bin:/sbin/nologin\n[root@localhost ~]# mv dirname/files.txt dirname/xxx.ini\nmv: 无法将\"dirname/files.txt\" 移动至\"dirname/xxx.ini\": 不允许的操作\n[root@localhost ~]# mv dirname/firstdir/ dirname/third\nmv: 无法将\"dirname/firstdir/\" 移动至\"dirname/third\": 不允许的操作\n[root@localhost ~]# rm -r dirname/firstdir/ \nrm：是否删除目录 \"dirname/firstdir/\"？y\nrm: 无法删除\"dirname/firstdir/\": 不允许的操作\n```\n2. `chattr +i dirname`给目录增加`i`权限，则目录无法删除、更名、增加文件和子目录，目录下的文件及子目录无法删除及更名，文件不能增加和删除内容。\n```bash\n[root@localhost ~]# chattr +i dirname/\n[root@localhost ~]# head -n2 >> dirname/files.ini \n-bash: dirname/files.ini: 权限不够\n[root@localhost ~]# head -n2 > dirname/files.ini \n-bash: dirname/files.ini: 权限不够\n[root@localhost ~]# mkdir -p dirname/second\nmkdir: 无法创建目录\"dirname/second\": 权限不够\n[root@localhost ~]# touch dirname/file2.txt\ntouch: 无法创建\"dirname/file2.txt\": 权限不够\n```\n\n- 删除文件的隐藏权限，使用`chattr -a filename`或者`chattr -i filename`命令。\n\n## **lsattr**查看隐藏权限\n- `lsattr`命令用来查看文件的隐藏权限，常用选项有`-d`查看目录权限， `-R`查看目录及目录下所有子目录及文件权限，`-a`查看目录内所有文件权限包括隐藏文件。\n\n```bash\n[root@localhost ~]# lsattr -d dirname/\n-----a---------- dirname/\n[root@localhost ~]# lsattr -R dirname/\n---------------- dirname/firstdir\n\ndirname/firstdir:\n---------------- dirname/firstdir/secdir\n\ndirname/firstdir/secdir:\n\n---------------- dirname/firstdir/file1.txt\n\n---------------- dirname/files.txt\n[root@localhost ~]# touch dirname/.file2.txt\n[root@localhost ~]# lsattr -a dirname/\n-----a---------- dirname/.\n---------------- dirname/..\n---------------- dirname/firstdir\n---------------- dirname/files.txt\n---------------- dirname/.file2.txt\n[root@localhost ~]# lsattr  dirname/\n---------------- dirname/firstdir\n---------------- dirname/files.txt\n[root@localhost ~]# lsattr -Ra dirname/\n-----a---------- dirname/.\n---------------- dirname/..\n---------------- dirname/firstdir\n\ndirname/firstdir:\n---------------- dirname/firstdir/.\n-----a---------- dirname/firstdir/..\n---------------- dirname/firstdir/secdir\n\ndirname/firstdir/secdir:\n---------------- dirname/firstdir/secdir/.\n---------------- dirname/firstdir/secdir/..\n\n---------------- dirname/firstdir/file1.txt\n\n---------------- dirname/files.txt\n---------------- dirname/.file2.txt\n```\n\n---\n\n","slug":"Centos7系列-文件和目录权限(一)","published":1,"updated":"2018-06-02T13:01:29.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gaz8d000tu1jxfum9ij5l","content":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>介绍文件和目录权限的概念，如何更改文件及目录的所有者和所属组的命令<strong>chown</strong>、介绍权限掩码<strong>umask</strong>，以及隐藏权限操作命令<strong>lsattr</strong>和<strong>chattr</strong>命令。</p><a id=\"more\"></a><hr><h1 id=\"文件和目录权限\"><a href=\"#文件和目录权限\" class=\"headerlink\" title=\"文件和目录权限\"></a>文件和目录权限</h1><h2 id=\"文件权限概念\"><a href=\"#文件权限概念\" class=\"headerlink\" title=\"文件权限概念\"></a>文件权限概念</h2><ul><li><p>使用<code>ls -l</code>命令时，可以看到文件和目录的权限，权限一共有9位，分成3段，例如<code>rw-r--r--</code>，其中每一段的3位权限位分别表示<strong>可读</strong>、<strong>可写</strong>、<strong>可执行</strong>，使用<code>rwx</code>代表三种权限：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls -l</span></span><br><span class=\"line\">总用量 256</span><br><span class=\"line\">-rw-r--r-- 1 root root 245760 3月  12 17:41 go1.9.2.linux-amd64.zip</span><br><span class=\"line\">-rw-r--r-- 1 root root   9051 3月  27 23:40 test.txt</span><br></pre></td></tr></table></figure></li><li><p>第一段权限位表示文件所有者的权限，第二段代表文件所属组的权限，第三段表示除了所有者和所属组用户之外的其他用户权限，而文件的所有者和所属组则都是root：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/15222440423936fdqcu2t.png?imageslim\" alt=\"文件权限\"></p></li><li><p>文件的权限<code>rwx</code>也可以使用数字表示，其中<code>r=4</code>，<code>w=2</code>，<code>x=1</code>，所以<code>rwx</code>整段权限为7，例如<code>rw-r--r--</code>权限，<code>rw-</code>是<strong>6</strong>，<code>r--</code>是<strong>4</strong>，所以整个权限等于<strong>644</strong>。</p></li></ul><h2 id=\"更改权限命令chmod\"><a href=\"#更改权限命令chmod\" class=\"headerlink\" title=\"更改权限命令chmod\"></a>更改权限命令chmod</h2><ul><li><p><code>chmod 755 /root/.ssh</code>，使用<code>chmod</code>加数字权限的方式来更改文件权限，或者<code>chmod +[rwx]</code>来单独增加权限，<code>chmod -[rwx]</code>来单独减少权限；</p></li><li><p><code>chmod -R</code>，可以递归更改目录权限，使目录内的文件权限与目录相同；</p></li><li>chmod更改权限还可以写为<code>chmod u=rwx,g=r,o=r test.txt</code>的形式；</li><li><code>chmod [ugoa][+-][rwx] test.txt</code>,其中”u”,”g”,”o”分别表示所有者，所属组，其他人，”a”表示所有，即[ugo]的权限均增加或减少。例如<code>chmod a+x test.txt</code>给所有者、所属组、其他人增加”x”权限,<code>chmod u+w test.txt</code>给所有者增加”w”权限。</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chmod a+x test.txt </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">drwxr-xr-x. 3 root root   15 10月 20 22:55 1</span><br><span class=\"line\">-rw-------. 1 root root 1422 8月  19 07:25 anaconda-ks.cfg</span><br><span class=\"line\">-rwxr-xr-x. 1 root root    0 10月 23 22:04 test.txt</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chmod g+w test.txt </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">drwxr-xr-x. 3 root root   15 10月 20 22:55 1</span><br><span class=\"line\">-rw-------. 1 root root 1422 8月  19 07:25 anaconda-ks.cfg</span><br><span class=\"line\">-rwxrwxr-x. 1 root root    0 10月 23 22:04 test.txt</span><br></pre></td></tr></table></figure><h2 id=\"更改所有者、所属组\"><a href=\"#更改所有者、所属组\" class=\"headerlink\" title=\"更改所有者、所属组\"></a>更改所有者、所属组</h2><h3 id=\"更改所有者\"><a href=\"#更改所有者\" class=\"headerlink\" title=\"更改所有者\"></a>更改所有者</h3><ul><li><code>chown</code>命令可以更改文件或目录的所有者，命令格式为<code>chown (username) (filename)</code>：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls -l</span></span><br><span class=\"line\">总用量 256</span><br><span class=\"line\">-rw-r--r-- 1 root root 245760 3月  12 17:41 go1.9.2.linux-amd64.zip</span><br><span class=\"line\">-rw-r--r-- 1 root root   9051 3月  27 23:40 test.txt</span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># chown lux test.txt </span></span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls -l test.txt </span></span><br><span class=\"line\">-rw-r--r-- 1 lux root 9051 3月  27 23:40 test.txt</span><br></pre></td></tr></table></figure><h3 id=\"更改所属组\"><a href=\"#更改所属组\" class=\"headerlink\" title=\"更改所属组\"></a>更改所属组</h3><ul><li><code>chgrp</code>命令用来更改文件或目录的所属组：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls -l test.txt </span></span><br><span class=\"line\">-rw-r--r-- 1 lux root 9051 3月  27 23:40 test.txt</span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># chgrp lux test.txt </span></span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls -l test.txt </span></span><br><span class=\"line\">-rw-r--r-- 1 lux lux 9051 3月  27 23:40 test.txt</span><br></pre></td></tr></table></figure><ul><li>更改文件或目录也可以使用<code>chown</code>命令，只需要使用<code>:</code>分隔所有者和所属组，即可对文件更改所有者和所属组，如果只想更改所属组，在<code>:</code>前面的所有者留空即可：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls -l test.txt </span></span><br><span class=\"line\">-rw-r--r-- 1 lux lux 9051 3月  27 23:40 test.txt</span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># chown root:root test.txt </span></span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls -l test.txt </span></span><br><span class=\"line\">-rw-r--r-- 1 root root 9051 3月  27 23:40 test.txt</span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># chown :lux test.txt </span></span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls -l test.txt </span></span><br><span class=\"line\">-rw-r--r-- 1 root lux 9051 3月  27 23:40 test.txt</span><br></pre></td></tr></table></figure><ul><li>使用<code>.</code>分隔所有者和所属组同样也可以对文件的所有者和所属组进行更改，如<code>chown .evobot secure.log</code>：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 19148</span><br><span class=\"line\">-rw------- 1 root root     1179 4月  27 00:02 secure.log</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># chown .evobot secure.log</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 19148</span><br><span class=\"line\">-rw------- 1 root evobot     1179 4月  27 00:02 secure.log</span><br></pre></td></tr></table></figure><ul><li><code>chown</code>同样具有<code>-R</code>选项，可以在更改目录的所有者或所属组时，同时更改目录下的文件的所有者和所属组：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -l source/</span></span><br><span class=\"line\">总用量 256</span><br><span class=\"line\">-rw-r--r-- 1 root root 245760 3月  12 17:41 go1.9.2.linux-amd64.zip</span><br><span class=\"line\">-rw-r--r-- 1 root lux    9051 3月  27 23:40 test.txt</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># chown -R lux source/</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -l source/</span></span><br><span class=\"line\">总用量 256</span><br><span class=\"line\">-rw-r--r-- 1 lux root 245760 3月  12 17:41 go1.9.2.linux-amd64.zip</span><br><span class=\"line\">-rw-r--r-- 1 lux lux    9051 3月  27 23:40 test.txt</span><br></pre></td></tr></table></figure><h1 id=\"权限掩码umask\"><a href=\"#权限掩码umask\" class=\"headerlink\" title=\"权限掩码umask\"></a>权限掩码umask</h1><h2 id=\"umask概念\"><a href=\"#umask概念\" class=\"headerlink\" title=\"umask概念\"></a>umask概念</h2><ul><li>在新建一个文件时，默认会给文件分配一个权限，这个权限其实就是由<code>umask</code>控制的：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkdir evobot</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -ld evobot/</span></span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 3月  28 22:04 evobot/</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># umask</span></span><br><span class=\"line\">0022</span><br></pre></td></tr></table></figure><ul><li>可以看到<code>umask</code>的值时<code>0022</code>，需要更改<code>umask</code>的值，直接使用<code>umask</code>加上要指定的权限掩码即可：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># umask 0002</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># umask</span></span><br><span class=\"line\">0002</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkdir evobot2</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># touch file.txt</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -l</span></span><br><span class=\"line\">总用量 12</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 3月  28 22:04 evobot</span><br><span class=\"line\">drwxrwxr-x 2 root root 4096 3月  28 22:08 evobot2</span><br><span class=\"line\">-rw-rw-r-- 1 root root    0 3月  28 22:08 file.txt</span><br></pre></td></tr></table></figure><ul><li>从上面的示例中可以看到，目录的权限变成了775，文件的权限变成了664，这是因为Linux中目录必须有<code>x</code>权限，否则无法浏览目录；</li></ul><h2 id=\"计算umask\"><a href=\"#计算umask\" class=\"headerlink\" title=\"计算umask\"></a>计算umask</h2><ul><li><p>计算umask掩码所定义的文件和目录权限，是使用文件666，目录777权限去减去umask的权限，<strong>注意并不是用数字权限减去umask，而是使用rwx形式相减！</strong></p><ol><li>例如umask更改为002，则目录权限为<code>rwxrwxrwx - -------w- = rwxrwxr-x</code>:</li></ol><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkdir mark</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">-rw-------. 1 root root   1422 8月  19 07:25 anaconda-ks.cfg</span><br><span class=\"line\">drwxr-xr-x. 2 lux  root     18 10月 23 23:28 lux</span><br><span class=\"line\">drwxrwxr-x. 2 root root      6 10月 24 23:25 mark</span><br><span class=\"line\">-rwxrwxr-x. 1 lux  clikks    0 10月 23 22:04 test.txt</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>文件的权限则为<code>rw-rw-rw- - -------w- = rw-rw-r--</code>:</li></ol><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># touch umask_file.txt</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll umask_file.txt </span></span><br><span class=\"line\">-rw-rw-r--. 1 root root 0 10月 24 23:28 umask_file.txt</span><br></pre></td></tr></table></figure><ol start=\"3\"><li>当用权限位减去umask时，若权限位为“-”，umask为”r”或”w”或”x”，则相减后依旧为”-“，例如当umask为003时，文件的权限为<code>rw-rw-rw- - -------wx = rw-rw-r--</code>,”-“减去”x”依旧为”-“,目录权限为<code>rwxrwxrwx - -------wx = rwxrwxr--</code>:</li></ol><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># umask 003</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># touch maskfile.txt</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkdir mark2</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll maskfile.txt </span></span><br><span class=\"line\">-rw-rw-r--. 1 root root 0 10月 24 23:32 maskfile.txt</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -ld mark2</span></span><br><span class=\"line\">drwxrwxr--. 2 root root 6 10月 24 23:33 mark2</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"隐藏权限\"><a href=\"#隐藏权限\" class=\"headerlink\" title=\"隐藏权限\"></a>隐藏权限</h1><h2 id=\"chattr增加隐藏权限\"><a href=\"#chattr增加隐藏权限\" class=\"headerlink\" title=\"chattr增加隐藏权限\"></a><strong>chattr</strong>增加隐藏权限</h2><ul><li><code>chattr</code>有两个常用选项，<code>a</code>和<code>i</code>，使用<code>+-</code>来给文件或者目录增减权限。</li></ul><h3 id=\"对文件附加权限\"><a href=\"#对文件附加权限\" class=\"headerlink\" title=\"对文件附加权限\"></a>对文件附加权限</h3><ol><li><p><code>chattr +a filename</code>给文件增加<code>a</code>权限，则文件可读可追加内容，不可删除，不可移动、改名。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chattr +a files.ini </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr files.ini </span></span><br><span class=\"line\">-----a---------- files.ini</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># head -n2 /etc/passwd &gt; files.ini </span></span><br><span class=\"line\">-bash: files.ini: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># head -n2 /etc/passwd &gt;&gt; files.ini </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># rm files.ini </span></span><br><span class=\"line\">rm：是否删除普通文件 <span class=\"string\">\"files.ini\"</span>？y</span><br><span class=\"line\">rm: 无法删除<span class=\"string\">\"files.ini\"</span>: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mv files.ini xxx.ini</span></span><br><span class=\"line\">mv: 无法将<span class=\"string\">\"files.ini\"</span> 移动至<span class=\"string\">\"xxx.ini\"</span>: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cp files.ini xxx.ini</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls</span></span><br><span class=\"line\">anaconda-ks.cfg  files.ini  xxx.ini</span><br></pre></td></tr></table></figure></li><li><p><code>chattr +i filename</code>命令给文件增加<code>i</code>权限，则文件可读不可写，不可追加内容，不可删除，不可移动，也不能<code>touch</code>更改文件时间。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chattr +i files.ini </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr files.ini </span></span><br><span class=\"line\">----ia---------- files.ini</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chattr -a files.ini </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr files.ini </span></span><br><span class=\"line\">----i----------- files.ini</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># !head</span></span><br><span class=\"line\">head -n2 /etc/passwd &gt;&gt; files.ini </span><br><span class=\"line\">-bash: files.ini: 权限不够</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># head -n2 /etc/passwd &gt; files.ini </span></span><br><span class=\"line\">-bash: files.ini: 权限不够</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># rm files.ini </span></span><br><span class=\"line\">rm：是否删除普通文件 <span class=\"string\">\"files.ini\"</span>？y</span><br><span class=\"line\">rm: 无法删除<span class=\"string\">\"files.ini\"</span>: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mv files.ini xxx.ini</span></span><br><span class=\"line\">mv：是否覆盖<span class=\"string\">\"xxx.ini\"</span>？ y</span><br><span class=\"line\">mv: 无法将<span class=\"string\">\"files.ini\"</span> 移动至<span class=\"string\">\"xxx.ini\"</span>: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr </span></span><br><span class=\"line\">---------------- ./anaconda-ks.cfg</span><br><span class=\"line\">----i----------- ./files.ini</span><br><span class=\"line\">---------------- ./xxx.ini</span><br></pre></td></tr></table></figure></li></ol><h3 id=\"对目录附加权限\"><a href=\"#对目录附加权限\" class=\"headerlink\" title=\"对目录附加权限\"></a>对目录附加权限</h3><ol><li><p><code>chattr +a dirname</code>给目录增加<code>a</code>权限，则目录不可改名，不可删除，目录下可以增加文件和目录，并对文件内容进行增加删除，但是不能对目录下的文件删除和更名。同样的也不能对目录下的子目录删除，更名、移动。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># tree dirname/</span></span><br><span class=\"line\">dirname/</span><br><span class=\"line\">├── files.txt</span><br><span class=\"line\">└── firstdir</span><br><span class=\"line\">1 directory, 1 file</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chattr +a dirname/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr dirname/</span></span><br><span class=\"line\">---------------- dirname/firstdir</span><br><span class=\"line\">---------------- dirname/files.txt</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr -d dirname/</span></span><br><span class=\"line\">-----a---------- dirname/</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># rm -r dirname/</span></span><br><span class=\"line\">rm：是否进入目录<span class=\"string\">\"dirname/\"</span>? y</span><br><span class=\"line\">rm：是否删除目录 <span class=\"string\">\"dirname/firstdir\"</span>？y</span><br><span class=\"line\">rm: 无法删除<span class=\"string\">\"dirname/firstdir\"</span>: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># rm -r dirname/files.txt </span></span><br><span class=\"line\">rm：是否删除普通空文件 <span class=\"string\">\"dirname/files.txt\"</span>？y     </span><br><span class=\"line\">rm: 无法删除<span class=\"string\">\"dirname/files.txt\"</span>: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mv dirname/ xxx</span></span><br><span class=\"line\">mv: 无法将<span class=\"string\">\"dirname/\"</span> 移动至<span class=\"string\">\"xxx\"</span>: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkdir -p dirname/seconddir</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># tree dirname/</span></span><br><span class=\"line\">dirname/</span><br><span class=\"line\">├── files.txt</span><br><span class=\"line\">├── firstdir</span><br><span class=\"line\">└── seconddir</span><br><span class=\"line\">2 directories, 1 file</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># rm -r dirname/seconddir/</span></span><br><span class=\"line\">rm：是否删除目录 <span class=\"string\">\"dirname/seconddir/\"</span>？y</span><br><span class=\"line\">rm: 无法删除<span class=\"string\">\"dirname/seconddir/\"</span>: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># head -n2 /etc/passwd &gt; dirname/files.txt </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># head -n2 /etc/passwd &gt;&gt; dirname/files.txt </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cat dirname/files.txt </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mv dirname/files.txt dirname/xxx.ini</span></span><br><span class=\"line\">mv: 无法将<span class=\"string\">\"dirname/files.txt\"</span> 移动至<span class=\"string\">\"dirname/xxx.ini\"</span>: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mv dirname/firstdir/ dirname/third</span></span><br><span class=\"line\">mv: 无法将<span class=\"string\">\"dirname/firstdir/\"</span> 移动至<span class=\"string\">\"dirname/third\"</span>: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># rm -r dirname/firstdir/ </span></span><br><span class=\"line\">rm：是否删除目录 <span class=\"string\">\"dirname/firstdir/\"</span>？y</span><br><span class=\"line\">rm: 无法删除<span class=\"string\">\"dirname/firstdir/\"</span>: 不允许的操作</span><br></pre></td></tr></table></figure></li><li><p><code>chattr +i dirname</code>给目录增加<code>i</code>权限，则目录无法删除、更名、增加文件和子目录，目录下的文件及子目录无法删除及更名，文件不能增加和删除内容。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chattr +i dirname/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># head -n2 &gt;&gt; dirname/files.ini </span></span><br><span class=\"line\">-bash: dirname/files.ini: 权限不够</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># head -n2 &gt; dirname/files.ini </span></span><br><span class=\"line\">-bash: dirname/files.ini: 权限不够</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkdir -p dirname/second</span></span><br><span class=\"line\">mkdir: 无法创建目录<span class=\"string\">\"dirname/second\"</span>: 权限不够</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># touch dirname/file2.txt</span></span><br><span class=\"line\">touch: 无法创建<span class=\"string\">\"dirname/file2.txt\"</span>: 权限不够</span><br></pre></td></tr></table></figure></li></ol><ul><li>删除文件的隐藏权限，使用<code>chattr -a filename</code>或者<code>chattr -i filename</code>命令。</li></ul><h2 id=\"lsattr查看隐藏权限\"><a href=\"#lsattr查看隐藏权限\" class=\"headerlink\" title=\"lsattr查看隐藏权限\"></a><strong>lsattr</strong>查看隐藏权限</h2><ul><li><code>lsattr</code>命令用来查看文件的隐藏权限，常用选项有<code>-d</code>查看目录权限， <code>-R</code>查看目录及目录下所有子目录及文件权限，<code>-a</code>查看目录内所有文件权限包括隐藏文件。</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr -d dirname/</span></span><br><span class=\"line\">-----a---------- dirname/</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr -R dirname/</span></span><br><span class=\"line\">---------------- dirname/firstdir</span><br><span class=\"line\"></span><br><span class=\"line\">dirname/firstdir:</span><br><span class=\"line\">---------------- dirname/firstdir/secdir</span><br><span class=\"line\"></span><br><span class=\"line\">dirname/firstdir/secdir:</span><br><span class=\"line\"></span><br><span class=\"line\">---------------- dirname/firstdir/file1.txt</span><br><span class=\"line\"></span><br><span class=\"line\">---------------- dirname/files.txt</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># touch dirname/.file2.txt</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr -a dirname/</span></span><br><span class=\"line\">-----a---------- dirname/.</span><br><span class=\"line\">---------------- dirname/..</span><br><span class=\"line\">---------------- dirname/firstdir</span><br><span class=\"line\">---------------- dirname/files.txt</span><br><span class=\"line\">---------------- dirname/.file2.txt</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr  dirname/</span></span><br><span class=\"line\">---------------- dirname/firstdir</span><br><span class=\"line\">---------------- dirname/files.txt</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr -Ra dirname/</span></span><br><span class=\"line\">-----a---------- dirname/.</span><br><span class=\"line\">---------------- dirname/..</span><br><span class=\"line\">---------------- dirname/firstdir</span><br><span class=\"line\"></span><br><span class=\"line\">dirname/firstdir:</span><br><span class=\"line\">---------------- dirname/firstdir/.</span><br><span class=\"line\">-----a---------- dirname/firstdir/..</span><br><span class=\"line\">---------------- dirname/firstdir/secdir</span><br><span class=\"line\"></span><br><span class=\"line\">dirname/firstdir/secdir:</span><br><span class=\"line\">---------------- dirname/firstdir/secdir/.</span><br><span class=\"line\">---------------- dirname/firstdir/secdir/..</span><br><span class=\"line\"></span><br><span class=\"line\">---------------- dirname/firstdir/file1.txt</span><br><span class=\"line\"></span><br><span class=\"line\">---------------- dirname/files.txt</span><br><span class=\"line\">---------------- dirname/.file2.txt</span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>介绍文件和目录权限的概念，如何更改文件及目录的所有者和所属组的命令<strong>chown</strong>、介绍权限掩码<strong>umask</strong>，以及隐藏权限操作命令<strong>lsattr</strong>和<strong>chattr</strong>命令。</p>","more":"<hr><h1 id=\"文件和目录权限\"><a href=\"#文件和目录权限\" class=\"headerlink\" title=\"文件和目录权限\"></a>文件和目录权限</h1><h2 id=\"文件权限概念\"><a href=\"#文件权限概念\" class=\"headerlink\" title=\"文件权限概念\"></a>文件权限概念</h2><ul><li><p>使用<code>ls -l</code>命令时，可以看到文件和目录的权限，权限一共有9位，分成3段，例如<code>rw-r--r--</code>，其中每一段的3位权限位分别表示<strong>可读</strong>、<strong>可写</strong>、<strong>可执行</strong>，使用<code>rwx</code>代表三种权限：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls -l</span></span><br><span class=\"line\">总用量 256</span><br><span class=\"line\">-rw-r--r-- 1 root root 245760 3月  12 17:41 go1.9.2.linux-amd64.zip</span><br><span class=\"line\">-rw-r--r-- 1 root root   9051 3月  27 23:40 test.txt</span><br></pre></td></tr></table></figure></li><li><p>第一段权限位表示文件所有者的权限，第二段代表文件所属组的权限，第三段表示除了所有者和所属组用户之外的其他用户权限，而文件的所有者和所属组则都是root：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/15222440423936fdqcu2t.png?imageslim\" alt=\"文件权限\"></p></li><li><p>文件的权限<code>rwx</code>也可以使用数字表示，其中<code>r=4</code>，<code>w=2</code>，<code>x=1</code>，所以<code>rwx</code>整段权限为7，例如<code>rw-r--r--</code>权限，<code>rw-</code>是<strong>6</strong>，<code>r--</code>是<strong>4</strong>，所以整个权限等于<strong>644</strong>。</p></li></ul><h2 id=\"更改权限命令chmod\"><a href=\"#更改权限命令chmod\" class=\"headerlink\" title=\"更改权限命令chmod\"></a>更改权限命令chmod</h2><ul><li><p><code>chmod 755 /root/.ssh</code>，使用<code>chmod</code>加数字权限的方式来更改文件权限，或者<code>chmod +[rwx]</code>来单独增加权限，<code>chmod -[rwx]</code>来单独减少权限；</p></li><li><p><code>chmod -R</code>，可以递归更改目录权限，使目录内的文件权限与目录相同；</p></li><li>chmod更改权限还可以写为<code>chmod u=rwx,g=r,o=r test.txt</code>的形式；</li><li><code>chmod [ugoa][+-][rwx] test.txt</code>,其中”u”,”g”,”o”分别表示所有者，所属组，其他人，”a”表示所有，即[ugo]的权限均增加或减少。例如<code>chmod a+x test.txt</code>给所有者、所属组、其他人增加”x”权限,<code>chmod u+w test.txt</code>给所有者增加”w”权限。</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chmod a+x test.txt </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">drwxr-xr-x. 3 root root   15 10月 20 22:55 1</span><br><span class=\"line\">-rw-------. 1 root root 1422 8月  19 07:25 anaconda-ks.cfg</span><br><span class=\"line\">-rwxr-xr-x. 1 root root    0 10月 23 22:04 test.txt</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chmod g+w test.txt </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">drwxr-xr-x. 3 root root   15 10月 20 22:55 1</span><br><span class=\"line\">-rw-------. 1 root root 1422 8月  19 07:25 anaconda-ks.cfg</span><br><span class=\"line\">-rwxrwxr-x. 1 root root    0 10月 23 22:04 test.txt</span><br></pre></td></tr></table></figure><h2 id=\"更改所有者、所属组\"><a href=\"#更改所有者、所属组\" class=\"headerlink\" title=\"更改所有者、所属组\"></a>更改所有者、所属组</h2><h3 id=\"更改所有者\"><a href=\"#更改所有者\" class=\"headerlink\" title=\"更改所有者\"></a>更改所有者</h3><ul><li><code>chown</code>命令可以更改文件或目录的所有者，命令格式为<code>chown (username) (filename)</code>：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls -l</span></span><br><span class=\"line\">总用量 256</span><br><span class=\"line\">-rw-r--r-- 1 root root 245760 3月  12 17:41 go1.9.2.linux-amd64.zip</span><br><span class=\"line\">-rw-r--r-- 1 root root   9051 3月  27 23:40 test.txt</span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># chown lux test.txt </span></span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls -l test.txt </span></span><br><span class=\"line\">-rw-r--r-- 1 lux root 9051 3月  27 23:40 test.txt</span><br></pre></td></tr></table></figure><h3 id=\"更改所属组\"><a href=\"#更改所属组\" class=\"headerlink\" title=\"更改所属组\"></a>更改所属组</h3><ul><li><code>chgrp</code>命令用来更改文件或目录的所属组：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls -l test.txt </span></span><br><span class=\"line\">-rw-r--r-- 1 lux root 9051 3月  27 23:40 test.txt</span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># chgrp lux test.txt </span></span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls -l test.txt </span></span><br><span class=\"line\">-rw-r--r-- 1 lux lux 9051 3月  27 23:40 test.txt</span><br></pre></td></tr></table></figure><ul><li>更改文件或目录也可以使用<code>chown</code>命令，只需要使用<code>:</code>分隔所有者和所属组，即可对文件更改所有者和所属组，如果只想更改所属组，在<code>:</code>前面的所有者留空即可：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls -l test.txt </span></span><br><span class=\"line\">-rw-r--r-- 1 lux lux 9051 3月  27 23:40 test.txt</span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># chown root:root test.txt </span></span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls -l test.txt </span></span><br><span class=\"line\">-rw-r--r-- 1 root root 9051 3月  27 23:40 test.txt</span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># chown :lux test.txt </span></span><br><span class=\"line\">[root@evobot <span class=\"built_in\">source</span>]<span class=\"comment\"># ls -l test.txt </span></span><br><span class=\"line\">-rw-r--r-- 1 root lux 9051 3月  27 23:40 test.txt</span><br></pre></td></tr></table></figure><ul><li>使用<code>.</code>分隔所有者和所属组同样也可以对文件的所有者和所属组进行更改，如<code>chown .evobot secure.log</code>：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 19148</span><br><span class=\"line\">-rw------- 1 root root     1179 4月  27 00:02 secure.log</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># chown .evobot secure.log</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 19148</span><br><span class=\"line\">-rw------- 1 root evobot     1179 4月  27 00:02 secure.log</span><br></pre></td></tr></table></figure><ul><li><code>chown</code>同样具有<code>-R</code>选项，可以在更改目录的所有者或所属组时，同时更改目录下的文件的所有者和所属组：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -l source/</span></span><br><span class=\"line\">总用量 256</span><br><span class=\"line\">-rw-r--r-- 1 root root 245760 3月  12 17:41 go1.9.2.linux-amd64.zip</span><br><span class=\"line\">-rw-r--r-- 1 root lux    9051 3月  27 23:40 test.txt</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># chown -R lux source/</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -l source/</span></span><br><span class=\"line\">总用量 256</span><br><span class=\"line\">-rw-r--r-- 1 lux root 245760 3月  12 17:41 go1.9.2.linux-amd64.zip</span><br><span class=\"line\">-rw-r--r-- 1 lux lux    9051 3月  27 23:40 test.txt</span><br></pre></td></tr></table></figure><h1 id=\"权限掩码umask\"><a href=\"#权限掩码umask\" class=\"headerlink\" title=\"权限掩码umask\"></a>权限掩码umask</h1><h2 id=\"umask概念\"><a href=\"#umask概念\" class=\"headerlink\" title=\"umask概念\"></a>umask概念</h2><ul><li>在新建一个文件时，默认会给文件分配一个权限，这个权限其实就是由<code>umask</code>控制的：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkdir evobot</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -ld evobot/</span></span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 3月  28 22:04 evobot/</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># umask</span></span><br><span class=\"line\">0022</span><br></pre></td></tr></table></figure><ul><li>可以看到<code>umask</code>的值时<code>0022</code>，需要更改<code>umask</code>的值，直接使用<code>umask</code>加上要指定的权限掩码即可：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># umask 0002</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># umask</span></span><br><span class=\"line\">0002</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkdir evobot2</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># touch file.txt</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -l</span></span><br><span class=\"line\">总用量 12</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 3月  28 22:04 evobot</span><br><span class=\"line\">drwxrwxr-x 2 root root 4096 3月  28 22:08 evobot2</span><br><span class=\"line\">-rw-rw-r-- 1 root root    0 3月  28 22:08 file.txt</span><br></pre></td></tr></table></figure><ul><li>从上面的示例中可以看到，目录的权限变成了775，文件的权限变成了664，这是因为Linux中目录必须有<code>x</code>权限，否则无法浏览目录；</li></ul><h2 id=\"计算umask\"><a href=\"#计算umask\" class=\"headerlink\" title=\"计算umask\"></a>计算umask</h2><ul><li><p>计算umask掩码所定义的文件和目录权限，是使用文件666，目录777权限去减去umask的权限，<strong>注意并不是用数字权限减去umask，而是使用rwx形式相减！</strong></p><ol><li>例如umask更改为002，则目录权限为<code>rwxrwxrwx - -------w- = rwxrwxr-x</code>:</li></ol><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkdir mark</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">-rw-------. 1 root root   1422 8月  19 07:25 anaconda-ks.cfg</span><br><span class=\"line\">drwxr-xr-x. 2 lux  root     18 10月 23 23:28 lux</span><br><span class=\"line\">drwxrwxr-x. 2 root root      6 10月 24 23:25 mark</span><br><span class=\"line\">-rwxrwxr-x. 1 lux  clikks    0 10月 23 22:04 test.txt</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>文件的权限则为<code>rw-rw-rw- - -------w- = rw-rw-r--</code>:</li></ol><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># touch umask_file.txt</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll umask_file.txt </span></span><br><span class=\"line\">-rw-rw-r--. 1 root root 0 10月 24 23:28 umask_file.txt</span><br></pre></td></tr></table></figure><ol start=\"3\"><li>当用权限位减去umask时，若权限位为“-”，umask为”r”或”w”或”x”，则相减后依旧为”-“，例如当umask为003时，文件的权限为<code>rw-rw-rw- - -------wx = rw-rw-r--</code>,”-“减去”x”依旧为”-“,目录权限为<code>rwxrwxrwx - -------wx = rwxrwxr--</code>:</li></ol><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># umask 003</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># touch maskfile.txt</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkdir mark2</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll maskfile.txt </span></span><br><span class=\"line\">-rw-rw-r--. 1 root root 0 10月 24 23:32 maskfile.txt</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -ld mark2</span></span><br><span class=\"line\">drwxrwxr--. 2 root root 6 10月 24 23:33 mark2</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"隐藏权限\"><a href=\"#隐藏权限\" class=\"headerlink\" title=\"隐藏权限\"></a>隐藏权限</h1><h2 id=\"chattr增加隐藏权限\"><a href=\"#chattr增加隐藏权限\" class=\"headerlink\" title=\"chattr增加隐藏权限\"></a><strong>chattr</strong>增加隐藏权限</h2><ul><li><code>chattr</code>有两个常用选项，<code>a</code>和<code>i</code>，使用<code>+-</code>来给文件或者目录增减权限。</li></ul><h3 id=\"对文件附加权限\"><a href=\"#对文件附加权限\" class=\"headerlink\" title=\"对文件附加权限\"></a>对文件附加权限</h3><ol><li><p><code>chattr +a filename</code>给文件增加<code>a</code>权限，则文件可读可追加内容，不可删除，不可移动、改名。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chattr +a files.ini </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr files.ini </span></span><br><span class=\"line\">-----a---------- files.ini</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># head -n2 /etc/passwd &gt; files.ini </span></span><br><span class=\"line\">-bash: files.ini: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># head -n2 /etc/passwd &gt;&gt; files.ini </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># rm files.ini </span></span><br><span class=\"line\">rm：是否删除普通文件 <span class=\"string\">\"files.ini\"</span>？y</span><br><span class=\"line\">rm: 无法删除<span class=\"string\">\"files.ini\"</span>: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mv files.ini xxx.ini</span></span><br><span class=\"line\">mv: 无法将<span class=\"string\">\"files.ini\"</span> 移动至<span class=\"string\">\"xxx.ini\"</span>: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cp files.ini xxx.ini</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls</span></span><br><span class=\"line\">anaconda-ks.cfg  files.ini  xxx.ini</span><br></pre></td></tr></table></figure></li><li><p><code>chattr +i filename</code>命令给文件增加<code>i</code>权限，则文件可读不可写，不可追加内容，不可删除，不可移动，也不能<code>touch</code>更改文件时间。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chattr +i files.ini </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr files.ini </span></span><br><span class=\"line\">----ia---------- files.ini</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chattr -a files.ini </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr files.ini </span></span><br><span class=\"line\">----i----------- files.ini</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># !head</span></span><br><span class=\"line\">head -n2 /etc/passwd &gt;&gt; files.ini </span><br><span class=\"line\">-bash: files.ini: 权限不够</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># head -n2 /etc/passwd &gt; files.ini </span></span><br><span class=\"line\">-bash: files.ini: 权限不够</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># rm files.ini </span></span><br><span class=\"line\">rm：是否删除普通文件 <span class=\"string\">\"files.ini\"</span>？y</span><br><span class=\"line\">rm: 无法删除<span class=\"string\">\"files.ini\"</span>: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mv files.ini xxx.ini</span></span><br><span class=\"line\">mv：是否覆盖<span class=\"string\">\"xxx.ini\"</span>？ y</span><br><span class=\"line\">mv: 无法将<span class=\"string\">\"files.ini\"</span> 移动至<span class=\"string\">\"xxx.ini\"</span>: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr </span></span><br><span class=\"line\">---------------- ./anaconda-ks.cfg</span><br><span class=\"line\">----i----------- ./files.ini</span><br><span class=\"line\">---------------- ./xxx.ini</span><br></pre></td></tr></table></figure></li></ol><h3 id=\"对目录附加权限\"><a href=\"#对目录附加权限\" class=\"headerlink\" title=\"对目录附加权限\"></a>对目录附加权限</h3><ol><li><p><code>chattr +a dirname</code>给目录增加<code>a</code>权限，则目录不可改名，不可删除，目录下可以增加文件和目录，并对文件内容进行增加删除，但是不能对目录下的文件删除和更名。同样的也不能对目录下的子目录删除，更名、移动。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># tree dirname/</span></span><br><span class=\"line\">dirname/</span><br><span class=\"line\">├── files.txt</span><br><span class=\"line\">└── firstdir</span><br><span class=\"line\">1 directory, 1 file</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chattr +a dirname/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr dirname/</span></span><br><span class=\"line\">---------------- dirname/firstdir</span><br><span class=\"line\">---------------- dirname/files.txt</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr -d dirname/</span></span><br><span class=\"line\">-----a---------- dirname/</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># rm -r dirname/</span></span><br><span class=\"line\">rm：是否进入目录<span class=\"string\">\"dirname/\"</span>? y</span><br><span class=\"line\">rm：是否删除目录 <span class=\"string\">\"dirname/firstdir\"</span>？y</span><br><span class=\"line\">rm: 无法删除<span class=\"string\">\"dirname/firstdir\"</span>: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># rm -r dirname/files.txt </span></span><br><span class=\"line\">rm：是否删除普通空文件 <span class=\"string\">\"dirname/files.txt\"</span>？y     </span><br><span class=\"line\">rm: 无法删除<span class=\"string\">\"dirname/files.txt\"</span>: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mv dirname/ xxx</span></span><br><span class=\"line\">mv: 无法将<span class=\"string\">\"dirname/\"</span> 移动至<span class=\"string\">\"xxx\"</span>: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkdir -p dirname/seconddir</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># tree dirname/</span></span><br><span class=\"line\">dirname/</span><br><span class=\"line\">├── files.txt</span><br><span class=\"line\">├── firstdir</span><br><span class=\"line\">└── seconddir</span><br><span class=\"line\">2 directories, 1 file</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># rm -r dirname/seconddir/</span></span><br><span class=\"line\">rm：是否删除目录 <span class=\"string\">\"dirname/seconddir/\"</span>？y</span><br><span class=\"line\">rm: 无法删除<span class=\"string\">\"dirname/seconddir/\"</span>: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># head -n2 /etc/passwd &gt; dirname/files.txt </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># head -n2 /etc/passwd &gt;&gt; dirname/files.txt </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cat dirname/files.txt </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mv dirname/files.txt dirname/xxx.ini</span></span><br><span class=\"line\">mv: 无法将<span class=\"string\">\"dirname/files.txt\"</span> 移动至<span class=\"string\">\"dirname/xxx.ini\"</span>: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mv dirname/firstdir/ dirname/third</span></span><br><span class=\"line\">mv: 无法将<span class=\"string\">\"dirname/firstdir/\"</span> 移动至<span class=\"string\">\"dirname/third\"</span>: 不允许的操作</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># rm -r dirname/firstdir/ </span></span><br><span class=\"line\">rm：是否删除目录 <span class=\"string\">\"dirname/firstdir/\"</span>？y</span><br><span class=\"line\">rm: 无法删除<span class=\"string\">\"dirname/firstdir/\"</span>: 不允许的操作</span><br></pre></td></tr></table></figure></li><li><p><code>chattr +i dirname</code>给目录增加<code>i</code>权限，则目录无法删除、更名、增加文件和子目录，目录下的文件及子目录无法删除及更名，文件不能增加和删除内容。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chattr +i dirname/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># head -n2 &gt;&gt; dirname/files.ini </span></span><br><span class=\"line\">-bash: dirname/files.ini: 权限不够</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># head -n2 &gt; dirname/files.ini </span></span><br><span class=\"line\">-bash: dirname/files.ini: 权限不够</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkdir -p dirname/second</span></span><br><span class=\"line\">mkdir: 无法创建目录<span class=\"string\">\"dirname/second\"</span>: 权限不够</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># touch dirname/file2.txt</span></span><br><span class=\"line\">touch: 无法创建<span class=\"string\">\"dirname/file2.txt\"</span>: 权限不够</span><br></pre></td></tr></table></figure></li></ol><ul><li>删除文件的隐藏权限，使用<code>chattr -a filename</code>或者<code>chattr -i filename</code>命令。</li></ul><h2 id=\"lsattr查看隐藏权限\"><a href=\"#lsattr查看隐藏权限\" class=\"headerlink\" title=\"lsattr查看隐藏权限\"></a><strong>lsattr</strong>查看隐藏权限</h2><ul><li><code>lsattr</code>命令用来查看文件的隐藏权限，常用选项有<code>-d</code>查看目录权限， <code>-R</code>查看目录及目录下所有子目录及文件权限，<code>-a</code>查看目录内所有文件权限包括隐藏文件。</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr -d dirname/</span></span><br><span class=\"line\">-----a---------- dirname/</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr -R dirname/</span></span><br><span class=\"line\">---------------- dirname/firstdir</span><br><span class=\"line\"></span><br><span class=\"line\">dirname/firstdir:</span><br><span class=\"line\">---------------- dirname/firstdir/secdir</span><br><span class=\"line\"></span><br><span class=\"line\">dirname/firstdir/secdir:</span><br><span class=\"line\"></span><br><span class=\"line\">---------------- dirname/firstdir/file1.txt</span><br><span class=\"line\"></span><br><span class=\"line\">---------------- dirname/files.txt</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># touch dirname/.file2.txt</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr -a dirname/</span></span><br><span class=\"line\">-----a---------- dirname/.</span><br><span class=\"line\">---------------- dirname/..</span><br><span class=\"line\">---------------- dirname/firstdir</span><br><span class=\"line\">---------------- dirname/files.txt</span><br><span class=\"line\">---------------- dirname/.file2.txt</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr  dirname/</span></span><br><span class=\"line\">---------------- dirname/firstdir</span><br><span class=\"line\">---------------- dirname/files.txt</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lsattr -Ra dirname/</span></span><br><span class=\"line\">-----a---------- dirname/.</span><br><span class=\"line\">---------------- dirname/..</span><br><span class=\"line\">---------------- dirname/firstdir</span><br><span class=\"line\"></span><br><span class=\"line\">dirname/firstdir:</span><br><span class=\"line\">---------------- dirname/firstdir/.</span><br><span class=\"line\">-----a---------- dirname/firstdir/..</span><br><span class=\"line\">---------------- dirname/firstdir/secdir</span><br><span class=\"line\"></span><br><span class=\"line\">dirname/firstdir/secdir:</span><br><span class=\"line\">---------------- dirname/firstdir/secdir/.</span><br><span class=\"line\">---------------- dirname/firstdir/secdir/..</span><br><span class=\"line\"></span><br><span class=\"line\">---------------- dirname/firstdir/file1.txt</span><br><span class=\"line\"></span><br><span class=\"line\">---------------- dirname/files.txt</span><br><span class=\"line\">---------------- dirname/.file2.txt</span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->"},{"title":"Centos7系列:文件和目录权限(二)","author":"Evobot","abbrlink":"a0538766","date":"2018-03-29T15:33:22.000Z","image":null,"_content":"\n\n\n主要介绍了Linux特殊权限**set_uid**、**set_gid**和**stick_bit**的用法和作用，以及软链接和硬链接的区别和命令的用法。\n\n<!-- more -->\n\n---\n\n# 特殊权限\n## **set_uid**\n- `set_uid`使用于二进制可执行文件，可以让其他用户在执行文件时，拥有文件所有者的权限，例如`passwd`命令：\n```bash\n[root@localhost ~]# ls -l /usr/bin/passwd \n-rwsr-xr-x. 1 root root 27832 6月  10 2014 /usr/bin/passwd\n```\n- 所有者原来的\"x\"权限位上的\"s\"即是`set_uid`权限，让文件具有`set_uid`权限的命令为`chmod u+s filename`,例如下面让`ls`命令具有`set_uid`权限:\n```bash\n[lux@localhost ~]$ ls /root/\nls: 无法打开目录/root/: 权限不够\n[root@localhost ~]# ls -l /usr/bin/ls\n-rwxr-xr-x. 1 root root 117656 11月  6 2016 /usr/bin/ls\n[root@localhost ~]# chmod u+s !$\nchmod u+s /usr/bin/ls\n[root@localhost ~]# ls -l /usr/bin/ls\n-rwsr-xr-x. 1 root root 117656 11月  6 2016 /usr/bin/ls\n[lux@localhost ~]$ ls /root/\nanaconda-ks.cfg  dirname  files.ini  xxx.ini\n```\n- 另一种方式是`chmod u=rws filename`命令，这样得到的**set_uid**权限为大写的\"S\"，是因为修改权限时，没有赋予\"x\"权限，但是并不影响命令的执行效果，因为\"S\"本身具有执行权限，并且文件的执行所使用的权限在文件的其他人权限上具有\"x\"权限。若需要变成小写\"s\",增加\"x\"权限即可：`chmod u+x filename`\n```bash\n[root@localhost ~]# chmod u=rws /usr/bin/ls\n[root@localhost ~]# ls -l /usr/bin/ls\n-rwSr-xr-x. 1 root root 117656 11月  6 2016 /usr/bin/ls\n```\n- 删除文件的**set_uid**权限，使用命令`chmod u-s filename`\n\n## **set_gid**\n- **set_gid**用来给文件(二进制可执行)或者目录增加\"s\"权限，使得其他用户在使用文件或者目录时，具有文件、目录所属组的权限。\n- 当目录被设置了**set_gid**时，任何用户在目录下创建文件或者目录都和父目录具有相同的组。\n- 给文件或者目录增加**set_uid**权限，使用命令`chmod g+s [files|dir]`,例如：\n```bash\n[root@localhost ~]# chmod g+s dirname/\n[root@localhost ~]# ls -dl dirname/\ndrwxr-sr-x. 3 root lux 101 10月 25 23:23 dirname/\n[root@localhost ~]# ls -l dirname/\n总用量 0\n-rw-r--r--. 1 root lux  0 10月 25 23:17 files.txt\ndrwxr-xr-x. 3 root lux 37 10月 25 23:21 firstdir\n[root@localhost ~]# cd dirname/\n[root@localhost dirname]# touch file2.txt\n[root@localhost dirname]# ls -l file2.txt \n-rw-r--r--. 1 root lux 0 10月 26 22:59 file2.txt\n[root@localhost dirname]# mkdir dir2\n[root@localhost dirname]# ls -dl dir2/\ndrwxr-sr-x. 2 root lux 6 10月 26 23:04 dir2/\n```\n- **set_gid**作用于文件时，与**set_uid**功能一样，其他用户对文件具有文件所属组的权限。\n- 删除**set_git**权限使用`chmod g-s [file|dir]`。\n\n## **stick_bit**\n- **stick_bit**是防删除位，在linux系统中，tmp目录就具有**stick_bit**权限，是指除root外，其他用户无法删除目录下的文件。\n- 因为文件是否能够被删除，取决于文件所在的目录是否具有写权限，所以**stick_bit**作用于目录，使用`chmod o+t dirname`来增加权限，\n```bash\n[root@localhost /]# ls -ld /tmp/\ndrwxrwxrwt. 9 root root 276 10月 20 23:23 /tmp/\n[root@localhost /]# cd /tmp/\n[root@localhost tmp]# ls -l\n总用量 4\n-rw-------. 1 root root 1422 10月 20 23:23 anaconda-ks.cfg\ndrwx------. 3 root root   17 10月 20 22:56 systemd-private-b843e5ed2c5a4150a3066f84f601a287-vmtoolsd.service-gmqqZM\ndrwx------. 3 root root   17 8月  25 22:42 systemd-private-f71033e5617942ef84a31b21fe152372-vmtoolsd.service-p491Gw\n[root@localhost tmp]# su lux\n[lux@localhost tmp]$ touch file.txt\n[lux@localhost tmp]$ ll\n总用量 4\n-rw-------. 1 root root 1422 10月 20 23:23 anaconda-ks.cfg\n-rw-rw-r--. 1 lux  lux     0 10月 26 23:21 file.txt\ndrwx------. 3 root root   17 10月 20 22:56 systemd-private-b843e5ed2c5a4150a3066f84f601a287-vmtoolsd.service-gmqqZM\ndrwx------. 3 root root   17 8月  25 22:42 systemd-private-f71033e5617942ef84a31b21fe152372-vmtoolsd.service-p491Gw\n[lux@localhost tmp]$ exit\nexit\n[root@localhost tmp]# su colxu\n[colxu@localhost tmp]$ ll\n总用量 4\n-rw-------. 1 root root 1422 10月 20 23:23 anaconda-ks.cfg\n-rw-rw-r--. 1 lux  lux     0 10月 26 23:21 file.txt\ndrwx------. 3 root root   17 10月 20 22:56 systemd-private-b843e5ed2c5a4150a3066f84f601a287-vmtoolsd.service-gmqqZM\ndrwx------. 3 root root   17 8月  25 22:42 systemd-private-f71033e5617942ef84a31b21fe152372-vmtoolsd.service-p491Gw\n[colxu@localhost tmp]$ rm -rf file.txt \nrm: 无法删除\"file.txt\": 不允许的操作\n```\n---\n\n# 链接文件\n\n## 软连接文件\n- 软连接的含义相当于快捷方式，是将一个链接文件，指向所链接的实际文件上，同样对于目录，也可以创建软链接文件。\n- 创建软链接使用`ln -s srcfile targetfile`命令.\n```bash\n[root@localhost ~]# ls -l /usr/bin/python\nlrwxrwxrwx. 1 root root 7 8月  19 07:20 /usr/bin/python -> python2\n```\n- 创建软链接一定要使用绝对路径，否则当软链接文件被移动或复制后，会无法找到源文件。\n```bash\n[root@localhost ~]# ln -s /var/log/yum.log /root/yumlog\n[root@localhost ~]# ll yumlog \nlrwxrwxrwx. 1 root root 16 10月 27 21:20 yumlog -> /var/log/yum.log\n```\n\n\n## 硬链接文件\n- 硬链接只支持为文件创建链接，无法为目录创建链接\n- 硬链接的特性是创建一个inode号与文件相同的文件，两个文件相互为硬链接，并且删除一个硬链接文件，并不影响其他相同inode号硬链接文件的使用。\n- 硬链接并不会多占用磁盘空间，因为其inode号是同一个，inode记录了文件的所有信息。\n- 创建硬链接文件，不能跨磁盘分区创建。因为分区之间拥有各自独立的inode号，两个分区会存在同样的inode号。\n- 使用`ln srcfile targetfile`来创建硬链接文件。\n```bash\n[root@localhost ~]# dd if=/dev/zero of=/root/image.img bs=1M count=128\n记录了128+0 的读入\n记录了128+0 的写出\n134217728字节(134 MB)已复制，3.59043 秒，37.4 MB/秒\n[root@localhost ~]# ll image.img \n-rw-r--r--. 1 root root 134217728 10月 27 21:37 image.img\n[root@localhost ~]# ln image.img virtual.img\n[root@localhost ~]# ll image.img virtual.img \n-rw-r--r--. 2 root root 134217728 10月 27 21:37 image.img\n-rw-r--r--. 2 root root 134217728 10月 27 21:37 virtual.img\n[root@localhost ~]# ls -i image.img virtual.img \n75 image.img  75 virtual.img\n[root@localhost ~]# ln /boot/initrd-plymouth.img  boot.img\nln: 无法创建硬链接\"boot.img\" => \"/boot/initrd-plymouth.img\": 无效的跨设备连接\n```\n---\n\n","source":"_posts/Centos7系列-文件和目录权限(二).md","raw":"---\ntitle: 'Centos7系列:文件和目录权限(二)'\nauthor: Evobot\nabbrlink: a0538766\ndate: 2018-03-29 23:33:22\ncategories: Centos7\ntags: [Linux, Centos]\nimage:\n---\n\n\n\n主要介绍了Linux特殊权限**set_uid**、**set_gid**和**stick_bit**的用法和作用，以及软链接和硬链接的区别和命令的用法。\n\n<!-- more -->\n\n---\n\n# 特殊权限\n## **set_uid**\n- `set_uid`使用于二进制可执行文件，可以让其他用户在执行文件时，拥有文件所有者的权限，例如`passwd`命令：\n```bash\n[root@localhost ~]# ls -l /usr/bin/passwd \n-rwsr-xr-x. 1 root root 27832 6月  10 2014 /usr/bin/passwd\n```\n- 所有者原来的\"x\"权限位上的\"s\"即是`set_uid`权限，让文件具有`set_uid`权限的命令为`chmod u+s filename`,例如下面让`ls`命令具有`set_uid`权限:\n```bash\n[lux@localhost ~]$ ls /root/\nls: 无法打开目录/root/: 权限不够\n[root@localhost ~]# ls -l /usr/bin/ls\n-rwxr-xr-x. 1 root root 117656 11月  6 2016 /usr/bin/ls\n[root@localhost ~]# chmod u+s !$\nchmod u+s /usr/bin/ls\n[root@localhost ~]# ls -l /usr/bin/ls\n-rwsr-xr-x. 1 root root 117656 11月  6 2016 /usr/bin/ls\n[lux@localhost ~]$ ls /root/\nanaconda-ks.cfg  dirname  files.ini  xxx.ini\n```\n- 另一种方式是`chmod u=rws filename`命令，这样得到的**set_uid**权限为大写的\"S\"，是因为修改权限时，没有赋予\"x\"权限，但是并不影响命令的执行效果，因为\"S\"本身具有执行权限，并且文件的执行所使用的权限在文件的其他人权限上具有\"x\"权限。若需要变成小写\"s\",增加\"x\"权限即可：`chmod u+x filename`\n```bash\n[root@localhost ~]# chmod u=rws /usr/bin/ls\n[root@localhost ~]# ls -l /usr/bin/ls\n-rwSr-xr-x. 1 root root 117656 11月  6 2016 /usr/bin/ls\n```\n- 删除文件的**set_uid**权限，使用命令`chmod u-s filename`\n\n## **set_gid**\n- **set_gid**用来给文件(二进制可执行)或者目录增加\"s\"权限，使得其他用户在使用文件或者目录时，具有文件、目录所属组的权限。\n- 当目录被设置了**set_gid**时，任何用户在目录下创建文件或者目录都和父目录具有相同的组。\n- 给文件或者目录增加**set_uid**权限，使用命令`chmod g+s [files|dir]`,例如：\n```bash\n[root@localhost ~]# chmod g+s dirname/\n[root@localhost ~]# ls -dl dirname/\ndrwxr-sr-x. 3 root lux 101 10月 25 23:23 dirname/\n[root@localhost ~]# ls -l dirname/\n总用量 0\n-rw-r--r--. 1 root lux  0 10月 25 23:17 files.txt\ndrwxr-xr-x. 3 root lux 37 10月 25 23:21 firstdir\n[root@localhost ~]# cd dirname/\n[root@localhost dirname]# touch file2.txt\n[root@localhost dirname]# ls -l file2.txt \n-rw-r--r--. 1 root lux 0 10月 26 22:59 file2.txt\n[root@localhost dirname]# mkdir dir2\n[root@localhost dirname]# ls -dl dir2/\ndrwxr-sr-x. 2 root lux 6 10月 26 23:04 dir2/\n```\n- **set_gid**作用于文件时，与**set_uid**功能一样，其他用户对文件具有文件所属组的权限。\n- 删除**set_git**权限使用`chmod g-s [file|dir]`。\n\n## **stick_bit**\n- **stick_bit**是防删除位，在linux系统中，tmp目录就具有**stick_bit**权限，是指除root外，其他用户无法删除目录下的文件。\n- 因为文件是否能够被删除，取决于文件所在的目录是否具有写权限，所以**stick_bit**作用于目录，使用`chmod o+t dirname`来增加权限，\n```bash\n[root@localhost /]# ls -ld /tmp/\ndrwxrwxrwt. 9 root root 276 10月 20 23:23 /tmp/\n[root@localhost /]# cd /tmp/\n[root@localhost tmp]# ls -l\n总用量 4\n-rw-------. 1 root root 1422 10月 20 23:23 anaconda-ks.cfg\ndrwx------. 3 root root   17 10月 20 22:56 systemd-private-b843e5ed2c5a4150a3066f84f601a287-vmtoolsd.service-gmqqZM\ndrwx------. 3 root root   17 8月  25 22:42 systemd-private-f71033e5617942ef84a31b21fe152372-vmtoolsd.service-p491Gw\n[root@localhost tmp]# su lux\n[lux@localhost tmp]$ touch file.txt\n[lux@localhost tmp]$ ll\n总用量 4\n-rw-------. 1 root root 1422 10月 20 23:23 anaconda-ks.cfg\n-rw-rw-r--. 1 lux  lux     0 10月 26 23:21 file.txt\ndrwx------. 3 root root   17 10月 20 22:56 systemd-private-b843e5ed2c5a4150a3066f84f601a287-vmtoolsd.service-gmqqZM\ndrwx------. 3 root root   17 8月  25 22:42 systemd-private-f71033e5617942ef84a31b21fe152372-vmtoolsd.service-p491Gw\n[lux@localhost tmp]$ exit\nexit\n[root@localhost tmp]# su colxu\n[colxu@localhost tmp]$ ll\n总用量 4\n-rw-------. 1 root root 1422 10月 20 23:23 anaconda-ks.cfg\n-rw-rw-r--. 1 lux  lux     0 10月 26 23:21 file.txt\ndrwx------. 3 root root   17 10月 20 22:56 systemd-private-b843e5ed2c5a4150a3066f84f601a287-vmtoolsd.service-gmqqZM\ndrwx------. 3 root root   17 8月  25 22:42 systemd-private-f71033e5617942ef84a31b21fe152372-vmtoolsd.service-p491Gw\n[colxu@localhost tmp]$ rm -rf file.txt \nrm: 无法删除\"file.txt\": 不允许的操作\n```\n---\n\n# 链接文件\n\n## 软连接文件\n- 软连接的含义相当于快捷方式，是将一个链接文件，指向所链接的实际文件上，同样对于目录，也可以创建软链接文件。\n- 创建软链接使用`ln -s srcfile targetfile`命令.\n```bash\n[root@localhost ~]# ls -l /usr/bin/python\nlrwxrwxrwx. 1 root root 7 8月  19 07:20 /usr/bin/python -> python2\n```\n- 创建软链接一定要使用绝对路径，否则当软链接文件被移动或复制后，会无法找到源文件。\n```bash\n[root@localhost ~]# ln -s /var/log/yum.log /root/yumlog\n[root@localhost ~]# ll yumlog \nlrwxrwxrwx. 1 root root 16 10月 27 21:20 yumlog -> /var/log/yum.log\n```\n\n\n## 硬链接文件\n- 硬链接只支持为文件创建链接，无法为目录创建链接\n- 硬链接的特性是创建一个inode号与文件相同的文件，两个文件相互为硬链接，并且删除一个硬链接文件，并不影响其他相同inode号硬链接文件的使用。\n- 硬链接并不会多占用磁盘空间，因为其inode号是同一个，inode记录了文件的所有信息。\n- 创建硬链接文件，不能跨磁盘分区创建。因为分区之间拥有各自独立的inode号，两个分区会存在同样的inode号。\n- 使用`ln srcfile targetfile`来创建硬链接文件。\n```bash\n[root@localhost ~]# dd if=/dev/zero of=/root/image.img bs=1M count=128\n记录了128+0 的读入\n记录了128+0 的写出\n134217728字节(134 MB)已复制，3.59043 秒，37.4 MB/秒\n[root@localhost ~]# ll image.img \n-rw-r--r--. 1 root root 134217728 10月 27 21:37 image.img\n[root@localhost ~]# ln image.img virtual.img\n[root@localhost ~]# ll image.img virtual.img \n-rw-r--r--. 2 root root 134217728 10月 27 21:37 image.img\n-rw-r--r--. 2 root root 134217728 10月 27 21:37 virtual.img\n[root@localhost ~]# ls -i image.img virtual.img \n75 image.img  75 virtual.img\n[root@localhost ~]# ln /boot/initrd-plymouth.img  boot.img\nln: 无法创建硬链接\"boot.img\" => \"/boot/initrd-plymouth.img\": 无效的跨设备连接\n```\n---\n\n","slug":"Centos7系列-文件和目录权限(二)","published":1,"updated":"2018-06-02T13:01:29.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gaz8k000yu1jxrddoepsx","content":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>主要介绍了Linux特殊权限<strong>set_uid</strong>、<strong>set_gid</strong>和<strong>stick_bit</strong>的用法和作用，以及软链接和硬链接的区别和命令的用法。</p><a id=\"more\"></a><hr><h1 id=\"特殊权限\"><a href=\"#特殊权限\" class=\"headerlink\" title=\"特殊权限\"></a>特殊权限</h1><h2 id=\"set-uid\"><a href=\"#set-uid\" class=\"headerlink\" title=\"set_uid\"></a><strong>set_uid</strong></h2><ul><li><p><code>set_uid</code>使用于二进制可执行文件，可以让其他用户在执行文件时，拥有文件所有者的权限，例如<code>passwd</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -l /usr/bin/passwd </span></span><br><span class=\"line\">-rwsr-xr-x. 1 root root 27832 6月  10 2014 /usr/bin/passwd</span><br></pre></td></tr></table></figure></li><li><p>所有者原来的”x”权限位上的”s”即是<code>set_uid</code>权限，让文件具有<code>set_uid</code>权限的命令为<code>chmod u+s filename</code>,例如下面让<code>ls</code>命令具有<code>set_uid</code>权限:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@localhost ~]$ ls /root/</span><br><span class=\"line\">ls: 无法打开目录/root/: 权限不够</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -l /usr/bin/ls</span></span><br><span class=\"line\">-rwxr-xr-x. 1 root root 117656 11月  6 2016 /usr/bin/ls</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chmod u+s !$</span></span><br><span class=\"line\">chmod u+s /usr/bin/ls</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -l /usr/bin/ls</span></span><br><span class=\"line\">-rwsr-xr-x. 1 root root 117656 11月  6 2016 /usr/bin/ls</span><br><span class=\"line\">[lux@localhost ~]$ ls /root/</span><br><span class=\"line\">anaconda-ks.cfg  dirname  files.ini  xxx.ini</span><br></pre></td></tr></table></figure></li><li><p>另一种方式是<code>chmod u=rws filename</code>命令，这样得到的<strong>set_uid</strong>权限为大写的”S”，是因为修改权限时，没有赋予”x”权限，但是并不影响命令的执行效果，因为”S”本身具有执行权限，并且文件的执行所使用的权限在文件的其他人权限上具有”x”权限。若需要变成小写”s”,增加”x”权限即可：<code>chmod u+x filename</code></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chmod u=rws /usr/bin/ls</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -l /usr/bin/ls</span></span><br><span class=\"line\">-rwSr-xr-x. 1 root root 117656 11月  6 2016 /usr/bin/ls</span><br></pre></td></tr></table></figure></li><li><p>删除文件的<strong>set_uid</strong>权限，使用命令<code>chmod u-s filename</code></p></li></ul><h2 id=\"set-gid\"><a href=\"#set-gid\" class=\"headerlink\" title=\"set_gid\"></a><strong>set_gid</strong></h2><ul><li><strong>set_gid</strong>用来给文件(二进制可执行)或者目录增加”s”权限，使得其他用户在使用文件或者目录时，具有文件、目录所属组的权限。</li><li>当目录被设置了<strong>set_gid</strong>时，任何用户在目录下创建文件或者目录都和父目录具有相同的组。</li><li><p>给文件或者目录增加<strong>set_uid</strong>权限，使用命令<code>chmod g+s [files|dir]</code>,例如：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chmod g+s dirname/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -dl dirname/</span></span><br><span class=\"line\">drwxr-sr-x. 3 root lux 101 10月 25 23:23 dirname/</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -l dirname/</span></span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">-rw-r--r--. 1 root lux  0 10月 25 23:17 files.txt</span><br><span class=\"line\">drwxr-xr-x. 3 root lux 37 10月 25 23:21 firstdir</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cd dirname/</span></span><br><span class=\"line\">[root@localhost dirname]<span class=\"comment\"># touch file2.txt</span></span><br><span class=\"line\">[root@localhost dirname]<span class=\"comment\"># ls -l file2.txt </span></span><br><span class=\"line\">-rw-r--r--. 1 root lux 0 10月 26 22:59 file2.txt</span><br><span class=\"line\">[root@localhost dirname]<span class=\"comment\"># mkdir dir2</span></span><br><span class=\"line\">[root@localhost dirname]<span class=\"comment\"># ls -dl dir2/</span></span><br><span class=\"line\">drwxr-sr-x. 2 root lux 6 10月 26 23:04 dir2/</span><br></pre></td></tr></table></figure></li><li><p><strong>set_gid</strong>作用于文件时，与<strong>set_uid</strong>功能一样，其他用户对文件具有文件所属组的权限。</p></li><li>删除<strong>set_git</strong>权限使用<code>chmod g-s [file|dir]</code>。</li></ul><h2 id=\"stick-bit\"><a href=\"#stick-bit\" class=\"headerlink\" title=\"stick_bit\"></a><strong>stick_bit</strong></h2><ul><li><strong>stick_bit</strong>是防删除位，在linux系统中，tmp目录就具有<strong>stick_bit</strong>权限，是指除root外，其他用户无法删除目录下的文件。</li><li>因为文件是否能够被删除，取决于文件所在的目录是否具有写权限，所以<strong>stick_bit</strong>作用于目录，使用<code>chmod o+t dirname</code>来增加权限，<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost /]<span class=\"comment\"># ls -ld /tmp/</span></span><br><span class=\"line\">drwxrwxrwt. 9 root root 276 10月 20 23:23 /tmp/</span><br><span class=\"line\">[root@localhost /]<span class=\"comment\"># cd /tmp/</span></span><br><span class=\"line\">[root@localhost tmp]<span class=\"comment\"># ls -l</span></span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">-rw-------. 1 root root 1422 10月 20 23:23 anaconda-ks.cfg</span><br><span class=\"line\">drwx------. 3 root root   17 10月 20 22:56 systemd-private-b843e5ed2c5a4150a3066f84f601a287-vmtoolsd.service-gmqqZM</span><br><span class=\"line\">drwx------. 3 root root   17 8月  25 22:42 systemd-private-f71033e5617942ef84a31b21fe152372-vmtoolsd.service-p491Gw</span><br><span class=\"line\">[root@localhost tmp]<span class=\"comment\"># su lux</span></span><br><span class=\"line\">[lux@localhost tmp]$ touch file.txt</span><br><span class=\"line\">[lux@localhost tmp]$ ll</span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">-rw-------. 1 root root 1422 10月 20 23:23 anaconda-ks.cfg</span><br><span class=\"line\">-rw-rw-r--. 1 lux  lux     0 10月 26 23:21 file.txt</span><br><span class=\"line\">drwx------. 3 root root   17 10月 20 22:56 systemd-private-b843e5ed2c5a4150a3066f84f601a287-vmtoolsd.service-gmqqZM</span><br><span class=\"line\">drwx------. 3 root root   17 8月  25 22:42 systemd-private-f71033e5617942ef84a31b21fe152372-vmtoolsd.service-p491Gw</span><br><span class=\"line\">[lux@localhost tmp]$ <span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">[root@localhost tmp]<span class=\"comment\"># su colxu</span></span><br><span class=\"line\">[colxu@localhost tmp]$ ll</span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">-rw-------. 1 root root 1422 10月 20 23:23 anaconda-ks.cfg</span><br><span class=\"line\">-rw-rw-r--. 1 lux  lux     0 10月 26 23:21 file.txt</span><br><span class=\"line\">drwx------. 3 root root   17 10月 20 22:56 systemd-private-b843e5ed2c5a4150a3066f84f601a287-vmtoolsd.service-gmqqZM</span><br><span class=\"line\">drwx------. 3 root root   17 8月  25 22:42 systemd-private-f71033e5617942ef84a31b21fe152372-vmtoolsd.service-p491Gw</span><br><span class=\"line\">[colxu@localhost tmp]$ rm -rf file.txt </span><br><span class=\"line\">rm: 无法删除<span class=\"string\">\"file.txt\"</span>: 不允许的操作</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id=\"链接文件\"><a href=\"#链接文件\" class=\"headerlink\" title=\"链接文件\"></a>链接文件</h1><h2 id=\"软连接文件\"><a href=\"#软连接文件\" class=\"headerlink\" title=\"软连接文件\"></a>软连接文件</h2><ul><li>软连接的含义相当于快捷方式，是将一个链接文件，指向所链接的实际文件上，同样对于目录，也可以创建软链接文件。</li><li><p>创建软链接使用<code>ln -s srcfile targetfile</code>命令.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -l /usr/bin/python</span></span><br><span class=\"line\">lrwxrwxrwx. 1 root root 7 8月  19 07:20 /usr/bin/python -&gt; python2</span><br></pre></td></tr></table></figure></li><li><p>创建软链接一定要使用绝对路径，否则当软链接文件被移动或复制后，会无法找到源文件。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ln -s /var/log/yum.log /root/yumlog</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll yumlog </span></span><br><span class=\"line\">lrwxrwxrwx. 1 root root 16 10月 27 21:20 yumlog -&gt; /var/<span class=\"built_in\">log</span>/yum.log</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"硬链接文件\"><a href=\"#硬链接文件\" class=\"headerlink\" title=\"硬链接文件\"></a>硬链接文件</h2><ul><li>硬链接只支持为文件创建链接，无法为目录创建链接</li><li>硬链接的特性是创建一个inode号与文件相同的文件，两个文件相互为硬链接，并且删除一个硬链接文件，并不影响其他相同inode号硬链接文件的使用。</li><li>硬链接并不会多占用磁盘空间，因为其inode号是同一个，inode记录了文件的所有信息。</li><li>创建硬链接文件，不能跨磁盘分区创建。因为分区之间拥有各自独立的inode号，两个分区会存在同样的inode号。</li><li>使用<code>ln srcfile targetfile</code>来创建硬链接文件。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># dd if=/dev/zero of=/root/image.img bs=1M count=128</span></span><br><span class=\"line\">记录了128+0 的读入</span><br><span class=\"line\">记录了128+0 的写出</span><br><span class=\"line\">134217728字节(134 MB)已复制，3.59043 秒，37.4 MB/秒</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll image.img </span></span><br><span class=\"line\">-rw-r--r--. 1 root root 134217728 10月 27 21:37 image.img</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ln image.img virtual.img</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll image.img virtual.img </span></span><br><span class=\"line\">-rw-r--r--. 2 root root 134217728 10月 27 21:37 image.img</span><br><span class=\"line\">-rw-r--r--. 2 root root 134217728 10月 27 21:37 virtual.img</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -i image.img virtual.img </span></span><br><span class=\"line\">75 image.img  75 virtual.img</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ln /boot/initrd-plymouth.img  boot.img</span></span><br><span class=\"line\">ln: 无法创建硬链接<span class=\"string\">\"boot.img\"</span> =&gt; <span class=\"string\">\"/boot/initrd-plymouth.img\"</span>: 无效的跨设备连接</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>主要介绍了Linux特殊权限<strong>set_uid</strong>、<strong>set_gid</strong>和<strong>stick_bit</strong>的用法和作用，以及软链接和硬链接的区别和命令的用法。</p>","more":"<hr><h1 id=\"特殊权限\"><a href=\"#特殊权限\" class=\"headerlink\" title=\"特殊权限\"></a>特殊权限</h1><h2 id=\"set-uid\"><a href=\"#set-uid\" class=\"headerlink\" title=\"set_uid\"></a><strong>set_uid</strong></h2><ul><li><p><code>set_uid</code>使用于二进制可执行文件，可以让其他用户在执行文件时，拥有文件所有者的权限，例如<code>passwd</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -l /usr/bin/passwd </span></span><br><span class=\"line\">-rwsr-xr-x. 1 root root 27832 6月  10 2014 /usr/bin/passwd</span><br></pre></td></tr></table></figure></li><li><p>所有者原来的”x”权限位上的”s”即是<code>set_uid</code>权限，让文件具有<code>set_uid</code>权限的命令为<code>chmod u+s filename</code>,例如下面让<code>ls</code>命令具有<code>set_uid</code>权限:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@localhost ~]$ ls /root/</span><br><span class=\"line\">ls: 无法打开目录/root/: 权限不够</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -l /usr/bin/ls</span></span><br><span class=\"line\">-rwxr-xr-x. 1 root root 117656 11月  6 2016 /usr/bin/ls</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chmod u+s !$</span></span><br><span class=\"line\">chmod u+s /usr/bin/ls</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -l /usr/bin/ls</span></span><br><span class=\"line\">-rwsr-xr-x. 1 root root 117656 11月  6 2016 /usr/bin/ls</span><br><span class=\"line\">[lux@localhost ~]$ ls /root/</span><br><span class=\"line\">anaconda-ks.cfg  dirname  files.ini  xxx.ini</span><br></pre></td></tr></table></figure></li><li><p>另一种方式是<code>chmod u=rws filename</code>命令，这样得到的<strong>set_uid</strong>权限为大写的”S”，是因为修改权限时，没有赋予”x”权限，但是并不影响命令的执行效果，因为”S”本身具有执行权限，并且文件的执行所使用的权限在文件的其他人权限上具有”x”权限。若需要变成小写”s”,增加”x”权限即可：<code>chmod u+x filename</code></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chmod u=rws /usr/bin/ls</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -l /usr/bin/ls</span></span><br><span class=\"line\">-rwSr-xr-x. 1 root root 117656 11月  6 2016 /usr/bin/ls</span><br></pre></td></tr></table></figure></li><li><p>删除文件的<strong>set_uid</strong>权限，使用命令<code>chmod u-s filename</code></p></li></ul><h2 id=\"set-gid\"><a href=\"#set-gid\" class=\"headerlink\" title=\"set_gid\"></a><strong>set_gid</strong></h2><ul><li><strong>set_gid</strong>用来给文件(二进制可执行)或者目录增加”s”权限，使得其他用户在使用文件或者目录时，具有文件、目录所属组的权限。</li><li>当目录被设置了<strong>set_gid</strong>时，任何用户在目录下创建文件或者目录都和父目录具有相同的组。</li><li><p>给文件或者目录增加<strong>set_uid</strong>权限，使用命令<code>chmod g+s [files|dir]</code>,例如：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chmod g+s dirname/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -dl dirname/</span></span><br><span class=\"line\">drwxr-sr-x. 3 root lux 101 10月 25 23:23 dirname/</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -l dirname/</span></span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">-rw-r--r--. 1 root lux  0 10月 25 23:17 files.txt</span><br><span class=\"line\">drwxr-xr-x. 3 root lux 37 10月 25 23:21 firstdir</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cd dirname/</span></span><br><span class=\"line\">[root@localhost dirname]<span class=\"comment\"># touch file2.txt</span></span><br><span class=\"line\">[root@localhost dirname]<span class=\"comment\"># ls -l file2.txt </span></span><br><span class=\"line\">-rw-r--r--. 1 root lux 0 10月 26 22:59 file2.txt</span><br><span class=\"line\">[root@localhost dirname]<span class=\"comment\"># mkdir dir2</span></span><br><span class=\"line\">[root@localhost dirname]<span class=\"comment\"># ls -dl dir2/</span></span><br><span class=\"line\">drwxr-sr-x. 2 root lux 6 10月 26 23:04 dir2/</span><br></pre></td></tr></table></figure></li><li><p><strong>set_gid</strong>作用于文件时，与<strong>set_uid</strong>功能一样，其他用户对文件具有文件所属组的权限。</p></li><li>删除<strong>set_git</strong>权限使用<code>chmod g-s [file|dir]</code>。</li></ul><h2 id=\"stick-bit\"><a href=\"#stick-bit\" class=\"headerlink\" title=\"stick_bit\"></a><strong>stick_bit</strong></h2><ul><li><strong>stick_bit</strong>是防删除位，在linux系统中，tmp目录就具有<strong>stick_bit</strong>权限，是指除root外，其他用户无法删除目录下的文件。</li><li>因为文件是否能够被删除，取决于文件所在的目录是否具有写权限，所以<strong>stick_bit</strong>作用于目录，使用<code>chmod o+t dirname</code>来增加权限，<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost /]<span class=\"comment\"># ls -ld /tmp/</span></span><br><span class=\"line\">drwxrwxrwt. 9 root root 276 10月 20 23:23 /tmp/</span><br><span class=\"line\">[root@localhost /]<span class=\"comment\"># cd /tmp/</span></span><br><span class=\"line\">[root@localhost tmp]<span class=\"comment\"># ls -l</span></span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">-rw-------. 1 root root 1422 10月 20 23:23 anaconda-ks.cfg</span><br><span class=\"line\">drwx------. 3 root root   17 10月 20 22:56 systemd-private-b843e5ed2c5a4150a3066f84f601a287-vmtoolsd.service-gmqqZM</span><br><span class=\"line\">drwx------. 3 root root   17 8月  25 22:42 systemd-private-f71033e5617942ef84a31b21fe152372-vmtoolsd.service-p491Gw</span><br><span class=\"line\">[root@localhost tmp]<span class=\"comment\"># su lux</span></span><br><span class=\"line\">[lux@localhost tmp]$ touch file.txt</span><br><span class=\"line\">[lux@localhost tmp]$ ll</span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">-rw-------. 1 root root 1422 10月 20 23:23 anaconda-ks.cfg</span><br><span class=\"line\">-rw-rw-r--. 1 lux  lux     0 10月 26 23:21 file.txt</span><br><span class=\"line\">drwx------. 3 root root   17 10月 20 22:56 systemd-private-b843e5ed2c5a4150a3066f84f601a287-vmtoolsd.service-gmqqZM</span><br><span class=\"line\">drwx------. 3 root root   17 8月  25 22:42 systemd-private-f71033e5617942ef84a31b21fe152372-vmtoolsd.service-p491Gw</span><br><span class=\"line\">[lux@localhost tmp]$ <span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">[root@localhost tmp]<span class=\"comment\"># su colxu</span></span><br><span class=\"line\">[colxu@localhost tmp]$ ll</span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">-rw-------. 1 root root 1422 10月 20 23:23 anaconda-ks.cfg</span><br><span class=\"line\">-rw-rw-r--. 1 lux  lux     0 10月 26 23:21 file.txt</span><br><span class=\"line\">drwx------. 3 root root   17 10月 20 22:56 systemd-private-b843e5ed2c5a4150a3066f84f601a287-vmtoolsd.service-gmqqZM</span><br><span class=\"line\">drwx------. 3 root root   17 8月  25 22:42 systemd-private-f71033e5617942ef84a31b21fe152372-vmtoolsd.service-p491Gw</span><br><span class=\"line\">[colxu@localhost tmp]$ rm -rf file.txt </span><br><span class=\"line\">rm: 无法删除<span class=\"string\">\"file.txt\"</span>: 不允许的操作</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id=\"链接文件\"><a href=\"#链接文件\" class=\"headerlink\" title=\"链接文件\"></a>链接文件</h1><h2 id=\"软连接文件\"><a href=\"#软连接文件\" class=\"headerlink\" title=\"软连接文件\"></a>软连接文件</h2><ul><li>软连接的含义相当于快捷方式，是将一个链接文件，指向所链接的实际文件上，同样对于目录，也可以创建软链接文件。</li><li><p>创建软链接使用<code>ln -s srcfile targetfile</code>命令.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -l /usr/bin/python</span></span><br><span class=\"line\">lrwxrwxrwx. 1 root root 7 8月  19 07:20 /usr/bin/python -&gt; python2</span><br></pre></td></tr></table></figure></li><li><p>创建软链接一定要使用绝对路径，否则当软链接文件被移动或复制后，会无法找到源文件。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ln -s /var/log/yum.log /root/yumlog</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll yumlog </span></span><br><span class=\"line\">lrwxrwxrwx. 1 root root 16 10月 27 21:20 yumlog -&gt; /var/<span class=\"built_in\">log</span>/yum.log</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"硬链接文件\"><a href=\"#硬链接文件\" class=\"headerlink\" title=\"硬链接文件\"></a>硬链接文件</h2><ul><li>硬链接只支持为文件创建链接，无法为目录创建链接</li><li>硬链接的特性是创建一个inode号与文件相同的文件，两个文件相互为硬链接，并且删除一个硬链接文件，并不影响其他相同inode号硬链接文件的使用。</li><li>硬链接并不会多占用磁盘空间，因为其inode号是同一个，inode记录了文件的所有信息。</li><li>创建硬链接文件，不能跨磁盘分区创建。因为分区之间拥有各自独立的inode号，两个分区会存在同样的inode号。</li><li>使用<code>ln srcfile targetfile</code>来创建硬链接文件。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># dd if=/dev/zero of=/root/image.img bs=1M count=128</span></span><br><span class=\"line\">记录了128+0 的读入</span><br><span class=\"line\">记录了128+0 的写出</span><br><span class=\"line\">134217728字节(134 MB)已复制，3.59043 秒，37.4 MB/秒</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll image.img </span></span><br><span class=\"line\">-rw-r--r--. 1 root root 134217728 10月 27 21:37 image.img</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ln image.img virtual.img</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ll image.img virtual.img </span></span><br><span class=\"line\">-rw-r--r--. 2 root root 134217728 10月 27 21:37 image.img</span><br><span class=\"line\">-rw-r--r--. 2 root root 134217728 10月 27 21:37 virtual.img</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -i image.img virtual.img </span></span><br><span class=\"line\">75 image.img  75 virtual.img</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ln /boot/initrd-plymouth.img  boot.img</span></span><br><span class=\"line\">ln: 无法创建硬链接<span class=\"string\">\"boot.img\"</span> =&gt; <span class=\"string\">\"/boot/initrd-plymouth.img\"</span>: 无效的跨设备连接</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->"},{"title":"Centos7系列:用户及密码管理相关命令","author":"Evobot","abbrlink":"2af55eed","date":"2018-04-03T14:44:32.000Z","_content":"\n\n主要介绍`usermod`更改用户属性的命令的用法，和用户密码管理的相关知识，以及`mkpasswd`命令的用法和作用。\n\n<!--more-->\n\n----\n\n# usermod命令\n\n- `usermod`命令可以更改用户的**uid**和**gid**以及用户的家目录和shell；\n\n- 在之前的`useradd`命令中，选项`useradd -G`可以为用户添加扩展组，即用户的**gid**只有一个，但可以同时也属于其他用户组，这些用户组就是用户的扩展组；\n\n- `usermod`同样有`-G`选项，为已经存在用户添加扩展组，具体用法为`usermod -G (组名) (用户名)`：\n\n  ```bash\n  [root@evobot ~]# usermod -G evobot lux\n  [root@evobot ~]# id lux\n  uid=1001(lux) gid=1001(lux) 组=1001(lux),1002(evobot)\n  [root@evobot ~]# usermod -G grp1 lux\n  [root@evobot ~]# id lux\n  uid=1001(lux) gid=1001(lux) 组=1001(lux),1003(grp1)\n  ```\n\n- 上面的例子也可以看出，当使用`-G`选项为用户添加新的扩展组时，会替换之前的扩展组，若需要添加多个扩展组，需要一次添加多个扩展组，多个组名之间使用`,`分隔：\n\n  ```bash\n  [root@evobot ~]# usermod -G evobot,grp1 lux\n  [root@evobot ~]# id lux\n  uid=1001(lux) gid=1001(lux) 组=1001(lux),1002(evobot),1003(grp1)\n  ```\n\n# 用户密码管理\n\n## 更改密码\n\n- 用户密码管理，常用的命令时`passwd`命令，由于`passwd`命令具有`ser_uid`权限，所以普通用户也可以使用该命令更改密码；\n\n- 更改当前用户密码，直接执行`passwd`命令即可，若更改其他用户密码，则需要root用户执行`passwd`命令，用法为`passwd (username)`:\n\n  ```bash\n  [root@evobot ~]# passwd evobot \n  更改用户 evobot 的密码 。\n  新的 密码：\n  重新输入新的 密码：\n  passwd：所有的身份验证令牌已经成功更新。\n\n  [root@evobot ~]# tail /etc/shadow\n  ntp:!!:17540::::::\n  postfix:!!:17540::::::\n  chrony:!!:17540::::::\n  sshd:!!:17540::::::\n  tcpdump:!!:17540::::::\n  syslog:!!:17598::::::\n  centos:!!:17602:0:99999:7:::\n  lux:$1$AFvb7KAB$qg0IKBSFsGRDAO5XPaoYr/:17604:0:99999:7:::\n  nginx:!!:17604::::::\n  evobot:$1$ORddLa4O$eScmBtXm8sIosft7XETeO1:17624:0:99999:7:::\n  ```\n\n- 为用户更改密码后，在`/etc/shadow`文件中就可以看到用户的密码位多了加密的字符串，而没有密码的用户，密码位是两个`!`；\n\n- 在`/etc/shadow`密码文件中，还有一些用户的密码位是`*`号，这表示用户的密码是无法使用、被锁定的：\n\n  ```bash\n  [root@evobot ~]# head /etc/shadow\n  root:$1$MNOcZHup$MrsJJ3KwxTERWrlgmpjcC0:17602:0:99999:7:::\n  bin:*:17110:0:99999:7:::\n  daemon:*:17110:0:99999:7:::\n  adm:*:17110:0:99999:7:::\n  lp:*:17110:0:99999:7:::\n  sync:*:17110:0:99999:7:::\n  shutdown:*:17110:0:99999:7:::\n  halt:*:17110:0:99999:7:::\n  mail:*:17110:0:99999:7:::\n  operator:*:17110:0:99999:7:::\n  ```\n\n\n## 锁定账户\n\n- `passwd`的`-l`选项，可以锁定用户，用户被锁定后，在密码文件`/etc/shadow`中，密码位字符串前面会加上`!!`：\n\n  ```bash\n  [root@evobot ~]# passwd -l evobot \n  锁定用户 evobot 的密码 。\n  passwd: 操作成功\n  [root@evobot ~]# tail /etc/shadow\n  ntp:!!:17540::::::\n  postfix:!!:17540::::::\n  chrony:!!:17540::::::\n  sshd:!!:17540::::::\n  tcpdump:!!:17540::::::\n  syslog:!!:17598::::::\n  centos:!!:17602:0:99999:7:::\n  lux:$1$AFvb7KAB$qg0IKBSFsGRDAO5XPaoYr/:17604:0:99999:7:::\n  nginx:!!:17604::::::\n  evobot:!!$1$ORddLa4O$eScmBtXm8sIosft7XETeO1:17624:0:99999:7:::\n  ```\n\n- 解锁用户账户，则使用`passwd`的`-u`选项：\n\n  ```bash\n  [root@evobot ~]# passwd -u evobot \n  解锁用户 evobot 的密码。\n  passwd: 操作成功\n  [root@evobot ~]# tail /etc/shadow\n  ntp:!!:17540::::::\n  postfix:!!:17540::::::\n  chrony:!!:17540::::::\n  sshd:!!:17540::::::\n  tcpdump:!!:17540::::::\n  syslog:!!:17598::::::\n  centos:!!:17602:0:99999:7:::\n  lux:$1$AFvb7KAB$qg0IKBSFsGRDAO5XPaoYr/:17604:0:99999:7:::\n  nginx:!!:17604::::::\n  evobot:$1$ORddLa4O$eScmBtXm8sIosft7XETeO1:17624:0:99999:7:::\n  ```\n\n- 锁定用户账户还可以使用`usermod -L (username)`命令，用户被锁定后，在`/etc/shadow`中的密码字符串前面会有一个`!`：\n\n  ```bash\n  [root@evobot ~]# usermod -L evobot\n  [root@evobot ~]# tail /etc/shadow\n  ntp:!!:17540::::::\n  postfix:!!:17540::::::\n  chrony:!!:17540::::::\n  sshd:!!:17540::::::\n  tcpdump:!!:17540::::::\n  syslog:!!:17598::::::\n  centos:!!:17602:0:99999:7:::\n  lux:$1$AFvb7KAB$qg0IKBSFsGRDAO5XPaoYr/:17604:0:99999:7:::\n  nginx:!!:17604::::::\n  evobot:!$1$ORddLa4O$eScmBtXm8sIosft7XETeO1:17624:0:99999:7:::\n  ```\n\n- `usermod`命令锁定的账户，使用`usermod -U (username)`进行解锁:\n\n  ```bash\n  [root@evobot ~]# usermod -U evobot \n  [root@evobot ~]# tail /etc/shadow\n  ntp:!!:17540::::::\n  postfix:!!:17540::::::\n  chrony:!!:17540::::::\n  sshd:!!:17540::::::\n  tcpdump:!!:17540::::::\n  syslog:!!:17598::::::\n  centos:!!:17602:0:99999:7:::\n  lux:$1$AFvb7KAB$qg0IKBSFsGRDAO5XPaoYr/:17604:0:99999:7:::\n  nginx:!!:17604::::::\n  evobot:$1$ORddLa4O$eScmBtXm8sIosft7XETeO1:17624:0:99999:7:::\n\n  ```\n\n\n## passwd命令的其他用法\n\n- `passwd`命令更改密码还可以使用`passwd --stdin (username)`为用户更改密码，这种方式更改密码只需要输入一次密码，并且密码是明文显示：\n\n  ```bash\n  [root@evobot ~]# passwd --stdin evobot \n  更改用户 evobot 的密码 。\n  123456\n  passwd：所有的身份验证令牌已经成功更新。\n  ```\n\n- 这种用法一般会在shell脚本里使用，常用的用法是`echo \"112233\" | passwd --stdin (username)`，这种方式不需要输入密码，`echo`后面的密码会在管道符`|`的作用下，传递给后面的`passwd`命令：\n\n  ```bash\n  [root@evobot ~]# echo \"112233\" | passwd --stdin evobot\n  更改用户 evobot 的密码 。\n  passwd：所有的身份验证令牌已经成功更新。\n\n  ```\n\n- 一行命令更改密码，也可以使用`echo -e`的用法，`echo -e`选项使得后面的内容里可以加上换行符`\\n`或者制表符`\\t`，所以更改密码可以用`echo -e \"223344\\n223344\" | passwd (username)`的形式：\n\n  ```bash\n  [root@evobot ~]# echo -e \"223344\\n223344\" | passwd evobot\n  更改用户 evobot 的密码 。\n  新的 密码：无效的密码： 密码少于 8 个字符\n  重新输入新的 密码：passwd：所有的身份验证令牌已经成功更新。\n\n  ```\n\n# mkpasswd命令\n\n- `mkdpasswd`是Linux中用来生成密码的命令行工具，默认这个命令是没有安装的，安装该命令，需要安装`expect`软件包：`yum install -y expect`;\n\n- `mkpasswd`命令可以生成包含特殊符号，数字，字母大小写的随机字符串；\n\n  ```bash\n  [root@evobot ~]# mkpasswd \n  xEK0~wsn3\n  ```\n\n- 也可以指定生成的随机字符串的长度，使用`-l`选项，以及包含特殊符号个数，使用`-s`选项：\n\n  ```bash\n  [root@evobot ~]# mkpasswd -l 12\t\n  tio7lovMZd2}\n  [root@evobot ~]# mkpasswd -l 12 -s 3\n  hwg3R~2Qd[-h\n  [root@evobot ~]# mkpasswd -l 12 -s 0\n  y8zJSikw3qnt\n\n  ```\n\n---\n\n\n\n","source":"_posts/Centos7系列-用户及密码管理相关命令.md","raw":"---\ntitle: 'Centos7系列:用户及密码管理相关命令'\nauthor: Evobot\nabbrlink: 2af55eed\ndate: 2018-04-03 22:44:32\ncategories: Centos7\ntags: [Linux, Centos]\nphoto: http://p5qynomrl.bkt.clouddn.com/1522771004764cu3a7i8u.png?imageslim\n---\n\n\n主要介绍`usermod`更改用户属性的命令的用法，和用户密码管理的相关知识，以及`mkpasswd`命令的用法和作用。\n\n<!--more-->\n\n----\n\n# usermod命令\n\n- `usermod`命令可以更改用户的**uid**和**gid**以及用户的家目录和shell；\n\n- 在之前的`useradd`命令中，选项`useradd -G`可以为用户添加扩展组，即用户的**gid**只有一个，但可以同时也属于其他用户组，这些用户组就是用户的扩展组；\n\n- `usermod`同样有`-G`选项，为已经存在用户添加扩展组，具体用法为`usermod -G (组名) (用户名)`：\n\n  ```bash\n  [root@evobot ~]# usermod -G evobot lux\n  [root@evobot ~]# id lux\n  uid=1001(lux) gid=1001(lux) 组=1001(lux),1002(evobot)\n  [root@evobot ~]# usermod -G grp1 lux\n  [root@evobot ~]# id lux\n  uid=1001(lux) gid=1001(lux) 组=1001(lux),1003(grp1)\n  ```\n\n- 上面的例子也可以看出，当使用`-G`选项为用户添加新的扩展组时，会替换之前的扩展组，若需要添加多个扩展组，需要一次添加多个扩展组，多个组名之间使用`,`分隔：\n\n  ```bash\n  [root@evobot ~]# usermod -G evobot,grp1 lux\n  [root@evobot ~]# id lux\n  uid=1001(lux) gid=1001(lux) 组=1001(lux),1002(evobot),1003(grp1)\n  ```\n\n# 用户密码管理\n\n## 更改密码\n\n- 用户密码管理，常用的命令时`passwd`命令，由于`passwd`命令具有`ser_uid`权限，所以普通用户也可以使用该命令更改密码；\n\n- 更改当前用户密码，直接执行`passwd`命令即可，若更改其他用户密码，则需要root用户执行`passwd`命令，用法为`passwd (username)`:\n\n  ```bash\n  [root@evobot ~]# passwd evobot \n  更改用户 evobot 的密码 。\n  新的 密码：\n  重新输入新的 密码：\n  passwd：所有的身份验证令牌已经成功更新。\n\n  [root@evobot ~]# tail /etc/shadow\n  ntp:!!:17540::::::\n  postfix:!!:17540::::::\n  chrony:!!:17540::::::\n  sshd:!!:17540::::::\n  tcpdump:!!:17540::::::\n  syslog:!!:17598::::::\n  centos:!!:17602:0:99999:7:::\n  lux:$1$AFvb7KAB$qg0IKBSFsGRDAO5XPaoYr/:17604:0:99999:7:::\n  nginx:!!:17604::::::\n  evobot:$1$ORddLa4O$eScmBtXm8sIosft7XETeO1:17624:0:99999:7:::\n  ```\n\n- 为用户更改密码后，在`/etc/shadow`文件中就可以看到用户的密码位多了加密的字符串，而没有密码的用户，密码位是两个`!`；\n\n- 在`/etc/shadow`密码文件中，还有一些用户的密码位是`*`号，这表示用户的密码是无法使用、被锁定的：\n\n  ```bash\n  [root@evobot ~]# head /etc/shadow\n  root:$1$MNOcZHup$MrsJJ3KwxTERWrlgmpjcC0:17602:0:99999:7:::\n  bin:*:17110:0:99999:7:::\n  daemon:*:17110:0:99999:7:::\n  adm:*:17110:0:99999:7:::\n  lp:*:17110:0:99999:7:::\n  sync:*:17110:0:99999:7:::\n  shutdown:*:17110:0:99999:7:::\n  halt:*:17110:0:99999:7:::\n  mail:*:17110:0:99999:7:::\n  operator:*:17110:0:99999:7:::\n  ```\n\n\n## 锁定账户\n\n- `passwd`的`-l`选项，可以锁定用户，用户被锁定后，在密码文件`/etc/shadow`中，密码位字符串前面会加上`!!`：\n\n  ```bash\n  [root@evobot ~]# passwd -l evobot \n  锁定用户 evobot 的密码 。\n  passwd: 操作成功\n  [root@evobot ~]# tail /etc/shadow\n  ntp:!!:17540::::::\n  postfix:!!:17540::::::\n  chrony:!!:17540::::::\n  sshd:!!:17540::::::\n  tcpdump:!!:17540::::::\n  syslog:!!:17598::::::\n  centos:!!:17602:0:99999:7:::\n  lux:$1$AFvb7KAB$qg0IKBSFsGRDAO5XPaoYr/:17604:0:99999:7:::\n  nginx:!!:17604::::::\n  evobot:!!$1$ORddLa4O$eScmBtXm8sIosft7XETeO1:17624:0:99999:7:::\n  ```\n\n- 解锁用户账户，则使用`passwd`的`-u`选项：\n\n  ```bash\n  [root@evobot ~]# passwd -u evobot \n  解锁用户 evobot 的密码。\n  passwd: 操作成功\n  [root@evobot ~]# tail /etc/shadow\n  ntp:!!:17540::::::\n  postfix:!!:17540::::::\n  chrony:!!:17540::::::\n  sshd:!!:17540::::::\n  tcpdump:!!:17540::::::\n  syslog:!!:17598::::::\n  centos:!!:17602:0:99999:7:::\n  lux:$1$AFvb7KAB$qg0IKBSFsGRDAO5XPaoYr/:17604:0:99999:7:::\n  nginx:!!:17604::::::\n  evobot:$1$ORddLa4O$eScmBtXm8sIosft7XETeO1:17624:0:99999:7:::\n  ```\n\n- 锁定用户账户还可以使用`usermod -L (username)`命令，用户被锁定后，在`/etc/shadow`中的密码字符串前面会有一个`!`：\n\n  ```bash\n  [root@evobot ~]# usermod -L evobot\n  [root@evobot ~]# tail /etc/shadow\n  ntp:!!:17540::::::\n  postfix:!!:17540::::::\n  chrony:!!:17540::::::\n  sshd:!!:17540::::::\n  tcpdump:!!:17540::::::\n  syslog:!!:17598::::::\n  centos:!!:17602:0:99999:7:::\n  lux:$1$AFvb7KAB$qg0IKBSFsGRDAO5XPaoYr/:17604:0:99999:7:::\n  nginx:!!:17604::::::\n  evobot:!$1$ORddLa4O$eScmBtXm8sIosft7XETeO1:17624:0:99999:7:::\n  ```\n\n- `usermod`命令锁定的账户，使用`usermod -U (username)`进行解锁:\n\n  ```bash\n  [root@evobot ~]# usermod -U evobot \n  [root@evobot ~]# tail /etc/shadow\n  ntp:!!:17540::::::\n  postfix:!!:17540::::::\n  chrony:!!:17540::::::\n  sshd:!!:17540::::::\n  tcpdump:!!:17540::::::\n  syslog:!!:17598::::::\n  centos:!!:17602:0:99999:7:::\n  lux:$1$AFvb7KAB$qg0IKBSFsGRDAO5XPaoYr/:17604:0:99999:7:::\n  nginx:!!:17604::::::\n  evobot:$1$ORddLa4O$eScmBtXm8sIosft7XETeO1:17624:0:99999:7:::\n\n  ```\n\n\n## passwd命令的其他用法\n\n- `passwd`命令更改密码还可以使用`passwd --stdin (username)`为用户更改密码，这种方式更改密码只需要输入一次密码，并且密码是明文显示：\n\n  ```bash\n  [root@evobot ~]# passwd --stdin evobot \n  更改用户 evobot 的密码 。\n  123456\n  passwd：所有的身份验证令牌已经成功更新。\n  ```\n\n- 这种用法一般会在shell脚本里使用，常用的用法是`echo \"112233\" | passwd --stdin (username)`，这种方式不需要输入密码，`echo`后面的密码会在管道符`|`的作用下，传递给后面的`passwd`命令：\n\n  ```bash\n  [root@evobot ~]# echo \"112233\" | passwd --stdin evobot\n  更改用户 evobot 的密码 。\n  passwd：所有的身份验证令牌已经成功更新。\n\n  ```\n\n- 一行命令更改密码，也可以使用`echo -e`的用法，`echo -e`选项使得后面的内容里可以加上换行符`\\n`或者制表符`\\t`，所以更改密码可以用`echo -e \"223344\\n223344\" | passwd (username)`的形式：\n\n  ```bash\n  [root@evobot ~]# echo -e \"223344\\n223344\" | passwd evobot\n  更改用户 evobot 的密码 。\n  新的 密码：无效的密码： 密码少于 8 个字符\n  重新输入新的 密码：passwd：所有的身份验证令牌已经成功更新。\n\n  ```\n\n# mkpasswd命令\n\n- `mkdpasswd`是Linux中用来生成密码的命令行工具，默认这个命令是没有安装的，安装该命令，需要安装`expect`软件包：`yum install -y expect`;\n\n- `mkpasswd`命令可以生成包含特殊符号，数字，字母大小写的随机字符串；\n\n  ```bash\n  [root@evobot ~]# mkpasswd \n  xEK0~wsn3\n  ```\n\n- 也可以指定生成的随机字符串的长度，使用`-l`选项，以及包含特殊符号个数，使用`-s`选项：\n\n  ```bash\n  [root@evobot ~]# mkpasswd -l 12\t\n  tio7lovMZd2}\n  [root@evobot ~]# mkpasswd -l 12 -s 3\n  hwg3R~2Qd[-h\n  [root@evobot ~]# mkpasswd -l 12 -s 0\n  y8zJSikw3qnt\n\n  ```\n\n---\n\n\n\n","slug":"Centos7系列-用户及密码管理相关命令","published":1,"updated":"2018-06-02T13:01:29.508Z","photos":["http://p5qynomrl.bkt.clouddn.com/1522771004764cu3a7i8u.png?imageslim"],"comments":1,"layout":"post","link":"","_id":"cji1gaz8r0010u1jxq7b6w1uu","content":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>主要介绍<code>usermod</code>更改用户属性的命令的用法，和用户密码管理的相关知识，以及<code>mkpasswd</code>命令的用法和作用。</p><a id=\"more\"></a><hr><h1 id=\"usermod命令\"><a href=\"#usermod命令\" class=\"headerlink\" title=\"usermod命令\"></a>usermod命令</h1><ul><li><p><code>usermod</code>命令可以更改用户的<strong>uid</strong>和<strong>gid</strong>以及用户的家目录和shell；</p></li><li><p>在之前的<code>useradd</code>命令中，选项<code>useradd -G</code>可以为用户添加扩展组，即用户的<strong>gid</strong>只有一个，但可以同时也属于其他用户组，这些用户组就是用户的扩展组；</p></li><li><p><code>usermod</code>同样有<code>-G</code>选项，为已经存在用户添加扩展组，具体用法为<code>usermod -G (组名) (用户名)</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># usermod -G evobot lux</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># id lux</span></span><br><span class=\"line\">uid=1001(lux) gid=1001(lux) 组=1001(lux),1002(evobot)</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># usermod -G grp1 lux</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># id lux</span></span><br><span class=\"line\">uid=1001(lux) gid=1001(lux) 组=1001(lux),1003(grp1)</span><br></pre></td></tr></table></figure></li><li><p>上面的例子也可以看出，当使用<code>-G</code>选项为用户添加新的扩展组时，会替换之前的扩展组，若需要添加多个扩展组，需要一次添加多个扩展组，多个组名之间使用<code>,</code>分隔：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># usermod -G evobot,grp1 lux</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># id lux</span></span><br><span class=\"line\">uid=1001(lux) gid=1001(lux) 组=1001(lux),1002(evobot),1003(grp1)</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"用户密码管理\"><a href=\"#用户密码管理\" class=\"headerlink\" title=\"用户密码管理\"></a>用户密码管理</h1><h2 id=\"更改密码\"><a href=\"#更改密码\" class=\"headerlink\" title=\"更改密码\"></a>更改密码</h2><ul><li><p>用户密码管理，常用的命令时<code>passwd</code>命令，由于<code>passwd</code>命令具有<code>ser_uid</code>权限，所以普通用户也可以使用该命令更改密码；</p></li><li><p>更改当前用户密码，直接执行<code>passwd</code>命令即可，若更改其他用户密码，则需要root用户执行<code>passwd</code>命令，用法为<code>passwd (username)</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># passwd evobot </span></span><br><span class=\"line\">更改用户 evobot 的密码 。</span><br><span class=\"line\">新的 密码：</span><br><span class=\"line\">重新输入新的 密码：</span><br><span class=\"line\">passwd：所有的身份验证令牌已经成功更新。</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tail /etc/shadow</span></span><br><span class=\"line\">ntp:!!:17540::::::</span><br><span class=\"line\">postfix:!!:17540::::::</span><br><span class=\"line\">chrony:!!:17540::::::</span><br><span class=\"line\">sshd:!!:17540::::::</span><br><span class=\"line\">tcpdump:!!:17540::::::</span><br><span class=\"line\">syslog:!!:17598::::::</span><br><span class=\"line\">centos:!!:17602:0:99999:7:::</span><br><span class=\"line\">lux:<span class=\"variable\">$1</span><span class=\"variable\">$AFvb7KAB</span><span class=\"variable\">$qg0IKBSFsGRDAO5XPaoYr</span>/:17604:0:99999:7:::</span><br><span class=\"line\">nginx:!!:17604::::::</span><br><span class=\"line\">evobot:<span class=\"variable\">$1</span><span class=\"variable\">$ORddLa4O</span><span class=\"variable\">$eScmBtXm8sIosft7XETeO1</span>:17624:0:99999:7:::</span><br></pre></td></tr></table></figure></li><li><p>为用户更改密码后，在<code>/etc/shadow</code>文件中就可以看到用户的密码位多了加密的字符串，而没有密码的用户，密码位是两个<code>!</code>；</p></li><li><p>在<code>/etc/shadow</code>密码文件中，还有一些用户的密码位是<code>*</code>号，这表示用户的密码是无法使用、被锁定的：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head /etc/shadow</span></span><br><span class=\"line\">root:<span class=\"variable\">$1</span><span class=\"variable\">$MNOcZHup</span><span class=\"variable\">$MrsJJ3KwxTERWrlgmpjcC0</span>:17602:0:99999:7:::</span><br><span class=\"line\">bin:*:17110:0:99999:7:::</span><br><span class=\"line\">daemon:*:17110:0:99999:7:::</span><br><span class=\"line\">adm:*:17110:0:99999:7:::</span><br><span class=\"line\">lp:*:17110:0:99999:7:::</span><br><span class=\"line\">sync:*:17110:0:99999:7:::</span><br><span class=\"line\">shutdown:*:17110:0:99999:7:::</span><br><span class=\"line\">halt:*:17110:0:99999:7:::</span><br><span class=\"line\">mail:*:17110:0:99999:7:::</span><br><span class=\"line\">operator:*:17110:0:99999:7:::</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"锁定账户\"><a href=\"#锁定账户\" class=\"headerlink\" title=\"锁定账户\"></a>锁定账户</h2><ul><li><p><code>passwd</code>的<code>-l</code>选项，可以锁定用户，用户被锁定后，在密码文件<code>/etc/shadow</code>中，密码位字符串前面会加上<code>!!</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># passwd -l evobot </span></span><br><span class=\"line\">锁定用户 evobot 的密码 。</span><br><span class=\"line\">passwd: 操作成功</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tail /etc/shadow</span></span><br><span class=\"line\">ntp:!!:17540::::::</span><br><span class=\"line\">postfix:!!:17540::::::</span><br><span class=\"line\">chrony:!!:17540::::::</span><br><span class=\"line\">sshd:!!:17540::::::</span><br><span class=\"line\">tcpdump:!!:17540::::::</span><br><span class=\"line\">syslog:!!:17598::::::</span><br><span class=\"line\">centos:!!:17602:0:99999:7:::</span><br><span class=\"line\">lux:<span class=\"variable\">$1</span><span class=\"variable\">$AFvb7KAB</span><span class=\"variable\">$qg0IKBSFsGRDAO5XPaoYr</span>/:17604:0:99999:7:::</span><br><span class=\"line\">nginx:!!:17604::::::</span><br><span class=\"line\">evobot:!!<span class=\"variable\">$1</span><span class=\"variable\">$ORddLa4O</span><span class=\"variable\">$eScmBtXm8sIosft7XETeO1</span>:17624:0:99999:7:::</span><br></pre></td></tr></table></figure></li><li><p>解锁用户账户，则使用<code>passwd</code>的<code>-u</code>选项：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># passwd -u evobot </span></span><br><span class=\"line\">解锁用户 evobot 的密码。</span><br><span class=\"line\">passwd: 操作成功</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tail /etc/shadow</span></span><br><span class=\"line\">ntp:!!:17540::::::</span><br><span class=\"line\">postfix:!!:17540::::::</span><br><span class=\"line\">chrony:!!:17540::::::</span><br><span class=\"line\">sshd:!!:17540::::::</span><br><span class=\"line\">tcpdump:!!:17540::::::</span><br><span class=\"line\">syslog:!!:17598::::::</span><br><span class=\"line\">centos:!!:17602:0:99999:7:::</span><br><span class=\"line\">lux:<span class=\"variable\">$1</span><span class=\"variable\">$AFvb7KAB</span><span class=\"variable\">$qg0IKBSFsGRDAO5XPaoYr</span>/:17604:0:99999:7:::</span><br><span class=\"line\">nginx:!!:17604::::::</span><br><span class=\"line\">evobot:<span class=\"variable\">$1</span><span class=\"variable\">$ORddLa4O</span><span class=\"variable\">$eScmBtXm8sIosft7XETeO1</span>:17624:0:99999:7:::</span><br></pre></td></tr></table></figure></li><li><p>锁定用户账户还可以使用<code>usermod -L (username)</code>命令，用户被锁定后，在<code>/etc/shadow</code>中的密码字符串前面会有一个<code>!</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># usermod -L evobot</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tail /etc/shadow</span></span><br><span class=\"line\">ntp:!!:17540::::::</span><br><span class=\"line\">postfix:!!:17540::::::</span><br><span class=\"line\">chrony:!!:17540::::::</span><br><span class=\"line\">sshd:!!:17540::::::</span><br><span class=\"line\">tcpdump:!!:17540::::::</span><br><span class=\"line\">syslog:!!:17598::::::</span><br><span class=\"line\">centos:!!:17602:0:99999:7:::</span><br><span class=\"line\">lux:<span class=\"variable\">$1</span><span class=\"variable\">$AFvb7KAB</span><span class=\"variable\">$qg0IKBSFsGRDAO5XPaoYr</span>/:17604:0:99999:7:::</span><br><span class=\"line\">nginx:!!:17604::::::</span><br><span class=\"line\">evobot:!<span class=\"variable\">$1</span><span class=\"variable\">$ORddLa4O</span><span class=\"variable\">$eScmBtXm8sIosft7XETeO1</span>:17624:0:99999:7:::</span><br></pre></td></tr></table></figure></li><li><p><code>usermod</code>命令锁定的账户，使用<code>usermod -U (username)</code>进行解锁:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># usermod -U evobot </span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tail /etc/shadow</span></span><br><span class=\"line\">ntp:!!:17540::::::</span><br><span class=\"line\">postfix:!!:17540::::::</span><br><span class=\"line\">chrony:!!:17540::::::</span><br><span class=\"line\">sshd:!!:17540::::::</span><br><span class=\"line\">tcpdump:!!:17540::::::</span><br><span class=\"line\">syslog:!!:17598::::::</span><br><span class=\"line\">centos:!!:17602:0:99999:7:::</span><br><span class=\"line\">lux:<span class=\"variable\">$1</span><span class=\"variable\">$AFvb7KAB</span><span class=\"variable\">$qg0IKBSFsGRDAO5XPaoYr</span>/:17604:0:99999:7:::</span><br><span class=\"line\">nginx:!!:17604::::::</span><br><span class=\"line\">evobot:<span class=\"variable\">$1</span><span class=\"variable\">$ORddLa4O</span><span class=\"variable\">$eScmBtXm8sIosft7XETeO1</span>:17624:0:99999:7:::</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"passwd命令的其他用法\"><a href=\"#passwd命令的其他用法\" class=\"headerlink\" title=\"passwd命令的其他用法\"></a>passwd命令的其他用法</h2><ul><li><p><code>passwd</code>命令更改密码还可以使用<code>passwd --stdin (username)</code>为用户更改密码，这种方式更改密码只需要输入一次密码，并且密码是明文显示：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># passwd --stdin evobot </span></span><br><span class=\"line\">更改用户 evobot 的密码 。</span><br><span class=\"line\">123456</span><br><span class=\"line\">passwd：所有的身份验证令牌已经成功更新。</span><br></pre></td></tr></table></figure></li><li><p>这种用法一般会在shell脚本里使用，常用的用法是<code>echo &quot;112233&quot; | passwd --stdin (username)</code>，这种方式不需要输入密码，<code>echo</code>后面的密码会在管道符<code>|</code>的作用下，传递给后面的<code>passwd</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo \"112233\" | passwd --stdin evobot</span></span><br><span class=\"line\">更改用户 evobot 的密码 。</span><br><span class=\"line\">passwd：所有的身份验证令牌已经成功更新。</span><br></pre></td></tr></table></figure></li><li><p>一行命令更改密码，也可以使用<code>echo -e</code>的用法，<code>echo -e</code>选项使得后面的内容里可以加上换行符<code>\\n</code>或者制表符<code>\\t</code>，所以更改密码可以用<code>echo -e &quot;223344\\n223344&quot; | passwd (username)</code>的形式：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo -e \"223344\\n223344\" | passwd evobot</span></span><br><span class=\"line\">更改用户 evobot 的密码 。</span><br><span class=\"line\">新的 密码：无效的密码： 密码少于 8 个字符</span><br><span class=\"line\">重新输入新的 密码：passwd：所有的身份验证令牌已经成功更新。</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"mkpasswd命令\"><a href=\"#mkpasswd命令\" class=\"headerlink\" title=\"mkpasswd命令\"></a>mkpasswd命令</h1><ul><li><p><code>mkdpasswd</code>是Linux中用来生成密码的命令行工具，默认这个命令是没有安装的，安装该命令，需要安装<code>expect</code>软件包：<code>yum install -y expect</code>;</p></li><li><p><code>mkpasswd</code>命令可以生成包含特殊符号，数字，字母大小写的随机字符串；</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkpasswd </span></span><br><span class=\"line\">xEK0~wsn3</span><br></pre></td></tr></table></figure></li><li><p>也可以指定生成的随机字符串的长度，使用<code>-l</code>选项，以及包含特殊符号个数，使用<code>-s</code>选项：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkpasswd -l 12\t</span></span><br><span class=\"line\">tio7lovMZd2&#125;</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkpasswd -l 12 -s 3</span></span><br><span class=\"line\">hwg3R~2Qd[-h</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkpasswd -l 12 -s 0</span></span><br><span class=\"line\">y8zJSikw3qnt</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>主要介绍<code>usermod</code>更改用户属性的命令的用法，和用户密码管理的相关知识，以及<code>mkpasswd</code>命令的用法和作用。</p>","more":"<hr><h1 id=\"usermod命令\"><a href=\"#usermod命令\" class=\"headerlink\" title=\"usermod命令\"></a>usermod命令</h1><ul><li><p><code>usermod</code>命令可以更改用户的<strong>uid</strong>和<strong>gid</strong>以及用户的家目录和shell；</p></li><li><p>在之前的<code>useradd</code>命令中，选项<code>useradd -G</code>可以为用户添加扩展组，即用户的<strong>gid</strong>只有一个，但可以同时也属于其他用户组，这些用户组就是用户的扩展组；</p></li><li><p><code>usermod</code>同样有<code>-G</code>选项，为已经存在用户添加扩展组，具体用法为<code>usermod -G (组名) (用户名)</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># usermod -G evobot lux</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># id lux</span></span><br><span class=\"line\">uid=1001(lux) gid=1001(lux) 组=1001(lux),1002(evobot)</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># usermod -G grp1 lux</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># id lux</span></span><br><span class=\"line\">uid=1001(lux) gid=1001(lux) 组=1001(lux),1003(grp1)</span><br></pre></td></tr></table></figure></li><li><p>上面的例子也可以看出，当使用<code>-G</code>选项为用户添加新的扩展组时，会替换之前的扩展组，若需要添加多个扩展组，需要一次添加多个扩展组，多个组名之间使用<code>,</code>分隔：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># usermod -G evobot,grp1 lux</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># id lux</span></span><br><span class=\"line\">uid=1001(lux) gid=1001(lux) 组=1001(lux),1002(evobot),1003(grp1)</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"用户密码管理\"><a href=\"#用户密码管理\" class=\"headerlink\" title=\"用户密码管理\"></a>用户密码管理</h1><h2 id=\"更改密码\"><a href=\"#更改密码\" class=\"headerlink\" title=\"更改密码\"></a>更改密码</h2><ul><li><p>用户密码管理，常用的命令时<code>passwd</code>命令，由于<code>passwd</code>命令具有<code>ser_uid</code>权限，所以普通用户也可以使用该命令更改密码；</p></li><li><p>更改当前用户密码，直接执行<code>passwd</code>命令即可，若更改其他用户密码，则需要root用户执行<code>passwd</code>命令，用法为<code>passwd (username)</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># passwd evobot </span></span><br><span class=\"line\">更改用户 evobot 的密码 。</span><br><span class=\"line\">新的 密码：</span><br><span class=\"line\">重新输入新的 密码：</span><br><span class=\"line\">passwd：所有的身份验证令牌已经成功更新。</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tail /etc/shadow</span></span><br><span class=\"line\">ntp:!!:17540::::::</span><br><span class=\"line\">postfix:!!:17540::::::</span><br><span class=\"line\">chrony:!!:17540::::::</span><br><span class=\"line\">sshd:!!:17540::::::</span><br><span class=\"line\">tcpdump:!!:17540::::::</span><br><span class=\"line\">syslog:!!:17598::::::</span><br><span class=\"line\">centos:!!:17602:0:99999:7:::</span><br><span class=\"line\">lux:<span class=\"variable\">$1</span><span class=\"variable\">$AFvb7KAB</span><span class=\"variable\">$qg0IKBSFsGRDAO5XPaoYr</span>/:17604:0:99999:7:::</span><br><span class=\"line\">nginx:!!:17604::::::</span><br><span class=\"line\">evobot:<span class=\"variable\">$1</span><span class=\"variable\">$ORddLa4O</span><span class=\"variable\">$eScmBtXm8sIosft7XETeO1</span>:17624:0:99999:7:::</span><br></pre></td></tr></table></figure></li><li><p>为用户更改密码后，在<code>/etc/shadow</code>文件中就可以看到用户的密码位多了加密的字符串，而没有密码的用户，密码位是两个<code>!</code>；</p></li><li><p>在<code>/etc/shadow</code>密码文件中，还有一些用户的密码位是<code>*</code>号，这表示用户的密码是无法使用、被锁定的：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head /etc/shadow</span></span><br><span class=\"line\">root:<span class=\"variable\">$1</span><span class=\"variable\">$MNOcZHup</span><span class=\"variable\">$MrsJJ3KwxTERWrlgmpjcC0</span>:17602:0:99999:7:::</span><br><span class=\"line\">bin:*:17110:0:99999:7:::</span><br><span class=\"line\">daemon:*:17110:0:99999:7:::</span><br><span class=\"line\">adm:*:17110:0:99999:7:::</span><br><span class=\"line\">lp:*:17110:0:99999:7:::</span><br><span class=\"line\">sync:*:17110:0:99999:7:::</span><br><span class=\"line\">shutdown:*:17110:0:99999:7:::</span><br><span class=\"line\">halt:*:17110:0:99999:7:::</span><br><span class=\"line\">mail:*:17110:0:99999:7:::</span><br><span class=\"line\">operator:*:17110:0:99999:7:::</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"锁定账户\"><a href=\"#锁定账户\" class=\"headerlink\" title=\"锁定账户\"></a>锁定账户</h2><ul><li><p><code>passwd</code>的<code>-l</code>选项，可以锁定用户，用户被锁定后，在密码文件<code>/etc/shadow</code>中，密码位字符串前面会加上<code>!!</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># passwd -l evobot </span></span><br><span class=\"line\">锁定用户 evobot 的密码 。</span><br><span class=\"line\">passwd: 操作成功</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tail /etc/shadow</span></span><br><span class=\"line\">ntp:!!:17540::::::</span><br><span class=\"line\">postfix:!!:17540::::::</span><br><span class=\"line\">chrony:!!:17540::::::</span><br><span class=\"line\">sshd:!!:17540::::::</span><br><span class=\"line\">tcpdump:!!:17540::::::</span><br><span class=\"line\">syslog:!!:17598::::::</span><br><span class=\"line\">centos:!!:17602:0:99999:7:::</span><br><span class=\"line\">lux:<span class=\"variable\">$1</span><span class=\"variable\">$AFvb7KAB</span><span class=\"variable\">$qg0IKBSFsGRDAO5XPaoYr</span>/:17604:0:99999:7:::</span><br><span class=\"line\">nginx:!!:17604::::::</span><br><span class=\"line\">evobot:!!<span class=\"variable\">$1</span><span class=\"variable\">$ORddLa4O</span><span class=\"variable\">$eScmBtXm8sIosft7XETeO1</span>:17624:0:99999:7:::</span><br></pre></td></tr></table></figure></li><li><p>解锁用户账户，则使用<code>passwd</code>的<code>-u</code>选项：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># passwd -u evobot </span></span><br><span class=\"line\">解锁用户 evobot 的密码。</span><br><span class=\"line\">passwd: 操作成功</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tail /etc/shadow</span></span><br><span class=\"line\">ntp:!!:17540::::::</span><br><span class=\"line\">postfix:!!:17540::::::</span><br><span class=\"line\">chrony:!!:17540::::::</span><br><span class=\"line\">sshd:!!:17540::::::</span><br><span class=\"line\">tcpdump:!!:17540::::::</span><br><span class=\"line\">syslog:!!:17598::::::</span><br><span class=\"line\">centos:!!:17602:0:99999:7:::</span><br><span class=\"line\">lux:<span class=\"variable\">$1</span><span class=\"variable\">$AFvb7KAB</span><span class=\"variable\">$qg0IKBSFsGRDAO5XPaoYr</span>/:17604:0:99999:7:::</span><br><span class=\"line\">nginx:!!:17604::::::</span><br><span class=\"line\">evobot:<span class=\"variable\">$1</span><span class=\"variable\">$ORddLa4O</span><span class=\"variable\">$eScmBtXm8sIosft7XETeO1</span>:17624:0:99999:7:::</span><br></pre></td></tr></table></figure></li><li><p>锁定用户账户还可以使用<code>usermod -L (username)</code>命令，用户被锁定后，在<code>/etc/shadow</code>中的密码字符串前面会有一个<code>!</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># usermod -L evobot</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tail /etc/shadow</span></span><br><span class=\"line\">ntp:!!:17540::::::</span><br><span class=\"line\">postfix:!!:17540::::::</span><br><span class=\"line\">chrony:!!:17540::::::</span><br><span class=\"line\">sshd:!!:17540::::::</span><br><span class=\"line\">tcpdump:!!:17540::::::</span><br><span class=\"line\">syslog:!!:17598::::::</span><br><span class=\"line\">centos:!!:17602:0:99999:7:::</span><br><span class=\"line\">lux:<span class=\"variable\">$1</span><span class=\"variable\">$AFvb7KAB</span><span class=\"variable\">$qg0IKBSFsGRDAO5XPaoYr</span>/:17604:0:99999:7:::</span><br><span class=\"line\">nginx:!!:17604::::::</span><br><span class=\"line\">evobot:!<span class=\"variable\">$1</span><span class=\"variable\">$ORddLa4O</span><span class=\"variable\">$eScmBtXm8sIosft7XETeO1</span>:17624:0:99999:7:::</span><br></pre></td></tr></table></figure></li><li><p><code>usermod</code>命令锁定的账户，使用<code>usermod -U (username)</code>进行解锁:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># usermod -U evobot </span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tail /etc/shadow</span></span><br><span class=\"line\">ntp:!!:17540::::::</span><br><span class=\"line\">postfix:!!:17540::::::</span><br><span class=\"line\">chrony:!!:17540::::::</span><br><span class=\"line\">sshd:!!:17540::::::</span><br><span class=\"line\">tcpdump:!!:17540::::::</span><br><span class=\"line\">syslog:!!:17598::::::</span><br><span class=\"line\">centos:!!:17602:0:99999:7:::</span><br><span class=\"line\">lux:<span class=\"variable\">$1</span><span class=\"variable\">$AFvb7KAB</span><span class=\"variable\">$qg0IKBSFsGRDAO5XPaoYr</span>/:17604:0:99999:7:::</span><br><span class=\"line\">nginx:!!:17604::::::</span><br><span class=\"line\">evobot:<span class=\"variable\">$1</span><span class=\"variable\">$ORddLa4O</span><span class=\"variable\">$eScmBtXm8sIosft7XETeO1</span>:17624:0:99999:7:::</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"passwd命令的其他用法\"><a href=\"#passwd命令的其他用法\" class=\"headerlink\" title=\"passwd命令的其他用法\"></a>passwd命令的其他用法</h2><ul><li><p><code>passwd</code>命令更改密码还可以使用<code>passwd --stdin (username)</code>为用户更改密码，这种方式更改密码只需要输入一次密码，并且密码是明文显示：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># passwd --stdin evobot </span></span><br><span class=\"line\">更改用户 evobot 的密码 。</span><br><span class=\"line\">123456</span><br><span class=\"line\">passwd：所有的身份验证令牌已经成功更新。</span><br></pre></td></tr></table></figure></li><li><p>这种用法一般会在shell脚本里使用，常用的用法是<code>echo &quot;112233&quot; | passwd --stdin (username)</code>，这种方式不需要输入密码，<code>echo</code>后面的密码会在管道符<code>|</code>的作用下，传递给后面的<code>passwd</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo \"112233\" | passwd --stdin evobot</span></span><br><span class=\"line\">更改用户 evobot 的密码 。</span><br><span class=\"line\">passwd：所有的身份验证令牌已经成功更新。</span><br></pre></td></tr></table></figure></li><li><p>一行命令更改密码，也可以使用<code>echo -e</code>的用法，<code>echo -e</code>选项使得后面的内容里可以加上换行符<code>\\n</code>或者制表符<code>\\t</code>，所以更改密码可以用<code>echo -e &quot;223344\\n223344&quot; | passwd (username)</code>的形式：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo -e \"223344\\n223344\" | passwd evobot</span></span><br><span class=\"line\">更改用户 evobot 的密码 。</span><br><span class=\"line\">新的 密码：无效的密码： 密码少于 8 个字符</span><br><span class=\"line\">重新输入新的 密码：passwd：所有的身份验证令牌已经成功更新。</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"mkpasswd命令\"><a href=\"#mkpasswd命令\" class=\"headerlink\" title=\"mkpasswd命令\"></a>mkpasswd命令</h1><ul><li><p><code>mkdpasswd</code>是Linux中用来生成密码的命令行工具，默认这个命令是没有安装的，安装该命令，需要安装<code>expect</code>软件包：<code>yum install -y expect</code>;</p></li><li><p><code>mkpasswd</code>命令可以生成包含特殊符号，数字，字母大小写的随机字符串；</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkpasswd </span></span><br><span class=\"line\">xEK0~wsn3</span><br></pre></td></tr></table></figure></li><li><p>也可以指定生成的随机字符串的长度，使用<code>-l</code>选项，以及包含特殊符号个数，使用<code>-s</code>选项：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkpasswd -l 12\t</span></span><br><span class=\"line\">tio7lovMZd2&#125;</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkpasswd -l 12 -s 3</span></span><br><span class=\"line\">hwg3R~2Qd[-h</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkpasswd -l 12 -s 0</span></span><br><span class=\"line\">y8zJSikw3qnt</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->"},{"title":"Centos7系列:用户和用户组管理","author":"Evobot","abbrlink":"adac5712","date":"2018-04-02T13:30:40.000Z","image":null,"_content":"\n\n\n主要介绍Linux系统中用户和用户组的概念，以及用户和用户组文件和相应的管理命令，如`useradd`增加用户`groupadd`增加用户组等，同时介绍了如何使用`rz`、`sz`命令在Linux和Windows之间传输文件。\n\n<!-- more -->\n\n---\n\n# Linux与Windows传输文件\n\n- 在Xshell中，若需要在Windows和Centos之间传输文件，可以使用`lrzsz`软件包当中的`rz`、`sz`命令来进行上传或下载文件；\n- 使用`rz`、`sz`需要安装`lrzsz`软件包，使用命令`yum -y install lrzsz`安装；\n- `rz`命令是用来上传文件到Linux，上传的位置是当前目录，`rz`后面不需要跟任何参数，回车后会弹出文件对话框，选择需要上传的文件即可；\n- `sz`命令用来从Linux上下载文件，使用`sz filename`的形式，回弹出保存对话框，选择Windows上保存的位置即可。\n\n# 用户及密码配置文件\n\n## passwd用户文件\n- `passwd`文件位于`/etc/`目录下；\n- `passwd`文件结构为每个用户一行，每行由冒号分割为7段:\n1. 第一段为用户名;\n2. 第二段为密码占位符;\n3. 第三段为`UID`;\n4. 第四段为`GID`;\n5. 第五段为注释信息，无实际作用;\n6. 第六段为家目录地址;\n7. 第七段为用户shell;\n- 用户shell主要为`/sbin/nologin/`,表示用户禁止登陆，以及`/bin/bash`.\n- 用户创建的新用户UID和GID从1000开始。\n```bash\n[root@localhost ~]# cat /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\nbin:x:1:1:bin:/bin:/sbin/nologin\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\nadm:x:3:4:adm:/var/adm:/sbin/nologin\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\nsync:x:5:0:sync:/sbin:/bin/sync\nshutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\nhalt:x:7:0:halt:/sbin:/sbin/halt\nmail:x:8:12:mail:/var/spool/mail:/sbin/nologin\noperator:x:11:0:operator:/root:/sbin/nologin\ngames:x:12:100:games:/usr/games:/sbin/nologin\nftp:x:14:50:FTP User:/var/ftp:/sbin/nologin\nnobody:x:99:99:Nobody:/:/sbin/nologin\nsystemd-bus-proxy:x:999:997:systemd Bus Proxy:/:/sbin/nologin\nsystemd-network:x:192:192:systemd Network Management:/:/sbin/nologin\ndbus:x:81:81:System message bus:/:/sbin/nologin\npolkitd:x:998:996:User for polkitd:/:/sbin/nologin\ntss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin\npostfix:x:89:89::/var/spool/postfix:/sbin/nologin\nsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin\nchrony:x:997:995::/var/lib/chrony:/sbin/nologin\nlux:x:1000:1000::/home/lux:/bin/bash\nclikks:x:1001:1001::/home/clikks:/bin/bash\ncolxu:x:1002:1002::/home/colxu:/bin/bash\n```\n\n## shadow密码文件\n\n- `shadow`文件同样在`/etc/`目录下；\n- `shadow`文件用来存储用户的密码，与`passwd`文件内容一一对应，每个用户一行，以冒号分割为9段:\n1. 第一段为用户名\n2. 第二段为加密的密码；\n3. 第三段为上次更改密码的天数，以1970/1/1计算；\n4. 第四段为密码更改限制天数，即必须满足距离上次更改密码多少天之后才能修改密码，默认为0；\n5. 第五段为距离上次更改密码多少天后密码到期，必须更改；\n6. 第六段为密码到期前警告期限，如提醒7天后用户密码到期；\n7. 第七段为账号的失效期限，例如设置为3，则密码到期后可以继续使用3天，3天后将被锁定;\n8. 第八段为距离1970/1/1的日期前账号可以使用;\n9. 第九段为保留字段。\n```bash\n[root@localhost ~]# cat /etc/shadow\nroot:$6$RorrMuXF$sqkTLxh/gW4yAnb987iuYAooKBPMK9pn.zJ8JNWBwiQeNI3EccbU6dS5hvQUNb.sUA.5yAyjFkJ.ZNj4fDnTd/:17406:0:99999:7:::\nbin:*:17110:0:99999:7:::\ndaemon:*:17110:0:99999:7:::\nadm:*:17110:0:99999:7:::\nlp:*:17110:0:99999:7:::\nsync:*:17110:0:99999:7:::\nshutdown:*:17110:0:99999:7:::\nhalt:*:17110:0:99999:7:::\nmail:*:17110:0:99999:7:::\noperator:*:17110:0:99999:7:::\ngames:*:17110:0:99999:7:::\nftp:*:17110:0:99999:7:::\nnobody:*:17110:0:99999:7:::\nsystemd-bus-proxy:!!:17396::::::\nsystemd-network:!!:17396::::::\ndbus:!!:17396::::::\npolkitd:!!:17396::::::\ntss:!!:17396::::::\npostfix:!!:17396::::::\nsshd:!!:17396::::::\nchrony:!!:17396::::::\nlux:!!:17462:0:99999:7:::\nclikks:!!:17462:0:99999:7:::\ncolxu:!!:17464:0:99999:7:::\n```\n------------\n\n# 用户组管理\n## group用户组文件\n- `group`用户组文件与`passwd`文件类似，都位于`/etc/`目录下；\n- `group`文件记录了用户组的组名，以及密码，GID.\n\n## 用户组管理命令\n### 1. groupadd\n- `groupadd`用于添加用户组，命令格式为`groupadd [groupname]：\n```bash\n[root@localhost ~]# groupadd grp1\n[root@localhost ~]# tail -n1 /etc/group\ngrp1:x:1003:\n```\n- 增加用户组的同时指定GID，命令为`groupadd [-g] [GID] [Groupname]`：\n```bash\n[root@localhost ~]# groupadd -g 1088 grp2\n[root@localhost ~]# tail -n3 /etc/group\nslocate:x:21:\ngrp1:x:1003:\ngrp2:x:1088:\n```\n\n### 2. groupdel\n- `groupdel`命令的作用为删除用户组，格式是`groupdel [groupname]`:\n```bash\n[root@localhost ~]# groupdel grp1\n[root@localhost ~]# tail -n3 /etc/group\ncolxu:x:1002:\nslocate:x:21:\ngrp2:x:1088:\n```\n- 当用户组内还存在有用户时，`groupdel`无法删除用户组：\n```bash\n[root@localhost ~]# groupdel colxu\ngroupdel：不能移除用户“colxu”的主组\n```\n\n------------\n\n\n# 用户管理\n## useradd增加用户\n- `useradd`命令用来新增用户，`useradd`新增用户时可以指定UID,用户组&GID，家目录，用户shell：\n> **-u**: 指定用户的UID；\n> **-g**: 指定用户的用户组或GID；\n> **-d**: 指定用户的家目录；\n> **-s**：指定用户的shell；\n> **-M**：表示不创建用户的家目录。\n- 如下，指定用户UID,GID,家目录，SHELL：\n```bash\n[root@localhost ~]# useradd -u 1099 -g grp2 -d /home/mayun -s /bin/bash mahuateng\n[root@localhost ~]# tail -n 3 /etc/passwd\nclikks:x:1001:1001::/home/clikks:/bin/bash\ncolxu:x:1002:1002::/home/colxu:/bin/bash\nmahuateng:x:1099:1088::/home/mayun:/bin/bash\n[root@localhost ~]# ls /home/\nclikks  colxu  lux  mayun\n```\n- `-g`选项后如果跟的是不存在的用户组，则会报错：\n```bash\n[root@localhost ~]# useradd -M -u 1100 -g 1032 -s /bin/bash usertest\nuseradd：“1032”组不存在\n```\n\n## userdel删除用户\n- `userdel`命令用来删除用户，常用的为`-r`选项，用来在删除用户时同时删除用户的家目录，默认linux在删除用户时，不会删除用户的家目录：\n```bash\n[root@localhost ~]# useradd -d /home/user110 -u 1101 -g 1088 -s /bin/bash usertest2\n[root@localhost ~]# userdel usertest2\n[root@localhost ~]# ls /home/\nclikks  colxu  lux  mayun  user110\n[root@localhost ~]# userdel -r mahuateng\n[root@localhost ~]# ls /home/\nclikks  colxu  lux  user110\n```\n- 在新增用户时，用户的UID会跟随前一个用户的UID增加，GID并不随前一个GID增加，而是随UID增加\n\n## usermod修改用户\n- usermod可以修改已经存在的用户的UID,GID,SHELL,家目录以及增加附属组，usermod的参数选项如下：\n> **-u**: 更改用户的UID;\n> **-g**: 更改用户的的GID或用户组；\n> **-s**: 更改用户的默认shell；\n> **-d**: 更改用户的家目录；\n> **-L**: 锁定用户，禁止用户登陆，同时/etc/shadow文件内，用户的密码前会增加一个`!`号；\n> **-U**: 为锁定的用户解锁；\n> **-G**: 增加用户的的附属组，如果`-G`后只跟一个组名，则会覆盖用户之前的附属组，添加多个附属组，需要在`-G`后一次跟随多个组名。\n- `id`命令用来查看用户的UID,GID,附属组信息，格式为`id [username]`:\n```bash\n[root@localhost ~]# id lux\nuid=1000(lux) gid=1000(lux) 组=1000(lux)\n```\n- 更改用户的UID,GID,shell，家目录,如下，更改用户colxu的信息：\n```bash\n[root@localhost ~]# tail -n 4 /etc/passwd\nlux:x:1000:1000::/home/lux:/bin/bash\nclikks:x:1001:1001::/home/clikks:/bin/bash\ncolxu:x:1002:1002::/home/colxu:/bin/bash\nusertest:x:1100:1088::/home/usertest:/bin/bash\n[root@localhost ~]# usermod -u 1010 -g grp2 -d /home/lux -s /sbin/nologin colxu\n[root@localhost ~]# tail -n 3 /etc/passwd\nclikks:x:1001:1001::/home/clikks:/bin/bash\ncolxu:x:1010:1088::/home/lux:/sbin/nologin\nusertest:x:1100:1088::/home/usertest:/bin/bash\n[root@localhost ~]# su colxu\nThis account is currently not available.\n```\n- 为colxu用户增加附属组,不论用户的附属组存在多少个，再次添加附属组都会将之前的附属组清空重新添加：\n```bash\n[root@localhost ~]# id colxu\nuid=1010(colxu) gid=1088(grp2) 组=1088(grp2)\n[root@localhost ~]# usermod -G lux colxu\n[root@localhost ~]# id colxu\nuid=1010(colxu) gid=1088(grp2) 组=1088(grp2),1000(lux)\n[root@localhost ~]# usermod -G clikks colxu\n[root@localhost ~]# id colxu\nuid=1010(colxu) gid=1088(grp2) 组=1088(grp2),1001(clikks)\n[root@localhost ~]# usermod -G lux,clikks,root colxu\n[root@localhost ~]# id colxu\nuid=1010(colxu) gid=1088(grp2) 组=1088(grp2),0(root),1000(lux),1001(clikks)\n[root@localhost ~]# usermod -G mayun colxu\n[root@localhost ~]# id colxu\nuid=1010(colxu) gid=1088(grp2) 组=1088(grp2),1101(mayun)\n```\n---\n\n","source":"_posts/Centos7系列-用户和用户组管理.md","raw":"---\ntitle: 'Centos7系列:用户和用户组管理'\nauthor: Evobot\nabbrlink: adac5712\ndate: 2018-04-02 21:30:40\ncategories: Centos7\ntags: [Linux, Centos]\nimage:\n---\n\n\n\n主要介绍Linux系统中用户和用户组的概念，以及用户和用户组文件和相应的管理命令，如`useradd`增加用户`groupadd`增加用户组等，同时介绍了如何使用`rz`、`sz`命令在Linux和Windows之间传输文件。\n\n<!-- more -->\n\n---\n\n# Linux与Windows传输文件\n\n- 在Xshell中，若需要在Windows和Centos之间传输文件，可以使用`lrzsz`软件包当中的`rz`、`sz`命令来进行上传或下载文件；\n- 使用`rz`、`sz`需要安装`lrzsz`软件包，使用命令`yum -y install lrzsz`安装；\n- `rz`命令是用来上传文件到Linux，上传的位置是当前目录，`rz`后面不需要跟任何参数，回车后会弹出文件对话框，选择需要上传的文件即可；\n- `sz`命令用来从Linux上下载文件，使用`sz filename`的形式，回弹出保存对话框，选择Windows上保存的位置即可。\n\n# 用户及密码配置文件\n\n## passwd用户文件\n- `passwd`文件位于`/etc/`目录下；\n- `passwd`文件结构为每个用户一行，每行由冒号分割为7段:\n1. 第一段为用户名;\n2. 第二段为密码占位符;\n3. 第三段为`UID`;\n4. 第四段为`GID`;\n5. 第五段为注释信息，无实际作用;\n6. 第六段为家目录地址;\n7. 第七段为用户shell;\n- 用户shell主要为`/sbin/nologin/`,表示用户禁止登陆，以及`/bin/bash`.\n- 用户创建的新用户UID和GID从1000开始。\n```bash\n[root@localhost ~]# cat /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\nbin:x:1:1:bin:/bin:/sbin/nologin\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\nadm:x:3:4:adm:/var/adm:/sbin/nologin\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\nsync:x:5:0:sync:/sbin:/bin/sync\nshutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\nhalt:x:7:0:halt:/sbin:/sbin/halt\nmail:x:8:12:mail:/var/spool/mail:/sbin/nologin\noperator:x:11:0:operator:/root:/sbin/nologin\ngames:x:12:100:games:/usr/games:/sbin/nologin\nftp:x:14:50:FTP User:/var/ftp:/sbin/nologin\nnobody:x:99:99:Nobody:/:/sbin/nologin\nsystemd-bus-proxy:x:999:997:systemd Bus Proxy:/:/sbin/nologin\nsystemd-network:x:192:192:systemd Network Management:/:/sbin/nologin\ndbus:x:81:81:System message bus:/:/sbin/nologin\npolkitd:x:998:996:User for polkitd:/:/sbin/nologin\ntss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin\npostfix:x:89:89::/var/spool/postfix:/sbin/nologin\nsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin\nchrony:x:997:995::/var/lib/chrony:/sbin/nologin\nlux:x:1000:1000::/home/lux:/bin/bash\nclikks:x:1001:1001::/home/clikks:/bin/bash\ncolxu:x:1002:1002::/home/colxu:/bin/bash\n```\n\n## shadow密码文件\n\n- `shadow`文件同样在`/etc/`目录下；\n- `shadow`文件用来存储用户的密码，与`passwd`文件内容一一对应，每个用户一行，以冒号分割为9段:\n1. 第一段为用户名\n2. 第二段为加密的密码；\n3. 第三段为上次更改密码的天数，以1970/1/1计算；\n4. 第四段为密码更改限制天数，即必须满足距离上次更改密码多少天之后才能修改密码，默认为0；\n5. 第五段为距离上次更改密码多少天后密码到期，必须更改；\n6. 第六段为密码到期前警告期限，如提醒7天后用户密码到期；\n7. 第七段为账号的失效期限，例如设置为3，则密码到期后可以继续使用3天，3天后将被锁定;\n8. 第八段为距离1970/1/1的日期前账号可以使用;\n9. 第九段为保留字段。\n```bash\n[root@localhost ~]# cat /etc/shadow\nroot:$6$RorrMuXF$sqkTLxh/gW4yAnb987iuYAooKBPMK9pn.zJ8JNWBwiQeNI3EccbU6dS5hvQUNb.sUA.5yAyjFkJ.ZNj4fDnTd/:17406:0:99999:7:::\nbin:*:17110:0:99999:7:::\ndaemon:*:17110:0:99999:7:::\nadm:*:17110:0:99999:7:::\nlp:*:17110:0:99999:7:::\nsync:*:17110:0:99999:7:::\nshutdown:*:17110:0:99999:7:::\nhalt:*:17110:0:99999:7:::\nmail:*:17110:0:99999:7:::\noperator:*:17110:0:99999:7:::\ngames:*:17110:0:99999:7:::\nftp:*:17110:0:99999:7:::\nnobody:*:17110:0:99999:7:::\nsystemd-bus-proxy:!!:17396::::::\nsystemd-network:!!:17396::::::\ndbus:!!:17396::::::\npolkitd:!!:17396::::::\ntss:!!:17396::::::\npostfix:!!:17396::::::\nsshd:!!:17396::::::\nchrony:!!:17396::::::\nlux:!!:17462:0:99999:7:::\nclikks:!!:17462:0:99999:7:::\ncolxu:!!:17464:0:99999:7:::\n```\n------------\n\n# 用户组管理\n## group用户组文件\n- `group`用户组文件与`passwd`文件类似，都位于`/etc/`目录下；\n- `group`文件记录了用户组的组名，以及密码，GID.\n\n## 用户组管理命令\n### 1. groupadd\n- `groupadd`用于添加用户组，命令格式为`groupadd [groupname]：\n```bash\n[root@localhost ~]# groupadd grp1\n[root@localhost ~]# tail -n1 /etc/group\ngrp1:x:1003:\n```\n- 增加用户组的同时指定GID，命令为`groupadd [-g] [GID] [Groupname]`：\n```bash\n[root@localhost ~]# groupadd -g 1088 grp2\n[root@localhost ~]# tail -n3 /etc/group\nslocate:x:21:\ngrp1:x:1003:\ngrp2:x:1088:\n```\n\n### 2. groupdel\n- `groupdel`命令的作用为删除用户组，格式是`groupdel [groupname]`:\n```bash\n[root@localhost ~]# groupdel grp1\n[root@localhost ~]# tail -n3 /etc/group\ncolxu:x:1002:\nslocate:x:21:\ngrp2:x:1088:\n```\n- 当用户组内还存在有用户时，`groupdel`无法删除用户组：\n```bash\n[root@localhost ~]# groupdel colxu\ngroupdel：不能移除用户“colxu”的主组\n```\n\n------------\n\n\n# 用户管理\n## useradd增加用户\n- `useradd`命令用来新增用户，`useradd`新增用户时可以指定UID,用户组&GID，家目录，用户shell：\n> **-u**: 指定用户的UID；\n> **-g**: 指定用户的用户组或GID；\n> **-d**: 指定用户的家目录；\n> **-s**：指定用户的shell；\n> **-M**：表示不创建用户的家目录。\n- 如下，指定用户UID,GID,家目录，SHELL：\n```bash\n[root@localhost ~]# useradd -u 1099 -g grp2 -d /home/mayun -s /bin/bash mahuateng\n[root@localhost ~]# tail -n 3 /etc/passwd\nclikks:x:1001:1001::/home/clikks:/bin/bash\ncolxu:x:1002:1002::/home/colxu:/bin/bash\nmahuateng:x:1099:1088::/home/mayun:/bin/bash\n[root@localhost ~]# ls /home/\nclikks  colxu  lux  mayun\n```\n- `-g`选项后如果跟的是不存在的用户组，则会报错：\n```bash\n[root@localhost ~]# useradd -M -u 1100 -g 1032 -s /bin/bash usertest\nuseradd：“1032”组不存在\n```\n\n## userdel删除用户\n- `userdel`命令用来删除用户，常用的为`-r`选项，用来在删除用户时同时删除用户的家目录，默认linux在删除用户时，不会删除用户的家目录：\n```bash\n[root@localhost ~]# useradd -d /home/user110 -u 1101 -g 1088 -s /bin/bash usertest2\n[root@localhost ~]# userdel usertest2\n[root@localhost ~]# ls /home/\nclikks  colxu  lux  mayun  user110\n[root@localhost ~]# userdel -r mahuateng\n[root@localhost ~]# ls /home/\nclikks  colxu  lux  user110\n```\n- 在新增用户时，用户的UID会跟随前一个用户的UID增加，GID并不随前一个GID增加，而是随UID增加\n\n## usermod修改用户\n- usermod可以修改已经存在的用户的UID,GID,SHELL,家目录以及增加附属组，usermod的参数选项如下：\n> **-u**: 更改用户的UID;\n> **-g**: 更改用户的的GID或用户组；\n> **-s**: 更改用户的默认shell；\n> **-d**: 更改用户的家目录；\n> **-L**: 锁定用户，禁止用户登陆，同时/etc/shadow文件内，用户的密码前会增加一个`!`号；\n> **-U**: 为锁定的用户解锁；\n> **-G**: 增加用户的的附属组，如果`-G`后只跟一个组名，则会覆盖用户之前的附属组，添加多个附属组，需要在`-G`后一次跟随多个组名。\n- `id`命令用来查看用户的UID,GID,附属组信息，格式为`id [username]`:\n```bash\n[root@localhost ~]# id lux\nuid=1000(lux) gid=1000(lux) 组=1000(lux)\n```\n- 更改用户的UID,GID,shell，家目录,如下，更改用户colxu的信息：\n```bash\n[root@localhost ~]# tail -n 4 /etc/passwd\nlux:x:1000:1000::/home/lux:/bin/bash\nclikks:x:1001:1001::/home/clikks:/bin/bash\ncolxu:x:1002:1002::/home/colxu:/bin/bash\nusertest:x:1100:1088::/home/usertest:/bin/bash\n[root@localhost ~]# usermod -u 1010 -g grp2 -d /home/lux -s /sbin/nologin colxu\n[root@localhost ~]# tail -n 3 /etc/passwd\nclikks:x:1001:1001::/home/clikks:/bin/bash\ncolxu:x:1010:1088::/home/lux:/sbin/nologin\nusertest:x:1100:1088::/home/usertest:/bin/bash\n[root@localhost ~]# su colxu\nThis account is currently not available.\n```\n- 为colxu用户增加附属组,不论用户的附属组存在多少个，再次添加附属组都会将之前的附属组清空重新添加：\n```bash\n[root@localhost ~]# id colxu\nuid=1010(colxu) gid=1088(grp2) 组=1088(grp2)\n[root@localhost ~]# usermod -G lux colxu\n[root@localhost ~]# id colxu\nuid=1010(colxu) gid=1088(grp2) 组=1088(grp2),1000(lux)\n[root@localhost ~]# usermod -G clikks colxu\n[root@localhost ~]# id colxu\nuid=1010(colxu) gid=1088(grp2) 组=1088(grp2),1001(clikks)\n[root@localhost ~]# usermod -G lux,clikks,root colxu\n[root@localhost ~]# id colxu\nuid=1010(colxu) gid=1088(grp2) 组=1088(grp2),0(root),1000(lux),1001(clikks)\n[root@localhost ~]# usermod -G mayun colxu\n[root@localhost ~]# id colxu\nuid=1010(colxu) gid=1088(grp2) 组=1088(grp2),1101(mayun)\n```\n---\n\n","slug":"Centos7系列-用户和用户组管理","published":1,"updated":"2018-06-02T13:01:29.508Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gaz8z0015u1jxoj7dekkb","content":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>主要介绍Linux系统中用户和用户组的概念，以及用户和用户组文件和相应的管理命令，如<code>useradd</code>增加用户<code>groupadd</code>增加用户组等，同时介绍了如何使用<code>rz</code>、<code>sz</code>命令在Linux和Windows之间传输文件。</p><a id=\"more\"></a><hr><h1 id=\"Linux与Windows传输文件\"><a href=\"#Linux与Windows传输文件\" class=\"headerlink\" title=\"Linux与Windows传输文件\"></a>Linux与Windows传输文件</h1><ul><li>在Xshell中，若需要在Windows和Centos之间传输文件，可以使用<code>lrzsz</code>软件包当中的<code>rz</code>、<code>sz</code>命令来进行上传或下载文件；</li><li>使用<code>rz</code>、<code>sz</code>需要安装<code>lrzsz</code>软件包，使用命令<code>yum -y install lrzsz</code>安装；</li><li><code>rz</code>命令是用来上传文件到Linux，上传的位置是当前目录，<code>rz</code>后面不需要跟任何参数，回车后会弹出文件对话框，选择需要上传的文件即可；</li><li><code>sz</code>命令用来从Linux上下载文件，使用<code>sz filename</code>的形式，回弹出保存对话框，选择Windows上保存的位置即可。</li></ul><h1 id=\"用户及密码配置文件\"><a href=\"#用户及密码配置文件\" class=\"headerlink\" title=\"用户及密码配置文件\"></a>用户及密码配置文件</h1><h2 id=\"passwd用户文件\"><a href=\"#passwd用户文件\" class=\"headerlink\" title=\"passwd用户文件\"></a>passwd用户文件</h2><ul><li><code>passwd</code>文件位于<code>/etc/</code>目录下；</li><li><code>passwd</code>文件结构为每个用户一行，每行由冒号分割为7段:</li></ul><ol><li>第一段为用户名;</li><li>第二段为密码占位符;</li><li>第三段为<code>UID</code>;</li><li>第四段为<code>GID</code>;</li><li>第五段为注释信息，无实际作用;</li><li>第六段为家目录地址;</li><li>第七段为用户shell;</li></ol><ul><li>用户shell主要为<code>/sbin/nologin/</code>,表示用户禁止登陆，以及<code>/bin/bash</code>.</li><li>用户创建的新用户UID和GID从1000开始。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cat /etc/passwd</span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class=\"line\">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class=\"line\">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class=\"line\">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class=\"line\">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class=\"line\">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class=\"line\">games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class=\"line\">ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class=\"line\">nobody:x:99:99:Nobody:/:/sbin/nologin</span><br><span class=\"line\">systemd-bus-proxy:x:999:997:systemd Bus Proxy:/:/sbin/nologin</span><br><span class=\"line\">systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin</span><br><span class=\"line\">dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class=\"line\">polkitd:x:998:996:User <span class=\"keyword\">for</span> polkitd:/:/sbin/nologin</span><br><span class=\"line\">tss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin</span><br><span class=\"line\">postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class=\"line\">sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br><span class=\"line\">chrony:x:997:995::/var/lib/chrony:/sbin/nologin</span><br><span class=\"line\">lux:x:1000:1000::/home/lux:/bin/bash</span><br><span class=\"line\">clikks:x:1001:1001::/home/clikks:/bin/bash</span><br><span class=\"line\">colxu:x:1002:1002::/home/colxu:/bin/bash</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"shadow密码文件\"><a href=\"#shadow密码文件\" class=\"headerlink\" title=\"shadow密码文件\"></a>shadow密码文件</h2><ul><li><code>shadow</code>文件同样在<code>/etc/</code>目录下；</li><li><code>shadow</code>文件用来存储用户的密码，与<code>passwd</code>文件内容一一对应，每个用户一行，以冒号分割为9段:</li></ul><ol><li>第一段为用户名</li><li>第二段为加密的密码；</li><li>第三段为上次更改密码的天数，以1970/1/1计算；</li><li>第四段为密码更改限制天数，即必须满足距离上次更改密码多少天之后才能修改密码，默认为0；</li><li>第五段为距离上次更改密码多少天后密码到期，必须更改；</li><li>第六段为密码到期前警告期限，如提醒7天后用户密码到期；</li><li>第七段为账号的失效期限，例如设置为3，则密码到期后可以继续使用3天，3天后将被锁定;</li><li>第八段为距离1970/1/1的日期前账号可以使用;</li><li>第九段为保留字段。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cat /etc/shadow</span></span><br><span class=\"line\">root:<span class=\"variable\">$6</span><span class=\"variable\">$RorrMuXF</span><span class=\"variable\">$sqkTLxh</span>/gW4yAnb987iuYAooKBPMK9pn.zJ8JNWBwiQeNI3EccbU6dS5hvQUNb.sUA.5yAyjFkJ.ZNj4fDnTd/:17406:0:99999:7:::</span><br><span class=\"line\">bin:*:17110:0:99999:7:::</span><br><span class=\"line\">daemon:*:17110:0:99999:7:::</span><br><span class=\"line\">adm:*:17110:0:99999:7:::</span><br><span class=\"line\">lp:*:17110:0:99999:7:::</span><br><span class=\"line\">sync:*:17110:0:99999:7:::</span><br><span class=\"line\">shutdown:*:17110:0:99999:7:::</span><br><span class=\"line\">halt:*:17110:0:99999:7:::</span><br><span class=\"line\">mail:*:17110:0:99999:7:::</span><br><span class=\"line\">operator:*:17110:0:99999:7:::</span><br><span class=\"line\">games:*:17110:0:99999:7:::</span><br><span class=\"line\">ftp:*:17110:0:99999:7:::</span><br><span class=\"line\">nobody:*:17110:0:99999:7:::</span><br><span class=\"line\">systemd-bus-proxy:!!:17396::::::</span><br><span class=\"line\">systemd-network:!!:17396::::::</span><br><span class=\"line\">dbus:!!:17396::::::</span><br><span class=\"line\">polkitd:!!:17396::::::</span><br><span class=\"line\">tss:!!:17396::::::</span><br><span class=\"line\">postfix:!!:17396::::::</span><br><span class=\"line\">sshd:!!:17396::::::</span><br><span class=\"line\">chrony:!!:17396::::::</span><br><span class=\"line\">lux:!!:17462:0:99999:7:::</span><br><span class=\"line\">clikks:!!:17462:0:99999:7:::</span><br><span class=\"line\">colxu:!!:17464:0:99999:7:::</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id=\"用户组管理\"><a href=\"#用户组管理\" class=\"headerlink\" title=\"用户组管理\"></a>用户组管理</h1><h2 id=\"group用户组文件\"><a href=\"#group用户组文件\" class=\"headerlink\" title=\"group用户组文件\"></a>group用户组文件</h2><ul><li><code>group</code>用户组文件与<code>passwd</code>文件类似，都位于<code>/etc/</code>目录下；</li><li><code>group</code>文件记录了用户组的组名，以及密码，GID.</li></ul><h2 id=\"用户组管理命令\"><a href=\"#用户组管理命令\" class=\"headerlink\" title=\"用户组管理命令\"></a>用户组管理命令</h2><h3 id=\"1-groupadd\"><a href=\"#1-groupadd\" class=\"headerlink\" title=\"1. groupadd\"></a>1. groupadd</h3><ul><li><p><code>groupadd</code>用于添加用户组，命令格式为`groupadd [groupname]：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># groupadd grp1</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># tail -n1 /etc/group</span></span><br><span class=\"line\">grp1:x:1003:</span><br></pre></td></tr></table></figure></li><li><p>增加用户组的同时指定GID，命令为<code>groupadd [-g] [GID] [Groupname]</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># groupadd -g 1088 grp2</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># tail -n3 /etc/group</span></span><br><span class=\"line\">slocate:x:21:</span><br><span class=\"line\">grp1:x:1003:</span><br><span class=\"line\">grp2:x:1088:</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"2-groupdel\"><a href=\"#2-groupdel\" class=\"headerlink\" title=\"2. groupdel\"></a>2. groupdel</h3><ul><li><p><code>groupdel</code>命令的作用为删除用户组，格式是<code>groupdel [groupname]</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># groupdel grp1</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># tail -n3 /etc/group</span></span><br><span class=\"line\">colxu:x:1002:</span><br><span class=\"line\">slocate:x:21:</span><br><span class=\"line\">grp2:x:1088:</span><br></pre></td></tr></table></figure></li><li><p>当用户组内还存在有用户时，<code>groupdel</code>无法删除用户组：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># groupdel colxu</span></span><br><span class=\"line\">groupdel：不能移除用户“colxu”的主组</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h1><h2 id=\"useradd增加用户\"><a href=\"#useradd增加用户\" class=\"headerlink\" title=\"useradd增加用户\"></a>useradd增加用户</h2><ul><li><code>useradd</code>命令用来新增用户，<code>useradd</code>新增用户时可以指定UID,用户组&amp;GID，家目录，用户shell：<blockquote><p><strong>-u</strong>: 指定用户的UID；<br><strong>-g</strong>: 指定用户的用户组或GID；<br><strong>-d</strong>: 指定用户的家目录；<br><strong>-s</strong>：指定用户的shell；<br><strong>-M</strong>：表示不创建用户的家目录。</p></blockquote></li><li><p>如下，指定用户UID,GID,家目录，SHELL：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># useradd -u 1099 -g grp2 -d /home/mayun -s /bin/bash mahuateng</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># tail -n 3 /etc/passwd</span></span><br><span class=\"line\">clikks:x:1001:1001::/home/clikks:/bin/bash</span><br><span class=\"line\">colxu:x:1002:1002::/home/colxu:/bin/bash</span><br><span class=\"line\">mahuateng:x:1099:1088::/home/mayun:/bin/bash</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls /home/</span></span><br><span class=\"line\">clikks  colxu  lux  mayun</span><br></pre></td></tr></table></figure></li><li><p><code>-g</code>选项后如果跟的是不存在的用户组，则会报错：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># useradd -M -u 1100 -g 1032 -s /bin/bash usertest</span></span><br><span class=\"line\">useradd：“1032”组不存在</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"userdel删除用户\"><a href=\"#userdel删除用户\" class=\"headerlink\" title=\"userdel删除用户\"></a>userdel删除用户</h2><ul><li><p><code>userdel</code>命令用来删除用户，常用的为<code>-r</code>选项，用来在删除用户时同时删除用户的家目录，默认linux在删除用户时，不会删除用户的家目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># useradd -d /home/user110 -u 1101 -g 1088 -s /bin/bash usertest2</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># userdel usertest2</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls /home/</span></span><br><span class=\"line\">clikks  colxu  lux  mayun  user110</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># userdel -r mahuateng</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls /home/</span></span><br><span class=\"line\">clikks  colxu  lux  user110</span><br></pre></td></tr></table></figure></li><li><p>在新增用户时，用户的UID会跟随前一个用户的UID增加，GID并不随前一个GID增加，而是随UID增加</p></li></ul><h2 id=\"usermod修改用户\"><a href=\"#usermod修改用户\" class=\"headerlink\" title=\"usermod修改用户\"></a>usermod修改用户</h2><ul><li>usermod可以修改已经存在的用户的UID,GID,SHELL,家目录以及增加附属组，usermod的参数选项如下：<blockquote><p><strong>-u</strong>: 更改用户的UID;<br><strong>-g</strong>: 更改用户的的GID或用户组；<br><strong>-s</strong>: 更改用户的默认shell；<br><strong>-d</strong>: 更改用户的家目录；<br><strong>-L</strong>: 锁定用户，禁止用户登陆，同时/etc/shadow文件内，用户的密码前会增加一个<code>!</code>号；<br><strong>-U</strong>: 为锁定的用户解锁；<br><strong>-G</strong>: 增加用户的的附属组，如果<code>-G</code>后只跟一个组名，则会覆盖用户之前的附属组，添加多个附属组，需要在<code>-G</code>后一次跟随多个组名。</p></blockquote></li><li><p><code>id</code>命令用来查看用户的UID,GID,附属组信息，格式为<code>id [username]</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># id lux</span></span><br><span class=\"line\">uid=1000(lux) gid=1000(lux) 组=1000(lux)</span><br></pre></td></tr></table></figure></li><li><p>更改用户的UID,GID,shell，家目录,如下，更改用户colxu的信息：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># tail -n 4 /etc/passwd</span></span><br><span class=\"line\">lux:x:1000:1000::/home/lux:/bin/bash</span><br><span class=\"line\">clikks:x:1001:1001::/home/clikks:/bin/bash</span><br><span class=\"line\">colxu:x:1002:1002::/home/colxu:/bin/bash</span><br><span class=\"line\">usertest:x:1100:1088::/home/usertest:/bin/bash</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># usermod -u 1010 -g grp2 -d /home/lux -s /sbin/nologin colxu</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># tail -n 3 /etc/passwd</span></span><br><span class=\"line\">clikks:x:1001:1001::/home/clikks:/bin/bash</span><br><span class=\"line\">colxu:x:1010:1088::/home/lux:/sbin/nologin</span><br><span class=\"line\">usertest:x:1100:1088::/home/usertest:/bin/bash</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># su colxu</span></span><br><span class=\"line\">This account is currently not available.</span><br></pre></td></tr></table></figure></li><li><p>为colxu用户增加附属组,不论用户的附属组存在多少个，再次添加附属组都会将之前的附属组清空重新添加：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># id colxu</span></span><br><span class=\"line\">uid=1010(colxu) gid=1088(grp2) 组=1088(grp2)</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># usermod -G lux colxu</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># id colxu</span></span><br><span class=\"line\">uid=1010(colxu) gid=1088(grp2) 组=1088(grp2),1000(lux)</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># usermod -G clikks colxu</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># id colxu</span></span><br><span class=\"line\">uid=1010(colxu) gid=1088(grp2) 组=1088(grp2),1001(clikks)</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># usermod -G lux,clikks,root colxu</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># id colxu</span></span><br><span class=\"line\">uid=1010(colxu) gid=1088(grp2) 组=1088(grp2),0(root),1000(lux),1001(clikks)</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># usermod -G mayun colxu</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># id colxu</span></span><br><span class=\"line\">uid=1010(colxu) gid=1088(grp2) 组=1088(grp2),1101(mayun)</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>主要介绍Linux系统中用户和用户组的概念，以及用户和用户组文件和相应的管理命令，如<code>useradd</code>增加用户<code>groupadd</code>增加用户组等，同时介绍了如何使用<code>rz</code>、<code>sz</code>命令在Linux和Windows之间传输文件。</p>","more":"<hr><h1 id=\"Linux与Windows传输文件\"><a href=\"#Linux与Windows传输文件\" class=\"headerlink\" title=\"Linux与Windows传输文件\"></a>Linux与Windows传输文件</h1><ul><li>在Xshell中，若需要在Windows和Centos之间传输文件，可以使用<code>lrzsz</code>软件包当中的<code>rz</code>、<code>sz</code>命令来进行上传或下载文件；</li><li>使用<code>rz</code>、<code>sz</code>需要安装<code>lrzsz</code>软件包，使用命令<code>yum -y install lrzsz</code>安装；</li><li><code>rz</code>命令是用来上传文件到Linux，上传的位置是当前目录，<code>rz</code>后面不需要跟任何参数，回车后会弹出文件对话框，选择需要上传的文件即可；</li><li><code>sz</code>命令用来从Linux上下载文件，使用<code>sz filename</code>的形式，回弹出保存对话框，选择Windows上保存的位置即可。</li></ul><h1 id=\"用户及密码配置文件\"><a href=\"#用户及密码配置文件\" class=\"headerlink\" title=\"用户及密码配置文件\"></a>用户及密码配置文件</h1><h2 id=\"passwd用户文件\"><a href=\"#passwd用户文件\" class=\"headerlink\" title=\"passwd用户文件\"></a>passwd用户文件</h2><ul><li><code>passwd</code>文件位于<code>/etc/</code>目录下；</li><li><code>passwd</code>文件结构为每个用户一行，每行由冒号分割为7段:</li></ul><ol><li>第一段为用户名;</li><li>第二段为密码占位符;</li><li>第三段为<code>UID</code>;</li><li>第四段为<code>GID</code>;</li><li>第五段为注释信息，无实际作用;</li><li>第六段为家目录地址;</li><li>第七段为用户shell;</li></ol><ul><li>用户shell主要为<code>/sbin/nologin/</code>,表示用户禁止登陆，以及<code>/bin/bash</code>.</li><li>用户创建的新用户UID和GID从1000开始。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cat /etc/passwd</span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class=\"line\">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class=\"line\">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class=\"line\">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class=\"line\">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class=\"line\">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class=\"line\">games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class=\"line\">ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class=\"line\">nobody:x:99:99:Nobody:/:/sbin/nologin</span><br><span class=\"line\">systemd-bus-proxy:x:999:997:systemd Bus Proxy:/:/sbin/nologin</span><br><span class=\"line\">systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin</span><br><span class=\"line\">dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class=\"line\">polkitd:x:998:996:User <span class=\"keyword\">for</span> polkitd:/:/sbin/nologin</span><br><span class=\"line\">tss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin</span><br><span class=\"line\">postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class=\"line\">sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br><span class=\"line\">chrony:x:997:995::/var/lib/chrony:/sbin/nologin</span><br><span class=\"line\">lux:x:1000:1000::/home/lux:/bin/bash</span><br><span class=\"line\">clikks:x:1001:1001::/home/clikks:/bin/bash</span><br><span class=\"line\">colxu:x:1002:1002::/home/colxu:/bin/bash</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"shadow密码文件\"><a href=\"#shadow密码文件\" class=\"headerlink\" title=\"shadow密码文件\"></a>shadow密码文件</h2><ul><li><code>shadow</code>文件同样在<code>/etc/</code>目录下；</li><li><code>shadow</code>文件用来存储用户的密码，与<code>passwd</code>文件内容一一对应，每个用户一行，以冒号分割为9段:</li></ul><ol><li>第一段为用户名</li><li>第二段为加密的密码；</li><li>第三段为上次更改密码的天数，以1970/1/1计算；</li><li>第四段为密码更改限制天数，即必须满足距离上次更改密码多少天之后才能修改密码，默认为0；</li><li>第五段为距离上次更改密码多少天后密码到期，必须更改；</li><li>第六段为密码到期前警告期限，如提醒7天后用户密码到期；</li><li>第七段为账号的失效期限，例如设置为3，则密码到期后可以继续使用3天，3天后将被锁定;</li><li>第八段为距离1970/1/1的日期前账号可以使用;</li><li>第九段为保留字段。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cat /etc/shadow</span></span><br><span class=\"line\">root:<span class=\"variable\">$6</span><span class=\"variable\">$RorrMuXF</span><span class=\"variable\">$sqkTLxh</span>/gW4yAnb987iuYAooKBPMK9pn.zJ8JNWBwiQeNI3EccbU6dS5hvQUNb.sUA.5yAyjFkJ.ZNj4fDnTd/:17406:0:99999:7:::</span><br><span class=\"line\">bin:*:17110:0:99999:7:::</span><br><span class=\"line\">daemon:*:17110:0:99999:7:::</span><br><span class=\"line\">adm:*:17110:0:99999:7:::</span><br><span class=\"line\">lp:*:17110:0:99999:7:::</span><br><span class=\"line\">sync:*:17110:0:99999:7:::</span><br><span class=\"line\">shutdown:*:17110:0:99999:7:::</span><br><span class=\"line\">halt:*:17110:0:99999:7:::</span><br><span class=\"line\">mail:*:17110:0:99999:7:::</span><br><span class=\"line\">operator:*:17110:0:99999:7:::</span><br><span class=\"line\">games:*:17110:0:99999:7:::</span><br><span class=\"line\">ftp:*:17110:0:99999:7:::</span><br><span class=\"line\">nobody:*:17110:0:99999:7:::</span><br><span class=\"line\">systemd-bus-proxy:!!:17396::::::</span><br><span class=\"line\">systemd-network:!!:17396::::::</span><br><span class=\"line\">dbus:!!:17396::::::</span><br><span class=\"line\">polkitd:!!:17396::::::</span><br><span class=\"line\">tss:!!:17396::::::</span><br><span class=\"line\">postfix:!!:17396::::::</span><br><span class=\"line\">sshd:!!:17396::::::</span><br><span class=\"line\">chrony:!!:17396::::::</span><br><span class=\"line\">lux:!!:17462:0:99999:7:::</span><br><span class=\"line\">clikks:!!:17462:0:99999:7:::</span><br><span class=\"line\">colxu:!!:17464:0:99999:7:::</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id=\"用户组管理\"><a href=\"#用户组管理\" class=\"headerlink\" title=\"用户组管理\"></a>用户组管理</h1><h2 id=\"group用户组文件\"><a href=\"#group用户组文件\" class=\"headerlink\" title=\"group用户组文件\"></a>group用户组文件</h2><ul><li><code>group</code>用户组文件与<code>passwd</code>文件类似，都位于<code>/etc/</code>目录下；</li><li><code>group</code>文件记录了用户组的组名，以及密码，GID.</li></ul><h2 id=\"用户组管理命令\"><a href=\"#用户组管理命令\" class=\"headerlink\" title=\"用户组管理命令\"></a>用户组管理命令</h2><h3 id=\"1-groupadd\"><a href=\"#1-groupadd\" class=\"headerlink\" title=\"1. groupadd\"></a>1. groupadd</h3><ul><li><p><code>groupadd</code>用于添加用户组，命令格式为`groupadd [groupname]：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># groupadd grp1</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># tail -n1 /etc/group</span></span><br><span class=\"line\">grp1:x:1003:</span><br></pre></td></tr></table></figure></li><li><p>增加用户组的同时指定GID，命令为<code>groupadd [-g] [GID] [Groupname]</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># groupadd -g 1088 grp2</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># tail -n3 /etc/group</span></span><br><span class=\"line\">slocate:x:21:</span><br><span class=\"line\">grp1:x:1003:</span><br><span class=\"line\">grp2:x:1088:</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"2-groupdel\"><a href=\"#2-groupdel\" class=\"headerlink\" title=\"2. groupdel\"></a>2. groupdel</h3><ul><li><p><code>groupdel</code>命令的作用为删除用户组，格式是<code>groupdel [groupname]</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># groupdel grp1</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># tail -n3 /etc/group</span></span><br><span class=\"line\">colxu:x:1002:</span><br><span class=\"line\">slocate:x:21:</span><br><span class=\"line\">grp2:x:1088:</span><br></pre></td></tr></table></figure></li><li><p>当用户组内还存在有用户时，<code>groupdel</code>无法删除用户组：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># groupdel colxu</span></span><br><span class=\"line\">groupdel：不能移除用户“colxu”的主组</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h1><h2 id=\"useradd增加用户\"><a href=\"#useradd增加用户\" class=\"headerlink\" title=\"useradd增加用户\"></a>useradd增加用户</h2><ul><li><code>useradd</code>命令用来新增用户，<code>useradd</code>新增用户时可以指定UID,用户组&amp;GID，家目录，用户shell：<blockquote><p><strong>-u</strong>: 指定用户的UID；<br><strong>-g</strong>: 指定用户的用户组或GID；<br><strong>-d</strong>: 指定用户的家目录；<br><strong>-s</strong>：指定用户的shell；<br><strong>-M</strong>：表示不创建用户的家目录。</p></blockquote></li><li><p>如下，指定用户UID,GID,家目录，SHELL：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># useradd -u 1099 -g grp2 -d /home/mayun -s /bin/bash mahuateng</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># tail -n 3 /etc/passwd</span></span><br><span class=\"line\">clikks:x:1001:1001::/home/clikks:/bin/bash</span><br><span class=\"line\">colxu:x:1002:1002::/home/colxu:/bin/bash</span><br><span class=\"line\">mahuateng:x:1099:1088::/home/mayun:/bin/bash</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls /home/</span></span><br><span class=\"line\">clikks  colxu  lux  mayun</span><br></pre></td></tr></table></figure></li><li><p><code>-g</code>选项后如果跟的是不存在的用户组，则会报错：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># useradd -M -u 1100 -g 1032 -s /bin/bash usertest</span></span><br><span class=\"line\">useradd：“1032”组不存在</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"userdel删除用户\"><a href=\"#userdel删除用户\" class=\"headerlink\" title=\"userdel删除用户\"></a>userdel删除用户</h2><ul><li><p><code>userdel</code>命令用来删除用户，常用的为<code>-r</code>选项，用来在删除用户时同时删除用户的家目录，默认linux在删除用户时，不会删除用户的家目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># useradd -d /home/user110 -u 1101 -g 1088 -s /bin/bash usertest2</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># userdel usertest2</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls /home/</span></span><br><span class=\"line\">clikks  colxu  lux  mayun  user110</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># userdel -r mahuateng</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls /home/</span></span><br><span class=\"line\">clikks  colxu  lux  user110</span><br></pre></td></tr></table></figure></li><li><p>在新增用户时，用户的UID会跟随前一个用户的UID增加，GID并不随前一个GID增加，而是随UID增加</p></li></ul><h2 id=\"usermod修改用户\"><a href=\"#usermod修改用户\" class=\"headerlink\" title=\"usermod修改用户\"></a>usermod修改用户</h2><ul><li>usermod可以修改已经存在的用户的UID,GID,SHELL,家目录以及增加附属组，usermod的参数选项如下：<blockquote><p><strong>-u</strong>: 更改用户的UID;<br><strong>-g</strong>: 更改用户的的GID或用户组；<br><strong>-s</strong>: 更改用户的默认shell；<br><strong>-d</strong>: 更改用户的家目录；<br><strong>-L</strong>: 锁定用户，禁止用户登陆，同时/etc/shadow文件内，用户的密码前会增加一个<code>!</code>号；<br><strong>-U</strong>: 为锁定的用户解锁；<br><strong>-G</strong>: 增加用户的的附属组，如果<code>-G</code>后只跟一个组名，则会覆盖用户之前的附属组，添加多个附属组，需要在<code>-G</code>后一次跟随多个组名。</p></blockquote></li><li><p><code>id</code>命令用来查看用户的UID,GID,附属组信息，格式为<code>id [username]</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># id lux</span></span><br><span class=\"line\">uid=1000(lux) gid=1000(lux) 组=1000(lux)</span><br></pre></td></tr></table></figure></li><li><p>更改用户的UID,GID,shell，家目录,如下，更改用户colxu的信息：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># tail -n 4 /etc/passwd</span></span><br><span class=\"line\">lux:x:1000:1000::/home/lux:/bin/bash</span><br><span class=\"line\">clikks:x:1001:1001::/home/clikks:/bin/bash</span><br><span class=\"line\">colxu:x:1002:1002::/home/colxu:/bin/bash</span><br><span class=\"line\">usertest:x:1100:1088::/home/usertest:/bin/bash</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># usermod -u 1010 -g grp2 -d /home/lux -s /sbin/nologin colxu</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># tail -n 3 /etc/passwd</span></span><br><span class=\"line\">clikks:x:1001:1001::/home/clikks:/bin/bash</span><br><span class=\"line\">colxu:x:1010:1088::/home/lux:/sbin/nologin</span><br><span class=\"line\">usertest:x:1100:1088::/home/usertest:/bin/bash</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># su colxu</span></span><br><span class=\"line\">This account is currently not available.</span><br></pre></td></tr></table></figure></li><li><p>为colxu用户增加附属组,不论用户的附属组存在多少个，再次添加附属组都会将之前的附属组清空重新添加：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># id colxu</span></span><br><span class=\"line\">uid=1010(colxu) gid=1088(grp2) 组=1088(grp2)</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># usermod -G lux colxu</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># id colxu</span></span><br><span class=\"line\">uid=1010(colxu) gid=1088(grp2) 组=1088(grp2),1000(lux)</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># usermod -G clikks colxu</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># id colxu</span></span><br><span class=\"line\">uid=1010(colxu) gid=1088(grp2) 组=1088(grp2),1001(clikks)</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># usermod -G lux,clikks,root colxu</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># id colxu</span></span><br><span class=\"line\">uid=1010(colxu) gid=1088(grp2) 组=1088(grp2),0(root),1000(lux),1001(clikks)</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># usermod -G mayun colxu</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># id colxu</span></span><br><span class=\"line\">uid=1010(colxu) gid=1088(grp2) 组=1088(grp2),1101(mayun)</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->"},{"title":"Centos7系列:用户身份切换和sudo命令","author":"Evobot","abbrlink":"9f1fc446","date":"2018-04-04T18:18:26.000Z","image":null,"_content":"\n\n\n本文主要介绍`su`切换用户身份命令的用法和作用、`sudo`命令的用法和`visudo`配置sudo命令权限，以及如何禁止root用户ssh远程登录。\n\n<!-- more -->\n\n---\n\n# su命令\n## 切换用户身份\n- su命令用来切换用户，命令格式为`su [-] [username]`,`[-]`号加与不加的区别在于是否彻底切换用户身份，如用户环境变量，家目录、配置文件等。\n- `su`也可以以其他用户身份执行命令，命令为`su - -c \"cmd\" [username]`:\n```bash\n[root@localhost ~]# su - -c \"touch /tmp/software.111\" lux\n[root@localhost ~]# ls -l /tmp/ | head -n 4\n总用量 131076\n-rw-------. 1 root root      1422 10月 20 23:23 anaconda-ks.cfg\n-rw-r--r--. 2 root root 134217728 10月 27 21:37 image.img\n-rw-rw-r--. 1 lux  lux          0 10月 30 22:48 software.111\n```\n- 若切换到无家目录的用户下，会出现用户无环境变量、家目录、配置文件的情况：\n```bash\n[root@localhost ~]# su - usertest\nsu: 警告：无法更改到 /home/usertest 目录: 没有那个文件或目录\n-bash-4.2$ pwd\n/root\n-bash-4.2$ \n```\n\n## 配置无家目录用户的登陆环境\n- 给无家目录的用户创建家目录并配置登陆环境需要以下几步：\n1.  创建家目录；\n2.  更改目录权限；\n3.  从`/etc/skel/`目录下复制`.bash`配置文件；\n4.  更改配置文件权限。\n```bash\n[root@localhost ~]# mkdir /home/usertest\n[root@localhost ~]# id usertest\nuid=1100(usertest) gid=1088(grp2) 组=1088(grp2)\n[root@localhost ~]# chown usertest:grp2 /home/usertest/\n[root@localhost ~]# ls -ld /home/usertest/\ndrwxr-xr-x. 2 usertest grp2 6 10月 30 22:54 /home/usertest/\n[root@localhost ~]# ls /etc/skel/.bash\n.bash_logout   .bash_profile  .bashrc        \n[root@localhost ~]# cp /etc/skel/.bash* /home/usertest/\n[root@localhost ~]# chown -R usertest:grp2 /home/usertest/\n[root@localhost ~]# ls -la /home/usertest/\n总用量 12\ndrwxr-xr-x. 2 usertest grp2  62 10月 30 22:56 .\ndrwxr-xr-x. 8 root     root  88 10月 30 22:54 ..\n-rw-r--r--. 1 usertest grp2  18 10月 30 22:56 .bash_logout\n-rw-r--r--. 1 usertest grp2 193 10月 30 22:56 .bash_profile\n-rw-r--r--. 1 usertest grp2 231 10月 30 22:56 .bashrc\n[root@localhost ~]# su - usertest\n上一次登录：一 10月 30 22:52:05 CST 2017pts/0 上\n[usertest@localhost ~]$ \n```\n\n------------\n\n\n# sudo命令\n## visudo配置\n- 系统配置sudo的命令是`visudo`,`visudo`实际上修改的是`/etc/sudoers`文件，但是不建议使用vi去修改这个文件，而是使用`visudo`命令，`visudo`能够对修改的内容排错。\n- `visudo`可以将用户分组，命令分组，格式如下：\n```bash\n#默认格式如下，添加其他用户时，只要将最后一个ALL更改为需要让用户执行的命令，命令格式必须为绝对路径\n## The COMMANDS section may have other options added to it.\n##\n## Allow root to run any commands anywhere\nroot    ALL=(ALL)       ALL\nlux     ALL=(ALL)       /usr/bin/ls, /usr/bin/cat\n```\n- 命令分组采用如下的格式：\n```bash\n## Networking\n# Cmnd_Alias NETWORKING = /sbin/route, /sbin/ifconfig, /bin/ping, /sbin/dhclient, /usr/bin/net, /sbin/iptables, /usr/bin/rfcomm, /usr/bin/wvdial, /sbin/iwconfig, /sbin/mii-tool\n##Lux cmd\nCmnd_Alias LUX = /usr/bin/ls, /usr/bin/cat, /usr/bin/mv\n```\n- 也可以将几个用户添加到一个虚拟的用户组，再对用户组进行配置。例如：\n```bash\n## User Aliases\n## These aren't often necessary, as you can use regular groups\n## (ie, from files, LDAP, NIS, etc) in this file - just use %groupname\n## rather than USERALIAS\n# User_Alias ADMINS = jsmith, mikem\nUser_Alias SUPER = lux, colxu, clikks\n```\n- 也可以对系统的用户组进行配置：\n```bash\n## Allows people in group wheel to run all commands\n%wheel  ALL=(ALL)       ALL\n```\n\n------------\n\n# 用户root权限管理\n## 禁止root远程登陆\n- 禁止root远程登陆需要修改sshd的配置文件，如下所示：\n```bash\n#LoginGraceTime 2m\n#将permitRootLogin yes改为no即可。\nPermitRootLogin no\n#StrictModes yes\n#MaxAuthTries 6\n#MaxSessions 10\n```\n- 然后重启`sshd`服务：\n```bash\n[root@localhost ~]# systemctl restart sshd.service\n```\n## 配置其他用户sudo权限\n\n- 禁止root登陆后，需要对其他用户分配root的权限，在`visudo`里，给用户增加`su`命令的权限：\n```bash\nUser_Alias SKYS = lux, colxu, clikks\n##Lux cmd\nCmnd_Alias SU = /usr/bin/su\n## Allow root to run any commands anywhere\nroot    ALL=(ALL)       ALL\nSKYS    ALL=(ALL)       NOPASSWD: SU\n```\n---\n\n","source":"_posts/Centos7系列-用户身份切换和sudo命令.md","raw":"---\ntitle: 'Centos7系列:用户身份切换和sudo命令'\nauthor: Evobot\nabbrlink: 9f1fc446\ndate: 2018-04-05 02:18:26\ncategories: Centos7\ntags: [Linux, Centos]\nimage:\n---\n\n\n\n本文主要介绍`su`切换用户身份命令的用法和作用、`sudo`命令的用法和`visudo`配置sudo命令权限，以及如何禁止root用户ssh远程登录。\n\n<!-- more -->\n\n---\n\n# su命令\n## 切换用户身份\n- su命令用来切换用户，命令格式为`su [-] [username]`,`[-]`号加与不加的区别在于是否彻底切换用户身份，如用户环境变量，家目录、配置文件等。\n- `su`也可以以其他用户身份执行命令，命令为`su - -c \"cmd\" [username]`:\n```bash\n[root@localhost ~]# su - -c \"touch /tmp/software.111\" lux\n[root@localhost ~]# ls -l /tmp/ | head -n 4\n总用量 131076\n-rw-------. 1 root root      1422 10月 20 23:23 anaconda-ks.cfg\n-rw-r--r--. 2 root root 134217728 10月 27 21:37 image.img\n-rw-rw-r--. 1 lux  lux          0 10月 30 22:48 software.111\n```\n- 若切换到无家目录的用户下，会出现用户无环境变量、家目录、配置文件的情况：\n```bash\n[root@localhost ~]# su - usertest\nsu: 警告：无法更改到 /home/usertest 目录: 没有那个文件或目录\n-bash-4.2$ pwd\n/root\n-bash-4.2$ \n```\n\n## 配置无家目录用户的登陆环境\n- 给无家目录的用户创建家目录并配置登陆环境需要以下几步：\n1.  创建家目录；\n2.  更改目录权限；\n3.  从`/etc/skel/`目录下复制`.bash`配置文件；\n4.  更改配置文件权限。\n```bash\n[root@localhost ~]# mkdir /home/usertest\n[root@localhost ~]# id usertest\nuid=1100(usertest) gid=1088(grp2) 组=1088(grp2)\n[root@localhost ~]# chown usertest:grp2 /home/usertest/\n[root@localhost ~]# ls -ld /home/usertest/\ndrwxr-xr-x. 2 usertest grp2 6 10月 30 22:54 /home/usertest/\n[root@localhost ~]# ls /etc/skel/.bash\n.bash_logout   .bash_profile  .bashrc        \n[root@localhost ~]# cp /etc/skel/.bash* /home/usertest/\n[root@localhost ~]# chown -R usertest:grp2 /home/usertest/\n[root@localhost ~]# ls -la /home/usertest/\n总用量 12\ndrwxr-xr-x. 2 usertest grp2  62 10月 30 22:56 .\ndrwxr-xr-x. 8 root     root  88 10月 30 22:54 ..\n-rw-r--r--. 1 usertest grp2  18 10月 30 22:56 .bash_logout\n-rw-r--r--. 1 usertest grp2 193 10月 30 22:56 .bash_profile\n-rw-r--r--. 1 usertest grp2 231 10月 30 22:56 .bashrc\n[root@localhost ~]# su - usertest\n上一次登录：一 10月 30 22:52:05 CST 2017pts/0 上\n[usertest@localhost ~]$ \n```\n\n------------\n\n\n# sudo命令\n## visudo配置\n- 系统配置sudo的命令是`visudo`,`visudo`实际上修改的是`/etc/sudoers`文件，但是不建议使用vi去修改这个文件，而是使用`visudo`命令，`visudo`能够对修改的内容排错。\n- `visudo`可以将用户分组，命令分组，格式如下：\n```bash\n#默认格式如下，添加其他用户时，只要将最后一个ALL更改为需要让用户执行的命令，命令格式必须为绝对路径\n## The COMMANDS section may have other options added to it.\n##\n## Allow root to run any commands anywhere\nroot    ALL=(ALL)       ALL\nlux     ALL=(ALL)       /usr/bin/ls, /usr/bin/cat\n```\n- 命令分组采用如下的格式：\n```bash\n## Networking\n# Cmnd_Alias NETWORKING = /sbin/route, /sbin/ifconfig, /bin/ping, /sbin/dhclient, /usr/bin/net, /sbin/iptables, /usr/bin/rfcomm, /usr/bin/wvdial, /sbin/iwconfig, /sbin/mii-tool\n##Lux cmd\nCmnd_Alias LUX = /usr/bin/ls, /usr/bin/cat, /usr/bin/mv\n```\n- 也可以将几个用户添加到一个虚拟的用户组，再对用户组进行配置。例如：\n```bash\n## User Aliases\n## These aren't often necessary, as you can use regular groups\n## (ie, from files, LDAP, NIS, etc) in this file - just use %groupname\n## rather than USERALIAS\n# User_Alias ADMINS = jsmith, mikem\nUser_Alias SUPER = lux, colxu, clikks\n```\n- 也可以对系统的用户组进行配置：\n```bash\n## Allows people in group wheel to run all commands\n%wheel  ALL=(ALL)       ALL\n```\n\n------------\n\n# 用户root权限管理\n## 禁止root远程登陆\n- 禁止root远程登陆需要修改sshd的配置文件，如下所示：\n```bash\n#LoginGraceTime 2m\n#将permitRootLogin yes改为no即可。\nPermitRootLogin no\n#StrictModes yes\n#MaxAuthTries 6\n#MaxSessions 10\n```\n- 然后重启`sshd`服务：\n```bash\n[root@localhost ~]# systemctl restart sshd.service\n```\n## 配置其他用户sudo权限\n\n- 禁止root登陆后，需要对其他用户分配root的权限，在`visudo`里，给用户增加`su`命令的权限：\n```bash\nUser_Alias SKYS = lux, colxu, clikks\n##Lux cmd\nCmnd_Alias SU = /usr/bin/su\n## Allow root to run any commands anywhere\nroot    ALL=(ALL)       ALL\nSKYS    ALL=(ALL)       NOPASSWD: SU\n```\n---\n\n","slug":"Centos7系列-用户身份切换和sudo命令","published":1,"updated":"2018-06-02T13:01:29.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gaz950018u1jx5urohry6","content":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>本文主要介绍<code>su</code>切换用户身份命令的用法和作用、<code>sudo</code>命令的用法和<code>visudo</code>配置sudo命令权限，以及如何禁止root用户ssh远程登录。</p><a id=\"more\"></a><hr><h1 id=\"su命令\"><a href=\"#su命令\" class=\"headerlink\" title=\"su命令\"></a>su命令</h1><h2 id=\"切换用户身份\"><a href=\"#切换用户身份\" class=\"headerlink\" title=\"切换用户身份\"></a>切换用户身份</h2><ul><li>su命令用来切换用户，命令格式为<code>su [-] [username]</code>,<code>[-]</code>号加与不加的区别在于是否彻底切换用户身份，如用户环境变量，家目录、配置文件等。</li><li><p><code>su</code>也可以以其他用户身份执行命令，命令为<code>su - -c &quot;cmd&quot; [username]</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># su - -c \"touch /tmp/software.111\" lux</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -l /tmp/ | head -n 4</span></span><br><span class=\"line\">总用量 131076</span><br><span class=\"line\">-rw-------. 1 root root      1422 10月 20 23:23 anaconda-ks.cfg</span><br><span class=\"line\">-rw-r--r--. 2 root root 134217728 10月 27 21:37 image.img</span><br><span class=\"line\">-rw-rw-r--. 1 lux  lux          0 10月 30 22:48 software.111</span><br></pre></td></tr></table></figure></li><li><p>若切换到无家目录的用户下，会出现用户无环境变量、家目录、配置文件的情况：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># su - usertest</span></span><br><span class=\"line\">su: 警告：无法更改到 /home/usertest 目录: 没有那个文件或目录</span><br><span class=\"line\">-bash-4.2$ <span class=\"built_in\">pwd</span></span><br><span class=\"line\">/root</span><br><span class=\"line\">-bash-4.2$</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"配置无家目录用户的登陆环境\"><a href=\"#配置无家目录用户的登陆环境\" class=\"headerlink\" title=\"配置无家目录用户的登陆环境\"></a>配置无家目录用户的登陆环境</h2><ul><li>给无家目录的用户创建家目录并配置登陆环境需要以下几步：</li></ul><ol><li>创建家目录；</li><li>更改目录权限；</li><li>从<code>/etc/skel/</code>目录下复制<code>.bash</code>配置文件；</li><li>更改配置文件权限。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkdir /home/usertest</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># id usertest</span></span><br><span class=\"line\">uid=1100(usertest) gid=1088(grp2) 组=1088(grp2)</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chown usertest:grp2 /home/usertest/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -ld /home/usertest/</span></span><br><span class=\"line\">drwxr-xr-x. 2 usertest grp2 6 10月 30 22:54 /home/usertest/</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls /etc/skel/.bash</span></span><br><span class=\"line\">.bash_logout   .bash_profile  .bashrc        </span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cp /etc/skel/.bash* /home/usertest/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chown -R usertest:grp2 /home/usertest/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -la /home/usertest/</span></span><br><span class=\"line\">总用量 12</span><br><span class=\"line\">drwxr-xr-x. 2 usertest grp2  62 10月 30 22:56 .</span><br><span class=\"line\">drwxr-xr-x. 8 root     root  88 10月 30 22:54 ..</span><br><span class=\"line\">-rw-r--r--. 1 usertest grp2  18 10月 30 22:56 .bash_logout</span><br><span class=\"line\">-rw-r--r--. 1 usertest grp2 193 10月 30 22:56 .bash_profile</span><br><span class=\"line\">-rw-r--r--. 1 usertest grp2 231 10月 30 22:56 .bashrc</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># su - usertest</span></span><br><span class=\"line\">上一次登录：一 10月 30 22:52:05 CST 2017pts/0 上</span><br><span class=\"line\">[usertest@localhost ~]$</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id=\"sudo命令\"><a href=\"#sudo命令\" class=\"headerlink\" title=\"sudo命令\"></a>sudo命令</h1><h2 id=\"visudo配置\"><a href=\"#visudo配置\" class=\"headerlink\" title=\"visudo配置\"></a>visudo配置</h2><ul><li>系统配置sudo的命令是<code>visudo</code>,<code>visudo</code>实际上修改的是<code>/etc/sudoers</code>文件，但是不建议使用vi去修改这个文件，而是使用<code>visudo</code>命令，<code>visudo</code>能够对修改的内容排错。</li><li><p><code>visudo</code>可以将用户分组，命令分组，格式如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#默认格式如下，添加其他用户时，只要将最后一个ALL更改为需要让用户执行的命令，命令格式必须为绝对路径</span></span><br><span class=\"line\"><span class=\"comment\">## The COMMANDS section may have other options added to it.</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\">## Allow root to run any commands anywhere</span></span><br><span class=\"line\">root    ALL=(ALL)       ALL</span><br><span class=\"line\">lux     ALL=(ALL)       /usr/bin/ls, /usr/bin/cat</span><br></pre></td></tr></table></figure></li><li><p>命令分组采用如下的格式：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Networking</span></span><br><span class=\"line\"><span class=\"comment\"># Cmnd_Alias NETWORKING = /sbin/route, /sbin/ifconfig, /bin/ping, /sbin/dhclient, /usr/bin/net, /sbin/iptables, /usr/bin/rfcomm, /usr/bin/wvdial, /sbin/iwconfig, /sbin/mii-tool</span></span><br><span class=\"line\"><span class=\"comment\">##Lux cmd</span></span><br><span class=\"line\">Cmnd_Alias LUX = /usr/bin/ls, /usr/bin/cat, /usr/bin/mv</span><br></pre></td></tr></table></figure></li><li><p>也可以将几个用户添加到一个虚拟的用户组，再对用户组进行配置。例如：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## User Aliases</span></span><br><span class=\"line\"><span class=\"comment\">## These aren't often necessary, as you can use regular groups</span></span><br><span class=\"line\"><span class=\"comment\">## (ie, from files, LDAP, NIS, etc) in this file - just use %groupname</span></span><br><span class=\"line\"><span class=\"comment\">## rather than USERALIAS</span></span><br><span class=\"line\"><span class=\"comment\"># User_Alias ADMINS = jsmith, mikem</span></span><br><span class=\"line\">User_Alias SUPER = lux, colxu, clikks</span><br></pre></td></tr></table></figure></li><li><p>也可以对系统的用户组进行配置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Allows people in group wheel to run all commands</span></span><br><span class=\"line\">%wheel  ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id=\"用户root权限管理\"><a href=\"#用户root权限管理\" class=\"headerlink\" title=\"用户root权限管理\"></a>用户root权限管理</h1><h2 id=\"禁止root远程登陆\"><a href=\"#禁止root远程登陆\" class=\"headerlink\" title=\"禁止root远程登陆\"></a>禁止root远程登陆</h2><ul><li><p>禁止root远程登陆需要修改sshd的配置文件，如下所示：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#LoginGraceTime 2m</span></span><br><span class=\"line\"><span class=\"comment\">#将permitRootLogin yes改为no即可。</span></span><br><span class=\"line\">PermitRootLogin no</span><br><span class=\"line\"><span class=\"comment\">#StrictModes yes</span></span><br><span class=\"line\"><span class=\"comment\">#MaxAuthTries 6</span></span><br><span class=\"line\"><span class=\"comment\">#MaxSessions 10</span></span><br></pre></td></tr></table></figure></li><li><p>然后重启<code>sshd</code>服务：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl restart sshd.service</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"配置其他用户sudo权限\"><a href=\"#配置其他用户sudo权限\" class=\"headerlink\" title=\"配置其他用户sudo权限\"></a>配置其他用户sudo权限</h2><ul><li>禁止root登陆后，需要对其他用户分配root的权限，在<code>visudo</code>里，给用户增加<code>su</code>命令的权限：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User_Alias SKYS = lux, colxu, clikks</span><br><span class=\"line\"><span class=\"comment\">##Lux cmd</span></span><br><span class=\"line\">Cmnd_Alias SU = /usr/bin/su</span><br><span class=\"line\"><span class=\"comment\">## Allow root to run any commands anywhere</span></span><br><span class=\"line\">root    ALL=(ALL)       ALL</span><br><span class=\"line\">SKYS    ALL=(ALL)       NOPASSWD: SU</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>本文主要介绍<code>su</code>切换用户身份命令的用法和作用、<code>sudo</code>命令的用法和<code>visudo</code>配置sudo命令权限，以及如何禁止root用户ssh远程登录。</p>","more":"<hr><h1 id=\"su命令\"><a href=\"#su命令\" class=\"headerlink\" title=\"su命令\"></a>su命令</h1><h2 id=\"切换用户身份\"><a href=\"#切换用户身份\" class=\"headerlink\" title=\"切换用户身份\"></a>切换用户身份</h2><ul><li>su命令用来切换用户，命令格式为<code>su [-] [username]</code>,<code>[-]</code>号加与不加的区别在于是否彻底切换用户身份，如用户环境变量，家目录、配置文件等。</li><li><p><code>su</code>也可以以其他用户身份执行命令，命令为<code>su - -c &quot;cmd&quot; [username]</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># su - -c \"touch /tmp/software.111\" lux</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -l /tmp/ | head -n 4</span></span><br><span class=\"line\">总用量 131076</span><br><span class=\"line\">-rw-------. 1 root root      1422 10月 20 23:23 anaconda-ks.cfg</span><br><span class=\"line\">-rw-r--r--. 2 root root 134217728 10月 27 21:37 image.img</span><br><span class=\"line\">-rw-rw-r--. 1 lux  lux          0 10月 30 22:48 software.111</span><br></pre></td></tr></table></figure></li><li><p>若切换到无家目录的用户下，会出现用户无环境变量、家目录、配置文件的情况：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># su - usertest</span></span><br><span class=\"line\">su: 警告：无法更改到 /home/usertest 目录: 没有那个文件或目录</span><br><span class=\"line\">-bash-4.2$ <span class=\"built_in\">pwd</span></span><br><span class=\"line\">/root</span><br><span class=\"line\">-bash-4.2$</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"配置无家目录用户的登陆环境\"><a href=\"#配置无家目录用户的登陆环境\" class=\"headerlink\" title=\"配置无家目录用户的登陆环境\"></a>配置无家目录用户的登陆环境</h2><ul><li>给无家目录的用户创建家目录并配置登陆环境需要以下几步：</li></ul><ol><li>创建家目录；</li><li>更改目录权限；</li><li>从<code>/etc/skel/</code>目录下复制<code>.bash</code>配置文件；</li><li>更改配置文件权限。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkdir /home/usertest</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># id usertest</span></span><br><span class=\"line\">uid=1100(usertest) gid=1088(grp2) 组=1088(grp2)</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chown usertest:grp2 /home/usertest/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -ld /home/usertest/</span></span><br><span class=\"line\">drwxr-xr-x. 2 usertest grp2 6 10月 30 22:54 /home/usertest/</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls /etc/skel/.bash</span></span><br><span class=\"line\">.bash_logout   .bash_profile  .bashrc        </span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cp /etc/skel/.bash* /home/usertest/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># chown -R usertest:grp2 /home/usertest/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -la /home/usertest/</span></span><br><span class=\"line\">总用量 12</span><br><span class=\"line\">drwxr-xr-x. 2 usertest grp2  62 10月 30 22:56 .</span><br><span class=\"line\">drwxr-xr-x. 8 root     root  88 10月 30 22:54 ..</span><br><span class=\"line\">-rw-r--r--. 1 usertest grp2  18 10月 30 22:56 .bash_logout</span><br><span class=\"line\">-rw-r--r--. 1 usertest grp2 193 10月 30 22:56 .bash_profile</span><br><span class=\"line\">-rw-r--r--. 1 usertest grp2 231 10月 30 22:56 .bashrc</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># su - usertest</span></span><br><span class=\"line\">上一次登录：一 10月 30 22:52:05 CST 2017pts/0 上</span><br><span class=\"line\">[usertest@localhost ~]$</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id=\"sudo命令\"><a href=\"#sudo命令\" class=\"headerlink\" title=\"sudo命令\"></a>sudo命令</h1><h2 id=\"visudo配置\"><a href=\"#visudo配置\" class=\"headerlink\" title=\"visudo配置\"></a>visudo配置</h2><ul><li>系统配置sudo的命令是<code>visudo</code>,<code>visudo</code>实际上修改的是<code>/etc/sudoers</code>文件，但是不建议使用vi去修改这个文件，而是使用<code>visudo</code>命令，<code>visudo</code>能够对修改的内容排错。</li><li><p><code>visudo</code>可以将用户分组，命令分组，格式如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#默认格式如下，添加其他用户时，只要将最后一个ALL更改为需要让用户执行的命令，命令格式必须为绝对路径</span></span><br><span class=\"line\"><span class=\"comment\">## The COMMANDS section may have other options added to it.</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\">## Allow root to run any commands anywhere</span></span><br><span class=\"line\">root    ALL=(ALL)       ALL</span><br><span class=\"line\">lux     ALL=(ALL)       /usr/bin/ls, /usr/bin/cat</span><br></pre></td></tr></table></figure></li><li><p>命令分组采用如下的格式：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Networking</span></span><br><span class=\"line\"><span class=\"comment\"># Cmnd_Alias NETWORKING = /sbin/route, /sbin/ifconfig, /bin/ping, /sbin/dhclient, /usr/bin/net, /sbin/iptables, /usr/bin/rfcomm, /usr/bin/wvdial, /sbin/iwconfig, /sbin/mii-tool</span></span><br><span class=\"line\"><span class=\"comment\">##Lux cmd</span></span><br><span class=\"line\">Cmnd_Alias LUX = /usr/bin/ls, /usr/bin/cat, /usr/bin/mv</span><br></pre></td></tr></table></figure></li><li><p>也可以将几个用户添加到一个虚拟的用户组，再对用户组进行配置。例如：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## User Aliases</span></span><br><span class=\"line\"><span class=\"comment\">## These aren't often necessary, as you can use regular groups</span></span><br><span class=\"line\"><span class=\"comment\">## (ie, from files, LDAP, NIS, etc) in this file - just use %groupname</span></span><br><span class=\"line\"><span class=\"comment\">## rather than USERALIAS</span></span><br><span class=\"line\"><span class=\"comment\"># User_Alias ADMINS = jsmith, mikem</span></span><br><span class=\"line\">User_Alias SUPER = lux, colxu, clikks</span><br></pre></td></tr></table></figure></li><li><p>也可以对系统的用户组进行配置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Allows people in group wheel to run all commands</span></span><br><span class=\"line\">%wheel  ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id=\"用户root权限管理\"><a href=\"#用户root权限管理\" class=\"headerlink\" title=\"用户root权限管理\"></a>用户root权限管理</h1><h2 id=\"禁止root远程登陆\"><a href=\"#禁止root远程登陆\" class=\"headerlink\" title=\"禁止root远程登陆\"></a>禁止root远程登陆</h2><ul><li><p>禁止root远程登陆需要修改sshd的配置文件，如下所示：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#LoginGraceTime 2m</span></span><br><span class=\"line\"><span class=\"comment\">#将permitRootLogin yes改为no即可。</span></span><br><span class=\"line\">PermitRootLogin no</span><br><span class=\"line\"><span class=\"comment\">#StrictModes yes</span></span><br><span class=\"line\"><span class=\"comment\">#MaxAuthTries 6</span></span><br><span class=\"line\"><span class=\"comment\">#MaxSessions 10</span></span><br></pre></td></tr></table></figure></li><li><p>然后重启<code>sshd</code>服务：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl restart sshd.service</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"配置其他用户sudo权限\"><a href=\"#配置其他用户sudo权限\" class=\"headerlink\" title=\"配置其他用户sudo权限\"></a>配置其他用户sudo权限</h2><ul><li>禁止root登陆后，需要对其他用户分配root的权限，在<code>visudo</code>里，给用户增加<code>su</code>命令的权限：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User_Alias SKYS = lux, colxu, clikks</span><br><span class=\"line\"><span class=\"comment\">##Lux cmd</span></span><br><span class=\"line\">Cmnd_Alias SU = /usr/bin/su</span><br><span class=\"line\"><span class=\"comment\">## Allow root to run any commands anywhere</span></span><br><span class=\"line\">root    ALL=(ALL)       ALL</span><br><span class=\"line\">SKYS    ALL=(ALL)       NOPASSWD: SU</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->"},{"title":"Centos7系列:系统安装配置","author":"Evobot","image":"http://p5qynomrl.bkt.clouddn.com/1521483772581ovq9z70a.png?imageslim","abbrlink":"79bae30d","date":"2017-08-18T14:11:00.000Z","_content":"在VMware虚拟机中安装Centos7，首先要创建一个虚拟机，再使用Centos7的安装光盘镜像进行安装。\n<!-- more -->\n# 1. 创建虚拟机\n下载VMware虚拟机可以到[猿课资源下载地址](http://r.aminglinux.com)下载安装\n- 点击创建新的虚拟机，进入新建虚拟机向导\n![新建虚拟机向导](http://p5qynomrl.bkt.clouddn.com/1521483772581ovq9z70a.png?imageslim)\n- 点击下一步，按照下图选择：\n![选择操作系统](http://p5qynomrl.bkt.clouddn.com/1521483882928d57huceg.png?imageslim)\n- 下一步之后可以为虚拟机命名和指定虚拟机存储位置，然后根据需要为虚拟机分配CPU和内存；\n- 在网络类型选择上，建议选择NAT网络地址转换，之后一路下一步，选择创建新的虚拟磁盘，并为虚拟机分配磁盘大小：\n![分配磁盘](http://p5qynomrl.bkt.clouddn.com/1521484161120xv8g8slh.png?imageslim)\n- 之后可以再次对虚拟机的硬件进行配置，这里不再进行配置，点击下一步到完成。\n# 2.安装系统\n## 2.1 安装准备\n- 在新建的虚拟机窗口内点击编辑虚拟机设置，再点击CD/DVD，然后选择已经下载的Centos7的光盘镜像。\n![选择光盘镜像](http://p5qynomrl.bkt.clouddn.com/1521484660545p3c3lret.png?imageslim)\n- 然后点击开启此虚拟机，进行操作系统安装;\n- 进入到安装窗口后，在弹出的画面中，选择**Install CentOS Linux 7**并回车两次;\n![安装界面](http://p5qynomrl.bkt.clouddn.com/1521484814296webaenyu.png?imageslim)\n- 之后弹出的选择语言界面，选择中文后点击继续：\n![选择语言](http://p5qynomrl.bkt.clouddn.com/1521485023345lpdog8f2.png?imageslim)\n- 在下面的界面中，安装源选择本地介质，软件选择最小化安装，然后点击安装位置，选择我要配置分区并点击完成：\n![配置分区](http://p5qynomrl.bkt.clouddn.com/1521485274469dyyh8af6.png?imageslim)\n## 2.2 系统分区\n- 选择标准分区，挂载点选择**/boot**,分配容量200M，点击添加挂载点：\n![boot分区](http://p5qynomrl.bkt.clouddn.com/15214855901880dtt7vj5.png?imageslim)\n- 再点击加号新增一个分区，挂载点血选择**swap**，分配2048M容量并添加挂载点；磁盘分区时,swap分区一般为内存的两倍,如果内存大于4G,最大swap分区为8G,不建议继续按照两倍内存容量增加.\n![swap分区](http://p5qynomrl.bkt.clouddn.com/1521485815266oe8jxf63.png?imageslim)\n- 新增根分区挂载点，将剩余空间全都分配给根分区；\n![根分区](http://p5qynomrl.bkt.clouddn.com/1521485944458djss9n9e.png?imageslim)\n- 最后点击完成，在弹出的更改摘要窗口点击接受更改，然后点击开始安装，在安装的过程中点击ROOT密码，为root用户设置密码，之后等待系统安装完成即可。\n---\n","source":"_posts/Centos7系列-系统安装配置.md","raw":"---\ntitle: Centos7系列:系统安装配置\ntags: [Linux, Centos]\ncategories: Centos7\nauthor: Evobot\nimage: http://p5qynomrl.bkt.clouddn.com/1521483772581ovq9z70a.png?imageslim\nabbrlink: 79bae30d\ndate: 2017-08-18 22:11:00\n---\n在VMware虚拟机中安装Centos7，首先要创建一个虚拟机，再使用Centos7的安装光盘镜像进行安装。\n<!-- more -->\n# 1. 创建虚拟机\n下载VMware虚拟机可以到[猿课资源下载地址](http://r.aminglinux.com)下载安装\n- 点击创建新的虚拟机，进入新建虚拟机向导\n![新建虚拟机向导](http://p5qynomrl.bkt.clouddn.com/1521483772581ovq9z70a.png?imageslim)\n- 点击下一步，按照下图选择：\n![选择操作系统](http://p5qynomrl.bkt.clouddn.com/1521483882928d57huceg.png?imageslim)\n- 下一步之后可以为虚拟机命名和指定虚拟机存储位置，然后根据需要为虚拟机分配CPU和内存；\n- 在网络类型选择上，建议选择NAT网络地址转换，之后一路下一步，选择创建新的虚拟磁盘，并为虚拟机分配磁盘大小：\n![分配磁盘](http://p5qynomrl.bkt.clouddn.com/1521484161120xv8g8slh.png?imageslim)\n- 之后可以再次对虚拟机的硬件进行配置，这里不再进行配置，点击下一步到完成。\n# 2.安装系统\n## 2.1 安装准备\n- 在新建的虚拟机窗口内点击编辑虚拟机设置，再点击CD/DVD，然后选择已经下载的Centos7的光盘镜像。\n![选择光盘镜像](http://p5qynomrl.bkt.clouddn.com/1521484660545p3c3lret.png?imageslim)\n- 然后点击开启此虚拟机，进行操作系统安装;\n- 进入到安装窗口后，在弹出的画面中，选择**Install CentOS Linux 7**并回车两次;\n![安装界面](http://p5qynomrl.bkt.clouddn.com/1521484814296webaenyu.png?imageslim)\n- 之后弹出的选择语言界面，选择中文后点击继续：\n![选择语言](http://p5qynomrl.bkt.clouddn.com/1521485023345lpdog8f2.png?imageslim)\n- 在下面的界面中，安装源选择本地介质，软件选择最小化安装，然后点击安装位置，选择我要配置分区并点击完成：\n![配置分区](http://p5qynomrl.bkt.clouddn.com/1521485274469dyyh8af6.png?imageslim)\n## 2.2 系统分区\n- 选择标准分区，挂载点选择**/boot**,分配容量200M，点击添加挂载点：\n![boot分区](http://p5qynomrl.bkt.clouddn.com/15214855901880dtt7vj5.png?imageslim)\n- 再点击加号新增一个分区，挂载点血选择**swap**，分配2048M容量并添加挂载点；磁盘分区时,swap分区一般为内存的两倍,如果内存大于4G,最大swap分区为8G,不建议继续按照两倍内存容量增加.\n![swap分区](http://p5qynomrl.bkt.clouddn.com/1521485815266oe8jxf63.png?imageslim)\n- 新增根分区挂载点，将剩余空间全都分配给根分区；\n![根分区](http://p5qynomrl.bkt.clouddn.com/1521485944458djss9n9e.png?imageslim)\n- 最后点击完成，在弹出的更改摘要窗口点击接受更改，然后点击开始安装，在安装的过程中点击ROOT密码，为root用户设置密码，之后等待系统安装完成即可。\n---\n","slug":"Centos7系列-系统安装配置","published":1,"updated":"2018-06-02T13:01:29.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gaz9d001du1jxwas1dork","content":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>在VMware虚拟机中安装Centos7，首先要创建一个虚拟机，再使用Centos7的安装光盘镜像进行安装。<br><a id=\"more\"></a></p><h1 id=\"1-创建虚拟机\"><a href=\"#1-创建虚拟机\" class=\"headerlink\" title=\"1. 创建虚拟机\"></a>1. 创建虚拟机</h1><p>下载VMware虚拟机可以到<a href=\"http://r.aminglinux.com\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">猿课资源下载地址</a>下载安装</p><ul><li>点击创建新的虚拟机，进入新建虚拟机向导<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521483772581ovq9z70a.png?imageslim\" alt=\"新建虚拟机向导\"></li><li>点击下一步，按照下图选择：<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521483882928d57huceg.png?imageslim\" alt=\"选择操作系统\"></li><li>下一步之后可以为虚拟机命名和指定虚拟机存储位置，然后根据需要为虚拟机分配CPU和内存；</li><li>在网络类型选择上，建议选择NAT网络地址转换，之后一路下一步，选择创建新的虚拟磁盘，并为虚拟机分配磁盘大小：<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521484161120xv8g8slh.png?imageslim\" alt=\"分配磁盘\"></li><li>之后可以再次对虚拟机的硬件进行配置，这里不再进行配置，点击下一步到完成。<h1 id=\"2-安装系统\"><a href=\"#2-安装系统\" class=\"headerlink\" title=\"2.安装系统\"></a>2.安装系统</h1><h2 id=\"2-1-安装准备\"><a href=\"#2-1-安装准备\" class=\"headerlink\" title=\"2.1 安装准备\"></a>2.1 安装准备</h2></li><li>在新建的虚拟机窗口内点击编辑虚拟机设置，再点击CD/DVD，然后选择已经下载的Centos7的光盘镜像。<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521484660545p3c3lret.png?imageslim\" alt=\"选择光盘镜像\"></li><li>然后点击开启此虚拟机，进行操作系统安装;</li><li>进入到安装窗口后，在弹出的画面中，选择<strong>Install CentOS Linux 7</strong>并回车两次;<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521484814296webaenyu.png?imageslim\" alt=\"安装界面\"></li><li>之后弹出的选择语言界面，选择中文后点击继续：<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521485023345lpdog8f2.png?imageslim\" alt=\"选择语言\"></li><li>在下面的界面中，安装源选择本地介质，软件选择最小化安装，然后点击安装位置，选择我要配置分区并点击完成：<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521485274469dyyh8af6.png?imageslim\" alt=\"配置分区\"><h2 id=\"2-2-系统分区\"><a href=\"#2-2-系统分区\" class=\"headerlink\" title=\"2.2 系统分区\"></a>2.2 系统分区</h2></li><li>选择标准分区，挂载点选择<strong>/boot</strong>,分配容量200M，点击添加挂载点：<br><img src=\"http://p5qynomrl.bkt.clouddn.com/15214855901880dtt7vj5.png?imageslim\" alt=\"boot分区\"></li><li>再点击加号新增一个分区，挂载点血选择<strong>swap</strong>，分配2048M容量并添加挂载点；磁盘分区时,swap分区一般为内存的两倍,如果内存大于4G,最大swap分区为8G,不建议继续按照两倍内存容量增加.<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521485815266oe8jxf63.png?imageslim\" alt=\"swap分区\"></li><li>新增根分区挂载点，将剩余空间全都分配给根分区；<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521485944458djss9n9e.png?imageslim\" alt=\"根分区\"></li><li>最后点击完成，在弹出的更改摘要窗口点击接受更改，然后点击开始安装，在安装的过程中点击ROOT密码，为root用户设置密码，之后等待系统安装完成即可。</li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>在VMware虚拟机中安装Centos7，首先要创建一个虚拟机，再使用Centos7的安装光盘镜像进行安装。<br>","more":"</p><h1 id=\"1-创建虚拟机\"><a href=\"#1-创建虚拟机\" class=\"headerlink\" title=\"1. 创建虚拟机\"></a>1. 创建虚拟机</h1><p>下载VMware虚拟机可以到<a href=\"http://r.aminglinux.com\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">猿课资源下载地址</a>下载安装</p><ul><li>点击创建新的虚拟机，进入新建虚拟机向导<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521483772581ovq9z70a.png?imageslim\" alt=\"新建虚拟机向导\"></li><li>点击下一步，按照下图选择：<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521483882928d57huceg.png?imageslim\" alt=\"选择操作系统\"></li><li>下一步之后可以为虚拟机命名和指定虚拟机存储位置，然后根据需要为虚拟机分配CPU和内存；</li><li>在网络类型选择上，建议选择NAT网络地址转换，之后一路下一步，选择创建新的虚拟磁盘，并为虚拟机分配磁盘大小：<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521484161120xv8g8slh.png?imageslim\" alt=\"分配磁盘\"></li><li>之后可以再次对虚拟机的硬件进行配置，这里不再进行配置，点击下一步到完成。<h1 id=\"2-安装系统\"><a href=\"#2-安装系统\" class=\"headerlink\" title=\"2.安装系统\"></a>2.安装系统</h1><h2 id=\"2-1-安装准备\"><a href=\"#2-1-安装准备\" class=\"headerlink\" title=\"2.1 安装准备\"></a>2.1 安装准备</h2></li><li>在新建的虚拟机窗口内点击编辑虚拟机设置，再点击CD/DVD，然后选择已经下载的Centos7的光盘镜像。<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521484660545p3c3lret.png?imageslim\" alt=\"选择光盘镜像\"></li><li>然后点击开启此虚拟机，进行操作系统安装;</li><li>进入到安装窗口后，在弹出的画面中，选择<strong>Install CentOS Linux 7</strong>并回车两次;<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521484814296webaenyu.png?imageslim\" alt=\"安装界面\"></li><li>之后弹出的选择语言界面，选择中文后点击继续：<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521485023345lpdog8f2.png?imageslim\" alt=\"选择语言\"></li><li>在下面的界面中，安装源选择本地介质，软件选择最小化安装，然后点击安装位置，选择我要配置分区并点击完成：<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521485274469dyyh8af6.png?imageslim\" alt=\"配置分区\"><h2 id=\"2-2-系统分区\"><a href=\"#2-2-系统分区\" class=\"headerlink\" title=\"2.2 系统分区\"></a>2.2 系统分区</h2></li><li>选择标准分区，挂载点选择<strong>/boot</strong>,分配容量200M，点击添加挂载点：<br><img src=\"http://p5qynomrl.bkt.clouddn.com/15214855901880dtt7vj5.png?imageslim\" alt=\"boot分区\"></li><li>再点击加号新增一个分区，挂载点血选择<strong>swap</strong>，分配2048M容量并添加挂载点；磁盘分区时,swap分区一般为内存的两倍,如果内存大于4G,最大swap分区为8G,不建议继续按照两倍内存容量增加.<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521485815266oe8jxf63.png?imageslim\" alt=\"swap分区\"></li><li>新增根分区挂载点，将剩余空间全都分配给根分区；<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521485944458djss9n9e.png?imageslim\" alt=\"根分区\"></li><li>最后点击完成，在弹出的更改摘要窗口点击接受更改，然后点击开始安装，在安装的过程中点击ROOT密码，为root用户设置密码，之后等待系统安装完成即可。</li></ul><hr><!-- rebuild by neat -->"},{"title":"Centos7系列:系统网络配置","author":"Evobot","abbrlink":"144d2216","date":"2018-03-20T17:36:54.000Z","image":"http://p5qynomrl.bkt.clouddn.com/15215702249616hbmgtp3.png?imageslim","_content":"开启虚拟机，使用root账户登录到Centos中，因为我们在创建虚拟机的时候，使用的是nat模式，所以这个时候系统其实是可以使用dhcp上网的，但是有时候我们还需要配置静态IP等，这时候就需要对系统网络进行配置。\n<!-- more -->\n# DHCP配置\n## 虚拟网络编辑器\n- 虚拟机刚运行时，系统并不会开启DHCP服务，所以这时可以运行`dhclient`命令让系统自动获取ip地址：\n![dhclient](http://p5qynomrl.bkt.clouddn.com/1521568317622jtndcbms.png?imageslim)\n- 可以图上看到系统获取的ip地址为**192.168.253.129**，这个地址其实是VMware的虚拟网络编辑器中配置的，点击VMware菜单栏的编辑-虚拟网络编辑器，可以看到NAT模式所配置的IP地址段：\n![虚拟网络编辑器](http://p5qynomrl.bkt.clouddn.com/1521568518435iqk6akyj.png?imageslim)\n- 点击**DHCP**设置，即可对虚拟网络的IP地址段进行配置：\n![DHCP配置](http://p5qynomrl.bkt.clouddn.com/1521568591065reso26ik.png?imageslim)\n\n# 静态IP配置\n## 网卡配置文件\n- Centos的IP配置文件是`/etc/sysconfig/network-scripts/`目录下，以`ifcfg-`开头，网络端口名结尾的文件，上面看到端口名为`ens33`，所以我们需要编辑这个文件：\n```bash\n[root@localhost ~]# ip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: ens33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000\n    link/ether 00:0c:29:71:8a:c0 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.253.129/24 brd 192.168.253.255 scope global dynamic ens33\n       valid_lft 785sec preferred_lft 785sec\n    inet6 fe80::20c:29ff:fe71:8ac0/64 scope link\n       valid_lft forever preferred_lft forever\n```\n\n## 配置静态IP\n- 使用`vi`命令编辑这个文件`vi /etc/sysconfig/network-scripts/ifcfg-ens33`,文件内容如下:\n```bash\n[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33\nTYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\nBOOTPROTO=dhcp\t# 这里表示ip为dhcp获取,静态ip为static\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\nNAME=ens33\nUUID=0d519c59-8dfc-4eeb-917d-d0d51ab7d0f6\nDEVICE=ens33\nONBOOT=no\t# 这里表示开机加载网卡\n```\n\n- 配置静态ip，除了修改网卡为`static`之外，还需要为网卡配置IP地址和子网掩码以及网关，在虚拟机中网关可以在虚拟网络编辑器中看到：\n![网关地址](http://p5qynomrl.bkt.clouddn.com/15215702249616hbmgtp3.png?imageslim)\n- 具体修改**ens33**配置文件如下：\n```bash\nTYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\nBOOTPROTO=static\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\nNAME=ens33\nUUID=0d519c59-8dfc-4eeb-917d-d0d51ab7d0f6\nDEVICE=ens33\nONBOOT=yes\nIPADDR=192.168.253.133\t# 添加IP地址\nNETMASK=255.255.255.0\t# 配置子网掩码\nGATEWAY=192.168.253.2\t# 配置网关\nDNS1=114.114.114.114\t# 配置DNS\n```\n\n## 重启网络服务\n- 在不重启的情况下让IP地址生效，需要重启网络服务，使用命令`systemctl restart network.service`：\n```bash\n[root@localhost ~]# systemctl restart network.service\n[root@localhost ~]# ip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: ens33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000\n    link/ether 00:0c:29:71:8a:c0 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.253.133/24 brd 192.168.253.255 scope global ens33\n       valid_lft forever preferred_lft forever\n    inet6 fe80::b09c:fbff:1cfe:b7e7/64 scope link\n       valid_lft forever preferred_lft forever\n```\n\n- 可以看到ens33的IP地址已经改变为在配置文件中配置的`192.168.253.133`。\n- 检查网络连通性，使用`ping`命令：\n```bash\n[root@localhost ~]# ping www.evobot.cn\nPING sni.github.map.fastly.net (151.101.73.147) 56(84) bytes of data.\n64 bytes from 151.101.73.147 (151.101.73.147): icmp_seq=1 ttl=128 time=91.1 ms\n64 bytes from 151.101.73.147 (151.101.73.147): icmp_seq=2 ttl=128 time=90.5 ms\n64 bytes from 151.101.73.147 (151.101.73.147): icmp_seq=3 ttl=128 time=94.1 ms\n^C\n--- sni.github.map.fastly.net ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2004ms\nrtt min/avg/max/mdev = 90.520/91.953/94.169/1.627 ms\n```\n\n# 网络问题排查\n- 有时配置了IP地址的时候，网络可能会遇到不通的情况，这时可以重新配置为DHCP模式，重启dhclient服务,使用`dhclient -r`命令重新获取IP地址。\n- 使用`route -n`命令查看系统路由网关是否存在：\n```bash\n[root@localhost ~]# route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         192.168.253.2   0.0.0.0         UG    100    0        0 ens33\n192.168.253.0   0.0.0.0         255.255.255.0   U     100    0        0 ens33\n```\n\n- 如果在执行`ifconfig`命令时提示命令不存在，则需要安装`net-tools`软件包,使用命令`yum install -y net-tools`进行安装。\n\n---\n\n\n\n","source":"_posts/Centos7系列-系统网络配置.md","raw":"title: Centos7系列:系统网络配置\nauthor: Evobot\nabbrlink: 144d2216\ndate: 2018-03-21 01:36:54\ncategories: Centos7\ntags: [Linux, Centos]\nimage: http://p5qynomrl.bkt.clouddn.com/15215702249616hbmgtp3.png?imageslim\n---\n开启虚拟机，使用root账户登录到Centos中，因为我们在创建虚拟机的时候，使用的是nat模式，所以这个时候系统其实是可以使用dhcp上网的，但是有时候我们还需要配置静态IP等，这时候就需要对系统网络进行配置。\n<!-- more -->\n# DHCP配置\n## 虚拟网络编辑器\n- 虚拟机刚运行时，系统并不会开启DHCP服务，所以这时可以运行`dhclient`命令让系统自动获取ip地址：\n![dhclient](http://p5qynomrl.bkt.clouddn.com/1521568317622jtndcbms.png?imageslim)\n- 可以图上看到系统获取的ip地址为**192.168.253.129**，这个地址其实是VMware的虚拟网络编辑器中配置的，点击VMware菜单栏的编辑-虚拟网络编辑器，可以看到NAT模式所配置的IP地址段：\n![虚拟网络编辑器](http://p5qynomrl.bkt.clouddn.com/1521568518435iqk6akyj.png?imageslim)\n- 点击**DHCP**设置，即可对虚拟网络的IP地址段进行配置：\n![DHCP配置](http://p5qynomrl.bkt.clouddn.com/1521568591065reso26ik.png?imageslim)\n\n# 静态IP配置\n## 网卡配置文件\n- Centos的IP配置文件是`/etc/sysconfig/network-scripts/`目录下，以`ifcfg-`开头，网络端口名结尾的文件，上面看到端口名为`ens33`，所以我们需要编辑这个文件：\n```bash\n[root@localhost ~]# ip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: ens33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000\n    link/ether 00:0c:29:71:8a:c0 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.253.129/24 brd 192.168.253.255 scope global dynamic ens33\n       valid_lft 785sec preferred_lft 785sec\n    inet6 fe80::20c:29ff:fe71:8ac0/64 scope link\n       valid_lft forever preferred_lft forever\n```\n\n## 配置静态IP\n- 使用`vi`命令编辑这个文件`vi /etc/sysconfig/network-scripts/ifcfg-ens33`,文件内容如下:\n```bash\n[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33\nTYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\nBOOTPROTO=dhcp\t# 这里表示ip为dhcp获取,静态ip为static\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\nNAME=ens33\nUUID=0d519c59-8dfc-4eeb-917d-d0d51ab7d0f6\nDEVICE=ens33\nONBOOT=no\t# 这里表示开机加载网卡\n```\n\n- 配置静态ip，除了修改网卡为`static`之外，还需要为网卡配置IP地址和子网掩码以及网关，在虚拟机中网关可以在虚拟网络编辑器中看到：\n![网关地址](http://p5qynomrl.bkt.clouddn.com/15215702249616hbmgtp3.png?imageslim)\n- 具体修改**ens33**配置文件如下：\n```bash\nTYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\nBOOTPROTO=static\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\nNAME=ens33\nUUID=0d519c59-8dfc-4eeb-917d-d0d51ab7d0f6\nDEVICE=ens33\nONBOOT=yes\nIPADDR=192.168.253.133\t# 添加IP地址\nNETMASK=255.255.255.0\t# 配置子网掩码\nGATEWAY=192.168.253.2\t# 配置网关\nDNS1=114.114.114.114\t# 配置DNS\n```\n\n## 重启网络服务\n- 在不重启的情况下让IP地址生效，需要重启网络服务，使用命令`systemctl restart network.service`：\n```bash\n[root@localhost ~]# systemctl restart network.service\n[root@localhost ~]# ip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: ens33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000\n    link/ether 00:0c:29:71:8a:c0 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.253.133/24 brd 192.168.253.255 scope global ens33\n       valid_lft forever preferred_lft forever\n    inet6 fe80::b09c:fbff:1cfe:b7e7/64 scope link\n       valid_lft forever preferred_lft forever\n```\n\n- 可以看到ens33的IP地址已经改变为在配置文件中配置的`192.168.253.133`。\n- 检查网络连通性，使用`ping`命令：\n```bash\n[root@localhost ~]# ping www.evobot.cn\nPING sni.github.map.fastly.net (151.101.73.147) 56(84) bytes of data.\n64 bytes from 151.101.73.147 (151.101.73.147): icmp_seq=1 ttl=128 time=91.1 ms\n64 bytes from 151.101.73.147 (151.101.73.147): icmp_seq=2 ttl=128 time=90.5 ms\n64 bytes from 151.101.73.147 (151.101.73.147): icmp_seq=3 ttl=128 time=94.1 ms\n^C\n--- sni.github.map.fastly.net ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2004ms\nrtt min/avg/max/mdev = 90.520/91.953/94.169/1.627 ms\n```\n\n# 网络问题排查\n- 有时配置了IP地址的时候，网络可能会遇到不通的情况，这时可以重新配置为DHCP模式，重启dhclient服务,使用`dhclient -r`命令重新获取IP地址。\n- 使用`route -n`命令查看系统路由网关是否存在：\n```bash\n[root@localhost ~]# route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         192.168.253.2   0.0.0.0         UG    100    0        0 ens33\n192.168.253.0   0.0.0.0         255.255.255.0   U     100    0        0 ens33\n```\n\n- 如果在执行`ifconfig`命令时提示命令不存在，则需要安装`net-tools`软件包,使用命令`yum install -y net-tools`进行安装。\n\n---\n\n\n\n","slug":"Centos7系列-系统网络配置","published":1,"updated":"2018-06-02T13:01:29.504Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gaz9k001gu1jxkvkq6v55","content":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>开启虚拟机，使用root账户登录到Centos中，因为我们在创建虚拟机的时候，使用的是nat模式，所以这个时候系统其实是可以使用dhcp上网的，但是有时候我们还需要配置静态IP等，这时候就需要对系统网络进行配置。<br><a id=\"more\"></a></p><h1 id=\"DHCP配置\"><a href=\"#DHCP配置\" class=\"headerlink\" title=\"DHCP配置\"></a>DHCP配置</h1><h2 id=\"虚拟网络编辑器\"><a href=\"#虚拟网络编辑器\" class=\"headerlink\" title=\"虚拟网络编辑器\"></a>虚拟网络编辑器</h2><ul><li>虚拟机刚运行时，系统并不会开启DHCP服务，所以这时可以运行<code>dhclient</code>命令让系统自动获取ip地址：<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521568317622jtndcbms.png?imageslim\" alt=\"dhclient\"></li><li>可以图上看到系统获取的ip地址为<strong>192.168.253.129</strong>，这个地址其实是VMware的虚拟网络编辑器中配置的，点击VMware菜单栏的编辑-虚拟网络编辑器，可以看到NAT模式所配置的IP地址段：<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521568518435iqk6akyj.png?imageslim\" alt=\"虚拟网络编辑器\"></li><li>点击<strong>DHCP</strong>设置，即可对虚拟网络的IP地址段进行配置：<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521568591065reso26ik.png?imageslim\" alt=\"DHCP配置\"></li></ul><h1 id=\"静态IP配置\"><a href=\"#静态IP配置\" class=\"headerlink\" title=\"静态IP配置\"></a>静态IP配置</h1><h2 id=\"网卡配置文件\"><a href=\"#网卡配置文件\" class=\"headerlink\" title=\"网卡配置文件\"></a>网卡配置文件</h2><ul><li>Centos的IP配置文件是<code>/etc/sysconfig/network-scripts/</code>目录下，以<code>ifcfg-</code>开头，网络端口名结尾的文件，上面看到端口名为<code>ens33</code>，所以我们需要编辑这个文件：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ip addr</span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class=\"line\">    link/ether 00:0c:29:71:8a:c0 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.253.129/24 brd 192.168.253.255 scope global dynamic ens33</span><br><span class=\"line\">       valid_lft 785sec preferred_lft 785sec</span><br><span class=\"line\">    inet6 fe80::20c:29ff:fe71:8ac0/64 scope link</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"配置静态IP\"><a href=\"#配置静态IP\" class=\"headerlink\" title=\"配置静态IP\"></a>配置静态IP</h2><ul><li><p>使用<code>vi</code>命令编辑这个文件<code>vi /etc/sysconfig/network-scripts/ifcfg-ens33</code>,文件内容如下:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vi /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">PROXY_METHOD=none</span><br><span class=\"line\">BROWSER_ONLY=no</span><br><span class=\"line\">BOOTPROTO=dhcp\t<span class=\"comment\"># 这里表示ip为dhcp获取,静态ip为static</span></span><br><span class=\"line\">DEFROUTE=yes</span><br><span class=\"line\">IPV4_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6INIT=yes</span><br><span class=\"line\">IPV6_AUTOCONF=yes</span><br><span class=\"line\">IPV6_DEFROUTE=yes</span><br><span class=\"line\">IPV6_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class=\"line\">NAME=ens33</span><br><span class=\"line\">UUID=0d519c59-8dfc-4eeb-917d-d0d51ab7d0f6</span><br><span class=\"line\">DEVICE=ens33</span><br><span class=\"line\">ONBOOT=no\t<span class=\"comment\"># 这里表示开机加载网卡</span></span><br></pre></td></tr></table></figure></li><li><p>配置静态ip，除了修改网卡为<code>static</code>之外，还需要为网卡配置IP地址和子网掩码以及网关，在虚拟机中网关可以在虚拟网络编辑器中看到：<br><img src=\"http://p5qynomrl.bkt.clouddn.com/15215702249616hbmgtp3.png?imageslim\" alt=\"网关地址\"></p></li><li>具体修改<strong>ens33</strong>配置文件如下：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">PROXY_METHOD=none</span><br><span class=\"line\">BROWSER_ONLY=no</span><br><span class=\"line\">BOOTPROTO=static</span><br><span class=\"line\">DEFROUTE=yes</span><br><span class=\"line\">IPV4_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6INIT=yes</span><br><span class=\"line\">IPV6_AUTOCONF=yes</span><br><span class=\"line\">IPV6_DEFROUTE=yes</span><br><span class=\"line\">IPV6_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class=\"line\">NAME=ens33</span><br><span class=\"line\">UUID=0d519c59-8dfc-4eeb-917d-d0d51ab7d0f6</span><br><span class=\"line\">DEVICE=ens33</span><br><span class=\"line\">ONBOOT=yes</span><br><span class=\"line\">IPADDR=192.168.253.133\t<span class=\"comment\"># 添加IP地址</span></span><br><span class=\"line\">NETMASK=255.255.255.0\t<span class=\"comment\"># 配置子网掩码</span></span><br><span class=\"line\">GATEWAY=192.168.253.2\t<span class=\"comment\"># 配置网关</span></span><br><span class=\"line\">DNS1=114.114.114.114\t<span class=\"comment\"># 配置DNS</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"重启网络服务\"><a href=\"#重启网络服务\" class=\"headerlink\" title=\"重启网络服务\"></a>重启网络服务</h2><ul><li><p>在不重启的情况下让IP地址生效，需要重启网络服务，使用命令<code>systemctl restart network.service</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl restart network.service</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ip addr</span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class=\"line\">    link/ether 00:0c:29:71:8a:c0 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.253.133/24 brd 192.168.253.255 scope global ens33</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::b09c:fbff:1cfe:b7e7/64 scope link</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure></li><li><p>可以看到ens33的IP地址已经改变为在配置文件中配置的<code>192.168.253.133</code>。</p></li><li>检查网络连通性，使用<code>ping</code>命令：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ping www.evobot.cn</span></span><br><span class=\"line\">PING sni.github.map.fastly.net (151.101.73.147) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 151.101.73.147 (151.101.73.147): icmp_seq=1 ttl=128 time=91.1 ms</span><br><span class=\"line\">64 bytes from 151.101.73.147 (151.101.73.147): icmp_seq=2 ttl=128 time=90.5 ms</span><br><span class=\"line\">64 bytes from 151.101.73.147 (151.101.73.147): icmp_seq=3 ttl=128 time=94.1 ms</span><br><span class=\"line\">^C</span><br><span class=\"line\">--- sni.github.map.fastly.net ping statistics ---</span><br><span class=\"line\">3 packets transmitted, 3 received, 0% packet loss, time 2004ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 90.520/91.953/94.169/1.627 ms</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"网络问题排查\"><a href=\"#网络问题排查\" class=\"headerlink\" title=\"网络问题排查\"></a>网络问题排查</h1><ul><li>有时配置了IP地址的时候，网络可能会遇到不通的情况，这时可以重新配置为DHCP模式，重启dhclient服务,使用<code>dhclient -r</code>命令重新获取IP地址。</li><li><p>使用<code>route -n</code>命令查看系统路由网关是否存在：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># route -n</span></span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">0.0.0.0         192.168.253.2   0.0.0.0         UG    100    0        0 ens33</span><br><span class=\"line\">192.168.253.0   0.0.0.0         255.255.255.0   U     100    0        0 ens33</span><br></pre></td></tr></table></figure></li><li><p>如果在执行<code>ifconfig</code>命令时提示命令不存在，则需要安装<code>net-tools</code>软件包,使用命令<code>yum install -y net-tools</code>进行安装。</p></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>开启虚拟机，使用root账户登录到Centos中，因为我们在创建虚拟机的时候，使用的是nat模式，所以这个时候系统其实是可以使用dhcp上网的，但是有时候我们还需要配置静态IP等，这时候就需要对系统网络进行配置。<br>","more":"</p><h1 id=\"DHCP配置\"><a href=\"#DHCP配置\" class=\"headerlink\" title=\"DHCP配置\"></a>DHCP配置</h1><h2 id=\"虚拟网络编辑器\"><a href=\"#虚拟网络编辑器\" class=\"headerlink\" title=\"虚拟网络编辑器\"></a>虚拟网络编辑器</h2><ul><li>虚拟机刚运行时，系统并不会开启DHCP服务，所以这时可以运行<code>dhclient</code>命令让系统自动获取ip地址：<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521568317622jtndcbms.png?imageslim\" alt=\"dhclient\"></li><li>可以图上看到系统获取的ip地址为<strong>192.168.253.129</strong>，这个地址其实是VMware的虚拟网络编辑器中配置的，点击VMware菜单栏的编辑-虚拟网络编辑器，可以看到NAT模式所配置的IP地址段：<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521568518435iqk6akyj.png?imageslim\" alt=\"虚拟网络编辑器\"></li><li>点击<strong>DHCP</strong>设置，即可对虚拟网络的IP地址段进行配置：<br><img src=\"http://p5qynomrl.bkt.clouddn.com/1521568591065reso26ik.png?imageslim\" alt=\"DHCP配置\"></li></ul><h1 id=\"静态IP配置\"><a href=\"#静态IP配置\" class=\"headerlink\" title=\"静态IP配置\"></a>静态IP配置</h1><h2 id=\"网卡配置文件\"><a href=\"#网卡配置文件\" class=\"headerlink\" title=\"网卡配置文件\"></a>网卡配置文件</h2><ul><li>Centos的IP配置文件是<code>/etc/sysconfig/network-scripts/</code>目录下，以<code>ifcfg-</code>开头，网络端口名结尾的文件，上面看到端口名为<code>ens33</code>，所以我们需要编辑这个文件：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ip addr</span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class=\"line\">    link/ether 00:0c:29:71:8a:c0 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.253.129/24 brd 192.168.253.255 scope global dynamic ens33</span><br><span class=\"line\">       valid_lft 785sec preferred_lft 785sec</span><br><span class=\"line\">    inet6 fe80::20c:29ff:fe71:8ac0/64 scope link</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"配置静态IP\"><a href=\"#配置静态IP\" class=\"headerlink\" title=\"配置静态IP\"></a>配置静态IP</h2><ul><li><p>使用<code>vi</code>命令编辑这个文件<code>vi /etc/sysconfig/network-scripts/ifcfg-ens33</code>,文件内容如下:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vi /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">PROXY_METHOD=none</span><br><span class=\"line\">BROWSER_ONLY=no</span><br><span class=\"line\">BOOTPROTO=dhcp\t<span class=\"comment\"># 这里表示ip为dhcp获取,静态ip为static</span></span><br><span class=\"line\">DEFROUTE=yes</span><br><span class=\"line\">IPV4_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6INIT=yes</span><br><span class=\"line\">IPV6_AUTOCONF=yes</span><br><span class=\"line\">IPV6_DEFROUTE=yes</span><br><span class=\"line\">IPV6_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class=\"line\">NAME=ens33</span><br><span class=\"line\">UUID=0d519c59-8dfc-4eeb-917d-d0d51ab7d0f6</span><br><span class=\"line\">DEVICE=ens33</span><br><span class=\"line\">ONBOOT=no\t<span class=\"comment\"># 这里表示开机加载网卡</span></span><br></pre></td></tr></table></figure></li><li><p>配置静态ip，除了修改网卡为<code>static</code>之外，还需要为网卡配置IP地址和子网掩码以及网关，在虚拟机中网关可以在虚拟网络编辑器中看到：<br><img src=\"http://p5qynomrl.bkt.clouddn.com/15215702249616hbmgtp3.png?imageslim\" alt=\"网关地址\"></p></li><li>具体修改<strong>ens33</strong>配置文件如下：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">PROXY_METHOD=none</span><br><span class=\"line\">BROWSER_ONLY=no</span><br><span class=\"line\">BOOTPROTO=static</span><br><span class=\"line\">DEFROUTE=yes</span><br><span class=\"line\">IPV4_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6INIT=yes</span><br><span class=\"line\">IPV6_AUTOCONF=yes</span><br><span class=\"line\">IPV6_DEFROUTE=yes</span><br><span class=\"line\">IPV6_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class=\"line\">NAME=ens33</span><br><span class=\"line\">UUID=0d519c59-8dfc-4eeb-917d-d0d51ab7d0f6</span><br><span class=\"line\">DEVICE=ens33</span><br><span class=\"line\">ONBOOT=yes</span><br><span class=\"line\">IPADDR=192.168.253.133\t<span class=\"comment\"># 添加IP地址</span></span><br><span class=\"line\">NETMASK=255.255.255.0\t<span class=\"comment\"># 配置子网掩码</span></span><br><span class=\"line\">GATEWAY=192.168.253.2\t<span class=\"comment\"># 配置网关</span></span><br><span class=\"line\">DNS1=114.114.114.114\t<span class=\"comment\"># 配置DNS</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"重启网络服务\"><a href=\"#重启网络服务\" class=\"headerlink\" title=\"重启网络服务\"></a>重启网络服务</h2><ul><li><p>在不重启的情况下让IP地址生效，需要重启网络服务，使用命令<code>systemctl restart network.service</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># systemctl restart network.service</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ip addr</span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class=\"line\">    link/ether 00:0c:29:71:8a:c0 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.253.133/24 brd 192.168.253.255 scope global ens33</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::b09c:fbff:1cfe:b7e7/64 scope link</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure></li><li><p>可以看到ens33的IP地址已经改变为在配置文件中配置的<code>192.168.253.133</code>。</p></li><li>检查网络连通性，使用<code>ping</code>命令：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ping www.evobot.cn</span></span><br><span class=\"line\">PING sni.github.map.fastly.net (151.101.73.147) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 151.101.73.147 (151.101.73.147): icmp_seq=1 ttl=128 time=91.1 ms</span><br><span class=\"line\">64 bytes from 151.101.73.147 (151.101.73.147): icmp_seq=2 ttl=128 time=90.5 ms</span><br><span class=\"line\">64 bytes from 151.101.73.147 (151.101.73.147): icmp_seq=3 ttl=128 time=94.1 ms</span><br><span class=\"line\">^C</span><br><span class=\"line\">--- sni.github.map.fastly.net ping statistics ---</span><br><span class=\"line\">3 packets transmitted, 3 received, 0% packet loss, time 2004ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 90.520/91.953/94.169/1.627 ms</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"网络问题排查\"><a href=\"#网络问题排查\" class=\"headerlink\" title=\"网络问题排查\"></a>网络问题排查</h1><ul><li>有时配置了IP地址的时候，网络可能会遇到不通的情况，这时可以重新配置为DHCP模式，重启dhclient服务,使用<code>dhclient -r</code>命令重新获取IP地址。</li><li><p>使用<code>route -n</code>命令查看系统路由网关是否存在：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># route -n</span></span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">0.0.0.0         192.168.253.2   0.0.0.0         UG    100    0        0 ens33</span><br><span class=\"line\">192.168.253.0   0.0.0.0         255.255.255.0   U     100    0        0 ens33</span><br></pre></td></tr></table></figure></li><li><p>如果在执行<code>ifconfig</code>命令时提示命令不存在，则需要安装<code>net-tools</code>软件包,使用命令<code>yum install -y net-tools</code>进行安装。</p></li></ul><hr><!-- rebuild by neat -->"},{"title":"Centos软件包的安装与卸载(一)","author":"Evobot","abbrlink":"2adf88a6","date":"2018-04-16T13:20:45.000Z","image":null,"_content":"\n\n\n本文主要介绍Centos中安装软件包的3种方法，以及rpm包、rpm工具的使用方法和yum命令如何安装软件包。\n\n在Centos中安装软件有三种方式，分别是以下三种：\n\n1. rpm工具\n   - rpm软件包类似windows下的exe文件，其安装路径等是已经打包固定的；\n2. yum工具\n   - yum工具是使用python开发的软件包安装工具，yum能够自动解决软件包依赖问题，实际上yum安装的软件包仍然是rpm包；\n3. 源码包\n   - 源码包是直接将编程语言编写的软件打包，安装时需要使用对应的编译工具对源代码进行编译安装。\n\n<!--more-->\n\n---\n\n# rpm工具\n\n## rpm包格式\n\n- 在虚拟机中，需要将Centos的安装光盘进行挂载，光盘的设备文件是`/dev/sr0`，也可以使用`/dev/cdrom`，其是`/dev/sr0`的软链接文件；\n- 使用`mount /dev/cdrom /mnt`将光盘挂载到`/mnt`目录，进入目录，查看`Packages`目录下的文件，该目录下就是`rpm`软件包：\n\n```bash\n[root@localhost Packages]# ls\n389-ds-base-1.3.5.10-11.el7.x86_64.rpm\n389-ds-base-libs-1.3.5.10-11.el7.x86_64.rpm\nabattis-cantarell-fonts-0.0.16-3.el7.noarch.rpm\nabrt-2.1.11-45.el7.centos.x86_64.rpm\nabrt-addon-ccpp-2.1.11-45.el7.centos.x86_64.rpm\nabrt-addon-kerneloops-2.1.11-45.el7.centos.x86_64.rpm\nabrt-addon-pstoreoops-2.1.11-45.el7.centos.x86_64.rpm\nabrt-addon-python-2.1.11-45.el7.centos.x86_64.rpm\nabrt-addon-vmcore-2.1.11-45.el7.centos.x86_64.rpm\nabrt-addon-xorg-2.1.11-45.el7.centos.x86_64.rpm\n```\n\n- `rpm`包的文件名格式是使用`-`分隔，其中第一段字符组成的是软件包包名；第二段是软件包的版本号，使用`.`分隔，又分为主版本、次版本和小版本；第三段则是发布版本号，代表了软件包对应的操作系统版本，如`el7`对应了Centos7；最后一段是平台位数，分为32位和64位，Centos7不再区分32、64位，只有64位软件包，但64位系统能够安装32位的软件包；\n\n## rpm工具用法\n\n- 安装`rpm`包，使用`rpm -ivh [rpm包文件]`命令，选项`-i`表示`install`，`-v`表示可视化，`-h`表示人性化显示：\n\n```bash\n[root@localhost Packages]# rpm -ivh zsh-5.0.2-25.el7.x86_64.rpm \n准备中...                          ################################# [100%]\n正在升级/安装...\n   1:zsh-5.0.2-25.el7                 ################################# [100%]\n```\n\n- 对于已经安装的软件包需要升级操作，则使用`rpm -Uvh [rpm包文件]`，选项`-U`表示`update`：\n\n```bash\n[root@localhost Packages]# rpm -Uvh zsh-5.0.2-25.el7.x86_64.rpm \n准备中...                          ################################# [100%]\n\t软件包 zsh-5.0.2-25.el7.x86_64 已经安装\n```\n\n- 卸载已安装的软件包，则使用`rpm -e [包名]`进行卸载，正常卸载时，执行命令无输出，很多时候卸载一个软件，会提示软件包被依赖无法卸载，这时需要先卸载依赖要卸载的软件包的包：\n\n```bash\n[root@localhost Packages]# rpm -e zsh\n[root@localhost Packages]# \n\n[root@localhost Packages]# rpm -e ppp\n错误：依赖检测失败：\n\tppp = 2.4.5 被 (已安裝) NetworkManager-1:1.4.0-12.el7.x86_64 需要\n[root@localhost Packages]# rpm -e NetworkManager\n错误：依赖检测失败：\n\tNetworkManager = 1:1.4.0-12.el7 被 (已安裝) NetworkManager-tui-1:1.4.0-12.el7.x86_64 需要\n\tNetworkManager(x86-64) = 1:1.4.0-12.el7 被 (已安裝) NetworkManager-team-1:1.4.0-12.el7.x86_64 需要\n\tNetworkManager(x86-64) = 1:1.4.0-12.el7 被 (已安裝) NetworkManager-wifi-1:1.4.0-12.el7.x86_64 需要\n```\n\n- 查询已经安装的包，使用`rpm -qa`，执行命令后，会将系统所以已经安装的包列出：\n\n```bash\n[root@localhost Packages]# rpm -qa\ngrub2-2.02-0.44.el7.centos.x86_64\ncentos-release-7-3.1611.el7.centos.x86_64\nopenssh-server-6.6.1p1-31.el7.x86_64\nfilesystem-3.2-21.el7.x86_64\nauthconfig-6.2.8-14.el7.x86_64\nncurses-base-5.9-13.20130511.el7.noarch\naudit-2.6.5-3.el7.x86_64\nbind-license-9.9.4-37.el7.noarch\naic94xx-firmware-30-6.el7.noarch\n...\n```\n\n- 查询单独的一个rpm包，使用`rpm -q [包名]`进行查询：\n\n```bash\n[root@localhost Packages]# rpm -q ppa\n未安装软件包 ppa \n[root@localhost Packages]# rpm -q ppp\nppp-2.4.5-33.el7.x86_64\n```\n\n- 上面的查询并未列出软件包的详细信息，可以使用`rpm -qi [包名]`查询软件包的详细信息：\n\n```bash\n[root@localhost Packages]# rpm -qi ppp\nName        : ppp\nVersion     : 2.4.5\nRelease     : 33.el7\nArchitecture: x86_64\nInstall Date: 2018年04月09日 星期一 21时22分32秒\nGroup       : System Environment/Daemons\nSize        : 872624\nLicense     : BSD and LGPLv2+ and GPLv2+ and Public Domain\nSignature   : RSA/SHA256, 2014年07月04日 星期五 12时34分15秒, Key ID 24c6a8a7f4a80eb5\nSource RPM  : ppp-2.4.5-33.el7.src.rpm\nBuild Date  : 2014年06月10日 星期二 14时27分03秒\nBuild Host  : worker1.bsys.centos.org\nRelocations : (not relocatable)\nPackager    : CentOS BuildSystem <http://bugs.centos.org>\nVendor      : CentOS\nURL         : http://www.samba.org/ppp\nSummary     : The Point-to-Point Protocol daemon\nDescription :\nThe ppp package contains the PPP (Point-to-Point Protocol) daemon and\ndocumentation for PPP support. The PPP protocol provides a method for\ntransmitting datagrams over serial point-to-point links. PPP is\nusually used to dial in to an ISP (Internet Service Provider) or other\norganization over a modem and phone line.\n```\n\n- 命令`rpm -ql [包名]`可以列出软件包安装时所包含的文件：\n\n```bash\n[root@localhost Packages]# rpm -ql vim-enhanced\n/etc/profile.d/vim.csh\n/etc/profile.d/vim.sh\n/usr/bin/rvim\n/usr/bin/vim\n/usr/bin/vimdiff\n/usr/bin/vimtutor\n```\n\n- 而命令`rpm -qf [文件绝对路径]`则可以查询文件是由哪个软件包安装:\n\n```bash\n[root@localhost Packages]# rpm -qf /usr/bin/vim\nvim-enhanced-7.4.160-2.el7.x86_64\n\n[root@localhost Packages]# rpm -qf `which cd`\t#使用`which cd`查询命令绝对路径，然后rpm -qf查询软件包\nbash-4.2.46-20.el7_2.x86_64\n\n```\n\n---\n\n# yum工具\n\n## yum介绍\n\n- rpm在安装软件包时也会存在依赖问题：\n\n```bash\n[root@localhost Packages]# rpm -ivh abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64.rpm \n错误：依赖检测失败：\n\tabrt = 2.1.11-45.el7.centos 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要\n\tabrt-libs = 2.1.11-45.el7.centos 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要\n\tabrt-retrace-client 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要\n\telfutils 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要\n\tgdb >= 7.6.1-63 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要\n\tlibabrt.so.0()(64bit) 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要\n\tlibreport-python 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要\n\tlibreport.so.0()(64bit) 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要\n\tlibsatyr.so.3()(64bit) 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要\n```\n\n- `yum`为了解决安装软件包的依赖问题而产生的软件包安装工具，`yum`可以自动安装软件包所依赖的包，并且可以从网络软件仓库安装所需要的软件包；\n\n## yum的用法\n\n- `yum list`可以列出能够安装的软件包，列出的软件包信息中，最左侧是包名，中间是版本号，最右边是仓库名：\n\n```bash\n[root@localhost Packages]# yum list\n已加载插件：fastestmirror\nLoading mirror speeds from cached hostfile\n * base: mirrors.sohu.com\n * extras: mirrors.sohu.com\n * updates: mirrors.aliyun.com\n已安装的软件包\nGeoIP.x86_64                                                  1.5.0-11.el7                              @anaconda\nNetworkManager.x86_64                                         1:1.4.0-12.el7                            @anaconda\nNetworkManager-libnm.x86_64                                   1:1.4.0-12.el7                            @anaconda\nNetworkManager-team.x86_64                                    1:1.4.0-12.el7                            @anaconda\nNetworkManager-tui.x86_64                                     1:1.4.0-12.el7                            @anaconda\nNetworkManager-wifi.x86_64                                    1:1.4.0-12.el7                            @anaconda\nacl.x86_64                                                    2.2.51-12.el7                             @anaconda\naic94xx-firmware.noarch                                       30-6.el7                                  @anaconda\n...\n```\n\n- `yum`的仓库名配置在`/etc/yum.repos.d/`目录下，其中`Centos-Base.repo`就是`base`仓库的配置文件：\n\n```bash\n[root@localhost Packages]# ls /etc/yum.repos.d/\nCentOS-Base.repo  CentOS-Debuginfo.repo  CentOS-Media.repo    CentOS-Vault.repo\nCentOS-CR.repo    CentOS-fasttrack.repo  CentOS-Sources.repo\n\nCentOS-CR.repo    CentOS-fasttrack.repo  CentOS-Sources.repo\n[root@localhost Packages]# cat /etc/yum.repos.d/CentOS-Base.repo \n# CentOS-Base.repo\n#\n# The mirror system uses the connecting IP address of the client and the\n# update status of each mirror to pick mirrors that are updated to and\n# geographically close to the client.  You should use this for CentOS updates\n# unless you are manually picking other mirrors.\n#\n# If the mirrorlist= does not work for you, as a fall back you can try the \n# remarked out baseurl= line instead.\n#\n#\n\n[base]\nname=CentOS-$releasever - Base\nmirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=os&infra=$infra\n#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n\n```\n\n- 使用`yum`搜索一个软件包，使用`yum search [包名关键字]`，使用这种方法搜索，会列出包名和包说明中含有关键字的包，搜索不够精确：\n\n```bash\n[root@localhost Packages]# yum search note\n已加载插件：fastestmirror\nLoading mirror speeds from cached hostfile\n * base: mirrors.sohu.com\n * extras: mirrors.sohu.com\n * updates: mirrors.aliyun.com\n=============================================== N/S matched: note ===============================================\ngnote.i686 : Note-taking application\ngnote.x86_64 : Note-taking application\ntexlive-marginnote.noarch : Notes in the margin, even where \\marginpar fails\ntexlive-marginnote-doc.noarch : Documentation for marginnote\nbltk.i686 : The BLTK measures notebook battery life under any workload\nbltk.x86_64 : The BLTK measures notebook battery life under any workload\nperl-HTML-FormatText-WithLinks.noarch : HTML to text conversion with links as footnotes\ntexlive-bigfoot.noarch : Footnotes for critical editions\ntexlive-footmisc.noarch : A range of footnote options\ntexlive-threeparttable.noarch : Tables with captions and notes all the same width\n\n  名称和简介匹配 only，使用“search all”试试。\n```\n\n- 想要更精准的搜索软件包，使用`yum list | grep [包名]`进行搜索，`grep`会将匹配到的包名过滤出来：\n\n```bash\n[root@localhost Packages]# yum list | grep 'vim'\nvim-common.x86_64                           2:7.4.160-2.el7            @base    \nvim-enhanced.x86_64                         2:7.4.160-2.el7            @base    \nvim-filesystem.x86_64                       2:7.4.160-2.el7            @base    \nvim-minimal.x86_64                          2:7.4.160-1.el7            @anaconda\nprotobuf-vim.x86_64                         2.5.0-8.el7                base     \nvim-X11.x86_64                              2:7.4.160-2.el7            base     \nvim-minimal.x86_64                          2:7.4.160-2.el7            base     \n```\n\n## 安装与卸载\n\n- 使用`yum`安装软件把，命令为`yum install [-y] [包名]`，其中`-y`是确认安装，否则在安装时会询问是否安装软件包；\n- `yum grouplist`可以查看软件包组，软件包组就是在安装系统时所选择的安装方式，如最小化安装：\n\n```bash\n[root@localhost Packages]# yum grouplist\n已加载插件：fastestmirror\n没有安装组信息文件\nMaybe run: yum groups mark convert (see man yum)\nLoading mirror speeds from cached hostfile\n * base: mirrors.sohu.com\n * extras: mirrors.sohu.com\n * updates: mirrors.aliyun.com\n可用的环境分组：\n   最小安装\n   基础设施服务器\n   计算节点\n   文件及打印服务器\n   基本网页服务器\n   虚拟化主机\n   带 GUI 的服务器\n   GNOME 桌面\n   KDE Plasma Workspaces\n   开发及生成工作站\n可用组：\n   传统 UNIX 兼容性\n   兼容性程序库\n   图形管理工具\n   安全性工具\n   开发工具\n   控制台互联网工具\n   智能卡支持\n   科学记数法支持\n   系统管理\n   系统管理工具\n完成\n```\n\n- 想要安装软件包组的软件，则使用`yum groupinstall [-y] [软件包组] `，软件包组需要使用英文，改变系统语言环境，使用`LANG=en`：\n- 卸载软件包使用命令`yum remove [-y] [包名]`,使用`yum`卸载软件时，会将软件包的依赖包同时卸载：\n\n```bash\n[root@localhost Packages]# yum remove ppp\nFailed to set locale, defaulting to C\nLoaded plugins: fastestmirror\nResolving Dependencies\n--> Running transaction check\n---> Package ppp.x86_64 0:2.4.5-33.el7 will be erased\n--> Processing Dependency: ppp = 2.4.5 for package: 1:NetworkManager-1.4.0-12.el7.x86_64\n--> Running transaction check\n---> Package NetworkManager.x86_64 1:1.4.0-12.el7 will be erased\n--> Processing Dependency: NetworkManager = 1:1.4.0-12.el7 for package: 1:NetworkManager-tui-1.4.0-12.el7.x86_64\n--> Processing Dependency: NetworkManager(x86-64) = 1:1.4.0-12.el7 for package: 1:NetworkManager-team-1.4.0-12.el7.x86_64\n--> Processing Dependency: NetworkManager(x86-64) = 1:1.4.0-12.el7 for package: 1:NetworkManager-wifi-1.4.0-12.el7.x86_64\n--> Running transaction check\n---> Package NetworkManager-team.x86_64 1:1.4.0-12.el7 will be erased\n---> Package NetworkManager-tui.x86_64 1:1.4.0-12.el7 will be erased\n---> Package NetworkManager-wifi.x86_64 1:1.4.0-12.el7 will be erased\n--> Finished Dependency Resolution\n\nDependencies Resolved\n\n=================================================================================================================\n Package                          Arch                Version                       Repository              Size\n=================================================================================================================\nRemoving:\n ppp                              x86_64              2.4.5-33.el7                  @anaconda              852 k\nRemoving for dependencies:\n NetworkManager                   x86_64              1:1.4.0-12.el7                @anaconda               10 M\n NetworkManager-team              x86_64              1:1.4.0-12.el7                @anaconda               53 k\n NetworkManager-tui               x86_64              1:1.4.0-12.el7                @anaconda              266 k\n NetworkManager-wifi              x86_64              1:1.4.0-12.el7                @anaconda              144 k\n\nTransaction Summary\n=================================================================================================================\nRemove  1 Package (+4 Dependent packages)\n\nInstalled size: 11 M\nIs this ok [y/N]: N\nExiting on user command\nYour transaction was saved, rerun it with:\n yum load-transaction /tmp/yum_save_tx.2018-04-16.23-01.7GYVHH.yumtx\n```\n\n- 使用`yum`升级软件包，命令为`yum update [-y] [包名]`，如果不加包名升级，则会自动升级系统中所以可以升级的包，一般在刚刚安装完系统时执行，如果系统中已经运行有服务，升级可能会造成软件包的不兼容；\n- `yum provides [命令路径]`可以查询命令是哪个软件包提供的，命令路径可以使用通配符，如`yum provides \"/*/vim\"`，使用这种方法的前提是系统中没有安装对应的软件包，在实际使用中可以配合`rpm -qf`对命令进行搜索，再使用`yum provides`进行搜索。\n\n# 搭建yum仓库\n\n## yum本地仓库搭建\n\n- yum默认的仓库需要链接远程服务器下载资源，但某些情况下存在服务器无法联网的情况，所以可以在本地搭建yum仓库；\n- 搭载本地仓库需要挂载光盘或者光盘镜像，在上文中已经将光盘镜像挂载到`/mnt`目录；\n- 将`/etc/yum.repos.d/`目录备份，使用命令`cp -r /etc/yum.repos.d /etc/yum.repos.d.bak`进行备份操作，然后将原`/etc/yum.repos.d`目录清空：\n\n```bash\n[root@localhost ~]# cp -r /etc/yum.repos.d/ /etc/yum.repos.d.bak\n[root@localhost ~]# cd /etc/yum.repos.d\n[root@localhost yum.repos.d]# ls\nCentOS-Base.repo  CentOS-Debuginfo.repo  CentOS-Media.repo    CentOS-Vault.repo\nCentOS-CR.repo    CentOS-fasttrack.repo  CentOS-Sources.repo\n[root@localhost yum.repos.d]# rm -f *\n```\n\n- 在`/etc/yum.repos.d`目录下创建`dvd.repo`文件，写入以下内容：\n\n```bash\n[dvd]\nname=install dvd\t\nbaseurl=file:///mnt\t\nenable=1\t\t\ngpgcheck=0\n```\n\n- **name**字段是对仓库名的描述，**baseurl**是仓库的路径，**enable**表示是否启用仓库，**gpgcheck**表示是否进行gpg检查，由于是本地仓库，所以置为0；\n- 由于之前使用远程仓库，系统存在缓存，所以执行`yum clean all`命令清除缓存，再执行`yum list`就可以看到软件包的仓库已经变为`dvd`\n\n```bash\n[root@localhost yum.repos.d]# yum clean all\n已加载插件：fastestmirror\n正在清理软件源： dvd\nCleaning up everything\nCleaning up list of fastest mirrors\n\n[[root@localhost yum.repos.d]# yum list\n已加载插件：fastestmirror\nLoading mirror speeds from cached hostfile\n已安装的软件包\nGeoIP.x86_64                                     1.5.0-11.el7                        @anaconda\nbzip2.x86_64                                     1.0.6-13.el7                        @base    \ncentos-bookmarks.noarch                          7-1.el7                             dvd     \n```\n\n- `yum list`列出的软件包，在第三列有3种显示：`@anaconda`、`@base`表示已经安装过的软件包，`dvd`则是来自我们本地搭建的仓库dvd的软件包，之后使用`yum`安装软件包时，就会从本地的仓库进行安装。\n\n## yum局域网仓库搭建\n\n### FTP服务搭建\n\n- 在局域网中搭建yum仓库，需要在一台服务器上搭建`Apache`服务器或者`ftp`服务器，这里使用`vsftpd`软件包搭建`ftp`服务器做yum仓库；\n- 使用`yum install -y vsftpd`安装vsftp软件包，然后执行`systemctl enable vsftpd`命令将vsftp服务设置为开机启动，之后使用`systemctl start vsftpd`命令启动服务：\n\n```bash\n[root@localhost yum.repos.d]# systemctl enable vsftpd\nCreated symlink from /etc/systemd/system/multi-user.target.wants/vsftpd.service to /usr/lib/systemd/system/vsftpd.service.\n\n[root@localhost yum.repos.d]# systemctl start vsftpd\n```\n\n- 命令`systemctl is-enabled vsftpd`可以查看服务是否被设置为开机启动，`enable`为开机启动，`disable`为不启动；\n- 启动vsftp服务后，还需要关闭防火墙，否则无法访问FTP服务，使用命令`systemctl stop firewalld.service`关闭防火墙，如果想要禁止防火墙启动，执行`systemctl disable firewalld.service`即可；\n- 这时从浏览器使用`ftp://[ip address]`地址访问FTP服务器，出现下面的界面表示FTP服务运行正常：\n\n![FTP](http://p5qynomrl.bkt.clouddn.com/15239803743973aqlnr8b.png?imageslim)\n\n### 仓库设置\n\n- 在`/var/ftp/pub/`目录下创建centos7目录，将Centos7的安装光盘镜像内的文件复制到目录下：\n\n```bash\n[root@localhost ~]# mkdir /var/ftp/pub/centos7\n[root@localhost ~]# cp -rvf /mnt/* /var/ftp/pub/centos7/\n```\n\n- 复制完成后，在浏览器中访问FTP，进入`centos7/Packages`目录，就可以看到所有的rpm软件包：\n\n![rpm](http://p5qynomrl.bkt.clouddn.com/15239832162285ykeole1.png?imageslim)\n\n- 接着安装`createrepo`软件包用来身材yum仓库的rpm元数据，使用`yum install -y createrepo`安装；\n- 安装完成后，使用命令`createrepo /var/ftp/pub/centos7`生成rpm元数据：\n\n```bash\n[root@localhost ~]# createrepo /var/ftp/pub/centos7/\nSpawning worker 0 with 3831 pkgs\nWorkers Finished\nSaving Primary metadata\nSaving file lists metadata\nSaving other metadata\nGenerating sqlite DBs\nSqlite DBs complete\n```\n\n### 使用软件源\n\n- 软件源仓库设置好之后，在其他机器上进行yum软件源的配置，首先与搭建本地仓库相同，将系统`/etc/yum.repos.d`目录备份；\n- 备份完成后，删除`yum.repos.d`除`CentOS-Base.repo`文件外的其他文件：\n\n```bash\n[root@localhost yum.repos.d]# ls\nCentOS-Base.repo  CentOS-Debuginfo.repo  CentOS-Media.repo    CentOS-Vault.repo\nCentOS-CR.repo    CentOS-fasttrack.repo  CentOS-Sources.repo\n\n[root@localhost yum.repos.d]# find . ! -name \"*Base*\" -delete\t# !表示查找除\"*Base*\"文件外的文件，-delete表示删除查找到的文件\n[root@localhost yum.repos.d]# ls\nCentOS-Base.repo\n```\n\n- 然后修改`CentOS-Base.repo`文件，修改后的内容如下：\n\n```bash\n[base]\nname=CentOS-$releasever - Base\nbaseurl=ftp://192.168.199.224/pub/centos7/\t\n# 将IP地址替换为FTP服务器地址\ngpgcheck=1\ngpgkey=ftp://192.168.199.224/pub/centos7/RPM-GPG-KEY-CentOS-7\nenable=1\n#released updates\n#[updates]\n#name=CentOS-$releasever - Updates\n#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=updates&infra=$infra\n#baseurl=http://mirror.centos.org/centos/$releasever/updates/$basearch/\n#gpgcheck=1\n#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n#enable=1\n```\n\n- 保存之后的操作与本地仓库相同，执行`yum clean all`和`yum update`，之后就可以使用局域网软件源了。\n\n---\n\n# 保存yum下载的rpm包\n\n- 修改相应的配置文件可以保存每次使用`yum`安装的软件的rpm软件包；\n- 修改`/etc/yum.conf`文件，修改内容如下：\n\n```bash\n[main]\n# cachedir是保存下载的包的目录，可以修改为自己定义的位置\ncachedir=/var/cache/yum/$basearch/$releasever\n# keepcache为1时表示保存已下载的包\nkeepcache=1\ndebuglevel=2\nlogfile=/var/log/yum.log\nexactarch=1\nobsoletes=1\ngpgcheck=1\nplugins=1\ninstallonly_limit=5\nbugtracker_url=http://bugs.centos.org/set_project.php?project_id=23&ref=http://bugs.centos.org/bug_report_page.php?category=yum\ndistroverpkg=centos-release\n```\n\n---\n\n\n\n","source":"_posts/Centos软件包的安装与卸载(一).md","raw":"---\ntitle: Centos软件包的安装与卸载(一)\nauthor: Evobot\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\nabbrlink: 2adf88a6\ndate: 2018-04-16 21:20:45\nimage:\n---\n\n\n\n本文主要介绍Centos中安装软件包的3种方法，以及rpm包、rpm工具的使用方法和yum命令如何安装软件包。\n\n在Centos中安装软件有三种方式，分别是以下三种：\n\n1. rpm工具\n   - rpm软件包类似windows下的exe文件，其安装路径等是已经打包固定的；\n2. yum工具\n   - yum工具是使用python开发的软件包安装工具，yum能够自动解决软件包依赖问题，实际上yum安装的软件包仍然是rpm包；\n3. 源码包\n   - 源码包是直接将编程语言编写的软件打包，安装时需要使用对应的编译工具对源代码进行编译安装。\n\n<!--more-->\n\n---\n\n# rpm工具\n\n## rpm包格式\n\n- 在虚拟机中，需要将Centos的安装光盘进行挂载，光盘的设备文件是`/dev/sr0`，也可以使用`/dev/cdrom`，其是`/dev/sr0`的软链接文件；\n- 使用`mount /dev/cdrom /mnt`将光盘挂载到`/mnt`目录，进入目录，查看`Packages`目录下的文件，该目录下就是`rpm`软件包：\n\n```bash\n[root@localhost Packages]# ls\n389-ds-base-1.3.5.10-11.el7.x86_64.rpm\n389-ds-base-libs-1.3.5.10-11.el7.x86_64.rpm\nabattis-cantarell-fonts-0.0.16-3.el7.noarch.rpm\nabrt-2.1.11-45.el7.centos.x86_64.rpm\nabrt-addon-ccpp-2.1.11-45.el7.centos.x86_64.rpm\nabrt-addon-kerneloops-2.1.11-45.el7.centos.x86_64.rpm\nabrt-addon-pstoreoops-2.1.11-45.el7.centos.x86_64.rpm\nabrt-addon-python-2.1.11-45.el7.centos.x86_64.rpm\nabrt-addon-vmcore-2.1.11-45.el7.centos.x86_64.rpm\nabrt-addon-xorg-2.1.11-45.el7.centos.x86_64.rpm\n```\n\n- `rpm`包的文件名格式是使用`-`分隔，其中第一段字符组成的是软件包包名；第二段是软件包的版本号，使用`.`分隔，又分为主版本、次版本和小版本；第三段则是发布版本号，代表了软件包对应的操作系统版本，如`el7`对应了Centos7；最后一段是平台位数，分为32位和64位，Centos7不再区分32、64位，只有64位软件包，但64位系统能够安装32位的软件包；\n\n## rpm工具用法\n\n- 安装`rpm`包，使用`rpm -ivh [rpm包文件]`命令，选项`-i`表示`install`，`-v`表示可视化，`-h`表示人性化显示：\n\n```bash\n[root@localhost Packages]# rpm -ivh zsh-5.0.2-25.el7.x86_64.rpm \n准备中...                          ################################# [100%]\n正在升级/安装...\n   1:zsh-5.0.2-25.el7                 ################################# [100%]\n```\n\n- 对于已经安装的软件包需要升级操作，则使用`rpm -Uvh [rpm包文件]`，选项`-U`表示`update`：\n\n```bash\n[root@localhost Packages]# rpm -Uvh zsh-5.0.2-25.el7.x86_64.rpm \n准备中...                          ################################# [100%]\n\t软件包 zsh-5.0.2-25.el7.x86_64 已经安装\n```\n\n- 卸载已安装的软件包，则使用`rpm -e [包名]`进行卸载，正常卸载时，执行命令无输出，很多时候卸载一个软件，会提示软件包被依赖无法卸载，这时需要先卸载依赖要卸载的软件包的包：\n\n```bash\n[root@localhost Packages]# rpm -e zsh\n[root@localhost Packages]# \n\n[root@localhost Packages]# rpm -e ppp\n错误：依赖检测失败：\n\tppp = 2.4.5 被 (已安裝) NetworkManager-1:1.4.0-12.el7.x86_64 需要\n[root@localhost Packages]# rpm -e NetworkManager\n错误：依赖检测失败：\n\tNetworkManager = 1:1.4.0-12.el7 被 (已安裝) NetworkManager-tui-1:1.4.0-12.el7.x86_64 需要\n\tNetworkManager(x86-64) = 1:1.4.0-12.el7 被 (已安裝) NetworkManager-team-1:1.4.0-12.el7.x86_64 需要\n\tNetworkManager(x86-64) = 1:1.4.0-12.el7 被 (已安裝) NetworkManager-wifi-1:1.4.0-12.el7.x86_64 需要\n```\n\n- 查询已经安装的包，使用`rpm -qa`，执行命令后，会将系统所以已经安装的包列出：\n\n```bash\n[root@localhost Packages]# rpm -qa\ngrub2-2.02-0.44.el7.centos.x86_64\ncentos-release-7-3.1611.el7.centos.x86_64\nopenssh-server-6.6.1p1-31.el7.x86_64\nfilesystem-3.2-21.el7.x86_64\nauthconfig-6.2.8-14.el7.x86_64\nncurses-base-5.9-13.20130511.el7.noarch\naudit-2.6.5-3.el7.x86_64\nbind-license-9.9.4-37.el7.noarch\naic94xx-firmware-30-6.el7.noarch\n...\n```\n\n- 查询单独的一个rpm包，使用`rpm -q [包名]`进行查询：\n\n```bash\n[root@localhost Packages]# rpm -q ppa\n未安装软件包 ppa \n[root@localhost Packages]# rpm -q ppp\nppp-2.4.5-33.el7.x86_64\n```\n\n- 上面的查询并未列出软件包的详细信息，可以使用`rpm -qi [包名]`查询软件包的详细信息：\n\n```bash\n[root@localhost Packages]# rpm -qi ppp\nName        : ppp\nVersion     : 2.4.5\nRelease     : 33.el7\nArchitecture: x86_64\nInstall Date: 2018年04月09日 星期一 21时22分32秒\nGroup       : System Environment/Daemons\nSize        : 872624\nLicense     : BSD and LGPLv2+ and GPLv2+ and Public Domain\nSignature   : RSA/SHA256, 2014年07月04日 星期五 12时34分15秒, Key ID 24c6a8a7f4a80eb5\nSource RPM  : ppp-2.4.5-33.el7.src.rpm\nBuild Date  : 2014年06月10日 星期二 14时27分03秒\nBuild Host  : worker1.bsys.centos.org\nRelocations : (not relocatable)\nPackager    : CentOS BuildSystem <http://bugs.centos.org>\nVendor      : CentOS\nURL         : http://www.samba.org/ppp\nSummary     : The Point-to-Point Protocol daemon\nDescription :\nThe ppp package contains the PPP (Point-to-Point Protocol) daemon and\ndocumentation for PPP support. The PPP protocol provides a method for\ntransmitting datagrams over serial point-to-point links. PPP is\nusually used to dial in to an ISP (Internet Service Provider) or other\norganization over a modem and phone line.\n```\n\n- 命令`rpm -ql [包名]`可以列出软件包安装时所包含的文件：\n\n```bash\n[root@localhost Packages]# rpm -ql vim-enhanced\n/etc/profile.d/vim.csh\n/etc/profile.d/vim.sh\n/usr/bin/rvim\n/usr/bin/vim\n/usr/bin/vimdiff\n/usr/bin/vimtutor\n```\n\n- 而命令`rpm -qf [文件绝对路径]`则可以查询文件是由哪个软件包安装:\n\n```bash\n[root@localhost Packages]# rpm -qf /usr/bin/vim\nvim-enhanced-7.4.160-2.el7.x86_64\n\n[root@localhost Packages]# rpm -qf `which cd`\t#使用`which cd`查询命令绝对路径，然后rpm -qf查询软件包\nbash-4.2.46-20.el7_2.x86_64\n\n```\n\n---\n\n# yum工具\n\n## yum介绍\n\n- rpm在安装软件包时也会存在依赖问题：\n\n```bash\n[root@localhost Packages]# rpm -ivh abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64.rpm \n错误：依赖检测失败：\n\tabrt = 2.1.11-45.el7.centos 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要\n\tabrt-libs = 2.1.11-45.el7.centos 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要\n\tabrt-retrace-client 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要\n\telfutils 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要\n\tgdb >= 7.6.1-63 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要\n\tlibabrt.so.0()(64bit) 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要\n\tlibreport-python 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要\n\tlibreport.so.0()(64bit) 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要\n\tlibsatyr.so.3()(64bit) 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要\n```\n\n- `yum`为了解决安装软件包的依赖问题而产生的软件包安装工具，`yum`可以自动安装软件包所依赖的包，并且可以从网络软件仓库安装所需要的软件包；\n\n## yum的用法\n\n- `yum list`可以列出能够安装的软件包，列出的软件包信息中，最左侧是包名，中间是版本号，最右边是仓库名：\n\n```bash\n[root@localhost Packages]# yum list\n已加载插件：fastestmirror\nLoading mirror speeds from cached hostfile\n * base: mirrors.sohu.com\n * extras: mirrors.sohu.com\n * updates: mirrors.aliyun.com\n已安装的软件包\nGeoIP.x86_64                                                  1.5.0-11.el7                              @anaconda\nNetworkManager.x86_64                                         1:1.4.0-12.el7                            @anaconda\nNetworkManager-libnm.x86_64                                   1:1.4.0-12.el7                            @anaconda\nNetworkManager-team.x86_64                                    1:1.4.0-12.el7                            @anaconda\nNetworkManager-tui.x86_64                                     1:1.4.0-12.el7                            @anaconda\nNetworkManager-wifi.x86_64                                    1:1.4.0-12.el7                            @anaconda\nacl.x86_64                                                    2.2.51-12.el7                             @anaconda\naic94xx-firmware.noarch                                       30-6.el7                                  @anaconda\n...\n```\n\n- `yum`的仓库名配置在`/etc/yum.repos.d/`目录下，其中`Centos-Base.repo`就是`base`仓库的配置文件：\n\n```bash\n[root@localhost Packages]# ls /etc/yum.repos.d/\nCentOS-Base.repo  CentOS-Debuginfo.repo  CentOS-Media.repo    CentOS-Vault.repo\nCentOS-CR.repo    CentOS-fasttrack.repo  CentOS-Sources.repo\n\nCentOS-CR.repo    CentOS-fasttrack.repo  CentOS-Sources.repo\n[root@localhost Packages]# cat /etc/yum.repos.d/CentOS-Base.repo \n# CentOS-Base.repo\n#\n# The mirror system uses the connecting IP address of the client and the\n# update status of each mirror to pick mirrors that are updated to and\n# geographically close to the client.  You should use this for CentOS updates\n# unless you are manually picking other mirrors.\n#\n# If the mirrorlist= does not work for you, as a fall back you can try the \n# remarked out baseurl= line instead.\n#\n#\n\n[base]\nname=CentOS-$releasever - Base\nmirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=os&infra=$infra\n#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n\n```\n\n- 使用`yum`搜索一个软件包，使用`yum search [包名关键字]`，使用这种方法搜索，会列出包名和包说明中含有关键字的包，搜索不够精确：\n\n```bash\n[root@localhost Packages]# yum search note\n已加载插件：fastestmirror\nLoading mirror speeds from cached hostfile\n * base: mirrors.sohu.com\n * extras: mirrors.sohu.com\n * updates: mirrors.aliyun.com\n=============================================== N/S matched: note ===============================================\ngnote.i686 : Note-taking application\ngnote.x86_64 : Note-taking application\ntexlive-marginnote.noarch : Notes in the margin, even where \\marginpar fails\ntexlive-marginnote-doc.noarch : Documentation for marginnote\nbltk.i686 : The BLTK measures notebook battery life under any workload\nbltk.x86_64 : The BLTK measures notebook battery life under any workload\nperl-HTML-FormatText-WithLinks.noarch : HTML to text conversion with links as footnotes\ntexlive-bigfoot.noarch : Footnotes for critical editions\ntexlive-footmisc.noarch : A range of footnote options\ntexlive-threeparttable.noarch : Tables with captions and notes all the same width\n\n  名称和简介匹配 only，使用“search all”试试。\n```\n\n- 想要更精准的搜索软件包，使用`yum list | grep [包名]`进行搜索，`grep`会将匹配到的包名过滤出来：\n\n```bash\n[root@localhost Packages]# yum list | grep 'vim'\nvim-common.x86_64                           2:7.4.160-2.el7            @base    \nvim-enhanced.x86_64                         2:7.4.160-2.el7            @base    \nvim-filesystem.x86_64                       2:7.4.160-2.el7            @base    \nvim-minimal.x86_64                          2:7.4.160-1.el7            @anaconda\nprotobuf-vim.x86_64                         2.5.0-8.el7                base     \nvim-X11.x86_64                              2:7.4.160-2.el7            base     \nvim-minimal.x86_64                          2:7.4.160-2.el7            base     \n```\n\n## 安装与卸载\n\n- 使用`yum`安装软件把，命令为`yum install [-y] [包名]`，其中`-y`是确认安装，否则在安装时会询问是否安装软件包；\n- `yum grouplist`可以查看软件包组，软件包组就是在安装系统时所选择的安装方式，如最小化安装：\n\n```bash\n[root@localhost Packages]# yum grouplist\n已加载插件：fastestmirror\n没有安装组信息文件\nMaybe run: yum groups mark convert (see man yum)\nLoading mirror speeds from cached hostfile\n * base: mirrors.sohu.com\n * extras: mirrors.sohu.com\n * updates: mirrors.aliyun.com\n可用的环境分组：\n   最小安装\n   基础设施服务器\n   计算节点\n   文件及打印服务器\n   基本网页服务器\n   虚拟化主机\n   带 GUI 的服务器\n   GNOME 桌面\n   KDE Plasma Workspaces\n   开发及生成工作站\n可用组：\n   传统 UNIX 兼容性\n   兼容性程序库\n   图形管理工具\n   安全性工具\n   开发工具\n   控制台互联网工具\n   智能卡支持\n   科学记数法支持\n   系统管理\n   系统管理工具\n完成\n```\n\n- 想要安装软件包组的软件，则使用`yum groupinstall [-y] [软件包组] `，软件包组需要使用英文，改变系统语言环境，使用`LANG=en`：\n- 卸载软件包使用命令`yum remove [-y] [包名]`,使用`yum`卸载软件时，会将软件包的依赖包同时卸载：\n\n```bash\n[root@localhost Packages]# yum remove ppp\nFailed to set locale, defaulting to C\nLoaded plugins: fastestmirror\nResolving Dependencies\n--> Running transaction check\n---> Package ppp.x86_64 0:2.4.5-33.el7 will be erased\n--> Processing Dependency: ppp = 2.4.5 for package: 1:NetworkManager-1.4.0-12.el7.x86_64\n--> Running transaction check\n---> Package NetworkManager.x86_64 1:1.4.0-12.el7 will be erased\n--> Processing Dependency: NetworkManager = 1:1.4.0-12.el7 for package: 1:NetworkManager-tui-1.4.0-12.el7.x86_64\n--> Processing Dependency: NetworkManager(x86-64) = 1:1.4.0-12.el7 for package: 1:NetworkManager-team-1.4.0-12.el7.x86_64\n--> Processing Dependency: NetworkManager(x86-64) = 1:1.4.0-12.el7 for package: 1:NetworkManager-wifi-1.4.0-12.el7.x86_64\n--> Running transaction check\n---> Package NetworkManager-team.x86_64 1:1.4.0-12.el7 will be erased\n---> Package NetworkManager-tui.x86_64 1:1.4.0-12.el7 will be erased\n---> Package NetworkManager-wifi.x86_64 1:1.4.0-12.el7 will be erased\n--> Finished Dependency Resolution\n\nDependencies Resolved\n\n=================================================================================================================\n Package                          Arch                Version                       Repository              Size\n=================================================================================================================\nRemoving:\n ppp                              x86_64              2.4.5-33.el7                  @anaconda              852 k\nRemoving for dependencies:\n NetworkManager                   x86_64              1:1.4.0-12.el7                @anaconda               10 M\n NetworkManager-team              x86_64              1:1.4.0-12.el7                @anaconda               53 k\n NetworkManager-tui               x86_64              1:1.4.0-12.el7                @anaconda              266 k\n NetworkManager-wifi              x86_64              1:1.4.0-12.el7                @anaconda              144 k\n\nTransaction Summary\n=================================================================================================================\nRemove  1 Package (+4 Dependent packages)\n\nInstalled size: 11 M\nIs this ok [y/N]: N\nExiting on user command\nYour transaction was saved, rerun it with:\n yum load-transaction /tmp/yum_save_tx.2018-04-16.23-01.7GYVHH.yumtx\n```\n\n- 使用`yum`升级软件包，命令为`yum update [-y] [包名]`，如果不加包名升级，则会自动升级系统中所以可以升级的包，一般在刚刚安装完系统时执行，如果系统中已经运行有服务，升级可能会造成软件包的不兼容；\n- `yum provides [命令路径]`可以查询命令是哪个软件包提供的，命令路径可以使用通配符，如`yum provides \"/*/vim\"`，使用这种方法的前提是系统中没有安装对应的软件包，在实际使用中可以配合`rpm -qf`对命令进行搜索，再使用`yum provides`进行搜索。\n\n# 搭建yum仓库\n\n## yum本地仓库搭建\n\n- yum默认的仓库需要链接远程服务器下载资源，但某些情况下存在服务器无法联网的情况，所以可以在本地搭建yum仓库；\n- 搭载本地仓库需要挂载光盘或者光盘镜像，在上文中已经将光盘镜像挂载到`/mnt`目录；\n- 将`/etc/yum.repos.d/`目录备份，使用命令`cp -r /etc/yum.repos.d /etc/yum.repos.d.bak`进行备份操作，然后将原`/etc/yum.repos.d`目录清空：\n\n```bash\n[root@localhost ~]# cp -r /etc/yum.repos.d/ /etc/yum.repos.d.bak\n[root@localhost ~]# cd /etc/yum.repos.d\n[root@localhost yum.repos.d]# ls\nCentOS-Base.repo  CentOS-Debuginfo.repo  CentOS-Media.repo    CentOS-Vault.repo\nCentOS-CR.repo    CentOS-fasttrack.repo  CentOS-Sources.repo\n[root@localhost yum.repos.d]# rm -f *\n```\n\n- 在`/etc/yum.repos.d`目录下创建`dvd.repo`文件，写入以下内容：\n\n```bash\n[dvd]\nname=install dvd\t\nbaseurl=file:///mnt\t\nenable=1\t\t\ngpgcheck=0\n```\n\n- **name**字段是对仓库名的描述，**baseurl**是仓库的路径，**enable**表示是否启用仓库，**gpgcheck**表示是否进行gpg检查，由于是本地仓库，所以置为0；\n- 由于之前使用远程仓库，系统存在缓存，所以执行`yum clean all`命令清除缓存，再执行`yum list`就可以看到软件包的仓库已经变为`dvd`\n\n```bash\n[root@localhost yum.repos.d]# yum clean all\n已加载插件：fastestmirror\n正在清理软件源： dvd\nCleaning up everything\nCleaning up list of fastest mirrors\n\n[[root@localhost yum.repos.d]# yum list\n已加载插件：fastestmirror\nLoading mirror speeds from cached hostfile\n已安装的软件包\nGeoIP.x86_64                                     1.5.0-11.el7                        @anaconda\nbzip2.x86_64                                     1.0.6-13.el7                        @base    \ncentos-bookmarks.noarch                          7-1.el7                             dvd     \n```\n\n- `yum list`列出的软件包，在第三列有3种显示：`@anaconda`、`@base`表示已经安装过的软件包，`dvd`则是来自我们本地搭建的仓库dvd的软件包，之后使用`yum`安装软件包时，就会从本地的仓库进行安装。\n\n## yum局域网仓库搭建\n\n### FTP服务搭建\n\n- 在局域网中搭建yum仓库，需要在一台服务器上搭建`Apache`服务器或者`ftp`服务器，这里使用`vsftpd`软件包搭建`ftp`服务器做yum仓库；\n- 使用`yum install -y vsftpd`安装vsftp软件包，然后执行`systemctl enable vsftpd`命令将vsftp服务设置为开机启动，之后使用`systemctl start vsftpd`命令启动服务：\n\n```bash\n[root@localhost yum.repos.d]# systemctl enable vsftpd\nCreated symlink from /etc/systemd/system/multi-user.target.wants/vsftpd.service to /usr/lib/systemd/system/vsftpd.service.\n\n[root@localhost yum.repos.d]# systemctl start vsftpd\n```\n\n- 命令`systemctl is-enabled vsftpd`可以查看服务是否被设置为开机启动，`enable`为开机启动，`disable`为不启动；\n- 启动vsftp服务后，还需要关闭防火墙，否则无法访问FTP服务，使用命令`systemctl stop firewalld.service`关闭防火墙，如果想要禁止防火墙启动，执行`systemctl disable firewalld.service`即可；\n- 这时从浏览器使用`ftp://[ip address]`地址访问FTP服务器，出现下面的界面表示FTP服务运行正常：\n\n![FTP](http://p5qynomrl.bkt.clouddn.com/15239803743973aqlnr8b.png?imageslim)\n\n### 仓库设置\n\n- 在`/var/ftp/pub/`目录下创建centos7目录，将Centos7的安装光盘镜像内的文件复制到目录下：\n\n```bash\n[root@localhost ~]# mkdir /var/ftp/pub/centos7\n[root@localhost ~]# cp -rvf /mnt/* /var/ftp/pub/centos7/\n```\n\n- 复制完成后，在浏览器中访问FTP，进入`centos7/Packages`目录，就可以看到所有的rpm软件包：\n\n![rpm](http://p5qynomrl.bkt.clouddn.com/15239832162285ykeole1.png?imageslim)\n\n- 接着安装`createrepo`软件包用来身材yum仓库的rpm元数据，使用`yum install -y createrepo`安装；\n- 安装完成后，使用命令`createrepo /var/ftp/pub/centos7`生成rpm元数据：\n\n```bash\n[root@localhost ~]# createrepo /var/ftp/pub/centos7/\nSpawning worker 0 with 3831 pkgs\nWorkers Finished\nSaving Primary metadata\nSaving file lists metadata\nSaving other metadata\nGenerating sqlite DBs\nSqlite DBs complete\n```\n\n### 使用软件源\n\n- 软件源仓库设置好之后，在其他机器上进行yum软件源的配置，首先与搭建本地仓库相同，将系统`/etc/yum.repos.d`目录备份；\n- 备份完成后，删除`yum.repos.d`除`CentOS-Base.repo`文件外的其他文件：\n\n```bash\n[root@localhost yum.repos.d]# ls\nCentOS-Base.repo  CentOS-Debuginfo.repo  CentOS-Media.repo    CentOS-Vault.repo\nCentOS-CR.repo    CentOS-fasttrack.repo  CentOS-Sources.repo\n\n[root@localhost yum.repos.d]# find . ! -name \"*Base*\" -delete\t# !表示查找除\"*Base*\"文件外的文件，-delete表示删除查找到的文件\n[root@localhost yum.repos.d]# ls\nCentOS-Base.repo\n```\n\n- 然后修改`CentOS-Base.repo`文件，修改后的内容如下：\n\n```bash\n[base]\nname=CentOS-$releasever - Base\nbaseurl=ftp://192.168.199.224/pub/centos7/\t\n# 将IP地址替换为FTP服务器地址\ngpgcheck=1\ngpgkey=ftp://192.168.199.224/pub/centos7/RPM-GPG-KEY-CentOS-7\nenable=1\n#released updates\n#[updates]\n#name=CentOS-$releasever - Updates\n#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=updates&infra=$infra\n#baseurl=http://mirror.centos.org/centos/$releasever/updates/$basearch/\n#gpgcheck=1\n#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n#enable=1\n```\n\n- 保存之后的操作与本地仓库相同，执行`yum clean all`和`yum update`，之后就可以使用局域网软件源了。\n\n---\n\n# 保存yum下载的rpm包\n\n- 修改相应的配置文件可以保存每次使用`yum`安装的软件的rpm软件包；\n- 修改`/etc/yum.conf`文件，修改内容如下：\n\n```bash\n[main]\n# cachedir是保存下载的包的目录，可以修改为自己定义的位置\ncachedir=/var/cache/yum/$basearch/$releasever\n# keepcache为1时表示保存已下载的包\nkeepcache=1\ndebuglevel=2\nlogfile=/var/log/yum.log\nexactarch=1\nobsoletes=1\ngpgcheck=1\nplugins=1\ninstallonly_limit=5\nbugtracker_url=http://bugs.centos.org/set_project.php?project_id=23&ref=http://bugs.centos.org/bug_report_page.php?category=yum\ndistroverpkg=centos-release\n```\n\n---\n\n\n\n","slug":"Centos软件包的安装与卸载(一)","published":1,"updated":"2018-06-02T13:01:29.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gaz9s001lu1jx5rsbagur","content":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>本文主要介绍Centos中安装软件包的3种方法，以及rpm包、rpm工具的使用方法和yum命令如何安装软件包。</p><p>在Centos中安装软件有三种方式，分别是以下三种：</p><ol><li>rpm工具<ul><li>rpm软件包类似windows下的exe文件，其安装路径等是已经打包固定的；</li></ul></li><li>yum工具<ul><li>yum工具是使用python开发的软件包安装工具，yum能够自动解决软件包依赖问题，实际上yum安装的软件包仍然是rpm包；</li></ul></li><li>源码包<ul><li>源码包是直接将编程语言编写的软件打包，安装时需要使用对应的编译工具对源代码进行编译安装。</li></ul></li></ol><a id=\"more\"></a><hr><h1 id=\"rpm工具\"><a href=\"#rpm工具\" class=\"headerlink\" title=\"rpm工具\"></a>rpm工具</h1><h2 id=\"rpm包格式\"><a href=\"#rpm包格式\" class=\"headerlink\" title=\"rpm包格式\"></a>rpm包格式</h2><ul><li>在虚拟机中，需要将Centos的安装光盘进行挂载，光盘的设备文件是<code>/dev/sr0</code>，也可以使用<code>/dev/cdrom</code>，其是<code>/dev/sr0</code>的软链接文件；</li><li>使用<code>mount /dev/cdrom /mnt</code>将光盘挂载到<code>/mnt</code>目录，进入目录，查看<code>Packages</code>目录下的文件，该目录下就是<code>rpm</code>软件包：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># ls</span></span><br><span class=\"line\">389-ds-base-1.3.5.10-11.el7.x86_64.rpm</span><br><span class=\"line\">389-ds-base-libs-1.3.5.10-11.el7.x86_64.rpm</span><br><span class=\"line\">abattis-cantarell-fonts-0.0.16-3.el7.noarch.rpm</span><br><span class=\"line\">abrt-2.1.11-45.el7.centos.x86_64.rpm</span><br><span class=\"line\">abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64.rpm</span><br><span class=\"line\">abrt-addon-kerneloops-2.1.11-45.el7.centos.x86_64.rpm</span><br><span class=\"line\">abrt-addon-pstoreoops-2.1.11-45.el7.centos.x86_64.rpm</span><br><span class=\"line\">abrt-addon-python-2.1.11-45.el7.centos.x86_64.rpm</span><br><span class=\"line\">abrt-addon-vmcore-2.1.11-45.el7.centos.x86_64.rpm</span><br><span class=\"line\">abrt-addon-xorg-2.1.11-45.el7.centos.x86_64.rpm</span><br></pre></td></tr></table></figure><ul><li><code>rpm</code>包的文件名格式是使用<code>-</code>分隔，其中第一段字符组成的是软件包包名；第二段是软件包的版本号，使用<code>.</code>分隔，又分为主版本、次版本和小版本；第三段则是发布版本号，代表了软件包对应的操作系统版本，如<code>el7</code>对应了Centos7；最后一段是平台位数，分为32位和64位，Centos7不再区分32、64位，只有64位软件包，但64位系统能够安装32位的软件包；</li></ul><h2 id=\"rpm工具用法\"><a href=\"#rpm工具用法\" class=\"headerlink\" title=\"rpm工具用法\"></a>rpm工具用法</h2><ul><li>安装<code>rpm</code>包，使用<code>rpm -ivh [rpm包文件]</code>命令，选项<code>-i</code>表示<code>install</code>，<code>-v</code>表示可视化，<code>-h</code>表示人性化显示：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -ivh zsh-5.0.2-25.el7.x86_64.rpm </span></span><br><span class=\"line\">准备中...                          <span class=\"comment\">################################# [100%]</span></span><br><span class=\"line\">正在升级/安装...</span><br><span class=\"line\">   1:zsh-5.0.2-25.el7                 <span class=\"comment\">################################# [100%]</span></span><br></pre></td></tr></table></figure><ul><li>对于已经安装的软件包需要升级操作，则使用<code>rpm -Uvh [rpm包文件]</code>，选项<code>-U</code>表示<code>update</code>：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -Uvh zsh-5.0.2-25.el7.x86_64.rpm </span></span><br><span class=\"line\">准备中...                          <span class=\"comment\">################################# [100%]</span></span><br><span class=\"line\">\t软件包 zsh-5.0.2-25.el7.x86_64 已经安装</span><br></pre></td></tr></table></figure><ul><li>卸载已安装的软件包，则使用<code>rpm -e [包名]</code>进行卸载，正常卸载时，执行命令无输出，很多时候卸载一个软件，会提示软件包被依赖无法卸载，这时需要先卸载依赖要卸载的软件包的包：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -e zsh</span></span><br><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># </span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -e ppp</span></span><br><span class=\"line\">错误：依赖检测失败：</span><br><span class=\"line\">\tppp = 2.4.5 被 (已安裝) NetworkManager-1:1.4.0-12.el7.x86_64 需要</span><br><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -e NetworkManager</span></span><br><span class=\"line\">错误：依赖检测失败：</span><br><span class=\"line\">\tNetworkManager = 1:1.4.0-12.el7 被 (已安裝) NetworkManager-tui-1:1.4.0-12.el7.x86_64 需要</span><br><span class=\"line\">\tNetworkManager(x86-64) = 1:1.4.0-12.el7 被 (已安裝) NetworkManager-team-1:1.4.0-12.el7.x86_64 需要</span><br><span class=\"line\">\tNetworkManager(x86-64) = 1:1.4.0-12.el7 被 (已安裝) NetworkManager-wifi-1:1.4.0-12.el7.x86_64 需要</span><br></pre></td></tr></table></figure><ul><li>查询已经安装的包，使用<code>rpm -qa</code>，执行命令后，会将系统所以已经安装的包列出：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -qa</span></span><br><span class=\"line\">grub2-2.02-0.44.el7.centos.x86_64</span><br><span class=\"line\">centos-release-7-3.1611.el7.centos.x86_64</span><br><span class=\"line\">openssh-server-6.6.1p1-31.el7.x86_64</span><br><span class=\"line\">filesystem-3.2-21.el7.x86_64</span><br><span class=\"line\">authconfig-6.2.8-14.el7.x86_64</span><br><span class=\"line\">ncurses-base-5.9-13.20130511.el7.noarch</span><br><span class=\"line\">audit-2.6.5-3.el7.x86_64</span><br><span class=\"line\"><span class=\"built_in\">bind</span>-license-9.9.4-37.el7.noarch</span><br><span class=\"line\">aic94xx-firmware-30-6.el7.noarch</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><ul><li>查询单独的一个rpm包，使用<code>rpm -q [包名]</code>进行查询：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -q ppa</span></span><br><span class=\"line\">未安装软件包 ppa </span><br><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -q ppp</span></span><br><span class=\"line\">ppp-2.4.5-33.el7.x86_64</span><br></pre></td></tr></table></figure><ul><li>上面的查询并未列出软件包的详细信息，可以使用<code>rpm -qi [包名]</code>查询软件包的详细信息：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -qi ppp</span></span><br><span class=\"line\">Name        : ppp</span><br><span class=\"line\">Version     : 2.4.5</span><br><span class=\"line\">Release     : 33.el7</span><br><span class=\"line\">Architecture: x86_64</span><br><span class=\"line\">Install Date: 2018年04月09日 星期一 21时22分32秒</span><br><span class=\"line\">Group       : System Environment/Daemons</span><br><span class=\"line\">Size        : 872624</span><br><span class=\"line\">License     : BSD and LGPLv2+ and GPLv2+ and Public Domain</span><br><span class=\"line\">Signature   : RSA/SHA256, 2014年07月04日 星期五 12时34分15秒, Key ID 24c6a8a7f4a80eb5</span><br><span class=\"line\">Source RPM  : ppp-2.4.5-33.el7.src.rpm</span><br><span class=\"line\">Build Date  : 2014年06月10日 星期二 14时27分03秒</span><br><span class=\"line\">Build Host  : worker1.bsys.centos.org</span><br><span class=\"line\">Relocations : (not relocatable)</span><br><span class=\"line\">Packager    : CentOS BuildSystem &lt;http://bugs.centos.org&gt;</span><br><span class=\"line\">Vendor      : CentOS</span><br><span class=\"line\">URL         : http://www.samba.org/ppp</span><br><span class=\"line\">Summary     : The Point-to-Point Protocol daemon</span><br><span class=\"line\">Description :</span><br><span class=\"line\">The ppp package contains the PPP (Point-to-Point Protocol) daemon and</span><br><span class=\"line\">documentation <span class=\"keyword\">for</span> PPP support. The PPP protocol provides a method <span class=\"keyword\">for</span></span><br><span class=\"line\">transmitting datagrams over serial point-to-point links. PPP is</span><br><span class=\"line\">usually used to dial <span class=\"keyword\">in</span> to an ISP (Internet Service Provider) or other</span><br><span class=\"line\">organization over a modem and phone line.</span><br></pre></td></tr></table></figure><ul><li>命令<code>rpm -ql [包名]</code>可以列出软件包安装时所包含的文件：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -ql vim-enhanced</span></span><br><span class=\"line\">/etc/profile.d/vim.csh</span><br><span class=\"line\">/etc/profile.d/vim.sh</span><br><span class=\"line\">/usr/bin/rvim</span><br><span class=\"line\">/usr/bin/vim</span><br><span class=\"line\">/usr/bin/vimdiff</span><br><span class=\"line\">/usr/bin/vimtutor</span><br></pre></td></tr></table></figure><ul><li>而命令<code>rpm -qf [文件绝对路径]</code>则可以查询文件是由哪个软件包安装:</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -qf /usr/bin/vim</span></span><br><span class=\"line\">vim-enhanced-7.4.160-2.el7.x86_64</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -qf `which cd`\t#使用`which cd`查询命令绝对路径，然后rpm -qf查询软件包</span></span><br><span class=\"line\">bash-4.2.46-20.el7_2.x86_64</span><br></pre></td></tr></table></figure><hr><h1 id=\"yum工具\"><a href=\"#yum工具\" class=\"headerlink\" title=\"yum工具\"></a>yum工具</h1><h2 id=\"yum介绍\"><a href=\"#yum介绍\" class=\"headerlink\" title=\"yum介绍\"></a>yum介绍</h2><ul><li>rpm在安装软件包时也会存在依赖问题：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -ivh abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64.rpm </span></span><br><span class=\"line\">错误：依赖检测失败：</span><br><span class=\"line\">\tabrt = 2.1.11-45.el7.centos 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要</span><br><span class=\"line\">\tabrt-libs = 2.1.11-45.el7.centos 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要</span><br><span class=\"line\">\tabrt-retrace-client 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要</span><br><span class=\"line\">\telfutils 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要</span><br><span class=\"line\">\tgdb &gt;= 7.6.1-63 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要</span><br><span class=\"line\">\tlibabrt.so.0()(64bit) 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要</span><br><span class=\"line\">\tlibreport-python 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要</span><br><span class=\"line\">\tlibreport.so.0()(64bit) 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要</span><br><span class=\"line\">\tlibsatyr.so.3()(64bit) 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要</span><br></pre></td></tr></table></figure><ul><li><code>yum</code>为了解决安装软件包的依赖问题而产生的软件包安装工具，<code>yum</code>可以自动安装软件包所依赖的包，并且可以从网络软件仓库安装所需要的软件包；</li></ul><h2 id=\"yum的用法\"><a href=\"#yum的用法\" class=\"headerlink\" title=\"yum的用法\"></a>yum的用法</h2><ul><li><code>yum list</code>可以列出能够安装的软件包，列出的软件包信息中，最左侧是包名，中间是版本号，最右边是仓库名：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># yum list</span></span><br><span class=\"line\">已加载插件：fastestmirror</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.sohu.com</span><br><span class=\"line\"> * extras: mirrors.sohu.com</span><br><span class=\"line\"> * updates: mirrors.aliyun.com</span><br><span class=\"line\">已安装的软件包</span><br><span class=\"line\">GeoIP.x86_64                                                  1.5.0-11.el7                              @anaconda</span><br><span class=\"line\">NetworkManager.x86_64                                         1:1.4.0-12.el7                            @anaconda</span><br><span class=\"line\">NetworkManager-libnm.x86_64                                   1:1.4.0-12.el7                            @anaconda</span><br><span class=\"line\">NetworkManager-team.x86_64                                    1:1.4.0-12.el7                            @anaconda</span><br><span class=\"line\">NetworkManager-tui.x86_64                                     1:1.4.0-12.el7                            @anaconda</span><br><span class=\"line\">NetworkManager-wifi.x86_64                                    1:1.4.0-12.el7                            @anaconda</span><br><span class=\"line\">acl.x86_64                                                    2.2.51-12.el7                             @anaconda</span><br><span class=\"line\">aic94xx-firmware.noarch                                       30-6.el7                                  @anaconda</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><ul><li><code>yum</code>的仓库名配置在<code>/etc/yum.repos.d/</code>目录下，其中<code>Centos-Base.repo</code>就是<code>base</code>仓库的配置文件：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># ls /etc/yum.repos.d/</span></span><br><span class=\"line\">CentOS-Base.repo  CentOS-Debuginfo.repo  CentOS-Media.repo    CentOS-Vault.repo</span><br><span class=\"line\">CentOS-CR.repo    CentOS-fasttrack.repo  CentOS-Sources.repo</span><br><span class=\"line\"></span><br><span class=\"line\">CentOS-CR.repo    CentOS-fasttrack.repo  CentOS-Sources.repo</span><br><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># cat /etc/yum.repos.d/CentOS-Base.repo </span></span><br><span class=\"line\"><span class=\"comment\"># CentOS-Base.repo</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The mirror system uses the connecting IP address of the client and the</span></span><br><span class=\"line\"><span class=\"comment\"># update status of each mirror to pick mirrors that are updated to and</span></span><br><span class=\"line\"><span class=\"comment\"># geographically close to the client.  You should use this for CentOS updates</span></span><br><span class=\"line\"><span class=\"comment\"># unless you are manually picking other mirrors.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If the mirrorlist= does not work for you, as a fall back you can try the </span></span><br><span class=\"line\"><span class=\"comment\"># remarked out baseurl= line instead.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\">[base]</span><br><span class=\"line\">name=CentOS-<span class=\"variable\">$releasever</span> - Base</span><br><span class=\"line\">mirrorlist=http://mirrorlist.centos.org/?release=<span class=\"variable\">$releasever</span>&amp;arch=<span class=\"variable\">$basearch</span>&amp;repo=os&amp;infra=<span class=\"variable\">$infra</span></span><br><span class=\"line\"><span class=\"comment\">#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/</span></span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure><ul><li>使用<code>yum</code>搜索一个软件包，使用<code>yum search [包名关键字]</code>，使用这种方法搜索，会列出包名和包说明中含有关键字的包，搜索不够精确：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># yum search note</span></span><br><span class=\"line\">已加载插件：fastestmirror</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.sohu.com</span><br><span class=\"line\"> * extras: mirrors.sohu.com</span><br><span class=\"line\"> * updates: mirrors.aliyun.com</span><br><span class=\"line\">=============================================== N/S matched: note ===============================================</span><br><span class=\"line\">gnote.i686 : Note-taking application</span><br><span class=\"line\">gnote.x86_64 : Note-taking application</span><br><span class=\"line\">texlive-marginnote.noarch : Notes <span class=\"keyword\">in</span> the margin, even <span class=\"built_in\">where</span> \\marginpar fails</span><br><span class=\"line\">texlive-marginnote-doc.noarch : Documentation <span class=\"keyword\">for</span> marginnote</span><br><span class=\"line\">bltk.i686 : The BLTK measures notebook battery life under any workload</span><br><span class=\"line\">bltk.x86_64 : The BLTK measures notebook battery life under any workload</span><br><span class=\"line\">perl-HTML-FormatText-WithLinks.noarch : HTML to text conversion with links as footnotes</span><br><span class=\"line\">texlive-bigfoot.noarch : Footnotes <span class=\"keyword\">for</span> critical editions</span><br><span class=\"line\">texlive-footmisc.noarch : A range of footnote options</span><br><span class=\"line\">texlive-threeparttable.noarch : Tables with captions and notes all the same width</span><br><span class=\"line\"></span><br><span class=\"line\">  名称和简介匹配 only，使用“search all”试试。</span><br></pre></td></tr></table></figure><ul><li>想要更精准的搜索软件包，使用<code>yum list | grep [包名]</code>进行搜索，<code>grep</code>会将匹配到的包名过滤出来：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># yum list | grep 'vim'</span></span><br><span class=\"line\">vim-common.x86_64                           2:7.4.160-2.el7            @base    </span><br><span class=\"line\">vim-enhanced.x86_64                         2:7.4.160-2.el7            @base    </span><br><span class=\"line\">vim-filesystem.x86_64                       2:7.4.160-2.el7            @base    </span><br><span class=\"line\">vim-minimal.x86_64                          2:7.4.160-1.el7            @anaconda</span><br><span class=\"line\">protobuf-vim.x86_64                         2.5.0-8.el7                base     </span><br><span class=\"line\">vim-X11.x86_64                              2:7.4.160-2.el7            base     </span><br><span class=\"line\">vim-minimal.x86_64                          2:7.4.160-2.el7            base</span><br></pre></td></tr></table></figure><h2 id=\"安装与卸载\"><a href=\"#安装与卸载\" class=\"headerlink\" title=\"安装与卸载\"></a>安装与卸载</h2><ul><li>使用<code>yum</code>安装软件把，命令为<code>yum install [-y] [包名]</code>，其中<code>-y</code>是确认安装，否则在安装时会询问是否安装软件包；</li><li><code>yum grouplist</code>可以查看软件包组，软件包组就是在安装系统时所选择的安装方式，如最小化安装：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># yum grouplist</span></span><br><span class=\"line\">已加载插件：fastestmirror</span><br><span class=\"line\">没有安装组信息文件</span><br><span class=\"line\">Maybe run: yum groups mark convert (see man yum)</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.sohu.com</span><br><span class=\"line\"> * extras: mirrors.sohu.com</span><br><span class=\"line\"> * updates: mirrors.aliyun.com</span><br><span class=\"line\">可用的环境分组：</span><br><span class=\"line\">   最小安装</span><br><span class=\"line\">   基础设施服务器</span><br><span class=\"line\">   计算节点</span><br><span class=\"line\">   文件及打印服务器</span><br><span class=\"line\">   基本网页服务器</span><br><span class=\"line\">   虚拟化主机</span><br><span class=\"line\">   带 GUI 的服务器</span><br><span class=\"line\">   GNOME 桌面</span><br><span class=\"line\">   KDE Plasma Workspaces</span><br><span class=\"line\">   开发及生成工作站</span><br><span class=\"line\">可用组：</span><br><span class=\"line\">   传统 UNIX 兼容性</span><br><span class=\"line\">   兼容性程序库</span><br><span class=\"line\">   图形管理工具</span><br><span class=\"line\">   安全性工具</span><br><span class=\"line\">   开发工具</span><br><span class=\"line\">   控制台互联网工具</span><br><span class=\"line\">   智能卡支持</span><br><span class=\"line\">   科学记数法支持</span><br><span class=\"line\">   系统管理</span><br><span class=\"line\">   系统管理工具</span><br><span class=\"line\">完成</span><br></pre></td></tr></table></figure><ul><li>想要安装软件包组的软件，则使用<code>yum groupinstall [-y] [软件包组]</code>，软件包组需要使用英文，改变系统语言环境，使用<code>LANG=en</code>：</li><li>卸载软件包使用命令<code>yum remove [-y] [包名]</code>,使用<code>yum</code>卸载软件时，会将软件包的依赖包同时卸载：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># yum remove ppp</span></span><br><span class=\"line\">Failed to <span class=\"built_in\">set</span> locale, defaulting to C</span><br><span class=\"line\">Loaded plugins: fastestmirror</span><br><span class=\"line\">Resolving Dependencies</span><br><span class=\"line\">--&gt; Running transaction check</span><br><span class=\"line\">---&gt; Package ppp.x86_64 0:2.4.5-33.el7 will be erased</span><br><span class=\"line\">--&gt; Processing Dependency: ppp = 2.4.5 <span class=\"keyword\">for</span> package: 1:NetworkManager-1.4.0-12.el7.x86_64</span><br><span class=\"line\">--&gt; Running transaction check</span><br><span class=\"line\">---&gt; Package NetworkManager.x86_64 1:1.4.0-12.el7 will be erased</span><br><span class=\"line\">--&gt; Processing Dependency: NetworkManager = 1:1.4.0-12.el7 <span class=\"keyword\">for</span> package: 1:NetworkManager-tui-1.4.0-12.el7.x86_64</span><br><span class=\"line\">--&gt; Processing Dependency: NetworkManager(x86-64) = 1:1.4.0-12.el7 <span class=\"keyword\">for</span> package: 1:NetworkManager-team-1.4.0-12.el7.x86_64</span><br><span class=\"line\">--&gt; Processing Dependency: NetworkManager(x86-64) = 1:1.4.0-12.el7 <span class=\"keyword\">for</span> package: 1:NetworkManager-wifi-1.4.0-12.el7.x86_64</span><br><span class=\"line\">--&gt; Running transaction check</span><br><span class=\"line\">---&gt; Package NetworkManager-team.x86_64 1:1.4.0-12.el7 will be erased</span><br><span class=\"line\">---&gt; Package NetworkManager-tui.x86_64 1:1.4.0-12.el7 will be erased</span><br><span class=\"line\">---&gt; Package NetworkManager-wifi.x86_64 1:1.4.0-12.el7 will be erased</span><br><span class=\"line\">--&gt; Finished Dependency Resolution</span><br><span class=\"line\"></span><br><span class=\"line\">Dependencies Resolved</span><br><span class=\"line\"></span><br><span class=\"line\">=================================================================================================================</span><br><span class=\"line\"> Package                          Arch                Version                       Repository              Size</span><br><span class=\"line\">=================================================================================================================</span><br><span class=\"line\">Removing:</span><br><span class=\"line\"> ppp                              x86_64              2.4.5-33.el7                  @anaconda              852 k</span><br><span class=\"line\">Removing <span class=\"keyword\">for</span> dependencies:</span><br><span class=\"line\"> NetworkManager                   x86_64              1:1.4.0-12.el7                @anaconda               10 M</span><br><span class=\"line\"> NetworkManager-team              x86_64              1:1.4.0-12.el7                @anaconda               53 k</span><br><span class=\"line\"> NetworkManager-tui               x86_64              1:1.4.0-12.el7                @anaconda              266 k</span><br><span class=\"line\"> NetworkManager-wifi              x86_64              1:1.4.0-12.el7                @anaconda              144 k</span><br><span class=\"line\"></span><br><span class=\"line\">Transaction Summary</span><br><span class=\"line\">=================================================================================================================</span><br><span class=\"line\">Remove  1 Package (+4 Dependent packages)</span><br><span class=\"line\"></span><br><span class=\"line\">Installed size: 11 M</span><br><span class=\"line\">Is this ok [y/N]: N</span><br><span class=\"line\">Exiting on user <span class=\"built_in\">command</span></span><br><span class=\"line\">Your transaction was saved, rerun it with:</span><br><span class=\"line\"> yum load-transaction /tmp/yum_save_tx.2018-04-16.23-01.7GYVHH.yumtx</span><br></pre></td></tr></table></figure><ul><li>使用<code>yum</code>升级软件包，命令为<code>yum update [-y] [包名]</code>，如果不加包名升级，则会自动升级系统中所以可以升级的包，一般在刚刚安装完系统时执行，如果系统中已经运行有服务，升级可能会造成软件包的不兼容；</li><li><code>yum provides [命令路径]</code>可以查询命令是哪个软件包提供的，命令路径可以使用通配符，如<code>yum provides &quot;/*/vim&quot;</code>，使用这种方法的前提是系统中没有安装对应的软件包，在实际使用中可以配合<code>rpm -qf</code>对命令进行搜索，再使用<code>yum provides</code>进行搜索。</li></ul><h1 id=\"搭建yum仓库\"><a href=\"#搭建yum仓库\" class=\"headerlink\" title=\"搭建yum仓库\"></a>搭建yum仓库</h1><h2 id=\"yum本地仓库搭建\"><a href=\"#yum本地仓库搭建\" class=\"headerlink\" title=\"yum本地仓库搭建\"></a>yum本地仓库搭建</h2><ul><li>yum默认的仓库需要链接远程服务器下载资源，但某些情况下存在服务器无法联网的情况，所以可以在本地搭建yum仓库；</li><li>搭载本地仓库需要挂载光盘或者光盘镜像，在上文中已经将光盘镜像挂载到<code>/mnt</code>目录；</li><li>将<code>/etc/yum.repos.d/</code>目录备份，使用命令<code>cp -r /etc/yum.repos.d /etc/yum.repos.d.bak</code>进行备份操作，然后将原<code>/etc/yum.repos.d</code>目录清空：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cp -r /etc/yum.repos.d/ /etc/yum.repos.d.bak</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cd /etc/yum.repos.d</span></span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># ls</span></span><br><span class=\"line\">CentOS-Base.repo  CentOS-Debuginfo.repo  CentOS-Media.repo    CentOS-Vault.repo</span><br><span class=\"line\">CentOS-CR.repo    CentOS-fasttrack.repo  CentOS-Sources.repo</span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># rm -f *</span></span><br></pre></td></tr></table></figure><ul><li>在<code>/etc/yum.repos.d</code>目录下创建<code>dvd.repo</code>文件，写入以下内容：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[dvd]</span><br><span class=\"line\">name=install dvd\t</span><br><span class=\"line\">baseurl=file:///mnt\t</span><br><span class=\"line\"><span class=\"built_in\">enable</span>=1\t\t</span><br><span class=\"line\">gpgcheck=0</span><br></pre></td></tr></table></figure><ul><li><strong>name</strong>字段是对仓库名的描述，<strong>baseurl</strong>是仓库的路径，<strong>enable</strong>表示是否启用仓库，<strong>gpgcheck</strong>表示是否进行gpg检查，由于是本地仓库，所以置为0；</li><li>由于之前使用远程仓库，系统存在缓存，所以执行<code>yum clean all</code>命令清除缓存，再执行<code>yum list</code>就可以看到软件包的仓库已经变为<code>dvd</code></li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># yum clean all</span></span><br><span class=\"line\">已加载插件：fastestmirror</span><br><span class=\"line\">正在清理软件源： dvd</span><br><span class=\"line\">Cleaning up everything</span><br><span class=\"line\">Cleaning up list of fastest mirrors</span><br><span class=\"line\"></span><br><span class=\"line\">[[root@localhost yum.repos.d]<span class=\"comment\"># yum list</span></span><br><span class=\"line\">已加载插件：fastestmirror</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\">已安装的软件包</span><br><span class=\"line\">GeoIP.x86_64                                     1.5.0-11.el7                        @anaconda</span><br><span class=\"line\">bzip2.x86_64                                     1.0.6-13.el7                        @base    </span><br><span class=\"line\">centos-bookmarks.noarch                          7-1.el7                             dvd</span><br></pre></td></tr></table></figure><ul><li><code>yum list</code>列出的软件包，在第三列有3种显示：<code>@anaconda</code>、<code>@base</code>表示已经安装过的软件包，<code>dvd</code>则是来自我们本地搭建的仓库dvd的软件包，之后使用<code>yum</code>安装软件包时，就会从本地的仓库进行安装。</li></ul><h2 id=\"yum局域网仓库搭建\"><a href=\"#yum局域网仓库搭建\" class=\"headerlink\" title=\"yum局域网仓库搭建\"></a>yum局域网仓库搭建</h2><h3 id=\"FTP服务搭建\"><a href=\"#FTP服务搭建\" class=\"headerlink\" title=\"FTP服务搭建\"></a>FTP服务搭建</h3><ul><li>在局域网中搭建yum仓库，需要在一台服务器上搭建<code>Apache</code>服务器或者<code>ftp</code>服务器，这里使用<code>vsftpd</code>软件包搭建<code>ftp</code>服务器做yum仓库；</li><li>使用<code>yum install -y vsftpd</code>安装vsftp软件包，然后执行<code>systemctl enable vsftpd</code>命令将vsftp服务设置为开机启动，之后使用<code>systemctl start vsftpd</code>命令启动服务：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># systemctl enable vsftpd</span></span><br><span class=\"line\">Created symlink from /etc/systemd/system/multi-user.target.wants/vsftpd.service to /usr/lib/systemd/system/vsftpd.service.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># systemctl start vsftpd</span></span><br></pre></td></tr></table></figure><ul><li>命令<code>systemctl is-enabled vsftpd</code>可以查看服务是否被设置为开机启动，<code>enable</code>为开机启动，<code>disable</code>为不启动；</li><li>启动vsftp服务后，还需要关闭防火墙，否则无法访问FTP服务，使用命令<code>systemctl stop firewalld.service</code>关闭防火墙，如果想要禁止防火墙启动，执行<code>systemctl disable firewalld.service</code>即可；</li><li>这时从浏览器使用<code>ftp://[ip address]</code>地址访问FTP服务器，出现下面的界面表示FTP服务运行正常：</li></ul><p><img src=\"http://p5qynomrl.bkt.clouddn.com/15239803743973aqlnr8b.png?imageslim\" alt=\"FTP\"></p><h3 id=\"仓库设置\"><a href=\"#仓库设置\" class=\"headerlink\" title=\"仓库设置\"></a>仓库设置</h3><ul><li>在<code>/var/ftp/pub/</code>目录下创建centos7目录，将Centos7的安装光盘镜像内的文件复制到目录下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkdir /var/ftp/pub/centos7</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cp -rvf /mnt/* /var/ftp/pub/centos7/</span></span><br></pre></td></tr></table></figure><ul><li>复制完成后，在浏览器中访问FTP，进入<code>centos7/Packages</code>目录，就可以看到所有的rpm软件包：</li></ul><p><img src=\"http://p5qynomrl.bkt.clouddn.com/15239832162285ykeole1.png?imageslim\" alt=\"rpm\"></p><ul><li>接着安装<code>createrepo</code>软件包用来身材yum仓库的rpm元数据，使用<code>yum install -y createrepo</code>安装；</li><li>安装完成后，使用命令<code>createrepo /var/ftp/pub/centos7</code>生成rpm元数据：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># createrepo /var/ftp/pub/centos7/</span></span><br><span class=\"line\">Spawning worker 0 with 3831 pkgs</span><br><span class=\"line\">Workers Finished</span><br><span class=\"line\">Saving Primary metadata</span><br><span class=\"line\">Saving file lists metadata</span><br><span class=\"line\">Saving other metadata</span><br><span class=\"line\">Generating sqlite DBs</span><br><span class=\"line\">Sqlite DBs complete</span><br></pre></td></tr></table></figure><h3 id=\"使用软件源\"><a href=\"#使用软件源\" class=\"headerlink\" title=\"使用软件源\"></a>使用软件源</h3><ul><li>软件源仓库设置好之后，在其他机器上进行yum软件源的配置，首先与搭建本地仓库相同，将系统<code>/etc/yum.repos.d</code>目录备份；</li><li>备份完成后，删除<code>yum.repos.d</code>除<code>CentOS-Base.repo</code>文件外的其他文件：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># ls</span></span><br><span class=\"line\">CentOS-Base.repo  CentOS-Debuginfo.repo  CentOS-Media.repo    CentOS-Vault.repo</span><br><span class=\"line\">CentOS-CR.repo    CentOS-fasttrack.repo  CentOS-Sources.repo</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># find . ! -name \"*Base*\" -delete\t# !表示查找除\"*Base*\"文件外的文件，-delete表示删除查找到的文件</span></span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># ls</span></span><br><span class=\"line\">CentOS-Base.repo</span><br></pre></td></tr></table></figure><ul><li>然后修改<code>CentOS-Base.repo</code>文件，修改后的内容如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[base]</span><br><span class=\"line\">name=CentOS-<span class=\"variable\">$releasever</span> - Base</span><br><span class=\"line\">baseurl=ftp://192.168.199.224/pub/centos7/\t</span><br><span class=\"line\"><span class=\"comment\"># 将IP地址替换为FTP服务器地址</span></span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=ftp://192.168.199.224/pub/centos7/RPM-GPG-KEY-CentOS-7</span><br><span class=\"line\"><span class=\"built_in\">enable</span>=1</span><br><span class=\"line\"><span class=\"comment\">#released updates</span></span><br><span class=\"line\"><span class=\"comment\">#[updates]</span></span><br><span class=\"line\"><span class=\"comment\">#name=CentOS-$releasever - Updates</span></span><br><span class=\"line\"><span class=\"comment\">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updates&amp;infra=$infra</span></span><br><span class=\"line\"><span class=\"comment\">#baseurl=http://mirror.centos.org/centos/$releasever/updates/$basearch/</span></span><br><span class=\"line\"><span class=\"comment\">#gpgcheck=1</span></span><br><span class=\"line\"><span class=\"comment\">#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span></span><br><span class=\"line\"><span class=\"comment\">#enable=1</span></span><br></pre></td></tr></table></figure><ul><li>保存之后的操作与本地仓库相同，执行<code>yum clean all</code>和<code>yum update</code>，之后就可以使用局域网软件源了。</li></ul><hr><h1 id=\"保存yum下载的rpm包\"><a href=\"#保存yum下载的rpm包\" class=\"headerlink\" title=\"保存yum下载的rpm包\"></a>保存yum下载的rpm包</h1><ul><li>修改相应的配置文件可以保存每次使用<code>yum</code>安装的软件的rpm软件包；</li><li>修改<code>/etc/yum.conf</code>文件，修改内容如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[main]</span><br><span class=\"line\"><span class=\"comment\"># cachedir是保存下载的包的目录，可以修改为自己定义的位置</span></span><br><span class=\"line\">cachedir=/var/cache/yum/<span class=\"variable\">$basearch</span>/<span class=\"variable\">$releasever</span></span><br><span class=\"line\"><span class=\"comment\"># keepcache为1时表示保存已下载的包</span></span><br><span class=\"line\">keepcache=1</span><br><span class=\"line\">debuglevel=2</span><br><span class=\"line\">logfile=/var/<span class=\"built_in\">log</span>/yum.log</span><br><span class=\"line\">exactarch=1</span><br><span class=\"line\">obsoletes=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">plugins=1</span><br><span class=\"line\">installonly_limit=5</span><br><span class=\"line\">bugtracker_url=http://bugs.centos.org/set_project.php?project_id=23&amp;ref=http://bugs.centos.org/bug_report_page.php?category=yum</span><br><span class=\"line\">distroverpkg=centos-release</span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>本文主要介绍Centos中安装软件包的3种方法，以及rpm包、rpm工具的使用方法和yum命令如何安装软件包。</p><p>在Centos中安装软件有三种方式，分别是以下三种：</p><ol><li>rpm工具<ul><li>rpm软件包类似windows下的exe文件，其安装路径等是已经打包固定的；</li></ul></li><li>yum工具<ul><li>yum工具是使用python开发的软件包安装工具，yum能够自动解决软件包依赖问题，实际上yum安装的软件包仍然是rpm包；</li></ul></li><li>源码包<ul><li>源码包是直接将编程语言编写的软件打包，安装时需要使用对应的编译工具对源代码进行编译安装。</li></ul></li></ol>","more":"<hr><h1 id=\"rpm工具\"><a href=\"#rpm工具\" class=\"headerlink\" title=\"rpm工具\"></a>rpm工具</h1><h2 id=\"rpm包格式\"><a href=\"#rpm包格式\" class=\"headerlink\" title=\"rpm包格式\"></a>rpm包格式</h2><ul><li>在虚拟机中，需要将Centos的安装光盘进行挂载，光盘的设备文件是<code>/dev/sr0</code>，也可以使用<code>/dev/cdrom</code>，其是<code>/dev/sr0</code>的软链接文件；</li><li>使用<code>mount /dev/cdrom /mnt</code>将光盘挂载到<code>/mnt</code>目录，进入目录，查看<code>Packages</code>目录下的文件，该目录下就是<code>rpm</code>软件包：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># ls</span></span><br><span class=\"line\">389-ds-base-1.3.5.10-11.el7.x86_64.rpm</span><br><span class=\"line\">389-ds-base-libs-1.3.5.10-11.el7.x86_64.rpm</span><br><span class=\"line\">abattis-cantarell-fonts-0.0.16-3.el7.noarch.rpm</span><br><span class=\"line\">abrt-2.1.11-45.el7.centos.x86_64.rpm</span><br><span class=\"line\">abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64.rpm</span><br><span class=\"line\">abrt-addon-kerneloops-2.1.11-45.el7.centos.x86_64.rpm</span><br><span class=\"line\">abrt-addon-pstoreoops-2.1.11-45.el7.centos.x86_64.rpm</span><br><span class=\"line\">abrt-addon-python-2.1.11-45.el7.centos.x86_64.rpm</span><br><span class=\"line\">abrt-addon-vmcore-2.1.11-45.el7.centos.x86_64.rpm</span><br><span class=\"line\">abrt-addon-xorg-2.1.11-45.el7.centos.x86_64.rpm</span><br></pre></td></tr></table></figure><ul><li><code>rpm</code>包的文件名格式是使用<code>-</code>分隔，其中第一段字符组成的是软件包包名；第二段是软件包的版本号，使用<code>.</code>分隔，又分为主版本、次版本和小版本；第三段则是发布版本号，代表了软件包对应的操作系统版本，如<code>el7</code>对应了Centos7；最后一段是平台位数，分为32位和64位，Centos7不再区分32、64位，只有64位软件包，但64位系统能够安装32位的软件包；</li></ul><h2 id=\"rpm工具用法\"><a href=\"#rpm工具用法\" class=\"headerlink\" title=\"rpm工具用法\"></a>rpm工具用法</h2><ul><li>安装<code>rpm</code>包，使用<code>rpm -ivh [rpm包文件]</code>命令，选项<code>-i</code>表示<code>install</code>，<code>-v</code>表示可视化，<code>-h</code>表示人性化显示：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -ivh zsh-5.0.2-25.el7.x86_64.rpm </span></span><br><span class=\"line\">准备中...                          <span class=\"comment\">################################# [100%]</span></span><br><span class=\"line\">正在升级/安装...</span><br><span class=\"line\">   1:zsh-5.0.2-25.el7                 <span class=\"comment\">################################# [100%]</span></span><br></pre></td></tr></table></figure><ul><li>对于已经安装的软件包需要升级操作，则使用<code>rpm -Uvh [rpm包文件]</code>，选项<code>-U</code>表示<code>update</code>：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -Uvh zsh-5.0.2-25.el7.x86_64.rpm </span></span><br><span class=\"line\">准备中...                          <span class=\"comment\">################################# [100%]</span></span><br><span class=\"line\">\t软件包 zsh-5.0.2-25.el7.x86_64 已经安装</span><br></pre></td></tr></table></figure><ul><li>卸载已安装的软件包，则使用<code>rpm -e [包名]</code>进行卸载，正常卸载时，执行命令无输出，很多时候卸载一个软件，会提示软件包被依赖无法卸载，这时需要先卸载依赖要卸载的软件包的包：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -e zsh</span></span><br><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># </span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -e ppp</span></span><br><span class=\"line\">错误：依赖检测失败：</span><br><span class=\"line\">\tppp = 2.4.5 被 (已安裝) NetworkManager-1:1.4.0-12.el7.x86_64 需要</span><br><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -e NetworkManager</span></span><br><span class=\"line\">错误：依赖检测失败：</span><br><span class=\"line\">\tNetworkManager = 1:1.4.0-12.el7 被 (已安裝) NetworkManager-tui-1:1.4.0-12.el7.x86_64 需要</span><br><span class=\"line\">\tNetworkManager(x86-64) = 1:1.4.0-12.el7 被 (已安裝) NetworkManager-team-1:1.4.0-12.el7.x86_64 需要</span><br><span class=\"line\">\tNetworkManager(x86-64) = 1:1.4.0-12.el7 被 (已安裝) NetworkManager-wifi-1:1.4.0-12.el7.x86_64 需要</span><br></pre></td></tr></table></figure><ul><li>查询已经安装的包，使用<code>rpm -qa</code>，执行命令后，会将系统所以已经安装的包列出：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -qa</span></span><br><span class=\"line\">grub2-2.02-0.44.el7.centos.x86_64</span><br><span class=\"line\">centos-release-7-3.1611.el7.centos.x86_64</span><br><span class=\"line\">openssh-server-6.6.1p1-31.el7.x86_64</span><br><span class=\"line\">filesystem-3.2-21.el7.x86_64</span><br><span class=\"line\">authconfig-6.2.8-14.el7.x86_64</span><br><span class=\"line\">ncurses-base-5.9-13.20130511.el7.noarch</span><br><span class=\"line\">audit-2.6.5-3.el7.x86_64</span><br><span class=\"line\"><span class=\"built_in\">bind</span>-license-9.9.4-37.el7.noarch</span><br><span class=\"line\">aic94xx-firmware-30-6.el7.noarch</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><ul><li>查询单独的一个rpm包，使用<code>rpm -q [包名]</code>进行查询：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -q ppa</span></span><br><span class=\"line\">未安装软件包 ppa </span><br><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -q ppp</span></span><br><span class=\"line\">ppp-2.4.5-33.el7.x86_64</span><br></pre></td></tr></table></figure><ul><li>上面的查询并未列出软件包的详细信息，可以使用<code>rpm -qi [包名]</code>查询软件包的详细信息：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -qi ppp</span></span><br><span class=\"line\">Name        : ppp</span><br><span class=\"line\">Version     : 2.4.5</span><br><span class=\"line\">Release     : 33.el7</span><br><span class=\"line\">Architecture: x86_64</span><br><span class=\"line\">Install Date: 2018年04月09日 星期一 21时22分32秒</span><br><span class=\"line\">Group       : System Environment/Daemons</span><br><span class=\"line\">Size        : 872624</span><br><span class=\"line\">License     : BSD and LGPLv2+ and GPLv2+ and Public Domain</span><br><span class=\"line\">Signature   : RSA/SHA256, 2014年07月04日 星期五 12时34分15秒, Key ID 24c6a8a7f4a80eb5</span><br><span class=\"line\">Source RPM  : ppp-2.4.5-33.el7.src.rpm</span><br><span class=\"line\">Build Date  : 2014年06月10日 星期二 14时27分03秒</span><br><span class=\"line\">Build Host  : worker1.bsys.centos.org</span><br><span class=\"line\">Relocations : (not relocatable)</span><br><span class=\"line\">Packager    : CentOS BuildSystem &lt;http://bugs.centos.org&gt;</span><br><span class=\"line\">Vendor      : CentOS</span><br><span class=\"line\">URL         : http://www.samba.org/ppp</span><br><span class=\"line\">Summary     : The Point-to-Point Protocol daemon</span><br><span class=\"line\">Description :</span><br><span class=\"line\">The ppp package contains the PPP (Point-to-Point Protocol) daemon and</span><br><span class=\"line\">documentation <span class=\"keyword\">for</span> PPP support. The PPP protocol provides a method <span class=\"keyword\">for</span></span><br><span class=\"line\">transmitting datagrams over serial point-to-point links. PPP is</span><br><span class=\"line\">usually used to dial <span class=\"keyword\">in</span> to an ISP (Internet Service Provider) or other</span><br><span class=\"line\">organization over a modem and phone line.</span><br></pre></td></tr></table></figure><ul><li>命令<code>rpm -ql [包名]</code>可以列出软件包安装时所包含的文件：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -ql vim-enhanced</span></span><br><span class=\"line\">/etc/profile.d/vim.csh</span><br><span class=\"line\">/etc/profile.d/vim.sh</span><br><span class=\"line\">/usr/bin/rvim</span><br><span class=\"line\">/usr/bin/vim</span><br><span class=\"line\">/usr/bin/vimdiff</span><br><span class=\"line\">/usr/bin/vimtutor</span><br></pre></td></tr></table></figure><ul><li>而命令<code>rpm -qf [文件绝对路径]</code>则可以查询文件是由哪个软件包安装:</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -qf /usr/bin/vim</span></span><br><span class=\"line\">vim-enhanced-7.4.160-2.el7.x86_64</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -qf `which cd`\t#使用`which cd`查询命令绝对路径，然后rpm -qf查询软件包</span></span><br><span class=\"line\">bash-4.2.46-20.el7_2.x86_64</span><br></pre></td></tr></table></figure><hr><h1 id=\"yum工具\"><a href=\"#yum工具\" class=\"headerlink\" title=\"yum工具\"></a>yum工具</h1><h2 id=\"yum介绍\"><a href=\"#yum介绍\" class=\"headerlink\" title=\"yum介绍\"></a>yum介绍</h2><ul><li>rpm在安装软件包时也会存在依赖问题：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># rpm -ivh abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64.rpm </span></span><br><span class=\"line\">错误：依赖检测失败：</span><br><span class=\"line\">\tabrt = 2.1.11-45.el7.centos 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要</span><br><span class=\"line\">\tabrt-libs = 2.1.11-45.el7.centos 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要</span><br><span class=\"line\">\tabrt-retrace-client 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要</span><br><span class=\"line\">\telfutils 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要</span><br><span class=\"line\">\tgdb &gt;= 7.6.1-63 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要</span><br><span class=\"line\">\tlibabrt.so.0()(64bit) 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要</span><br><span class=\"line\">\tlibreport-python 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要</span><br><span class=\"line\">\tlibreport.so.0()(64bit) 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要</span><br><span class=\"line\">\tlibsatyr.so.3()(64bit) 被 abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64 需要</span><br></pre></td></tr></table></figure><ul><li><code>yum</code>为了解决安装软件包的依赖问题而产生的软件包安装工具，<code>yum</code>可以自动安装软件包所依赖的包，并且可以从网络软件仓库安装所需要的软件包；</li></ul><h2 id=\"yum的用法\"><a href=\"#yum的用法\" class=\"headerlink\" title=\"yum的用法\"></a>yum的用法</h2><ul><li><code>yum list</code>可以列出能够安装的软件包，列出的软件包信息中，最左侧是包名，中间是版本号，最右边是仓库名：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># yum list</span></span><br><span class=\"line\">已加载插件：fastestmirror</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.sohu.com</span><br><span class=\"line\"> * extras: mirrors.sohu.com</span><br><span class=\"line\"> * updates: mirrors.aliyun.com</span><br><span class=\"line\">已安装的软件包</span><br><span class=\"line\">GeoIP.x86_64                                                  1.5.0-11.el7                              @anaconda</span><br><span class=\"line\">NetworkManager.x86_64                                         1:1.4.0-12.el7                            @anaconda</span><br><span class=\"line\">NetworkManager-libnm.x86_64                                   1:1.4.0-12.el7                            @anaconda</span><br><span class=\"line\">NetworkManager-team.x86_64                                    1:1.4.0-12.el7                            @anaconda</span><br><span class=\"line\">NetworkManager-tui.x86_64                                     1:1.4.0-12.el7                            @anaconda</span><br><span class=\"line\">NetworkManager-wifi.x86_64                                    1:1.4.0-12.el7                            @anaconda</span><br><span class=\"line\">acl.x86_64                                                    2.2.51-12.el7                             @anaconda</span><br><span class=\"line\">aic94xx-firmware.noarch                                       30-6.el7                                  @anaconda</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><ul><li><code>yum</code>的仓库名配置在<code>/etc/yum.repos.d/</code>目录下，其中<code>Centos-Base.repo</code>就是<code>base</code>仓库的配置文件：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># ls /etc/yum.repos.d/</span></span><br><span class=\"line\">CentOS-Base.repo  CentOS-Debuginfo.repo  CentOS-Media.repo    CentOS-Vault.repo</span><br><span class=\"line\">CentOS-CR.repo    CentOS-fasttrack.repo  CentOS-Sources.repo</span><br><span class=\"line\"></span><br><span class=\"line\">CentOS-CR.repo    CentOS-fasttrack.repo  CentOS-Sources.repo</span><br><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># cat /etc/yum.repos.d/CentOS-Base.repo </span></span><br><span class=\"line\"><span class=\"comment\"># CentOS-Base.repo</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The mirror system uses the connecting IP address of the client and the</span></span><br><span class=\"line\"><span class=\"comment\"># update status of each mirror to pick mirrors that are updated to and</span></span><br><span class=\"line\"><span class=\"comment\"># geographically close to the client.  You should use this for CentOS updates</span></span><br><span class=\"line\"><span class=\"comment\"># unless you are manually picking other mirrors.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If the mirrorlist= does not work for you, as a fall back you can try the </span></span><br><span class=\"line\"><span class=\"comment\"># remarked out baseurl= line instead.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\">[base]</span><br><span class=\"line\">name=CentOS-<span class=\"variable\">$releasever</span> - Base</span><br><span class=\"line\">mirrorlist=http://mirrorlist.centos.org/?release=<span class=\"variable\">$releasever</span>&amp;arch=<span class=\"variable\">$basearch</span>&amp;repo=os&amp;infra=<span class=\"variable\">$infra</span></span><br><span class=\"line\"><span class=\"comment\">#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/</span></span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure><ul><li>使用<code>yum</code>搜索一个软件包，使用<code>yum search [包名关键字]</code>，使用这种方法搜索，会列出包名和包说明中含有关键字的包，搜索不够精确：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># yum search note</span></span><br><span class=\"line\">已加载插件：fastestmirror</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.sohu.com</span><br><span class=\"line\"> * extras: mirrors.sohu.com</span><br><span class=\"line\"> * updates: mirrors.aliyun.com</span><br><span class=\"line\">=============================================== N/S matched: note ===============================================</span><br><span class=\"line\">gnote.i686 : Note-taking application</span><br><span class=\"line\">gnote.x86_64 : Note-taking application</span><br><span class=\"line\">texlive-marginnote.noarch : Notes <span class=\"keyword\">in</span> the margin, even <span class=\"built_in\">where</span> \\marginpar fails</span><br><span class=\"line\">texlive-marginnote-doc.noarch : Documentation <span class=\"keyword\">for</span> marginnote</span><br><span class=\"line\">bltk.i686 : The BLTK measures notebook battery life under any workload</span><br><span class=\"line\">bltk.x86_64 : The BLTK measures notebook battery life under any workload</span><br><span class=\"line\">perl-HTML-FormatText-WithLinks.noarch : HTML to text conversion with links as footnotes</span><br><span class=\"line\">texlive-bigfoot.noarch : Footnotes <span class=\"keyword\">for</span> critical editions</span><br><span class=\"line\">texlive-footmisc.noarch : A range of footnote options</span><br><span class=\"line\">texlive-threeparttable.noarch : Tables with captions and notes all the same width</span><br><span class=\"line\"></span><br><span class=\"line\">  名称和简介匹配 only，使用“search all”试试。</span><br></pre></td></tr></table></figure><ul><li>想要更精准的搜索软件包，使用<code>yum list | grep [包名]</code>进行搜索，<code>grep</code>会将匹配到的包名过滤出来：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># yum list | grep 'vim'</span></span><br><span class=\"line\">vim-common.x86_64                           2:7.4.160-2.el7            @base    </span><br><span class=\"line\">vim-enhanced.x86_64                         2:7.4.160-2.el7            @base    </span><br><span class=\"line\">vim-filesystem.x86_64                       2:7.4.160-2.el7            @base    </span><br><span class=\"line\">vim-minimal.x86_64                          2:7.4.160-1.el7            @anaconda</span><br><span class=\"line\">protobuf-vim.x86_64                         2.5.0-8.el7                base     </span><br><span class=\"line\">vim-X11.x86_64                              2:7.4.160-2.el7            base     </span><br><span class=\"line\">vim-minimal.x86_64                          2:7.4.160-2.el7            base</span><br></pre></td></tr></table></figure><h2 id=\"安装与卸载\"><a href=\"#安装与卸载\" class=\"headerlink\" title=\"安装与卸载\"></a>安装与卸载</h2><ul><li>使用<code>yum</code>安装软件把，命令为<code>yum install [-y] [包名]</code>，其中<code>-y</code>是确认安装，否则在安装时会询问是否安装软件包；</li><li><code>yum grouplist</code>可以查看软件包组，软件包组就是在安装系统时所选择的安装方式，如最小化安装：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># yum grouplist</span></span><br><span class=\"line\">已加载插件：fastestmirror</span><br><span class=\"line\">没有安装组信息文件</span><br><span class=\"line\">Maybe run: yum groups mark convert (see man yum)</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.sohu.com</span><br><span class=\"line\"> * extras: mirrors.sohu.com</span><br><span class=\"line\"> * updates: mirrors.aliyun.com</span><br><span class=\"line\">可用的环境分组：</span><br><span class=\"line\">   最小安装</span><br><span class=\"line\">   基础设施服务器</span><br><span class=\"line\">   计算节点</span><br><span class=\"line\">   文件及打印服务器</span><br><span class=\"line\">   基本网页服务器</span><br><span class=\"line\">   虚拟化主机</span><br><span class=\"line\">   带 GUI 的服务器</span><br><span class=\"line\">   GNOME 桌面</span><br><span class=\"line\">   KDE Plasma Workspaces</span><br><span class=\"line\">   开发及生成工作站</span><br><span class=\"line\">可用组：</span><br><span class=\"line\">   传统 UNIX 兼容性</span><br><span class=\"line\">   兼容性程序库</span><br><span class=\"line\">   图形管理工具</span><br><span class=\"line\">   安全性工具</span><br><span class=\"line\">   开发工具</span><br><span class=\"line\">   控制台互联网工具</span><br><span class=\"line\">   智能卡支持</span><br><span class=\"line\">   科学记数法支持</span><br><span class=\"line\">   系统管理</span><br><span class=\"line\">   系统管理工具</span><br><span class=\"line\">完成</span><br></pre></td></tr></table></figure><ul><li>想要安装软件包组的软件，则使用<code>yum groupinstall [-y] [软件包组]</code>，软件包组需要使用英文，改变系统语言环境，使用<code>LANG=en</code>：</li><li>卸载软件包使用命令<code>yum remove [-y] [包名]</code>,使用<code>yum</code>卸载软件时，会将软件包的依赖包同时卸载：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost Packages]<span class=\"comment\"># yum remove ppp</span></span><br><span class=\"line\">Failed to <span class=\"built_in\">set</span> locale, defaulting to C</span><br><span class=\"line\">Loaded plugins: fastestmirror</span><br><span class=\"line\">Resolving Dependencies</span><br><span class=\"line\">--&gt; Running transaction check</span><br><span class=\"line\">---&gt; Package ppp.x86_64 0:2.4.5-33.el7 will be erased</span><br><span class=\"line\">--&gt; Processing Dependency: ppp = 2.4.5 <span class=\"keyword\">for</span> package: 1:NetworkManager-1.4.0-12.el7.x86_64</span><br><span class=\"line\">--&gt; Running transaction check</span><br><span class=\"line\">---&gt; Package NetworkManager.x86_64 1:1.4.0-12.el7 will be erased</span><br><span class=\"line\">--&gt; Processing Dependency: NetworkManager = 1:1.4.0-12.el7 <span class=\"keyword\">for</span> package: 1:NetworkManager-tui-1.4.0-12.el7.x86_64</span><br><span class=\"line\">--&gt; Processing Dependency: NetworkManager(x86-64) = 1:1.4.0-12.el7 <span class=\"keyword\">for</span> package: 1:NetworkManager-team-1.4.0-12.el7.x86_64</span><br><span class=\"line\">--&gt; Processing Dependency: NetworkManager(x86-64) = 1:1.4.0-12.el7 <span class=\"keyword\">for</span> package: 1:NetworkManager-wifi-1.4.0-12.el7.x86_64</span><br><span class=\"line\">--&gt; Running transaction check</span><br><span class=\"line\">---&gt; Package NetworkManager-team.x86_64 1:1.4.0-12.el7 will be erased</span><br><span class=\"line\">---&gt; Package NetworkManager-tui.x86_64 1:1.4.0-12.el7 will be erased</span><br><span class=\"line\">---&gt; Package NetworkManager-wifi.x86_64 1:1.4.0-12.el7 will be erased</span><br><span class=\"line\">--&gt; Finished Dependency Resolution</span><br><span class=\"line\"></span><br><span class=\"line\">Dependencies Resolved</span><br><span class=\"line\"></span><br><span class=\"line\">=================================================================================================================</span><br><span class=\"line\"> Package                          Arch                Version                       Repository              Size</span><br><span class=\"line\">=================================================================================================================</span><br><span class=\"line\">Removing:</span><br><span class=\"line\"> ppp                              x86_64              2.4.5-33.el7                  @anaconda              852 k</span><br><span class=\"line\">Removing <span class=\"keyword\">for</span> dependencies:</span><br><span class=\"line\"> NetworkManager                   x86_64              1:1.4.0-12.el7                @anaconda               10 M</span><br><span class=\"line\"> NetworkManager-team              x86_64              1:1.4.0-12.el7                @anaconda               53 k</span><br><span class=\"line\"> NetworkManager-tui               x86_64              1:1.4.0-12.el7                @anaconda              266 k</span><br><span class=\"line\"> NetworkManager-wifi              x86_64              1:1.4.0-12.el7                @anaconda              144 k</span><br><span class=\"line\"></span><br><span class=\"line\">Transaction Summary</span><br><span class=\"line\">=================================================================================================================</span><br><span class=\"line\">Remove  1 Package (+4 Dependent packages)</span><br><span class=\"line\"></span><br><span class=\"line\">Installed size: 11 M</span><br><span class=\"line\">Is this ok [y/N]: N</span><br><span class=\"line\">Exiting on user <span class=\"built_in\">command</span></span><br><span class=\"line\">Your transaction was saved, rerun it with:</span><br><span class=\"line\"> yum load-transaction /tmp/yum_save_tx.2018-04-16.23-01.7GYVHH.yumtx</span><br></pre></td></tr></table></figure><ul><li>使用<code>yum</code>升级软件包，命令为<code>yum update [-y] [包名]</code>，如果不加包名升级，则会自动升级系统中所以可以升级的包，一般在刚刚安装完系统时执行，如果系统中已经运行有服务，升级可能会造成软件包的不兼容；</li><li><code>yum provides [命令路径]</code>可以查询命令是哪个软件包提供的，命令路径可以使用通配符，如<code>yum provides &quot;/*/vim&quot;</code>，使用这种方法的前提是系统中没有安装对应的软件包，在实际使用中可以配合<code>rpm -qf</code>对命令进行搜索，再使用<code>yum provides</code>进行搜索。</li></ul><h1 id=\"搭建yum仓库\"><a href=\"#搭建yum仓库\" class=\"headerlink\" title=\"搭建yum仓库\"></a>搭建yum仓库</h1><h2 id=\"yum本地仓库搭建\"><a href=\"#yum本地仓库搭建\" class=\"headerlink\" title=\"yum本地仓库搭建\"></a>yum本地仓库搭建</h2><ul><li>yum默认的仓库需要链接远程服务器下载资源，但某些情况下存在服务器无法联网的情况，所以可以在本地搭建yum仓库；</li><li>搭载本地仓库需要挂载光盘或者光盘镜像，在上文中已经将光盘镜像挂载到<code>/mnt</code>目录；</li><li>将<code>/etc/yum.repos.d/</code>目录备份，使用命令<code>cp -r /etc/yum.repos.d /etc/yum.repos.d.bak</code>进行备份操作，然后将原<code>/etc/yum.repos.d</code>目录清空：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cp -r /etc/yum.repos.d/ /etc/yum.repos.d.bak</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cd /etc/yum.repos.d</span></span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># ls</span></span><br><span class=\"line\">CentOS-Base.repo  CentOS-Debuginfo.repo  CentOS-Media.repo    CentOS-Vault.repo</span><br><span class=\"line\">CentOS-CR.repo    CentOS-fasttrack.repo  CentOS-Sources.repo</span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># rm -f *</span></span><br></pre></td></tr></table></figure><ul><li>在<code>/etc/yum.repos.d</code>目录下创建<code>dvd.repo</code>文件，写入以下内容：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[dvd]</span><br><span class=\"line\">name=install dvd\t</span><br><span class=\"line\">baseurl=file:///mnt\t</span><br><span class=\"line\"><span class=\"built_in\">enable</span>=1\t\t</span><br><span class=\"line\">gpgcheck=0</span><br></pre></td></tr></table></figure><ul><li><strong>name</strong>字段是对仓库名的描述，<strong>baseurl</strong>是仓库的路径，<strong>enable</strong>表示是否启用仓库，<strong>gpgcheck</strong>表示是否进行gpg检查，由于是本地仓库，所以置为0；</li><li>由于之前使用远程仓库，系统存在缓存，所以执行<code>yum clean all</code>命令清除缓存，再执行<code>yum list</code>就可以看到软件包的仓库已经变为<code>dvd</code></li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># yum clean all</span></span><br><span class=\"line\">已加载插件：fastestmirror</span><br><span class=\"line\">正在清理软件源： dvd</span><br><span class=\"line\">Cleaning up everything</span><br><span class=\"line\">Cleaning up list of fastest mirrors</span><br><span class=\"line\"></span><br><span class=\"line\">[[root@localhost yum.repos.d]<span class=\"comment\"># yum list</span></span><br><span class=\"line\">已加载插件：fastestmirror</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\">已安装的软件包</span><br><span class=\"line\">GeoIP.x86_64                                     1.5.0-11.el7                        @anaconda</span><br><span class=\"line\">bzip2.x86_64                                     1.0.6-13.el7                        @base    </span><br><span class=\"line\">centos-bookmarks.noarch                          7-1.el7                             dvd</span><br></pre></td></tr></table></figure><ul><li><code>yum list</code>列出的软件包，在第三列有3种显示：<code>@anaconda</code>、<code>@base</code>表示已经安装过的软件包，<code>dvd</code>则是来自我们本地搭建的仓库dvd的软件包，之后使用<code>yum</code>安装软件包时，就会从本地的仓库进行安装。</li></ul><h2 id=\"yum局域网仓库搭建\"><a href=\"#yum局域网仓库搭建\" class=\"headerlink\" title=\"yum局域网仓库搭建\"></a>yum局域网仓库搭建</h2><h3 id=\"FTP服务搭建\"><a href=\"#FTP服务搭建\" class=\"headerlink\" title=\"FTP服务搭建\"></a>FTP服务搭建</h3><ul><li>在局域网中搭建yum仓库，需要在一台服务器上搭建<code>Apache</code>服务器或者<code>ftp</code>服务器，这里使用<code>vsftpd</code>软件包搭建<code>ftp</code>服务器做yum仓库；</li><li>使用<code>yum install -y vsftpd</code>安装vsftp软件包，然后执行<code>systemctl enable vsftpd</code>命令将vsftp服务设置为开机启动，之后使用<code>systemctl start vsftpd</code>命令启动服务：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># systemctl enable vsftpd</span></span><br><span class=\"line\">Created symlink from /etc/systemd/system/multi-user.target.wants/vsftpd.service to /usr/lib/systemd/system/vsftpd.service.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># systemctl start vsftpd</span></span><br></pre></td></tr></table></figure><ul><li>命令<code>systemctl is-enabled vsftpd</code>可以查看服务是否被设置为开机启动，<code>enable</code>为开机启动，<code>disable</code>为不启动；</li><li>启动vsftp服务后，还需要关闭防火墙，否则无法访问FTP服务，使用命令<code>systemctl stop firewalld.service</code>关闭防火墙，如果想要禁止防火墙启动，执行<code>systemctl disable firewalld.service</code>即可；</li><li>这时从浏览器使用<code>ftp://[ip address]</code>地址访问FTP服务器，出现下面的界面表示FTP服务运行正常：</li></ul><p><img src=\"http://p5qynomrl.bkt.clouddn.com/15239803743973aqlnr8b.png?imageslim\" alt=\"FTP\"></p><h3 id=\"仓库设置\"><a href=\"#仓库设置\" class=\"headerlink\" title=\"仓库设置\"></a>仓库设置</h3><ul><li>在<code>/var/ftp/pub/</code>目录下创建centos7目录，将Centos7的安装光盘镜像内的文件复制到目录下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkdir /var/ftp/pub/centos7</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cp -rvf /mnt/* /var/ftp/pub/centos7/</span></span><br></pre></td></tr></table></figure><ul><li>复制完成后，在浏览器中访问FTP，进入<code>centos7/Packages</code>目录，就可以看到所有的rpm软件包：</li></ul><p><img src=\"http://p5qynomrl.bkt.clouddn.com/15239832162285ykeole1.png?imageslim\" alt=\"rpm\"></p><ul><li>接着安装<code>createrepo</code>软件包用来身材yum仓库的rpm元数据，使用<code>yum install -y createrepo</code>安装；</li><li>安装完成后，使用命令<code>createrepo /var/ftp/pub/centos7</code>生成rpm元数据：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># createrepo /var/ftp/pub/centos7/</span></span><br><span class=\"line\">Spawning worker 0 with 3831 pkgs</span><br><span class=\"line\">Workers Finished</span><br><span class=\"line\">Saving Primary metadata</span><br><span class=\"line\">Saving file lists metadata</span><br><span class=\"line\">Saving other metadata</span><br><span class=\"line\">Generating sqlite DBs</span><br><span class=\"line\">Sqlite DBs complete</span><br></pre></td></tr></table></figure><h3 id=\"使用软件源\"><a href=\"#使用软件源\" class=\"headerlink\" title=\"使用软件源\"></a>使用软件源</h3><ul><li>软件源仓库设置好之后，在其他机器上进行yum软件源的配置，首先与搭建本地仓库相同，将系统<code>/etc/yum.repos.d</code>目录备份；</li><li>备份完成后，删除<code>yum.repos.d</code>除<code>CentOS-Base.repo</code>文件外的其他文件：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># ls</span></span><br><span class=\"line\">CentOS-Base.repo  CentOS-Debuginfo.repo  CentOS-Media.repo    CentOS-Vault.repo</span><br><span class=\"line\">CentOS-CR.repo    CentOS-fasttrack.repo  CentOS-Sources.repo</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># find . ! -name \"*Base*\" -delete\t# !表示查找除\"*Base*\"文件外的文件，-delete表示删除查找到的文件</span></span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># ls</span></span><br><span class=\"line\">CentOS-Base.repo</span><br></pre></td></tr></table></figure><ul><li>然后修改<code>CentOS-Base.repo</code>文件，修改后的内容如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[base]</span><br><span class=\"line\">name=CentOS-<span class=\"variable\">$releasever</span> - Base</span><br><span class=\"line\">baseurl=ftp://192.168.199.224/pub/centos7/\t</span><br><span class=\"line\"><span class=\"comment\"># 将IP地址替换为FTP服务器地址</span></span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=ftp://192.168.199.224/pub/centos7/RPM-GPG-KEY-CentOS-7</span><br><span class=\"line\"><span class=\"built_in\">enable</span>=1</span><br><span class=\"line\"><span class=\"comment\">#released updates</span></span><br><span class=\"line\"><span class=\"comment\">#[updates]</span></span><br><span class=\"line\"><span class=\"comment\">#name=CentOS-$releasever - Updates</span></span><br><span class=\"line\"><span class=\"comment\">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updates&amp;infra=$infra</span></span><br><span class=\"line\"><span class=\"comment\">#baseurl=http://mirror.centos.org/centos/$releasever/updates/$basearch/</span></span><br><span class=\"line\"><span class=\"comment\">#gpgcheck=1</span></span><br><span class=\"line\"><span class=\"comment\">#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span></span><br><span class=\"line\"><span class=\"comment\">#enable=1</span></span><br></pre></td></tr></table></figure><ul><li>保存之后的操作与本地仓库相同，执行<code>yum clean all</code>和<code>yum update</code>，之后就可以使用局域网软件源了。</li></ul><hr><h1 id=\"保存yum下载的rpm包\"><a href=\"#保存yum下载的rpm包\" class=\"headerlink\" title=\"保存yum下载的rpm包\"></a>保存yum下载的rpm包</h1><ul><li>修改相应的配置文件可以保存每次使用<code>yum</code>安装的软件的rpm软件包；</li><li>修改<code>/etc/yum.conf</code>文件，修改内容如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[main]</span><br><span class=\"line\"><span class=\"comment\"># cachedir是保存下载的包的目录，可以修改为自己定义的位置</span></span><br><span class=\"line\">cachedir=/var/cache/yum/<span class=\"variable\">$basearch</span>/<span class=\"variable\">$releasever</span></span><br><span class=\"line\"><span class=\"comment\"># keepcache为1时表示保存已下载的包</span></span><br><span class=\"line\">keepcache=1</span><br><span class=\"line\">debuglevel=2</span><br><span class=\"line\">logfile=/var/<span class=\"built_in\">log</span>/yum.log</span><br><span class=\"line\">exactarch=1</span><br><span class=\"line\">obsoletes=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">plugins=1</span><br><span class=\"line\">installonly_limit=5</span><br><span class=\"line\">bugtracker_url=http://bugs.centos.org/set_project.php?project_id=23&amp;ref=http://bugs.centos.org/bug_report_page.php?category=yum</span><br><span class=\"line\">distroverpkg=centos-release</span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->"},{"title":"Apache用户认证、域名跳转及访问日志","author":"Evobot","abbrlink":"af0b01","date":"2018-05-29T13:00:27.000Z","image":null,"_content":"\n\n\n\n\n本文继续介绍Apache的配置，主要为如何配置用户认证，如何配置域名跳转以及了解Apache的访问日志结构。\n\n<!--more-->\n\n---\n\n# Apache用户认证\n\n## 虚拟主机用户认证\n\n- 用户认证就是打开站点时提示输入用户名和密码，与一般登陆不同，用户认证不会显示任何网页内容，而是直接提示输入用户名和密码。\n\n- 配置用户认证，需要配置虚拟主机配置文件`conf/extra/httpd-vhosts.conf`，将需要增加用户认证的虚拟主机配置中`ServerAlias`下增加以下配置：\n\n  ```bash\n  <Directory /data/wwwroot/xtears.com>\n      AllowOverride AuthConfig\n      AuthName \"123.com user auth\"\n      AuthType Basic\n      AuthUserFile /data/.htpasswd\n      require valid-user\n  </Directory>\n  ```\n\n  - AllowOverride AuthConfig表示打开用户认证开关；\n  - AuthName是定义用户认证的提示信息；\n  - AuthType Basic则是定义认证类型为`Basic`，一般只需要使用Basic即可；\n  - AuthUserFile则是定义认证的用户名密码文件路径；\n  - require valid-user是指定需要认证的用户为全部可用用户，即密码文件中定义的用户。\n\n- 生成用户名密码文件，使用apache自带命令`htpasswd `，选项`-c`为创建，`-m`为使用md5加密，然后指定密码文件所在位置，最后加上需要创建的用户名，具体使用方法如下:\n\n  ```bash\n  [root@evobot apache2.4]# /usr/local/apache2.4/bin/htpasswd -c -m /data/.htpasswd evobot\n  New password: \n  Re-type new password: \n  Adding password for user evobot\n  ```\n\n- 生成的`.htpasswd`文件内容如下：\n\n  ```bash\n  [root@evobot apache2.4]# cat /data/.htpasswd \n  evobot:$apr1$Yjt7h7hR$QgRFpki/qY1.avjRe4ahY/\n  ```\n\n- 配置完成后使用`apachectl -t`检查配置文件正确性，`apachectl graceful`更新配置：\n\n  ```bash\n  [root@evobot apache2.4]# /usr/local/apache2.4/bin/apachectl -t\n  Syntax OK\n  [root@evobot apache2.4]# /usr/local/apache2.4/bin/apachectl graceful\n  ```\n\n- 在另一台机器上访问，提示401错误，为认证：\n\n  ```bash\n  $ curl -x118.24.153.130:80 xtears.com -I\n  HTTP/1.1 401 Unauthorized\n  Date: Tue, 29 May 2018 16:21:06 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  WWW-Authenticate: Basic realm=\"123.com user auth\"\n  Content-Type: text/html; charset=iso-8859-1\n  ```\n\n- 使用浏览器访问，提示输入用户名密码：\n\n  ![apache-auth](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/apache-auth.png)\n\n  - 输入用户名密码后才可以看到网页内容，或者使用curl访问并且提供用户名密码：\n\n  ```bash\n  curl -x118.24.153.130:80 -uevobot:clikks xtears.com\n  xtears.com%\n  ```\n\n## 单个文件认证\n\n- 一个站点有时候可能只有后台页面需要进行二次认证，比如admin页面，所以apache也可以配置针对单个文件的用户认证；\n\n- 配置文件认证，在虚拟主机配置的ServerAlias配置下方，增加以下配置，如针对123.php进行认证：\n\n  ```bash\n  <FilesMatch 123.php>\n      AllowOverride AuthConfig\n      AuthName \"123.com user auth\"\n      AuthType Basic\n      AuthUserFile /data/.htpasswd\n      require valid-user\n  </FilesMatch>\n  ```\n\n- 然后检查配置文件正确性，并且在站点跟目录下创建`123.php`文件，并更新配置文件：\n\n  ```php\n  <?php\n  echo \"auth success!\";\n  ?>\n  ```\n\n- 不使用用户名密码访问站点，已经不再提示认证和401：\n\n  ```bash\n  $ curl -x118.24.153.130:80  xtears.com\n  xtears.com%\n  ```\n\n- 访问123.php，提示401未认证：\n\n  ```bash\n  $ curl -x118.24.153.130:80 xtears.com/123.php -I\n  HTTP/1.1 401 Unauthorized\n  Date: Tue, 29 May 2018 16:39:12 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  WWW-Authenticate: Basic realm=\"123.com user auth\"\n  Content-Type: text/html; charset=iso-8859-1\n  ```\n\n- 加上用户名密码访问：\n\n  ```bash\n  $ curl -x118.24.153.130:80 -uevobot:clikks xtears.com/123.php\n  auth success!%  \n  ```\n\n# 域名跳转\n\n- 实际使用中，有时需要将一个域名跳转到另一个域名上，使两个域名能够访问同一个站点，而跳转是为了让被跳转的域名在搜索引擎中的权重提升，这里的跳转使用的http状态码为301永久重定向。\n\n- 域名跳转到配置仍然在虚拟主机内进行配置，并且依赖于`mod_rewrite`模块，配置如下:\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.com\"\n      ServerName xtears.com\n      ServerAlias 222.com 333.com     \n      <IfModule mod_rewrite.c>\n          RewriteEngine on\n          RewriteCond %{HTTP_HOST} !^xtears.com$\n          RewriteRule ^/(.*)$ http://xtears.com/$1 [R=301,L]\n      </IfModule>\n      ErrorLog \"logs/xtears.com-error_log\"\n      CustomLog \"logs/xtears.com-access_log\" common\n  </VirtualHost>\n  ```\n\n  - `<IfModule mod_rewrite.c>`表示需要mod_rewrite模块支持；\n  - `RewriteEngine on`表示打开rewrite功能；\n  - `RewriteCond`定义rewrite的条件，当域名不是xtears.com时满足条件；\n  - `RewriteRule`定义跳转规则，`^/`表示访问的域名，`(.*)`则表示域名后面访问的资源，这部分需要继续传递给被跳转的域名后面去，所以使用`$1`表示匹配到的第一部分，如果有多个小括号进行匹配，则第二部分为`$2`，依此类推，然后`[R=301,L]`中R=301表示跳转的状态码，L表示跳转一次结束(last)。\n\n- 保存配置，检查正确性并更新配置之后，需要确认apache是否加载了rewrite模块：\n\n  ```bash\n  /usr/local/apache2.4/bin/apachectl -M | grep rewrite\n  ```\n\n  - 如果没有加载，需要在httpd.conf中打开模块配置：\n\n  ```bash\n  LoadModule rewrite_module modules/mod_rewrite.so\n  ```\n\n  - 完成后再重新加载配置查看模块是否加载：\n\n  ```bash\n  [root@evobot apache2.4]# /usr/local/apache2.4/bin/apachectl -M | grep rewrite\n   rewrite_module (shared)\n  ```\n\n- 尝试访问站点：\n\n  ```bash\n  $ curl -x118.24.153.130:80 -uevobot:clikks 222.com/ -I\n  HTTP/1.1 301 Moved Permanently\n  Date: Tue, 29 May 2018 17:11:00 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  Location: http://xtears.com/\n  Content-Type: text/html; charset=iso-8859-1\n  \n  $ curl -x118.24.153.130:80 -uevobot:clikks 222.com/       \n  <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n  <html><head>\n  <title>301 Moved Permanently</title>\n  </head><body>\n  <h1>Moved Permanently</h1>\n  <p>The document has moved <a href=\"http://xtears.com/\">here</a>.</p>\n  </body></html>\n  \n  $ curl -x118.24.153.130:80 -uevobot:clikks 222.com/123.php -I\n  HTTP/1.1 301 Moved Permanently\n  Date: Tue, 29 May 2018 17:13:14 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  Location: http://xtears.com/123.php\n  Content-Type: text/html; charset=iso-8859-1\n  \n  ```\n\n  - 可以看到访问的状态码为301，跳转到了xtears.com，并且访问的资源地址也被传递给了被跳转的域名。\n\n# Apache访问日志\n\n## 日志格式\n\n- apache的访问日志记录了用户的每一个请求：\n\n  ```bash\n  [root@evobot apache2.4]# tail -n 10 /usr/local/apache2.4/logs/xtears.com-access_log \n  118.113.205.231 - - [30/May/2018:01:15:00 +0800] \"GET / HTTP/1.1\" 301 226\n  118.113.205.231 - - [30/May/2018:01:15:00 +0800] \"GET / HTTP/1.1\" 200 10\n  118.113.205.231 - - [30/May/2018:01:15:10 +0800] \"GET / HTTP/1.1\" 200 10\n  118.113.205.231 - - [30/May/2018:01:15:14 +0800] \"GET / HTTP/1.1\" 200 10\n  118.113.205.231 - - [30/May/2018:01:15:14 +0800] \"GET /123.php HTTP/1.1\" 301 233\n  118.113.205.231 - - [30/May/2018:01:15:14 +0800] \"GET / HTTP/1.1\" 301 226\n  118.113.205.231 - - [30/May/2018:01:15:14 +0800] \"GET / HTTP/1.1\" 200 10\n  118.113.205.231 - - [30/May/2018:01:15:14 +0800] \"GET /123.php HTTP/1.1\" 200 13\n  118.113.205.231 - - [30/May/2018:01:15:14 +0800] \"GET / HTTP/1.1\" 301 226\n  118.113.205.231 - - [30/May/2018:01:15:14 +0800] \"GET / HTTP/1.1\" 200 10\n  ```\n\n- 而日志的格式，则是在httpd.conf中的`LogFormat`配置项定义的：\n\n  ```bash\n  <IfModule log_config_module>\n      #\n      # The following directives define some format nicknames for use with\n      # a CustomLog directive (see below).\n      #\n      LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" combined\n      LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b\" common\n  \n      <IfModule logio_module>\n        # You need to enable mod_logio.c to use %I and %O\n        LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %I %O\" combinedio\n      </IfModule>\n  ```\n\n- apache提供了两种日志格式，默认使用的是common项的格式，其中%h表示来源ip，%l、%u表示用户名密码，%t表示时间，%r表示请求方法和网址，%s则为状态码，%b表示大小；\n\n- `combined`则提供了更为详细的日志内容，如User-Agent，Referer上一次访问的地址。\n\n## 修改虚拟主机日志格式\n\n- 修改虚拟主机的日志格式，如将common改为combined，则在虚拟主机的日志配置将common改为combined：\n\n  ```bash\n   \n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.com\"\n      ServerName xtears.com\n      ServerAlias 222.com 333.com\n      <IfModule mod_rewrite.c>\n          RewriteEngine on\n          RewriteCond %{HTTP_HOST} !^xtears.com$\n          RewriteRule ^/(.*)$ http://xtears.com/$1 [R=301,L]\n      </IfModule>\n      ErrorLog \"logs/xtears.com-error_log\"\n      CustomLog \"logs/xtears.com-access_log\" combined\n  </VirtualHost>\n  ```\n\n- 然后更新配置后访问主机再查看日志如下：\n\n  ```bash\n  [root@evobot apache2.4]# !tail\n  tail -n 5 /usr/local/apache2.4/logs/xtears.com-access_log \n  118.113.205.231 - - [30/May/2018:01:15:14 +0800] \"GET /123.php HTTP/1.1\" 200 13\n  118.113.205.231 - - [30/May/2018:01:15:14 +0800] \"GET / HTTP/1.1\" 301 226\n  118.113.205.231 - - [30/May/2018:01:15:14 +0800] \"GET / HTTP/1.1\" 200 10\n  118.113.205.231 - - [30/May/2018:01:31:23 +0800] \"GET /123.php HTTP/1.1\" 200 13 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/17.17672\"\n  118.113.205.231 - - [30/May/2018:01:31:23 +0800] \"GET /123.php HTTP/1.1\" 200 13 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/17.17672\"\n  \n  ```\n\n  - 可以看到最后两条日志记录了更加详细的信息。\n\n---\n\n","source":"_posts/Apache用户认证、域名跳转及访问日志.md","raw":"---\ntitle: Apache用户认证、域名跳转及访问日志\nauthor: Evobot\ncategories: LAMP\ntags:\n  - Linux\n  - Centos\n  - Apache\nabbrlink: af0b01\ndate: 2018-05-29 21:00:27\nimage:\n---\n\n\n\n\n\n本文继续介绍Apache的配置，主要为如何配置用户认证，如何配置域名跳转以及了解Apache的访问日志结构。\n\n<!--more-->\n\n---\n\n# Apache用户认证\n\n## 虚拟主机用户认证\n\n- 用户认证就是打开站点时提示输入用户名和密码，与一般登陆不同，用户认证不会显示任何网页内容，而是直接提示输入用户名和密码。\n\n- 配置用户认证，需要配置虚拟主机配置文件`conf/extra/httpd-vhosts.conf`，将需要增加用户认证的虚拟主机配置中`ServerAlias`下增加以下配置：\n\n  ```bash\n  <Directory /data/wwwroot/xtears.com>\n      AllowOverride AuthConfig\n      AuthName \"123.com user auth\"\n      AuthType Basic\n      AuthUserFile /data/.htpasswd\n      require valid-user\n  </Directory>\n  ```\n\n  - AllowOverride AuthConfig表示打开用户认证开关；\n  - AuthName是定义用户认证的提示信息；\n  - AuthType Basic则是定义认证类型为`Basic`，一般只需要使用Basic即可；\n  - AuthUserFile则是定义认证的用户名密码文件路径；\n  - require valid-user是指定需要认证的用户为全部可用用户，即密码文件中定义的用户。\n\n- 生成用户名密码文件，使用apache自带命令`htpasswd `，选项`-c`为创建，`-m`为使用md5加密，然后指定密码文件所在位置，最后加上需要创建的用户名，具体使用方法如下:\n\n  ```bash\n  [root@evobot apache2.4]# /usr/local/apache2.4/bin/htpasswd -c -m /data/.htpasswd evobot\n  New password: \n  Re-type new password: \n  Adding password for user evobot\n  ```\n\n- 生成的`.htpasswd`文件内容如下：\n\n  ```bash\n  [root@evobot apache2.4]# cat /data/.htpasswd \n  evobot:$apr1$Yjt7h7hR$QgRFpki/qY1.avjRe4ahY/\n  ```\n\n- 配置完成后使用`apachectl -t`检查配置文件正确性，`apachectl graceful`更新配置：\n\n  ```bash\n  [root@evobot apache2.4]# /usr/local/apache2.4/bin/apachectl -t\n  Syntax OK\n  [root@evobot apache2.4]# /usr/local/apache2.4/bin/apachectl graceful\n  ```\n\n- 在另一台机器上访问，提示401错误，为认证：\n\n  ```bash\n  $ curl -x118.24.153.130:80 xtears.com -I\n  HTTP/1.1 401 Unauthorized\n  Date: Tue, 29 May 2018 16:21:06 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  WWW-Authenticate: Basic realm=\"123.com user auth\"\n  Content-Type: text/html; charset=iso-8859-1\n  ```\n\n- 使用浏览器访问，提示输入用户名密码：\n\n  ![apache-auth](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/apache-auth.png)\n\n  - 输入用户名密码后才可以看到网页内容，或者使用curl访问并且提供用户名密码：\n\n  ```bash\n  curl -x118.24.153.130:80 -uevobot:clikks xtears.com\n  xtears.com%\n  ```\n\n## 单个文件认证\n\n- 一个站点有时候可能只有后台页面需要进行二次认证，比如admin页面，所以apache也可以配置针对单个文件的用户认证；\n\n- 配置文件认证，在虚拟主机配置的ServerAlias配置下方，增加以下配置，如针对123.php进行认证：\n\n  ```bash\n  <FilesMatch 123.php>\n      AllowOverride AuthConfig\n      AuthName \"123.com user auth\"\n      AuthType Basic\n      AuthUserFile /data/.htpasswd\n      require valid-user\n  </FilesMatch>\n  ```\n\n- 然后检查配置文件正确性，并且在站点跟目录下创建`123.php`文件，并更新配置文件：\n\n  ```php\n  <?php\n  echo \"auth success!\";\n  ?>\n  ```\n\n- 不使用用户名密码访问站点，已经不再提示认证和401：\n\n  ```bash\n  $ curl -x118.24.153.130:80  xtears.com\n  xtears.com%\n  ```\n\n- 访问123.php，提示401未认证：\n\n  ```bash\n  $ curl -x118.24.153.130:80 xtears.com/123.php -I\n  HTTP/1.1 401 Unauthorized\n  Date: Tue, 29 May 2018 16:39:12 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  WWW-Authenticate: Basic realm=\"123.com user auth\"\n  Content-Type: text/html; charset=iso-8859-1\n  ```\n\n- 加上用户名密码访问：\n\n  ```bash\n  $ curl -x118.24.153.130:80 -uevobot:clikks xtears.com/123.php\n  auth success!%  \n  ```\n\n# 域名跳转\n\n- 实际使用中，有时需要将一个域名跳转到另一个域名上，使两个域名能够访问同一个站点，而跳转是为了让被跳转的域名在搜索引擎中的权重提升，这里的跳转使用的http状态码为301永久重定向。\n\n- 域名跳转到配置仍然在虚拟主机内进行配置，并且依赖于`mod_rewrite`模块，配置如下:\n\n  ```bash\n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.com\"\n      ServerName xtears.com\n      ServerAlias 222.com 333.com     \n      <IfModule mod_rewrite.c>\n          RewriteEngine on\n          RewriteCond %{HTTP_HOST} !^xtears.com$\n          RewriteRule ^/(.*)$ http://xtears.com/$1 [R=301,L]\n      </IfModule>\n      ErrorLog \"logs/xtears.com-error_log\"\n      CustomLog \"logs/xtears.com-access_log\" common\n  </VirtualHost>\n  ```\n\n  - `<IfModule mod_rewrite.c>`表示需要mod_rewrite模块支持；\n  - `RewriteEngine on`表示打开rewrite功能；\n  - `RewriteCond`定义rewrite的条件，当域名不是xtears.com时满足条件；\n  - `RewriteRule`定义跳转规则，`^/`表示访问的域名，`(.*)`则表示域名后面访问的资源，这部分需要继续传递给被跳转的域名后面去，所以使用`$1`表示匹配到的第一部分，如果有多个小括号进行匹配，则第二部分为`$2`，依此类推，然后`[R=301,L]`中R=301表示跳转的状态码，L表示跳转一次结束(last)。\n\n- 保存配置，检查正确性并更新配置之后，需要确认apache是否加载了rewrite模块：\n\n  ```bash\n  /usr/local/apache2.4/bin/apachectl -M | grep rewrite\n  ```\n\n  - 如果没有加载，需要在httpd.conf中打开模块配置：\n\n  ```bash\n  LoadModule rewrite_module modules/mod_rewrite.so\n  ```\n\n  - 完成后再重新加载配置查看模块是否加载：\n\n  ```bash\n  [root@evobot apache2.4]# /usr/local/apache2.4/bin/apachectl -M | grep rewrite\n   rewrite_module (shared)\n  ```\n\n- 尝试访问站点：\n\n  ```bash\n  $ curl -x118.24.153.130:80 -uevobot:clikks 222.com/ -I\n  HTTP/1.1 301 Moved Permanently\n  Date: Tue, 29 May 2018 17:11:00 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  Location: http://xtears.com/\n  Content-Type: text/html; charset=iso-8859-1\n  \n  $ curl -x118.24.153.130:80 -uevobot:clikks 222.com/       \n  <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n  <html><head>\n  <title>301 Moved Permanently</title>\n  </head><body>\n  <h1>Moved Permanently</h1>\n  <p>The document has moved <a href=\"http://xtears.com/\">here</a>.</p>\n  </body></html>\n  \n  $ curl -x118.24.153.130:80 -uevobot:clikks 222.com/123.php -I\n  HTTP/1.1 301 Moved Permanently\n  Date: Tue, 29 May 2018 17:13:14 GMT\n  Server: Apache/2.4.33 (Unix) PHP/5.6.32\n  Location: http://xtears.com/123.php\n  Content-Type: text/html; charset=iso-8859-1\n  \n  ```\n\n  - 可以看到访问的状态码为301，跳转到了xtears.com，并且访问的资源地址也被传递给了被跳转的域名。\n\n# Apache访问日志\n\n## 日志格式\n\n- apache的访问日志记录了用户的每一个请求：\n\n  ```bash\n  [root@evobot apache2.4]# tail -n 10 /usr/local/apache2.4/logs/xtears.com-access_log \n  118.113.205.231 - - [30/May/2018:01:15:00 +0800] \"GET / HTTP/1.1\" 301 226\n  118.113.205.231 - - [30/May/2018:01:15:00 +0800] \"GET / HTTP/1.1\" 200 10\n  118.113.205.231 - - [30/May/2018:01:15:10 +0800] \"GET / HTTP/1.1\" 200 10\n  118.113.205.231 - - [30/May/2018:01:15:14 +0800] \"GET / HTTP/1.1\" 200 10\n  118.113.205.231 - - [30/May/2018:01:15:14 +0800] \"GET /123.php HTTP/1.1\" 301 233\n  118.113.205.231 - - [30/May/2018:01:15:14 +0800] \"GET / HTTP/1.1\" 301 226\n  118.113.205.231 - - [30/May/2018:01:15:14 +0800] \"GET / HTTP/1.1\" 200 10\n  118.113.205.231 - - [30/May/2018:01:15:14 +0800] \"GET /123.php HTTP/1.1\" 200 13\n  118.113.205.231 - - [30/May/2018:01:15:14 +0800] \"GET / HTTP/1.1\" 301 226\n  118.113.205.231 - - [30/May/2018:01:15:14 +0800] \"GET / HTTP/1.1\" 200 10\n  ```\n\n- 而日志的格式，则是在httpd.conf中的`LogFormat`配置项定义的：\n\n  ```bash\n  <IfModule log_config_module>\n      #\n      # The following directives define some format nicknames for use with\n      # a CustomLog directive (see below).\n      #\n      LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" combined\n      LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b\" common\n  \n      <IfModule logio_module>\n        # You need to enable mod_logio.c to use %I and %O\n        LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %I %O\" combinedio\n      </IfModule>\n  ```\n\n- apache提供了两种日志格式，默认使用的是common项的格式，其中%h表示来源ip，%l、%u表示用户名密码，%t表示时间，%r表示请求方法和网址，%s则为状态码，%b表示大小；\n\n- `combined`则提供了更为详细的日志内容，如User-Agent，Referer上一次访问的地址。\n\n## 修改虚拟主机日志格式\n\n- 修改虚拟主机的日志格式，如将common改为combined，则在虚拟主机的日志配置将common改为combined：\n\n  ```bash\n   \n  <VirtualHost *:80>\n      DocumentRoot \"/data/wwwroot/xtears.com\"\n      ServerName xtears.com\n      ServerAlias 222.com 333.com\n      <IfModule mod_rewrite.c>\n          RewriteEngine on\n          RewriteCond %{HTTP_HOST} !^xtears.com$\n          RewriteRule ^/(.*)$ http://xtears.com/$1 [R=301,L]\n      </IfModule>\n      ErrorLog \"logs/xtears.com-error_log\"\n      CustomLog \"logs/xtears.com-access_log\" combined\n  </VirtualHost>\n  ```\n\n- 然后更新配置后访问主机再查看日志如下：\n\n  ```bash\n  [root@evobot apache2.4]# !tail\n  tail -n 5 /usr/local/apache2.4/logs/xtears.com-access_log \n  118.113.205.231 - - [30/May/2018:01:15:14 +0800] \"GET /123.php HTTP/1.1\" 200 13\n  118.113.205.231 - - [30/May/2018:01:15:14 +0800] \"GET / HTTP/1.1\" 301 226\n  118.113.205.231 - - [30/May/2018:01:15:14 +0800] \"GET / HTTP/1.1\" 200 10\n  118.113.205.231 - - [30/May/2018:01:31:23 +0800] \"GET /123.php HTTP/1.1\" 200 13 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/17.17672\"\n  118.113.205.231 - - [30/May/2018:01:31:23 +0800] \"GET /123.php HTTP/1.1\" 200 13 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/17.17672\"\n  \n  ```\n\n  - 可以看到最后两条日志记录了更加详细的信息。\n\n---\n\n","slug":"Apache用户认证、域名跳转及访问日志","published":1,"updated":"2018-06-05T06:52:30.886Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gaz9z001ou1jxdlobply6","content":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>本文继续介绍Apache的配置，主要为如何配置用户认证，如何配置域名跳转以及了解Apache的访问日志结构。</p><a id=\"more\"></a><hr><h1 id=\"Apache用户认证\"><a href=\"#Apache用户认证\" class=\"headerlink\" title=\"Apache用户认证\"></a>Apache用户认证</h1><h2 id=\"虚拟主机用户认证\"><a href=\"#虚拟主机用户认证\" class=\"headerlink\" title=\"虚拟主机用户认证\"></a>虚拟主机用户认证</h2><ul><li><p>用户认证就是打开站点时提示输入用户名和密码，与一般登陆不同，用户认证不会显示任何网页内容，而是直接提示输入用户名和密码。</p></li><li><p>配置用户认证，需要配置虚拟主机配置文件<code>conf/extra/httpd-vhosts.conf</code>，将需要增加用户认证的虚拟主机配置中<code>ServerAlias</code>下增加以下配置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Directory /data/wwwroot/xtears.com&gt;</span><br><span class=\"line\">    AllowOverride AuthConfig</span><br><span class=\"line\">    AuthName <span class=\"string\">\"123.com user auth\"</span></span><br><span class=\"line\">    AuthType Basic</span><br><span class=\"line\">    AuthUserFile /data/.htpasswd</span><br><span class=\"line\">    require valid-user</span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><ul><li>AllowOverride AuthConfig表示打开用户认证开关；</li><li>AuthName是定义用户认证的提示信息；</li><li>AuthType Basic则是定义认证类型为<code>Basic</code>，一般只需要使用Basic即可；</li><li>AuthUserFile则是定义认证的用户名密码文件路径；</li><li>require valid-user是指定需要认证的用户为全部可用用户，即密码文件中定义的用户。</li></ul></li><li><p>生成用户名密码文件，使用apache自带命令<code>htpasswd</code>，选项<code>-c</code>为创建，<code>-m</code>为使用md5加密，然后指定密码文件所在位置，最后加上需要创建的用户名，具体使用方法如下:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># /usr/local/apache2.4/bin/htpasswd -c -m /data/.htpasswd evobot</span></span><br><span class=\"line\">New password: </span><br><span class=\"line\">Re-type new password: </span><br><span class=\"line\">Adding password <span class=\"keyword\">for</span> user evobot</span><br></pre></td></tr></table></figure></li><li><p>生成的<code>.htpasswd</code>文件内容如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># cat /data/.htpasswd </span></span><br><span class=\"line\">evobot:<span class=\"variable\">$apr1</span><span class=\"variable\">$Yjt7h7hR</span><span class=\"variable\">$QgRFpki</span>/qY1.avjRe4ahY/</span><br></pre></td></tr></table></figure></li><li><p>配置完成后使用<code>apachectl -t</code>检查配置文件正确性，<code>apachectl graceful</code>更新配置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># /usr/local/apache2.4/bin/apachectl -t</span></span><br><span class=\"line\">Syntax OK</span><br><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># /usr/local/apache2.4/bin/apachectl graceful</span></span><br></pre></td></tr></table></figure></li><li><p>在另一台机器上访问，提示401错误，为认证：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80 xtears.com -I</span><br><span class=\"line\">HTTP/1.1 401 Unauthorized</span><br><span class=\"line\">Date: Tue, 29 May 2018 16:21:06 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">WWW-Authenticate: Basic realm=<span class=\"string\">\"123.com user auth\"</span></span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br></pre></td></tr></table></figure></li><li><p>使用浏览器访问，提示输入用户名密码：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/apache-auth.png\" alt=\"apache-auth\"></p><ul><li>输入用户名密码后才可以看到网页内容，或者使用curl访问并且提供用户名密码：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -x118.24.153.130:80 -uevobot:clikks xtears.com</span><br><span class=\"line\">xtears.com%</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"单个文件认证\"><a href=\"#单个文件认证\" class=\"headerlink\" title=\"单个文件认证\"></a>单个文件认证</h2><ul><li><p>一个站点有时候可能只有后台页面需要进行二次认证，比如admin页面，所以apache也可以配置针对单个文件的用户认证；</p></li><li><p>配置文件认证，在虚拟主机配置的ServerAlias配置下方，增加以下配置，如针对123.php进行认证：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;FilesMatch 123.php&gt;</span><br><span class=\"line\">    AllowOverride AuthConfig</span><br><span class=\"line\">    AuthName <span class=\"string\">\"123.com user auth\"</span></span><br><span class=\"line\">    AuthType Basic</span><br><span class=\"line\">    AuthUserFile /data/.htpasswd</span><br><span class=\"line\">    require valid-user</span><br><span class=\"line\">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure></li><li><p>然后检查配置文件正确性，并且在站点跟目录下创建<code>123.php</code>文件，并更新配置文件：</p><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"auth success!\"</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>不使用用户名密码访问站点，已经不再提示认证和401：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80  xtears.com</span><br><span class=\"line\">xtears.com%</span><br></pre></td></tr></table></figure></li><li><p>访问123.php，提示401未认证：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80 xtears.com/123.php -I</span><br><span class=\"line\">HTTP/1.1 401 Unauthorized</span><br><span class=\"line\">Date: Tue, 29 May 2018 16:39:12 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">WWW-Authenticate: Basic realm=<span class=\"string\">\"123.com user auth\"</span></span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br></pre></td></tr></table></figure></li><li><p>加上用户名密码访问：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80 -uevobot:clikks xtears.com/123.php</span><br><span class=\"line\">auth success!%</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"域名跳转\"><a href=\"#域名跳转\" class=\"headerlink\" title=\"域名跳转\"></a>域名跳转</h1><ul><li><p>实际使用中，有时需要将一个域名跳转到另一个域名上，使两个域名能够访问同一个站点，而跳转是为了让被跳转的域名在搜索引擎中的权重提升，这里的跳转使用的http状态码为301永久重定向。</p></li><li><p>域名跳转到配置仍然在虚拟主机内进行配置，并且依赖于<code>mod_rewrite</code>模块，配置如下:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.com\"</span></span><br><span class=\"line\">    ServerName xtears.com</span><br><span class=\"line\">    ServerAlias 222.com 333.com     </span><br><span class=\"line\">    &lt;IfModule mod_rewrite.c&gt;</span><br><span class=\"line\">        RewriteEngine on</span><br><span class=\"line\">        RewriteCond %&#123;HTTP_HOST&#125; !^xtears.com$</span><br><span class=\"line\">        RewriteRule ^/(.*)$ http://xtears.com/<span class=\"variable\">$1</span> [R=301,L]</span><br><span class=\"line\">    &lt;/IfModule&gt;</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.com-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"logs/xtears.com-access_log\"</span> common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;IfModule mod_rewrite.c&gt;</code>表示需要mod_rewrite模块支持；</li><li><code>RewriteEngine on</code>表示打开rewrite功能；</li><li><code>RewriteCond</code>定义rewrite的条件，当域名不是xtears.com时满足条件；</li><li><code>RewriteRule</code>定义跳转规则，<code>^/</code>表示访问的域名，<code>(.*)</code>则表示域名后面访问的资源，这部分需要继续传递给被跳转的域名后面去，所以使用<code>$1</code>表示匹配到的第一部分，如果有多个小括号进行匹配，则第二部分为<code>$2</code>，依此类推，然后<code>[R=301,L]</code>中R=301表示跳转的状态码，L表示跳转一次结束(last)。</li></ul></li><li><p>保存配置，检查正确性并更新配置之后，需要确认apache是否加载了rewrite模块：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/<span class=\"built_in\">local</span>/apache2.4/bin/apachectl -M | grep rewrite</span><br></pre></td></tr></table></figure><ul><li>如果没有加载，需要在httpd.conf中打开模块配置：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LoadModule rewrite_module modules/mod_rewrite.so</span><br></pre></td></tr></table></figure><ul><li>完成后再重新加载配置查看模块是否加载：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># /usr/local/apache2.4/bin/apachectl -M | grep rewrite</span></span><br><span class=\"line\"> rewrite_module (shared)</span><br></pre></td></tr></table></figure></li><li><p>尝试访问站点：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80 -uevobot:clikks 222.com/ -I</span><br><span class=\"line\">HTTP/1.1 301 Moved Permanently</span><br><span class=\"line\">Date: Tue, 29 May 2018 17:11:00 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">Location: http://xtears.com/</span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl -x118.24.153.130:80 -uevobot:clikks 222.com/       </span><br><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC <span class=\"string\">\"-//IETF//DTD HTML 2.0//EN\"</span>&gt;</span><br><span class=\"line\">&lt;html&gt;&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;301 Moved Permanently&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Moved Permanently&lt;/h1&gt;</span><br><span class=\"line\">&lt;p&gt;The document has moved &lt;a href=<span class=\"string\">\"http://xtears.com/\"</span>&gt;here&lt;/a&gt;.&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;&lt;/html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl -x118.24.153.130:80 -uevobot:clikks 222.com/123.php -I</span><br><span class=\"line\">HTTP/1.1 301 Moved Permanently</span><br><span class=\"line\">Date: Tue, 29 May 2018 17:13:14 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">Location: http://xtears.com/123.php</span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br></pre></td></tr></table></figure><ul><li>可以看到访问的状态码为301，跳转到了xtears.com，并且访问的资源地址也被传递给了被跳转的域名。</li></ul></li></ul><h1 id=\"Apache访问日志\"><a href=\"#Apache访问日志\" class=\"headerlink\" title=\"Apache访问日志\"></a>Apache访问日志</h1><h2 id=\"日志格式\"><a href=\"#日志格式\" class=\"headerlink\" title=\"日志格式\"></a>日志格式</h2><ul><li><p>apache的访问日志记录了用户的每一个请求：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># tail -n 10 /usr/local/apache2.4/logs/xtears.com-access_log </span></span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:00 +0800] <span class=\"string\">\"GET / HTTP/1.1\"</span> 301 226</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:00 +0800] <span class=\"string\">\"GET / HTTP/1.1\"</span> 200 10</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:10 +0800] <span class=\"string\">\"GET / HTTP/1.1\"</span> 200 10</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:14 +0800] <span class=\"string\">\"GET / HTTP/1.1\"</span> 200 10</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:14 +0800] <span class=\"string\">\"GET /123.php HTTP/1.1\"</span> 301 233</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:14 +0800] <span class=\"string\">\"GET / HTTP/1.1\"</span> 301 226</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:14 +0800] <span class=\"string\">\"GET / HTTP/1.1\"</span> 200 10</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:14 +0800] <span class=\"string\">\"GET /123.php HTTP/1.1\"</span> 200 13</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:14 +0800] <span class=\"string\">\"GET / HTTP/1.1\"</span> 301 226</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:14 +0800] <span class=\"string\">\"GET / HTTP/1.1\"</span> 200 10</span><br></pre></td></tr></table></figure></li><li><p>而日志的格式，则是在httpd.conf中的<code>LogFormat</code>配置项定义的：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule log_config_module&gt;</span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\"># The following directives define some format nicknames for use with</span></span><br><span class=\"line\">    <span class=\"comment\"># a CustomLog directive (see below).</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    LogFormat <span class=\"string\">\"%h %l %u %t \\\"%r\\\" %&gt;s %b \\\"%&#123;Referer&#125;i\\\" \\\"%&#123;User-Agent&#125;i\\\"\"</span> combined</span><br><span class=\"line\">    LogFormat <span class=\"string\">\"%h %l %u %t \\\"%r\\\" %&gt;s %b\"</span> common</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;IfModule logio_module&gt;</span><br><span class=\"line\">      <span class=\"comment\"># You need to enable mod_logio.c to use %I and %O</span></span><br><span class=\"line\">      LogFormat <span class=\"string\">\"%h %l %u %t \\\"%r\\\" %&gt;s %b \\\"%&#123;Referer&#125;i\\\" \\\"%&#123;User-Agent&#125;i\\\" %I %O\"</span> combinedio</span><br><span class=\"line\">    &lt;/IfModule&gt;</span><br></pre></td></tr></table></figure></li><li><p>apache提供了两种日志格式，默认使用的是common项的格式，其中%h表示来源ip，%l、%u表示用户名密码，%t表示时间，%r表示请求方法和网址，%s则为状态码，%b表示大小；</p></li><li><p><code>combined</code>则提供了更为详细的日志内容，如User-Agent，Referer上一次访问的地址。</p></li></ul><h2 id=\"修改虚拟主机日志格式\"><a href=\"#修改虚拟主机日志格式\" class=\"headerlink\" title=\"修改虚拟主机日志格式\"></a>修改虚拟主机日志格式</h2><ul><li><p>修改虚拟主机的日志格式，如将common改为combined，则在虚拟主机的日志配置将common改为combined：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.com\"</span></span><br><span class=\"line\">    ServerName xtears.com</span><br><span class=\"line\">    ServerAlias 222.com 333.com</span><br><span class=\"line\">    &lt;IfModule mod_rewrite.c&gt;</span><br><span class=\"line\">        RewriteEngine on</span><br><span class=\"line\">        RewriteCond %&#123;HTTP_HOST&#125; !^xtears.com$</span><br><span class=\"line\">        RewriteRule ^/(.*)$ http://xtears.com/<span class=\"variable\">$1</span> [R=301,L]</span><br><span class=\"line\">    &lt;/IfModule&gt;</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.com-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"logs/xtears.com-access_log\"</span> combined</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>然后更新配置后访问主机再查看日志如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># !tail</span></span><br><span class=\"line\">tail -n 5 /usr/<span class=\"built_in\">local</span>/apache2.4/logs/xtears.com-access_log </span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:14 +0800] <span class=\"string\">\"GET /123.php HTTP/1.1\"</span> 200 13</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:14 +0800] <span class=\"string\">\"GET / HTTP/1.1\"</span> 301 226</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:14 +0800] <span class=\"string\">\"GET / HTTP/1.1\"</span> 200 10</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:31:23 +0800] <span class=\"string\">\"GET /123.php HTTP/1.1\"</span> 200 13 <span class=\"string\">\"-\"</span> <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/17.17672\"</span></span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:31:23 +0800] <span class=\"string\">\"GET /123.php HTTP/1.1\"</span> 200 13 <span class=\"string\">\"-\"</span> <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/17.17672\"</span></span><br></pre></td></tr></table></figure><ul><li>可以看到最后两条日志记录了更加详细的信息。</li></ul></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>本文继续介绍Apache的配置，主要为如何配置用户认证，如何配置域名跳转以及了解Apache的访问日志结构。</p>","more":"<hr><h1 id=\"Apache用户认证\"><a href=\"#Apache用户认证\" class=\"headerlink\" title=\"Apache用户认证\"></a>Apache用户认证</h1><h2 id=\"虚拟主机用户认证\"><a href=\"#虚拟主机用户认证\" class=\"headerlink\" title=\"虚拟主机用户认证\"></a>虚拟主机用户认证</h2><ul><li><p>用户认证就是打开站点时提示输入用户名和密码，与一般登陆不同，用户认证不会显示任何网页内容，而是直接提示输入用户名和密码。</p></li><li><p>配置用户认证，需要配置虚拟主机配置文件<code>conf/extra/httpd-vhosts.conf</code>，将需要增加用户认证的虚拟主机配置中<code>ServerAlias</code>下增加以下配置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Directory /data/wwwroot/xtears.com&gt;</span><br><span class=\"line\">    AllowOverride AuthConfig</span><br><span class=\"line\">    AuthName <span class=\"string\">\"123.com user auth\"</span></span><br><span class=\"line\">    AuthType Basic</span><br><span class=\"line\">    AuthUserFile /data/.htpasswd</span><br><span class=\"line\">    require valid-user</span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><ul><li>AllowOverride AuthConfig表示打开用户认证开关；</li><li>AuthName是定义用户认证的提示信息；</li><li>AuthType Basic则是定义认证类型为<code>Basic</code>，一般只需要使用Basic即可；</li><li>AuthUserFile则是定义认证的用户名密码文件路径；</li><li>require valid-user是指定需要认证的用户为全部可用用户，即密码文件中定义的用户。</li></ul></li><li><p>生成用户名密码文件，使用apache自带命令<code>htpasswd</code>，选项<code>-c</code>为创建，<code>-m</code>为使用md5加密，然后指定密码文件所在位置，最后加上需要创建的用户名，具体使用方法如下:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># /usr/local/apache2.4/bin/htpasswd -c -m /data/.htpasswd evobot</span></span><br><span class=\"line\">New password: </span><br><span class=\"line\">Re-type new password: </span><br><span class=\"line\">Adding password <span class=\"keyword\">for</span> user evobot</span><br></pre></td></tr></table></figure></li><li><p>生成的<code>.htpasswd</code>文件内容如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># cat /data/.htpasswd </span></span><br><span class=\"line\">evobot:<span class=\"variable\">$apr1</span><span class=\"variable\">$Yjt7h7hR</span><span class=\"variable\">$QgRFpki</span>/qY1.avjRe4ahY/</span><br></pre></td></tr></table></figure></li><li><p>配置完成后使用<code>apachectl -t</code>检查配置文件正确性，<code>apachectl graceful</code>更新配置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># /usr/local/apache2.4/bin/apachectl -t</span></span><br><span class=\"line\">Syntax OK</span><br><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># /usr/local/apache2.4/bin/apachectl graceful</span></span><br></pre></td></tr></table></figure></li><li><p>在另一台机器上访问，提示401错误，为认证：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80 xtears.com -I</span><br><span class=\"line\">HTTP/1.1 401 Unauthorized</span><br><span class=\"line\">Date: Tue, 29 May 2018 16:21:06 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">WWW-Authenticate: Basic realm=<span class=\"string\">\"123.com user auth\"</span></span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br></pre></td></tr></table></figure></li><li><p>使用浏览器访问，提示输入用户名密码：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/apache-auth.png\" alt=\"apache-auth\"></p><ul><li>输入用户名密码后才可以看到网页内容，或者使用curl访问并且提供用户名密码：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -x118.24.153.130:80 -uevobot:clikks xtears.com</span><br><span class=\"line\">xtears.com%</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"单个文件认证\"><a href=\"#单个文件认证\" class=\"headerlink\" title=\"单个文件认证\"></a>单个文件认证</h2><ul><li><p>一个站点有时候可能只有后台页面需要进行二次认证，比如admin页面，所以apache也可以配置针对单个文件的用户认证；</p></li><li><p>配置文件认证，在虚拟主机配置的ServerAlias配置下方，增加以下配置，如针对123.php进行认证：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;FilesMatch 123.php&gt;</span><br><span class=\"line\">    AllowOverride AuthConfig</span><br><span class=\"line\">    AuthName <span class=\"string\">\"123.com user auth\"</span></span><br><span class=\"line\">    AuthType Basic</span><br><span class=\"line\">    AuthUserFile /data/.htpasswd</span><br><span class=\"line\">    require valid-user</span><br><span class=\"line\">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure></li><li><p>然后检查配置文件正确性，并且在站点跟目录下创建<code>123.php</code>文件，并更新配置文件：</p><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"auth success!\"</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>不使用用户名密码访问站点，已经不再提示认证和401：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80  xtears.com</span><br><span class=\"line\">xtears.com%</span><br></pre></td></tr></table></figure></li><li><p>访问123.php，提示401未认证：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80 xtears.com/123.php -I</span><br><span class=\"line\">HTTP/1.1 401 Unauthorized</span><br><span class=\"line\">Date: Tue, 29 May 2018 16:39:12 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">WWW-Authenticate: Basic realm=<span class=\"string\">\"123.com user auth\"</span></span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br></pre></td></tr></table></figure></li><li><p>加上用户名密码访问：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80 -uevobot:clikks xtears.com/123.php</span><br><span class=\"line\">auth success!%</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"域名跳转\"><a href=\"#域名跳转\" class=\"headerlink\" title=\"域名跳转\"></a>域名跳转</h1><ul><li><p>实际使用中，有时需要将一个域名跳转到另一个域名上，使两个域名能够访问同一个站点，而跳转是为了让被跳转的域名在搜索引擎中的权重提升，这里的跳转使用的http状态码为301永久重定向。</p></li><li><p>域名跳转到配置仍然在虚拟主机内进行配置，并且依赖于<code>mod_rewrite</code>模块，配置如下:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.com\"</span></span><br><span class=\"line\">    ServerName xtears.com</span><br><span class=\"line\">    ServerAlias 222.com 333.com     </span><br><span class=\"line\">    &lt;IfModule mod_rewrite.c&gt;</span><br><span class=\"line\">        RewriteEngine on</span><br><span class=\"line\">        RewriteCond %&#123;HTTP_HOST&#125; !^xtears.com$</span><br><span class=\"line\">        RewriteRule ^/(.*)$ http://xtears.com/<span class=\"variable\">$1</span> [R=301,L]</span><br><span class=\"line\">    &lt;/IfModule&gt;</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.com-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"logs/xtears.com-access_log\"</span> common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;IfModule mod_rewrite.c&gt;</code>表示需要mod_rewrite模块支持；</li><li><code>RewriteEngine on</code>表示打开rewrite功能；</li><li><code>RewriteCond</code>定义rewrite的条件，当域名不是xtears.com时满足条件；</li><li><code>RewriteRule</code>定义跳转规则，<code>^/</code>表示访问的域名，<code>(.*)</code>则表示域名后面访问的资源，这部分需要继续传递给被跳转的域名后面去，所以使用<code>$1</code>表示匹配到的第一部分，如果有多个小括号进行匹配，则第二部分为<code>$2</code>，依此类推，然后<code>[R=301,L]</code>中R=301表示跳转的状态码，L表示跳转一次结束(last)。</li></ul></li><li><p>保存配置，检查正确性并更新配置之后，需要确认apache是否加载了rewrite模块：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/<span class=\"built_in\">local</span>/apache2.4/bin/apachectl -M | grep rewrite</span><br></pre></td></tr></table></figure><ul><li>如果没有加载，需要在httpd.conf中打开模块配置：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LoadModule rewrite_module modules/mod_rewrite.so</span><br></pre></td></tr></table></figure><ul><li>完成后再重新加载配置查看模块是否加载：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># /usr/local/apache2.4/bin/apachectl -M | grep rewrite</span></span><br><span class=\"line\"> rewrite_module (shared)</span><br></pre></td></tr></table></figure></li><li><p>尝试访问站点：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -x118.24.153.130:80 -uevobot:clikks 222.com/ -I</span><br><span class=\"line\">HTTP/1.1 301 Moved Permanently</span><br><span class=\"line\">Date: Tue, 29 May 2018 17:11:00 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">Location: http://xtears.com/</span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl -x118.24.153.130:80 -uevobot:clikks 222.com/       </span><br><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC <span class=\"string\">\"-//IETF//DTD HTML 2.0//EN\"</span>&gt;</span><br><span class=\"line\">&lt;html&gt;&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;301 Moved Permanently&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Moved Permanently&lt;/h1&gt;</span><br><span class=\"line\">&lt;p&gt;The document has moved &lt;a href=<span class=\"string\">\"http://xtears.com/\"</span>&gt;here&lt;/a&gt;.&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;&lt;/html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl -x118.24.153.130:80 -uevobot:clikks 222.com/123.php -I</span><br><span class=\"line\">HTTP/1.1 301 Moved Permanently</span><br><span class=\"line\">Date: Tue, 29 May 2018 17:13:14 GMT</span><br><span class=\"line\">Server: Apache/2.4.33 (Unix) PHP/5.6.32</span><br><span class=\"line\">Location: http://xtears.com/123.php</span><br><span class=\"line\">Content-Type: text/html; charset=iso-8859-1</span><br></pre></td></tr></table></figure><ul><li>可以看到访问的状态码为301，跳转到了xtears.com，并且访问的资源地址也被传递给了被跳转的域名。</li></ul></li></ul><h1 id=\"Apache访问日志\"><a href=\"#Apache访问日志\" class=\"headerlink\" title=\"Apache访问日志\"></a>Apache访问日志</h1><h2 id=\"日志格式\"><a href=\"#日志格式\" class=\"headerlink\" title=\"日志格式\"></a>日志格式</h2><ul><li><p>apache的访问日志记录了用户的每一个请求：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># tail -n 10 /usr/local/apache2.4/logs/xtears.com-access_log </span></span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:00 +0800] <span class=\"string\">\"GET / HTTP/1.1\"</span> 301 226</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:00 +0800] <span class=\"string\">\"GET / HTTP/1.1\"</span> 200 10</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:10 +0800] <span class=\"string\">\"GET / HTTP/1.1\"</span> 200 10</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:14 +0800] <span class=\"string\">\"GET / HTTP/1.1\"</span> 200 10</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:14 +0800] <span class=\"string\">\"GET /123.php HTTP/1.1\"</span> 301 233</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:14 +0800] <span class=\"string\">\"GET / HTTP/1.1\"</span> 301 226</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:14 +0800] <span class=\"string\">\"GET / HTTP/1.1\"</span> 200 10</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:14 +0800] <span class=\"string\">\"GET /123.php HTTP/1.1\"</span> 200 13</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:14 +0800] <span class=\"string\">\"GET / HTTP/1.1\"</span> 301 226</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:14 +0800] <span class=\"string\">\"GET / HTTP/1.1\"</span> 200 10</span><br></pre></td></tr></table></figure></li><li><p>而日志的格式，则是在httpd.conf中的<code>LogFormat</code>配置项定义的：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule log_config_module&gt;</span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\"># The following directives define some format nicknames for use with</span></span><br><span class=\"line\">    <span class=\"comment\"># a CustomLog directive (see below).</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    LogFormat <span class=\"string\">\"%h %l %u %t \\\"%r\\\" %&gt;s %b \\\"%&#123;Referer&#125;i\\\" \\\"%&#123;User-Agent&#125;i\\\"\"</span> combined</span><br><span class=\"line\">    LogFormat <span class=\"string\">\"%h %l %u %t \\\"%r\\\" %&gt;s %b\"</span> common</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;IfModule logio_module&gt;</span><br><span class=\"line\">      <span class=\"comment\"># You need to enable mod_logio.c to use %I and %O</span></span><br><span class=\"line\">      LogFormat <span class=\"string\">\"%h %l %u %t \\\"%r\\\" %&gt;s %b \\\"%&#123;Referer&#125;i\\\" \\\"%&#123;User-Agent&#125;i\\\" %I %O\"</span> combinedio</span><br><span class=\"line\">    &lt;/IfModule&gt;</span><br></pre></td></tr></table></figure></li><li><p>apache提供了两种日志格式，默认使用的是common项的格式，其中%h表示来源ip，%l、%u表示用户名密码，%t表示时间，%r表示请求方法和网址，%s则为状态码，%b表示大小；</p></li><li><p><code>combined</code>则提供了更为详细的日志内容，如User-Agent，Referer上一次访问的地址。</p></li></ul><h2 id=\"修改虚拟主机日志格式\"><a href=\"#修改虚拟主机日志格式\" class=\"headerlink\" title=\"修改虚拟主机日志格式\"></a>修改虚拟主机日志格式</h2><ul><li><p>修改虚拟主机的日志格式，如将common改为combined，则在虚拟主机的日志配置将common改为combined：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    DocumentRoot <span class=\"string\">\"/data/wwwroot/xtears.com\"</span></span><br><span class=\"line\">    ServerName xtears.com</span><br><span class=\"line\">    ServerAlias 222.com 333.com</span><br><span class=\"line\">    &lt;IfModule mod_rewrite.c&gt;</span><br><span class=\"line\">        RewriteEngine on</span><br><span class=\"line\">        RewriteCond %&#123;HTTP_HOST&#125; !^xtears.com$</span><br><span class=\"line\">        RewriteRule ^/(.*)$ http://xtears.com/<span class=\"variable\">$1</span> [R=301,L]</span><br><span class=\"line\">    &lt;/IfModule&gt;</span><br><span class=\"line\">    ErrorLog <span class=\"string\">\"logs/xtears.com-error_log\"</span></span><br><span class=\"line\">    CustomLog <span class=\"string\">\"logs/xtears.com-access_log\"</span> combined</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>然后更新配置后访问主机再查看日志如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot apache2.4]<span class=\"comment\"># !tail</span></span><br><span class=\"line\">tail -n 5 /usr/<span class=\"built_in\">local</span>/apache2.4/logs/xtears.com-access_log </span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:14 +0800] <span class=\"string\">\"GET /123.php HTTP/1.1\"</span> 200 13</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:14 +0800] <span class=\"string\">\"GET / HTTP/1.1\"</span> 301 226</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:15:14 +0800] <span class=\"string\">\"GET / HTTP/1.1\"</span> 200 10</span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:31:23 +0800] <span class=\"string\">\"GET /123.php HTTP/1.1\"</span> 200 13 <span class=\"string\">\"-\"</span> <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/17.17672\"</span></span><br><span class=\"line\">118.113.205.231 - - [30/May/2018:01:31:23 +0800] <span class=\"string\">\"GET /123.php HTTP/1.1\"</span> 200 13 <span class=\"string\">\"-\"</span> <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/17.17672\"</span></span><br></pre></td></tr></table></figure><ul><li>可以看到最后两条日志记录了更加详细的信息。</li></ul></li></ul><hr><!-- rebuild by neat -->"},{"title":"LAMP架构介绍及MySQL安装","author":"Evobot","abbrlink":"cd21d578","date":"2018-05-23T14:02:16.000Z","image":null,"_content":"\n\n\nLAMP是Linux+Apache(httpd)+MySQL+PHP几种环境组成的一种架构，很多网站运行的环境就是在LAMP的架构上运行的，Apache、MySQL和PHP可以安装在一台机器上，也可以分开安装在多台机器上，但httpd和PHP需要安装在一起。\n\n<!--more-->\n\n---\n\n# LAMP架构\n\n- httpd、PHP、MySQL三者的工资模式如下图：\n\n  ![lamp](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/LAMP.png )\n\n- 其中对MySQL数据库的请求是通过PHP模块进行的，这种请求是动态请求，而对于网页上的静态内容，如图片等，则是静态请求。\n\n- 用户像网站发起请求到Apache，Apache处理用户请求，如果需要读取数据库则调用PHP模块从MySQL中查询相关的数据，而对于静态的请求则Apache会直接像用户返回静态文件数据。\n\n---\n\n# MySQL/Mariadb介绍\n\n- MySQL是一个关系型数据库，最新的版本为5.7GA/8.0DMR，而5.6的版本变化较大，5.7在性能上有很大的提升；\n- 而Mariadb则是MySQL被收购后由原作者发展的一个分支，Mariadb的最新版本为10.2；\n- Mariadb5.5对应MySQL的5.5版本，而10.0对应MySQL的5.6版本；\n- 版本划分为Community社区版本；Enterprise企业版；GA(Generally Acailable)通用版本，在生产环境中使用的；DMR(Development Milestone Release)开发里程碑发布版，表示具有重大突破的版本；RC(Release Candidate)发行候选版本；Beta开放测试版本；Alpha内部测试版本。\n\n---\n\n# MySQL的安装\n\n- MySQL常用的安装包有rpm包，源码包和二进制免编译包；二进制免编译包是指已经被编译好的的安装包，使用起来比较方便；\n\n## 下载MySQL安装包\n\n- 一般情况下建议使用二进制免编译包，除非在需要控制性能的情况下，才需要使用源码包编译安装。\n- 进入`/usr/local/src/`目录，将MySQL的二进制免编译包下载下来：`wget http://mirrors.sohu.com/mysql/MySQL-5.6/mysql-5.6.36-linux-glibc2.5-x86_64.tar.gz`，这里下载的是5.6版本；\n\n## 安装MySQL\n\n- 首先解压下载下来的安装包：\n\n  ```bash\n  tar zxvf mysql-5.6.36-linux-glibc2.5-x86_64.tar.gz \n  ```\n\n- 然后将解压出的mysql目录移动到`/usr/local/`下并重命名为mysql：\n\n  ```bash\n  mv mysql-5.6.36-linux-glibc2.5-x86_64 /usr/local/mysql\n  ```\n\n- 进入到mysql目录下，创建`mysql`用户，然后创建`/usr/local/mysql/data`目录，默认这个目录已经存在，:\n\n  ```bash\n  useradd mysql\n  ```\n\n- 然后执行下面的命令进行安装，其中`--user`指定用户，`--datadir`指定数据库存放目录：\n\n  ```bash\n  [root@evobot mysql]# ./scripts/mysql_install_db --user=mysql --datadir=/data/mysql\n  ```\n\n  - 执行这条命令有可能会报错，报错信息如下：\n\n  ```bash\n  [root@localhost mysql]# ./scripts/mysql_install_db --user=mysql --datadir=./data/mysql\n  FATAL ERROR: please install the following Perl modules before executing ./scripts/mysql_install_db:\n  Data::Dumper\n  ```\n\n  - 这里表示缺少Perl的模块，模块名为Dumper，我们可以使用yum配合grep搜索这个模块的软件包然后进行安装：\n\n  ```bash\n  [root@localhost mysql]# yum list | grep perl | grep -i dumper\n  perl-Data-Dumper.x86_64                     2.145-3.el7                base\n  perl-XML-Dumper.noarch                      0.81-17.el7                base\n  ```\n\n  - 这里由于不清楚包名的大小写，所以使用`grep -i`不区分大小写进行过滤；\n  - 搜索出来的包，我们可以进行尝试安装，然后再重新执行mysql的安装命令确认是否安装了正确的依赖包，如果不想一个一个尝试安装，也可以将搜索出来的包全部安装，这里安装`perl-Data-Dumper.x86_64`，然后重新执行mysql安装脚本。\n\n- 安装完之后验证是否正确安装可以执行`echo $?`或者查看安装时的输出是否有两个`OK`。\n\n## 复制配置文件及启动脚本\n\n- mysql的模板配置文件为`/usr/local/mysql/support-files/my-default.cnf`，将其复制到`/etc/`下并重命名为`my.cnf`：\n\n  ```bash\n  [root@localhost mysql]# cp support-files/my-default.cnf /etc/my.cnf\n  ```\n\n  - 实际上在`/etc/`下存在一个my.cnf的配置文件，使用`rpm -qf`查看该文件来自哪个软件包，可以看到是由mariadb-libs安装到系统内的：\n\n  ```bash\n  [root@evobot mysql]# rpm -qf /etc/my.cnf\n  mariadb-libs-5.5.56-2.el7.x86_64\n  ```\n\n  - 这个配置文件也可以直接使用，但是需要更改其中的相关配置，如datadir更改为`/usr/local/mysql/data/mysql`，socket更改为`/tmp/mysql.sock`，并且注释`mysq_safe`下的配置项。\n\n- mysql的启动脚本模板文件为`/usr/local/mysql/support-files/mysql.server`，将其复制到`/etc/init.d/`,并重命名为`mysqld`，**在替换过配置文件后，需要重新执行初始化数据库的命令`mysql_install_db`**:\n\n  ```bash\n  [root@localhost mysql]# cp support-files/mysql.server /etc/init.d/mysqld\n  ```\n\n- 然后修改启动脚本中的`basedir`和`datadir`的值分别为`/usr/local/mysql`和`/data/mysql`：\n\n  ```bash\n  # If you change base dir, you must also change datadir. These may get\n  # overwritten by settings in the MySQL configuration files.\n  \n  basedir=/usr/local/mysql\n  datadir=/data/mysql\n  ```\n\n- 修改启动脚本的权限为755：\n\n  ```bash\n  [root@localhost mysql]# chmod 755 /etc/init.d/mysqld\n  [root@localhost mysql]# ls -l /etc/init.d/mysqld\n  -rwxr-xr-x. 1 root root 10592 5月  23 23:54 /etc/init.d/mysqld\n  ```\n\n- 设置MySQL为开机启动，使用`chkconfig --add mysqld`命令：\n\n  ```bash\n  [root@localhost mysql]# chkconfig --add mysqld\n  [root@localhost mysql]# chkconfig --list\n  \n  注意：该输出结果只显示 SysV 服务，并不包含原生 systemd 服务。SysV 配置数据可能被原生 systemd 配置覆盖。\n        如果您想列出 systemd 服务,请执行 'systemctl list-unit-files'。\n        欲查看对特定 target 启用的服务请执行\n        'systemctl list-dependencies [target]'。\n  \n  mysqld          0:关    1:关    2:开    3:开    4:开    5:开    6:关\n  netconsole      0:关    1:关    2:关    3:关    4:关    5:关    6:关\n  network         0:关    1:关    2:开    3:开    4:开    5:开    6:关\n  ```\n\n## 启动MySQL\n\n- 启动MySQL服务，使用`/etc/init.d/mysqld start`：\n\n  ```bash\n  [root@evobot mysql]# /etc/init.d/mysqld start\n  Starting MySQL.Logging to '/usr/local/mysql/data/mysql/evobot.err'.\n   SUCCESS!\n  ```\n\n  - 也可以使用`service mysqld start`进行启动，手动启动MySQL的另一种方式如下，这种方式可以指定MySQL的配置文件，数据库目录和用户：\n\n  ```bash\n  [root@evobot mysql]# /usr/local/mysql/bin/mysqld_safe --defaults-file=/etc/my.cnf --user=mysql --datadir=/usr/local/mysql/data/mysql &\n  [1] 31732\n  [root@evobot mysql]# 180524 00:29:11 mysqld_safe Logging to '/usr/local/mysql/data/mysql/evobot.err'.\n  180524 00:29:11 mysqld_safe Starting mysqld daemon with databases from /usr/local/mysql/data/mysql\n  ```\n\n  - 手动运行MySQL，需要停止进程，则使用`killall mysqld`结束进程，不建议使用`kill`命令，因为MySQL运行时可能在读写数据，如果使用`kill`，那么会造成数据丢失，而`killall`则会先等待数据读写完成再杀死进程。\n\n- 查看MySQL运行时的进程：\n\n  ```bash\n  [root@evobot mysql]# !ps\n  ps aux| grep mysql\n  root     31732  0.0  0.0 113260  1608 pts/0    S    00:29   0:00 /bin/sh /usr/local/mysql/bin/mysqld_safe --defaults-file=/etc/my.cnf --user=mysql --datadir=/usr/local/mysql/data/mysql\n  mysql    31864  6.3 24.0 1304348 452568 pts/0  Sl   00:29   0:00 /usr/local/mysql/bin/mysqd --defaults-file=/etc/my.cnf --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data/mysql --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/usr/local/mysql/data/mysql/evobot.err --pid-file=/usr/local/mysql/data/mysql/evobot.pid --socket=/tmp/mysql.sock\n  root     31911  0.0  0.0 112676   980 pts/0    R+   00:29   0:00 grep --color=auto mysql\n  ```\n\n- MySQL的默认监听端口为3306：\n\n  ```bash\n  [root@evobot mysql]# netstat -tlnp\n  Active Internet connections (only servers)\n  Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\n  tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1/systemd\n  tcp        0      0 0.0.0.0:2233            0.0.0.0:*               LISTEN      801/sshd\n  tcp6       0      0 :::3306                 :::*                    LISTEN      31864/mysqld\n  ```\n\n- MySQL的引擎由`innodb`和`myisam`，`myisam`较为轻量。\n\n\n# MySQL5.5编译安装\n\n- 首先下载MySQL5.5.60源码包，[MySQL5.5.60下载地址](https://dev.mysql.com/get/Downloads/MySQL-5.5/mysql-5.5.60.tar.gz);\n\n- 解压源码包，创建mysql用户，然后安装编译需要的依赖包：\n  \n  ```bash\n  tar zxvf mysql-5.5.60.tar.gz\n  \n  cd mysql-5.5.60\n  \n  useradd -s /sbin/nologin -M mysql\n  \n  yum install -y cmake gcc gcc-c++ ncurses-devel bison\n  ```\n  > 如果编译过程中因为缺少依赖包出错，再安装了依赖包后，需要执行`rm -f CMakeCache.txt`删除编译缓存文件后再重新进行编译。\n  \n- 然后进行编译操作，默认情况下，mysql安装目录为`/usr/local/mysql`，数据目录为`/usr/local/mysql/data`，编译参数可以参照[MySQL Source-Configuration Options](https://dev.mysql.com/doc/refman/5.5/en/source-configuration-options.html)，编译过程如下：\n\n  ```bash\n  cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\\n  -DMYSQL_DATADIR=/mysql/data \\\n  -DDEFAULT_CHARSET=utf8 \\\n  -DDEFAULT_COLLATION=utf8_general_ci \\\n  -DWITH_EXTRA_CHARSETS:STRING=all \\\n  -DWITH_DEBUG=0 -DWITH_SSL=yes \\\n  -DWITH_READLINE=1 \\\n  -DENABLE_LOCAL_INFILE=1\n  \n  make && make install\n  ```\n\n- 编译完成后，进入安装目录，更改目录属主和属组，然后进行初始化安装，最后复制配置文件和启动脚本，执行下面的命令完成MySQL的安装：\n\n  ```bash\n  cd /usr/local/mysql\n  \n  ./scripts/mysql_install_db --user=mysql --datadir=/mysql/data\n  \n  cp support-files/my-medium.cnf /etc/my.cnf\n  \n  cp support-files/mysql.server /etc/init.d/mysqld\n  ```\n  \n- 最后，使用`/etc/init.d/mysqld start`即可启动MySQL服务。\n\n# MySQL5.7二进制包安装\n## 安装\n\n- 首先下载MySQL5.7.17二进制安装包，[下载链接](http://mirrors.sohu.com/mysql/MySQL-5.7/mysql-5.7.17-linux-glibc2.5-x86_64.tar.gz)；\n\n- 然后解压二进制包，并将解压出来的目录移动到/usr/local目录下更名为mysql:\n\n  ```bash\n  tar zxvf mysql-5.7.17-linux-glibc2.5-x86_64.tar.gz\n  \n  mv mysql-5.7.17-linux-glibc2.5-x86_64 /usr/local/mysql\n  ```\n  \n- 然后进行初始化操作：\n    \n  ```bash\n  mkdir -p /data/mysql\n  \n  cd /usr/local/mysql/\n  \n  ./bin/mysqld --initialize --user=mysql --datadir=/data/mysql/\n  ```\n  >这里成功执行后，会再最后一行打印MySQL的root账户的密码：\n  >`[Note] A temporary password is generated for root@localhost: CrG_3SlTYe3:`\n  \n- 然后生成密钥：\n    \n  ```bash\n  ./bin/mysql_ssl_rsa_setup --datadir=/data/mysql/\n  ```\n\n- 复制配置文件和启动脚本：\n\n  ```bash\n  cp support-files/my-default.cnf /etc/my.cnf\n  \n  cp support-files/mysql.server /etc/init.d/mysqld\n  ```\n\n- 接着修改`/etc/my.cnf`，配置basedir、datadir、port以及socket：\n\n  ```bash\n  basedir = /usr/local/mysql\n  datadir = /data/mysql\n  port = 3306\n  socket = /tmp/mysql.sock\n  ```\n  \n- 修改`/etc/init.d/mysqld`启动脚本，配置basedir和datadir：\n\n  ```bash\n  basedir=/usr/local/mysql\n  datadir=/data/mysql\n  ```\n\n- 完成后，即可使用`/etc/init.d/mysqld start`启动MySQL。\n\n## 修改root密码\n\n- 之前初始化安装时已经给出了root的密码，使用密码就能够登陆MySQL，登陆后需要重新修改密码：\n  \n  ```bash\n  /usr/local/mysql/bin/mysql -uroot -pCrG_3SlTYe3:\n  \n  //进入MySQL修改密码\n  mysql> set password=password('123456');\n  ```\n  \n- 如果忘记了初始化安装时的密码，可以修改my.cnf配置，在[mysqld]下面增加一行`skip-grant-tables`,然后重启MySQL服务，执行`/usr/local/mysql/bin/mysql -uroot`无密码登陆进MySQL中，然后在MySQL命令行内执行下面的命令：\n\n  ```bash\n  mysql> update mysql.user set authentication_string=password('112233') where user='root';\n  ```\n\n- 完成后，将my.cnf中的`skip-grant-tables`配置删除，重启MySQL服务即可使用新的密码登陆。\n---\n\n\n\n  ","source":"_posts/LAMP架构介绍及MySQL安装.md","raw":"---\ntitle: LAMP架构介绍及MySQL安装\nauthor: Evobot\ncategories: LAMP\ntags:\n  - Linux\n  - Centos\n  - MySQL\nabbrlink: cd21d578\ndate: 2018-05-23 22:02:16\nimage:\n---\n\n\n\nLAMP是Linux+Apache(httpd)+MySQL+PHP几种环境组成的一种架构，很多网站运行的环境就是在LAMP的架构上运行的，Apache、MySQL和PHP可以安装在一台机器上，也可以分开安装在多台机器上，但httpd和PHP需要安装在一起。\n\n<!--more-->\n\n---\n\n# LAMP架构\n\n- httpd、PHP、MySQL三者的工资模式如下图：\n\n  ![lamp](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/LAMP.png )\n\n- 其中对MySQL数据库的请求是通过PHP模块进行的，这种请求是动态请求，而对于网页上的静态内容，如图片等，则是静态请求。\n\n- 用户像网站发起请求到Apache，Apache处理用户请求，如果需要读取数据库则调用PHP模块从MySQL中查询相关的数据，而对于静态的请求则Apache会直接像用户返回静态文件数据。\n\n---\n\n# MySQL/Mariadb介绍\n\n- MySQL是一个关系型数据库，最新的版本为5.7GA/8.0DMR，而5.6的版本变化较大，5.7在性能上有很大的提升；\n- 而Mariadb则是MySQL被收购后由原作者发展的一个分支，Mariadb的最新版本为10.2；\n- Mariadb5.5对应MySQL的5.5版本，而10.0对应MySQL的5.6版本；\n- 版本划分为Community社区版本；Enterprise企业版；GA(Generally Acailable)通用版本，在生产环境中使用的；DMR(Development Milestone Release)开发里程碑发布版，表示具有重大突破的版本；RC(Release Candidate)发行候选版本；Beta开放测试版本；Alpha内部测试版本。\n\n---\n\n# MySQL的安装\n\n- MySQL常用的安装包有rpm包，源码包和二进制免编译包；二进制免编译包是指已经被编译好的的安装包，使用起来比较方便；\n\n## 下载MySQL安装包\n\n- 一般情况下建议使用二进制免编译包，除非在需要控制性能的情况下，才需要使用源码包编译安装。\n- 进入`/usr/local/src/`目录，将MySQL的二进制免编译包下载下来：`wget http://mirrors.sohu.com/mysql/MySQL-5.6/mysql-5.6.36-linux-glibc2.5-x86_64.tar.gz`，这里下载的是5.6版本；\n\n## 安装MySQL\n\n- 首先解压下载下来的安装包：\n\n  ```bash\n  tar zxvf mysql-5.6.36-linux-glibc2.5-x86_64.tar.gz \n  ```\n\n- 然后将解压出的mysql目录移动到`/usr/local/`下并重命名为mysql：\n\n  ```bash\n  mv mysql-5.6.36-linux-glibc2.5-x86_64 /usr/local/mysql\n  ```\n\n- 进入到mysql目录下，创建`mysql`用户，然后创建`/usr/local/mysql/data`目录，默认这个目录已经存在，:\n\n  ```bash\n  useradd mysql\n  ```\n\n- 然后执行下面的命令进行安装，其中`--user`指定用户，`--datadir`指定数据库存放目录：\n\n  ```bash\n  [root@evobot mysql]# ./scripts/mysql_install_db --user=mysql --datadir=/data/mysql\n  ```\n\n  - 执行这条命令有可能会报错，报错信息如下：\n\n  ```bash\n  [root@localhost mysql]# ./scripts/mysql_install_db --user=mysql --datadir=./data/mysql\n  FATAL ERROR: please install the following Perl modules before executing ./scripts/mysql_install_db:\n  Data::Dumper\n  ```\n\n  - 这里表示缺少Perl的模块，模块名为Dumper，我们可以使用yum配合grep搜索这个模块的软件包然后进行安装：\n\n  ```bash\n  [root@localhost mysql]# yum list | grep perl | grep -i dumper\n  perl-Data-Dumper.x86_64                     2.145-3.el7                base\n  perl-XML-Dumper.noarch                      0.81-17.el7                base\n  ```\n\n  - 这里由于不清楚包名的大小写，所以使用`grep -i`不区分大小写进行过滤；\n  - 搜索出来的包，我们可以进行尝试安装，然后再重新执行mysql的安装命令确认是否安装了正确的依赖包，如果不想一个一个尝试安装，也可以将搜索出来的包全部安装，这里安装`perl-Data-Dumper.x86_64`，然后重新执行mysql安装脚本。\n\n- 安装完之后验证是否正确安装可以执行`echo $?`或者查看安装时的输出是否有两个`OK`。\n\n## 复制配置文件及启动脚本\n\n- mysql的模板配置文件为`/usr/local/mysql/support-files/my-default.cnf`，将其复制到`/etc/`下并重命名为`my.cnf`：\n\n  ```bash\n  [root@localhost mysql]# cp support-files/my-default.cnf /etc/my.cnf\n  ```\n\n  - 实际上在`/etc/`下存在一个my.cnf的配置文件，使用`rpm -qf`查看该文件来自哪个软件包，可以看到是由mariadb-libs安装到系统内的：\n\n  ```bash\n  [root@evobot mysql]# rpm -qf /etc/my.cnf\n  mariadb-libs-5.5.56-2.el7.x86_64\n  ```\n\n  - 这个配置文件也可以直接使用，但是需要更改其中的相关配置，如datadir更改为`/usr/local/mysql/data/mysql`，socket更改为`/tmp/mysql.sock`，并且注释`mysq_safe`下的配置项。\n\n- mysql的启动脚本模板文件为`/usr/local/mysql/support-files/mysql.server`，将其复制到`/etc/init.d/`,并重命名为`mysqld`，**在替换过配置文件后，需要重新执行初始化数据库的命令`mysql_install_db`**:\n\n  ```bash\n  [root@localhost mysql]# cp support-files/mysql.server /etc/init.d/mysqld\n  ```\n\n- 然后修改启动脚本中的`basedir`和`datadir`的值分别为`/usr/local/mysql`和`/data/mysql`：\n\n  ```bash\n  # If you change base dir, you must also change datadir. These may get\n  # overwritten by settings in the MySQL configuration files.\n  \n  basedir=/usr/local/mysql\n  datadir=/data/mysql\n  ```\n\n- 修改启动脚本的权限为755：\n\n  ```bash\n  [root@localhost mysql]# chmod 755 /etc/init.d/mysqld\n  [root@localhost mysql]# ls -l /etc/init.d/mysqld\n  -rwxr-xr-x. 1 root root 10592 5月  23 23:54 /etc/init.d/mysqld\n  ```\n\n- 设置MySQL为开机启动，使用`chkconfig --add mysqld`命令：\n\n  ```bash\n  [root@localhost mysql]# chkconfig --add mysqld\n  [root@localhost mysql]# chkconfig --list\n  \n  注意：该输出结果只显示 SysV 服务，并不包含原生 systemd 服务。SysV 配置数据可能被原生 systemd 配置覆盖。\n        如果您想列出 systemd 服务,请执行 'systemctl list-unit-files'。\n        欲查看对特定 target 启用的服务请执行\n        'systemctl list-dependencies [target]'。\n  \n  mysqld          0:关    1:关    2:开    3:开    4:开    5:开    6:关\n  netconsole      0:关    1:关    2:关    3:关    4:关    5:关    6:关\n  network         0:关    1:关    2:开    3:开    4:开    5:开    6:关\n  ```\n\n## 启动MySQL\n\n- 启动MySQL服务，使用`/etc/init.d/mysqld start`：\n\n  ```bash\n  [root@evobot mysql]# /etc/init.d/mysqld start\n  Starting MySQL.Logging to '/usr/local/mysql/data/mysql/evobot.err'.\n   SUCCESS!\n  ```\n\n  - 也可以使用`service mysqld start`进行启动，手动启动MySQL的另一种方式如下，这种方式可以指定MySQL的配置文件，数据库目录和用户：\n\n  ```bash\n  [root@evobot mysql]# /usr/local/mysql/bin/mysqld_safe --defaults-file=/etc/my.cnf --user=mysql --datadir=/usr/local/mysql/data/mysql &\n  [1] 31732\n  [root@evobot mysql]# 180524 00:29:11 mysqld_safe Logging to '/usr/local/mysql/data/mysql/evobot.err'.\n  180524 00:29:11 mysqld_safe Starting mysqld daemon with databases from /usr/local/mysql/data/mysql\n  ```\n\n  - 手动运行MySQL，需要停止进程，则使用`killall mysqld`结束进程，不建议使用`kill`命令，因为MySQL运行时可能在读写数据，如果使用`kill`，那么会造成数据丢失，而`killall`则会先等待数据读写完成再杀死进程。\n\n- 查看MySQL运行时的进程：\n\n  ```bash\n  [root@evobot mysql]# !ps\n  ps aux| grep mysql\n  root     31732  0.0  0.0 113260  1608 pts/0    S    00:29   0:00 /bin/sh /usr/local/mysql/bin/mysqld_safe --defaults-file=/etc/my.cnf --user=mysql --datadir=/usr/local/mysql/data/mysql\n  mysql    31864  6.3 24.0 1304348 452568 pts/0  Sl   00:29   0:00 /usr/local/mysql/bin/mysqd --defaults-file=/etc/my.cnf --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data/mysql --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/usr/local/mysql/data/mysql/evobot.err --pid-file=/usr/local/mysql/data/mysql/evobot.pid --socket=/tmp/mysql.sock\n  root     31911  0.0  0.0 112676   980 pts/0    R+   00:29   0:00 grep --color=auto mysql\n  ```\n\n- MySQL的默认监听端口为3306：\n\n  ```bash\n  [root@evobot mysql]# netstat -tlnp\n  Active Internet connections (only servers)\n  Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\n  tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1/systemd\n  tcp        0      0 0.0.0.0:2233            0.0.0.0:*               LISTEN      801/sshd\n  tcp6       0      0 :::3306                 :::*                    LISTEN      31864/mysqld\n  ```\n\n- MySQL的引擎由`innodb`和`myisam`，`myisam`较为轻量。\n\n\n# MySQL5.5编译安装\n\n- 首先下载MySQL5.5.60源码包，[MySQL5.5.60下载地址](https://dev.mysql.com/get/Downloads/MySQL-5.5/mysql-5.5.60.tar.gz);\n\n- 解压源码包，创建mysql用户，然后安装编译需要的依赖包：\n  \n  ```bash\n  tar zxvf mysql-5.5.60.tar.gz\n  \n  cd mysql-5.5.60\n  \n  useradd -s /sbin/nologin -M mysql\n  \n  yum install -y cmake gcc gcc-c++ ncurses-devel bison\n  ```\n  > 如果编译过程中因为缺少依赖包出错，再安装了依赖包后，需要执行`rm -f CMakeCache.txt`删除编译缓存文件后再重新进行编译。\n  \n- 然后进行编译操作，默认情况下，mysql安装目录为`/usr/local/mysql`，数据目录为`/usr/local/mysql/data`，编译参数可以参照[MySQL Source-Configuration Options](https://dev.mysql.com/doc/refman/5.5/en/source-configuration-options.html)，编译过程如下：\n\n  ```bash\n  cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\\n  -DMYSQL_DATADIR=/mysql/data \\\n  -DDEFAULT_CHARSET=utf8 \\\n  -DDEFAULT_COLLATION=utf8_general_ci \\\n  -DWITH_EXTRA_CHARSETS:STRING=all \\\n  -DWITH_DEBUG=0 -DWITH_SSL=yes \\\n  -DWITH_READLINE=1 \\\n  -DENABLE_LOCAL_INFILE=1\n  \n  make && make install\n  ```\n\n- 编译完成后，进入安装目录，更改目录属主和属组，然后进行初始化安装，最后复制配置文件和启动脚本，执行下面的命令完成MySQL的安装：\n\n  ```bash\n  cd /usr/local/mysql\n  \n  ./scripts/mysql_install_db --user=mysql --datadir=/mysql/data\n  \n  cp support-files/my-medium.cnf /etc/my.cnf\n  \n  cp support-files/mysql.server /etc/init.d/mysqld\n  ```\n  \n- 最后，使用`/etc/init.d/mysqld start`即可启动MySQL服务。\n\n# MySQL5.7二进制包安装\n## 安装\n\n- 首先下载MySQL5.7.17二进制安装包，[下载链接](http://mirrors.sohu.com/mysql/MySQL-5.7/mysql-5.7.17-linux-glibc2.5-x86_64.tar.gz)；\n\n- 然后解压二进制包，并将解压出来的目录移动到/usr/local目录下更名为mysql:\n\n  ```bash\n  tar zxvf mysql-5.7.17-linux-glibc2.5-x86_64.tar.gz\n  \n  mv mysql-5.7.17-linux-glibc2.5-x86_64 /usr/local/mysql\n  ```\n  \n- 然后进行初始化操作：\n    \n  ```bash\n  mkdir -p /data/mysql\n  \n  cd /usr/local/mysql/\n  \n  ./bin/mysqld --initialize --user=mysql --datadir=/data/mysql/\n  ```\n  >这里成功执行后，会再最后一行打印MySQL的root账户的密码：\n  >`[Note] A temporary password is generated for root@localhost: CrG_3SlTYe3:`\n  \n- 然后生成密钥：\n    \n  ```bash\n  ./bin/mysql_ssl_rsa_setup --datadir=/data/mysql/\n  ```\n\n- 复制配置文件和启动脚本：\n\n  ```bash\n  cp support-files/my-default.cnf /etc/my.cnf\n  \n  cp support-files/mysql.server /etc/init.d/mysqld\n  ```\n\n- 接着修改`/etc/my.cnf`，配置basedir、datadir、port以及socket：\n\n  ```bash\n  basedir = /usr/local/mysql\n  datadir = /data/mysql\n  port = 3306\n  socket = /tmp/mysql.sock\n  ```\n  \n- 修改`/etc/init.d/mysqld`启动脚本，配置basedir和datadir：\n\n  ```bash\n  basedir=/usr/local/mysql\n  datadir=/data/mysql\n  ```\n\n- 完成后，即可使用`/etc/init.d/mysqld start`启动MySQL。\n\n## 修改root密码\n\n- 之前初始化安装时已经给出了root的密码，使用密码就能够登陆MySQL，登陆后需要重新修改密码：\n  \n  ```bash\n  /usr/local/mysql/bin/mysql -uroot -pCrG_3SlTYe3:\n  \n  //进入MySQL修改密码\n  mysql> set password=password('123456');\n  ```\n  \n- 如果忘记了初始化安装时的密码，可以修改my.cnf配置，在[mysqld]下面增加一行`skip-grant-tables`,然后重启MySQL服务，执行`/usr/local/mysql/bin/mysql -uroot`无密码登陆进MySQL中，然后在MySQL命令行内执行下面的命令：\n\n  ```bash\n  mysql> update mysql.user set authentication_string=password('112233') where user='root';\n  ```\n\n- 完成后，将my.cnf中的`skip-grant-tables`配置删除，重启MySQL服务即可使用新的密码登陆。\n---\n\n\n\n  ","slug":"LAMP架构介绍及MySQL安装","published":1,"updated":"2018-06-05T17:18:34.529Z","_id":"cji1gaza6001su1jxmha5cxst","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- build time:Wed Jun 06 2018 01:18:34 GMT+0800 (CST) --><p>LAMP是Linux+Apache(httpd)+MySQL+PHP几种环境组成的一种架构，很多网站运行的环境就是在LAMP的架构上运行的，Apache、MySQL和PHP可以安装在一台机器上，也可以分开安装在多台机器上，但httpd和PHP需要安装在一起。</p><a id=\"more\"></a><hr><h1 id=\"LAMP架构\"><a href=\"#LAMP架构\" class=\"headerlink\" title=\"LAMP架构\"></a>LAMP架构</h1><ul><li><p>httpd、PHP、MySQL三者的工资模式如下图：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/LAMP.png\" alt=\"lamp\"></p></li><li><p>其中对MySQL数据库的请求是通过PHP模块进行的，这种请求是动态请求，而对于网页上的静态内容，如图片等，则是静态请求。</p></li><li><p>用户像网站发起请求到Apache，Apache处理用户请求，如果需要读取数据库则调用PHP模块从MySQL中查询相关的数据，而对于静态的请求则Apache会直接像用户返回静态文件数据。</p></li></ul><hr><h1 id=\"MySQL-Mariadb介绍\"><a href=\"#MySQL-Mariadb介绍\" class=\"headerlink\" title=\"MySQL/Mariadb介绍\"></a>MySQL/Mariadb介绍</h1><ul><li>MySQL是一个关系型数据库，最新的版本为5.7GA/8.0DMR，而5.6的版本变化较大，5.7在性能上有很大的提升；</li><li>而Mariadb则是MySQL被收购后由原作者发展的一个分支，Mariadb的最新版本为10.2；</li><li>Mariadb5.5对应MySQL的5.5版本，而10.0对应MySQL的5.6版本；</li><li>版本划分为Community社区版本；Enterprise企业版；GA(Generally Acailable)通用版本，在生产环境中使用的；DMR(Development Milestone Release)开发里程碑发布版，表示具有重大突破的版本；RC(Release Candidate)发行候选版本；Beta开放测试版本；Alpha内部测试版本。</li></ul><hr><h1 id=\"MySQL的安装\"><a href=\"#MySQL的安装\" class=\"headerlink\" title=\"MySQL的安装\"></a>MySQL的安装</h1><ul><li>MySQL常用的安装包有rpm包，源码包和二进制免编译包；二进制免编译包是指已经被编译好的的安装包，使用起来比较方便；</li></ul><h2 id=\"下载MySQL安装包\"><a href=\"#下载MySQL安装包\" class=\"headerlink\" title=\"下载MySQL安装包\"></a>下载MySQL安装包</h2><ul><li>一般情况下建议使用二进制免编译包，除非在需要控制性能的情况下，才需要使用源码包编译安装。</li><li>进入<code>/usr/local/src/</code>目录，将MySQL的二进制免编译包下载下来：<code>wget http://mirrors.sohu.com/mysql/MySQL-5.6/mysql-5.6.36-linux-glibc2.5-x86_64.tar.gz</code>，这里下载的是5.6版本；</li></ul><h2 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h2><ul><li><p>首先解压下载下来的安装包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf mysql-5.6.36-linux-glibc2.5-x86_64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>然后将解压出的mysql目录移动到<code>/usr/local/</code>下并重命名为mysql：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv mysql-5.6.36-linux-glibc2.5-x86_64 /usr/<span class=\"built_in\">local</span>/mysql</span><br></pre></td></tr></table></figure></li><li><p>进入到mysql目录下，创建<code>mysql</code>用户，然后创建<code>/usr/local/mysql/data</code>目录，默认这个目录已经存在，:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd mysql</span><br></pre></td></tr></table></figure></li><li><p>然后执行下面的命令进行安装，其中<code>--user</code>指定用户，<code>--datadir</code>指定数据库存放目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot mysql]<span class=\"comment\"># ./scripts/mysql_install_db --user=mysql --datadir=/data/mysql</span></span><br></pre></td></tr></table></figure><ul><li>执行这条命令有可能会报错，报错信息如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mysql]<span class=\"comment\"># ./scripts/mysql_install_db --user=mysql --datadir=./data/mysql</span></span><br><span class=\"line\">FATAL ERROR: please install the following Perl modules before executing ./scripts/mysql_install_db:</span><br><span class=\"line\">Data::Dumper</span><br></pre></td></tr></table></figure><ul><li>这里表示缺少Perl的模块，模块名为Dumper，我们可以使用yum配合grep搜索这个模块的软件包然后进行安装：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mysql]<span class=\"comment\"># yum list | grep perl | grep -i dumper</span></span><br><span class=\"line\">perl-Data-Dumper.x86_64                     2.145-3.el7                base</span><br><span class=\"line\">perl-XML-Dumper.noarch                      0.81-17.el7                base</span><br></pre></td></tr></table></figure><ul><li>这里由于不清楚包名的大小写，所以使用<code>grep -i</code>不区分大小写进行过滤；</li><li>搜索出来的包，我们可以进行尝试安装，然后再重新执行mysql的安装命令确认是否安装了正确的依赖包，如果不想一个一个尝试安装，也可以将搜索出来的包全部安装，这里安装<code>perl-Data-Dumper.x86_64</code>，然后重新执行mysql安装脚本。</li></ul></li><li><p>安装完之后验证是否正确安装可以执行<code>echo $?</code>或者查看安装时的输出是否有两个<code>OK</code>。</p></li></ul><h2 id=\"复制配置文件及启动脚本\"><a href=\"#复制配置文件及启动脚本\" class=\"headerlink\" title=\"复制配置文件及启动脚本\"></a>复制配置文件及启动脚本</h2><ul><li><p>mysql的模板配置文件为<code>/usr/local/mysql/support-files/my-default.cnf</code>，将其复制到<code>/etc/</code>下并重命名为<code>my.cnf</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mysql]<span class=\"comment\"># cp support-files/my-default.cnf /etc/my.cnf</span></span><br></pre></td></tr></table></figure><ul><li>实际上在<code>/etc/</code>下存在一个my.cnf的配置文件，使用<code>rpm -qf</code>查看该文件来自哪个软件包，可以看到是由mariadb-libs安装到系统内的：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot mysql]<span class=\"comment\"># rpm -qf /etc/my.cnf</span></span><br><span class=\"line\">mariadb-libs-5.5.56-2.el7.x86_64</span><br></pre></td></tr></table></figure><ul><li>这个配置文件也可以直接使用，但是需要更改其中的相关配置，如datadir更改为<code>/usr/local/mysql/data/mysql</code>，socket更改为<code>/tmp/mysql.sock</code>，并且注释<code>mysq_safe</code>下的配置项。</li></ul></li><li><p>mysql的启动脚本模板文件为<code>/usr/local/mysql/support-files/mysql.server</code>，将其复制到<code>/etc/init.d/</code>,并重命名为<code>mysqld</code>，<strong>在替换过配置文件后，需要重新执行初始化数据库的命令<code>mysql_install_db</code></strong>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mysql]<span class=\"comment\"># cp support-files/mysql.server /etc/init.d/mysqld</span></span><br></pre></td></tr></table></figure></li><li><p>然后修改启动脚本中的<code>basedir</code>和<code>datadir</code>的值分别为<code>/usr/local/mysql</code>和<code>/data/mysql</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># If you change base dir, you must also change datadir. These may get</span></span><br><span class=\"line\"><span class=\"comment\"># overwritten by settings in the MySQL configuration files.</span></span><br><span class=\"line\"></span><br><span class=\"line\">basedir=/usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">datadir=/data/mysql</span><br></pre></td></tr></table></figure></li><li><p>修改启动脚本的权限为755：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mysql]<span class=\"comment\"># chmod 755 /etc/init.d/mysqld</span></span><br><span class=\"line\">[root@localhost mysql]<span class=\"comment\"># ls -l /etc/init.d/mysqld</span></span><br><span class=\"line\">-rwxr-xr-x. 1 root root 10592 5月  23 23:54 /etc/init.d/mysqld</span><br></pre></td></tr></table></figure></li><li><p>设置MySQL为开机启动，使用<code>chkconfig --add mysqld</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mysql]<span class=\"comment\"># chkconfig --add mysqld</span></span><br><span class=\"line\">[root@localhost mysql]<span class=\"comment\"># chkconfig --list</span></span><br><span class=\"line\"></span><br><span class=\"line\">注意：该输出结果只显示 SysV 服务，并不包含原生 systemd 服务。SysV 配置数据可能被原生 systemd 配置覆盖。</span><br><span class=\"line\">      如果您想列出 systemd 服务,请执行 <span class=\"string\">'systemctl list-unit-files'</span>。</span><br><span class=\"line\">      欲查看对特定 target 启用的服务请执行</span><br><span class=\"line\">      <span class=\"string\">'systemctl list-dependencies [target]'</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">mysqld          0:关    1:关    2:开    3:开    4:开    5:开    6:关</span><br><span class=\"line\">netconsole      0:关    1:关    2:关    3:关    4:关    5:关    6:关</span><br><span class=\"line\">network         0:关    1:关    2:开    3:开    4:开    5:开    6:关</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"启动MySQL\"><a href=\"#启动MySQL\" class=\"headerlink\" title=\"启动MySQL\"></a>启动MySQL</h2><ul><li><p>启动MySQL服务，使用<code>/etc/init.d/mysqld start</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot mysql]<span class=\"comment\"># /etc/init.d/mysqld start</span></span><br><span class=\"line\">Starting MySQL.Logging to <span class=\"string\">'/usr/local/mysql/data/mysql/evobot.err'</span>.</span><br><span class=\"line\"> SUCCESS!</span><br></pre></td></tr></table></figure><ul><li>也可以使用<code>service mysqld start</code>进行启动，手动启动MySQL的另一种方式如下，这种方式可以指定MySQL的配置文件，数据库目录和用户：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot mysql]<span class=\"comment\"># /usr/local/mysql/bin/mysqld_safe --defaults-file=/etc/my.cnf --user=mysql --datadir=/usr/local/mysql/data/mysql &amp;</span></span><br><span class=\"line\">[1] 31732</span><br><span class=\"line\">[root@evobot mysql]<span class=\"comment\"># 180524 00:29:11 mysqld_safe Logging to '/usr/local/mysql/data/mysql/evobot.err'.</span></span><br><span class=\"line\">180524 00:29:11 mysqld_safe Starting mysqld daemon with databases from /usr/<span class=\"built_in\">local</span>/mysql/data/mysql</span><br></pre></td></tr></table></figure><ul><li>手动运行MySQL，需要停止进程，则使用<code>killall mysqld</code>结束进程，不建议使用<code>kill</code>命令，因为MySQL运行时可能在读写数据，如果使用<code>kill</code>，那么会造成数据丢失，而<code>killall</code>则会先等待数据读写完成再杀死进程。</li></ul></li><li><p>查看MySQL运行时的进程：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot mysql]<span class=\"comment\"># !ps</span></span><br><span class=\"line\">ps aux| grep mysql</span><br><span class=\"line\">root     31732  0.0  0.0 113260  1608 pts/0    S    00:29   0:00 /bin/sh /usr/<span class=\"built_in\">local</span>/mysql/bin/mysqld_safe --defaults-file=/etc/my.cnf --user=mysql --datadir=/usr/<span class=\"built_in\">local</span>/mysql/data/mysql</span><br><span class=\"line\">mysql    31864  6.3 24.0 1304348 452568 pts/0  Sl   00:29   0:00 /usr/<span class=\"built_in\">local</span>/mysql/bin/mysqd --defaults-file=/etc/my.cnf --basedir=/usr/<span class=\"built_in\">local</span>/mysql --datadir=/usr/<span class=\"built_in\">local</span>/mysql/data/mysql --plugin-dir=/usr/<span class=\"built_in\">local</span>/mysql/lib/plugin --user=mysql --<span class=\"built_in\">log</span>-error=/usr/<span class=\"built_in\">local</span>/mysql/data/mysql/evobot.err --pid-file=/usr/<span class=\"built_in\">local</span>/mysql/data/mysql/evobot.pid --socket=/tmp/mysql.sock</span><br><span class=\"line\">root     31911  0.0  0.0 112676   980 pts/0    R+   00:29   0:00 grep --color=auto mysql</span><br></pre></td></tr></table></figure></li><li><p>MySQL的默认监听端口为3306：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot mysql]<span class=\"comment\"># netstat -tlnp</span></span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class=\"line\">tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1/systemd</span><br><span class=\"line\">tcp        0      0 0.0.0.0:2233            0.0.0.0:*               LISTEN      801/sshd</span><br><span class=\"line\">tcp6       0      0 :::3306                 :::*                    LISTEN      31864/mysqld</span><br></pre></td></tr></table></figure></li><li><p>MySQL的引擎由<code>innodb</code>和<code>myisam</code>，<code>myisam</code>较为轻量。</p></li></ul><h1 id=\"MySQL5-5编译安装\"><a href=\"#MySQL5-5编译安装\" class=\"headerlink\" title=\"MySQL5.5编译安装\"></a>MySQL5.5编译安装</h1><ul><li><p>首先下载MySQL5.5.60源码包，<a href=\"https://dev.mysql.com/get/Downloads/MySQL-5.5/mysql-5.5.60.tar.gz\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">MySQL5.5.60下载地址</a>;</p></li><li><p>解压源码包，创建mysql用户，然后安装编译需要的依赖包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf mysql-5.5.60.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> mysql-5.5.60</span><br><span class=\"line\"></span><br><span class=\"line\">useradd -s /sbin/nologin -M mysql</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y cmake gcc gcc-c++ ncurses-devel bison</span><br></pre></td></tr></table></figure><blockquote><p>如果编译过程中因为缺少依赖包出错，再安装了依赖包后，需要执行<code>rm -f CMakeCache.txt</code>删除编译缓存文件后再重新进行编译。</p></blockquote></li><li><p>然后进行编译操作，默认情况下，mysql安装目录为<code>/usr/local/mysql</code>，数据目录为<code>/usr/local/mysql/data</code>，编译参数可以参照<a href=\"https://dev.mysql.com/doc/refman/5.5/en/source-configuration-options.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">MySQL Source-Configuration Options</a>，编译过程如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DCMAKE_INSTALL_PREFIX=/usr/<span class=\"built_in\">local</span>/mysql \\</span><br><span class=\"line\">-DMYSQL_DATADIR=/mysql/data \\</span><br><span class=\"line\">-DDEFAULT_CHARSET=utf8 \\</span><br><span class=\"line\">-DDEFAULT_COLLATION=utf8_general_ci \\</span><br><span class=\"line\">-DWITH_EXTRA_CHARSETS:STRING=all \\</span><br><span class=\"line\">-DWITH_DEBUG=0 -DWITH_SSL=yes \\</span><br><span class=\"line\">-DWITH_READLINE=1 \\</span><br><span class=\"line\">-DENABLE_LOCAL_INFILE=1</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>编译完成后，进入安装目录，更改目录属主和属组，然后进行初始化安装，最后复制配置文件和启动脚本，执行下面的命令完成MySQL的安装：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\"></span><br><span class=\"line\">./scripts/mysql_install_db --user=mysql --datadir=/mysql/data</span><br><span class=\"line\"></span><br><span class=\"line\">cp support-files/my-medium.cnf /etc/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">cp support-files/mysql.server /etc/init.d/mysqld</span><br></pre></td></tr></table></figure></li></ul><ul><li>最后，使用<code>/etc/init.d/mysqld start</code>即可启动MySQL服务。</li></ul><h1 id=\"MySQL5-7二进制包安装\"><a href=\"#MySQL5-7二进制包安装\" class=\"headerlink\" title=\"MySQL5.7二进制包安装\"></a>MySQL5.7二进制包安装</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul><li><p>首先下载MySQL5.7.17二进制安装包，<a href=\"http://mirrors.sohu.com/mysql/MySQL-5.7/mysql-5.7.17-linux-glibc2.5-x86_64.tar.gz\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">下载链接</a>；</p></li><li><p>然后解压二进制包，并将解压出来的目录移动到/usr/local目录下更名为mysql:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf mysql-5.7.17-linux-glibc2.5-x86_64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">mv mysql-5.7.17-linux-glibc2.5-x86_64 /usr/<span class=\"built_in\">local</span>/mysql</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>然后进行初始化操作：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/mysql/</span><br><span class=\"line\"></span><br><span class=\"line\">./bin/mysqld --initialize --user=mysql --datadir=/data/mysql/</span><br></pre></td></tr></table></figure><blockquote><p>这里成功执行后，会再最后一行打印MySQL的root账户的密码：<br><code>[Note] A temporary password is generated for root@localhost: CrG_3SlTYe3:</code></p></blockquote></li><li><p>然后生成密钥：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/mysql_ssl_rsa_setup --datadir=/data/mysql/</span><br></pre></td></tr></table></figure></li><li><p>复制配置文件和启动脚本：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp support-files/my-default.cnf /etc/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">cp support-files/mysql.server /etc/init.d/mysqld</span><br></pre></td></tr></table></figure></li><li><p>接着修改<code>/etc/my.cnf</code>，配置basedir、datadir、port以及socket：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">basedir = /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">datadir = /data/mysql</span><br><span class=\"line\">port = 3306</span><br><span class=\"line\">socket = /tmp/mysql.sock</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>修改<code>/etc/init.d/mysqld</code>启动脚本，配置basedir和datadir：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">basedir=/usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">datadir=/data/mysql</span><br></pre></td></tr></table></figure></li><li><p>完成后，即可使用<code>/etc/init.d/mysqld start</code>启动MySQL。</p></li></ul><h2 id=\"修改root密码\"><a href=\"#修改root密码\" class=\"headerlink\" title=\"修改root密码\"></a>修改root密码</h2><ul><li><p>之前初始化安装时已经给出了root的密码，使用密码就能够登陆MySQL，登陆后需要重新修改密码：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/<span class=\"built_in\">local</span>/mysql/bin/mysql -uroot -pCrG_3SlTYe3:</span><br><span class=\"line\"></span><br><span class=\"line\">//进入MySQL修改密码</span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> password=password(<span class=\"string\">'123456'</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>如果忘记了初始化安装时的密码，可以修改my.cnf配置，在[mysqld]下面增加一行<code>skip-grant-tables</code>,然后重启MySQL服务，执行<code>/usr/local/mysql/bin/mysql -uroot</code>无密码登陆进MySQL中，然后在MySQL命令行内执行下面的命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; update mysql.user <span class=\"built_in\">set</span> authentication_string=password(<span class=\"string\">'112233'</span>) <span class=\"built_in\">where</span> user=<span class=\"string\">'root'</span>;</span><br></pre></td></tr></table></figure></li><li><p>完成后，将my.cnf中的<code>skip-grant-tables</code>配置删除，重启MySQL服务即可使用新的密码登陆。</p></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Jun 06 2018 01:18:34 GMT+0800 (CST) --><p>LAMP是Linux+Apache(httpd)+MySQL+PHP几种环境组成的一种架构，很多网站运行的环境就是在LAMP的架构上运行的，Apache、MySQL和PHP可以安装在一台机器上，也可以分开安装在多台机器上，但httpd和PHP需要安装在一起。</p>","more":"<hr><h1 id=\"LAMP架构\"><a href=\"#LAMP架构\" class=\"headerlink\" title=\"LAMP架构\"></a>LAMP架构</h1><ul><li><p>httpd、PHP、MySQL三者的工资模式如下图：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/LAMP.png\" alt=\"lamp\"></p></li><li><p>其中对MySQL数据库的请求是通过PHP模块进行的，这种请求是动态请求，而对于网页上的静态内容，如图片等，则是静态请求。</p></li><li><p>用户像网站发起请求到Apache，Apache处理用户请求，如果需要读取数据库则调用PHP模块从MySQL中查询相关的数据，而对于静态的请求则Apache会直接像用户返回静态文件数据。</p></li></ul><hr><h1 id=\"MySQL-Mariadb介绍\"><a href=\"#MySQL-Mariadb介绍\" class=\"headerlink\" title=\"MySQL/Mariadb介绍\"></a>MySQL/Mariadb介绍</h1><ul><li>MySQL是一个关系型数据库，最新的版本为5.7GA/8.0DMR，而5.6的版本变化较大，5.7在性能上有很大的提升；</li><li>而Mariadb则是MySQL被收购后由原作者发展的一个分支，Mariadb的最新版本为10.2；</li><li>Mariadb5.5对应MySQL的5.5版本，而10.0对应MySQL的5.6版本；</li><li>版本划分为Community社区版本；Enterprise企业版；GA(Generally Acailable)通用版本，在生产环境中使用的；DMR(Development Milestone Release)开发里程碑发布版，表示具有重大突破的版本；RC(Release Candidate)发行候选版本；Beta开放测试版本；Alpha内部测试版本。</li></ul><hr><h1 id=\"MySQL的安装\"><a href=\"#MySQL的安装\" class=\"headerlink\" title=\"MySQL的安装\"></a>MySQL的安装</h1><ul><li>MySQL常用的安装包有rpm包，源码包和二进制免编译包；二进制免编译包是指已经被编译好的的安装包，使用起来比较方便；</li></ul><h2 id=\"下载MySQL安装包\"><a href=\"#下载MySQL安装包\" class=\"headerlink\" title=\"下载MySQL安装包\"></a>下载MySQL安装包</h2><ul><li>一般情况下建议使用二进制免编译包，除非在需要控制性能的情况下，才需要使用源码包编译安装。</li><li>进入<code>/usr/local/src/</code>目录，将MySQL的二进制免编译包下载下来：<code>wget http://mirrors.sohu.com/mysql/MySQL-5.6/mysql-5.6.36-linux-glibc2.5-x86_64.tar.gz</code>，这里下载的是5.6版本；</li></ul><h2 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h2><ul><li><p>首先解压下载下来的安装包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf mysql-5.6.36-linux-glibc2.5-x86_64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>然后将解压出的mysql目录移动到<code>/usr/local/</code>下并重命名为mysql：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv mysql-5.6.36-linux-glibc2.5-x86_64 /usr/<span class=\"built_in\">local</span>/mysql</span><br></pre></td></tr></table></figure></li><li><p>进入到mysql目录下，创建<code>mysql</code>用户，然后创建<code>/usr/local/mysql/data</code>目录，默认这个目录已经存在，:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd mysql</span><br></pre></td></tr></table></figure></li><li><p>然后执行下面的命令进行安装，其中<code>--user</code>指定用户，<code>--datadir</code>指定数据库存放目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot mysql]<span class=\"comment\"># ./scripts/mysql_install_db --user=mysql --datadir=/data/mysql</span></span><br></pre></td></tr></table></figure><ul><li>执行这条命令有可能会报错，报错信息如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mysql]<span class=\"comment\"># ./scripts/mysql_install_db --user=mysql --datadir=./data/mysql</span></span><br><span class=\"line\">FATAL ERROR: please install the following Perl modules before executing ./scripts/mysql_install_db:</span><br><span class=\"line\">Data::Dumper</span><br></pre></td></tr></table></figure><ul><li>这里表示缺少Perl的模块，模块名为Dumper，我们可以使用yum配合grep搜索这个模块的软件包然后进行安装：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mysql]<span class=\"comment\"># yum list | grep perl | grep -i dumper</span></span><br><span class=\"line\">perl-Data-Dumper.x86_64                     2.145-3.el7                base</span><br><span class=\"line\">perl-XML-Dumper.noarch                      0.81-17.el7                base</span><br></pre></td></tr></table></figure><ul><li>这里由于不清楚包名的大小写，所以使用<code>grep -i</code>不区分大小写进行过滤；</li><li>搜索出来的包，我们可以进行尝试安装，然后再重新执行mysql的安装命令确认是否安装了正确的依赖包，如果不想一个一个尝试安装，也可以将搜索出来的包全部安装，这里安装<code>perl-Data-Dumper.x86_64</code>，然后重新执行mysql安装脚本。</li></ul></li><li><p>安装完之后验证是否正确安装可以执行<code>echo $?</code>或者查看安装时的输出是否有两个<code>OK</code>。</p></li></ul><h2 id=\"复制配置文件及启动脚本\"><a href=\"#复制配置文件及启动脚本\" class=\"headerlink\" title=\"复制配置文件及启动脚本\"></a>复制配置文件及启动脚本</h2><ul><li><p>mysql的模板配置文件为<code>/usr/local/mysql/support-files/my-default.cnf</code>，将其复制到<code>/etc/</code>下并重命名为<code>my.cnf</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mysql]<span class=\"comment\"># cp support-files/my-default.cnf /etc/my.cnf</span></span><br></pre></td></tr></table></figure><ul><li>实际上在<code>/etc/</code>下存在一个my.cnf的配置文件，使用<code>rpm -qf</code>查看该文件来自哪个软件包，可以看到是由mariadb-libs安装到系统内的：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot mysql]<span class=\"comment\"># rpm -qf /etc/my.cnf</span></span><br><span class=\"line\">mariadb-libs-5.5.56-2.el7.x86_64</span><br></pre></td></tr></table></figure><ul><li>这个配置文件也可以直接使用，但是需要更改其中的相关配置，如datadir更改为<code>/usr/local/mysql/data/mysql</code>，socket更改为<code>/tmp/mysql.sock</code>，并且注释<code>mysq_safe</code>下的配置项。</li></ul></li><li><p>mysql的启动脚本模板文件为<code>/usr/local/mysql/support-files/mysql.server</code>，将其复制到<code>/etc/init.d/</code>,并重命名为<code>mysqld</code>，<strong>在替换过配置文件后，需要重新执行初始化数据库的命令<code>mysql_install_db</code></strong>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mysql]<span class=\"comment\"># cp support-files/mysql.server /etc/init.d/mysqld</span></span><br></pre></td></tr></table></figure></li><li><p>然后修改启动脚本中的<code>basedir</code>和<code>datadir</code>的值分别为<code>/usr/local/mysql</code>和<code>/data/mysql</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># If you change base dir, you must also change datadir. These may get</span></span><br><span class=\"line\"><span class=\"comment\"># overwritten by settings in the MySQL configuration files.</span></span><br><span class=\"line\"></span><br><span class=\"line\">basedir=/usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">datadir=/data/mysql</span><br></pre></td></tr></table></figure></li><li><p>修改启动脚本的权限为755：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mysql]<span class=\"comment\"># chmod 755 /etc/init.d/mysqld</span></span><br><span class=\"line\">[root@localhost mysql]<span class=\"comment\"># ls -l /etc/init.d/mysqld</span></span><br><span class=\"line\">-rwxr-xr-x. 1 root root 10592 5月  23 23:54 /etc/init.d/mysqld</span><br></pre></td></tr></table></figure></li><li><p>设置MySQL为开机启动，使用<code>chkconfig --add mysqld</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mysql]<span class=\"comment\"># chkconfig --add mysqld</span></span><br><span class=\"line\">[root@localhost mysql]<span class=\"comment\"># chkconfig --list</span></span><br><span class=\"line\"></span><br><span class=\"line\">注意：该输出结果只显示 SysV 服务，并不包含原生 systemd 服务。SysV 配置数据可能被原生 systemd 配置覆盖。</span><br><span class=\"line\">      如果您想列出 systemd 服务,请执行 <span class=\"string\">'systemctl list-unit-files'</span>。</span><br><span class=\"line\">      欲查看对特定 target 启用的服务请执行</span><br><span class=\"line\">      <span class=\"string\">'systemctl list-dependencies [target]'</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">mysqld          0:关    1:关    2:开    3:开    4:开    5:开    6:关</span><br><span class=\"line\">netconsole      0:关    1:关    2:关    3:关    4:关    5:关    6:关</span><br><span class=\"line\">network         0:关    1:关    2:开    3:开    4:开    5:开    6:关</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"启动MySQL\"><a href=\"#启动MySQL\" class=\"headerlink\" title=\"启动MySQL\"></a>启动MySQL</h2><ul><li><p>启动MySQL服务，使用<code>/etc/init.d/mysqld start</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot mysql]<span class=\"comment\"># /etc/init.d/mysqld start</span></span><br><span class=\"line\">Starting MySQL.Logging to <span class=\"string\">'/usr/local/mysql/data/mysql/evobot.err'</span>.</span><br><span class=\"line\"> SUCCESS!</span><br></pre></td></tr></table></figure><ul><li>也可以使用<code>service mysqld start</code>进行启动，手动启动MySQL的另一种方式如下，这种方式可以指定MySQL的配置文件，数据库目录和用户：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot mysql]<span class=\"comment\"># /usr/local/mysql/bin/mysqld_safe --defaults-file=/etc/my.cnf --user=mysql --datadir=/usr/local/mysql/data/mysql &amp;</span></span><br><span class=\"line\">[1] 31732</span><br><span class=\"line\">[root@evobot mysql]<span class=\"comment\"># 180524 00:29:11 mysqld_safe Logging to '/usr/local/mysql/data/mysql/evobot.err'.</span></span><br><span class=\"line\">180524 00:29:11 mysqld_safe Starting mysqld daemon with databases from /usr/<span class=\"built_in\">local</span>/mysql/data/mysql</span><br></pre></td></tr></table></figure><ul><li>手动运行MySQL，需要停止进程，则使用<code>killall mysqld</code>结束进程，不建议使用<code>kill</code>命令，因为MySQL运行时可能在读写数据，如果使用<code>kill</code>，那么会造成数据丢失，而<code>killall</code>则会先等待数据读写完成再杀死进程。</li></ul></li><li><p>查看MySQL运行时的进程：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot mysql]<span class=\"comment\"># !ps</span></span><br><span class=\"line\">ps aux| grep mysql</span><br><span class=\"line\">root     31732  0.0  0.0 113260  1608 pts/0    S    00:29   0:00 /bin/sh /usr/<span class=\"built_in\">local</span>/mysql/bin/mysqld_safe --defaults-file=/etc/my.cnf --user=mysql --datadir=/usr/<span class=\"built_in\">local</span>/mysql/data/mysql</span><br><span class=\"line\">mysql    31864  6.3 24.0 1304348 452568 pts/0  Sl   00:29   0:00 /usr/<span class=\"built_in\">local</span>/mysql/bin/mysqd --defaults-file=/etc/my.cnf --basedir=/usr/<span class=\"built_in\">local</span>/mysql --datadir=/usr/<span class=\"built_in\">local</span>/mysql/data/mysql --plugin-dir=/usr/<span class=\"built_in\">local</span>/mysql/lib/plugin --user=mysql --<span class=\"built_in\">log</span>-error=/usr/<span class=\"built_in\">local</span>/mysql/data/mysql/evobot.err --pid-file=/usr/<span class=\"built_in\">local</span>/mysql/data/mysql/evobot.pid --socket=/tmp/mysql.sock</span><br><span class=\"line\">root     31911  0.0  0.0 112676   980 pts/0    R+   00:29   0:00 grep --color=auto mysql</span><br></pre></td></tr></table></figure></li><li><p>MySQL的默认监听端口为3306：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot mysql]<span class=\"comment\"># netstat -tlnp</span></span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class=\"line\">tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1/systemd</span><br><span class=\"line\">tcp        0      0 0.0.0.0:2233            0.0.0.0:*               LISTEN      801/sshd</span><br><span class=\"line\">tcp6       0      0 :::3306                 :::*                    LISTEN      31864/mysqld</span><br></pre></td></tr></table></figure></li><li><p>MySQL的引擎由<code>innodb</code>和<code>myisam</code>，<code>myisam</code>较为轻量。</p></li></ul><h1 id=\"MySQL5-5编译安装\"><a href=\"#MySQL5-5编译安装\" class=\"headerlink\" title=\"MySQL5.5编译安装\"></a>MySQL5.5编译安装</h1><ul><li><p>首先下载MySQL5.5.60源码包，<a href=\"https://dev.mysql.com/get/Downloads/MySQL-5.5/mysql-5.5.60.tar.gz\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">MySQL5.5.60下载地址</a>;</p></li><li><p>解压源码包，创建mysql用户，然后安装编译需要的依赖包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf mysql-5.5.60.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> mysql-5.5.60</span><br><span class=\"line\"></span><br><span class=\"line\">useradd -s /sbin/nologin -M mysql</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y cmake gcc gcc-c++ ncurses-devel bison</span><br></pre></td></tr></table></figure><blockquote><p>如果编译过程中因为缺少依赖包出错，再安装了依赖包后，需要执行<code>rm -f CMakeCache.txt</code>删除编译缓存文件后再重新进行编译。</p></blockquote></li><li><p>然后进行编译操作，默认情况下，mysql安装目录为<code>/usr/local/mysql</code>，数据目录为<code>/usr/local/mysql/data</code>，编译参数可以参照<a href=\"https://dev.mysql.com/doc/refman/5.5/en/source-configuration-options.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">MySQL Source-Configuration Options</a>，编译过程如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DCMAKE_INSTALL_PREFIX=/usr/<span class=\"built_in\">local</span>/mysql \\</span><br><span class=\"line\">-DMYSQL_DATADIR=/mysql/data \\</span><br><span class=\"line\">-DDEFAULT_CHARSET=utf8 \\</span><br><span class=\"line\">-DDEFAULT_COLLATION=utf8_general_ci \\</span><br><span class=\"line\">-DWITH_EXTRA_CHARSETS:STRING=all \\</span><br><span class=\"line\">-DWITH_DEBUG=0 -DWITH_SSL=yes \\</span><br><span class=\"line\">-DWITH_READLINE=1 \\</span><br><span class=\"line\">-DENABLE_LOCAL_INFILE=1</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>编译完成后，进入安装目录，更改目录属主和属组，然后进行初始化安装，最后复制配置文件和启动脚本，执行下面的命令完成MySQL的安装：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\"></span><br><span class=\"line\">./scripts/mysql_install_db --user=mysql --datadir=/mysql/data</span><br><span class=\"line\"></span><br><span class=\"line\">cp support-files/my-medium.cnf /etc/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">cp support-files/mysql.server /etc/init.d/mysqld</span><br></pre></td></tr></table></figure></li></ul><ul><li>最后，使用<code>/etc/init.d/mysqld start</code>即可启动MySQL服务。</li></ul><h1 id=\"MySQL5-7二进制包安装\"><a href=\"#MySQL5-7二进制包安装\" class=\"headerlink\" title=\"MySQL5.7二进制包安装\"></a>MySQL5.7二进制包安装</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul><li><p>首先下载MySQL5.7.17二进制安装包，<a href=\"http://mirrors.sohu.com/mysql/MySQL-5.7/mysql-5.7.17-linux-glibc2.5-x86_64.tar.gz\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">下载链接</a>；</p></li><li><p>然后解压二进制包，并将解压出来的目录移动到/usr/local目录下更名为mysql:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf mysql-5.7.17-linux-glibc2.5-x86_64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">mv mysql-5.7.17-linux-glibc2.5-x86_64 /usr/<span class=\"built_in\">local</span>/mysql</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>然后进行初始化操作：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/mysql/</span><br><span class=\"line\"></span><br><span class=\"line\">./bin/mysqld --initialize --user=mysql --datadir=/data/mysql/</span><br></pre></td></tr></table></figure><blockquote><p>这里成功执行后，会再最后一行打印MySQL的root账户的密码：<br><code>[Note] A temporary password is generated for root@localhost: CrG_3SlTYe3:</code></p></blockquote></li><li><p>然后生成密钥：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/mysql_ssl_rsa_setup --datadir=/data/mysql/</span><br></pre></td></tr></table></figure></li><li><p>复制配置文件和启动脚本：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp support-files/my-default.cnf /etc/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">cp support-files/mysql.server /etc/init.d/mysqld</span><br></pre></td></tr></table></figure></li><li><p>接着修改<code>/etc/my.cnf</code>，配置basedir、datadir、port以及socket：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">basedir = /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">datadir = /data/mysql</span><br><span class=\"line\">port = 3306</span><br><span class=\"line\">socket = /tmp/mysql.sock</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>修改<code>/etc/init.d/mysqld</code>启动脚本，配置basedir和datadir：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">basedir=/usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">datadir=/data/mysql</span><br></pre></td></tr></table></figure></li><li><p>完成后，即可使用<code>/etc/init.d/mysqld start</code>启动MySQL。</p></li></ul><h2 id=\"修改root密码\"><a href=\"#修改root密码\" class=\"headerlink\" title=\"修改root密码\"></a>修改root密码</h2><ul><li><p>之前初始化安装时已经给出了root的密码，使用密码就能够登陆MySQL，登陆后需要重新修改密码：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/<span class=\"built_in\">local</span>/mysql/bin/mysql -uroot -pCrG_3SlTYe3:</span><br><span class=\"line\"></span><br><span class=\"line\">//进入MySQL修改密码</span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> password=password(<span class=\"string\">'123456'</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>如果忘记了初始化安装时的密码，可以修改my.cnf配置，在[mysqld]下面增加一行<code>skip-grant-tables</code>,然后重启MySQL服务，执行<code>/usr/local/mysql/bin/mysql -uroot</code>无密码登陆进MySQL中，然后在MySQL命令行内执行下面的命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; update mysql.user <span class=\"built_in\">set</span> authentication_string=password(<span class=\"string\">'112233'</span>) <span class=\"built_in\">where</span> user=<span class=\"string\">'root'</span>;</span><br></pre></td></tr></table></figure></li><li><p>完成后，将my.cnf中的<code>skip-grant-tables</code>配置删除，重启MySQL服务即可使用新的密码登陆。</p></li></ul><hr><!-- rebuild by neat -->"},{"title":"Linux日常运维(一)——系统资源监控","author":"Evobot","abbrlink":"707efc0b","date":"2018-05-04T17:01:16.000Z","image":null,"_content":"\n本文主要介绍系统管理相关的w、vmstat、top、sar、nload几个命令和它们的使用方法，这几个命令主要用来监控系统状态，如CPU使用率，系统负载，内存和进程状态等。\n\n<!--more-->\n\n---\n\n# 监控系统状态\n\n## **w**命令\n\n- `w`命令的输出如下，主要分为三个部分：\n\n  ```bash\n  [root@evobot ~]# w\n   01:10:04 up 16 days, 34 min,  1 user,  load average: 0.00, 0.01, 0.05\n  USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\n  evobot   pts/0    192.168.75.254   00:58    4.00s  0.02s  0.00s sshd: evobot [priv]\n  ```\n\n  - 第一行首先是系统时间和系统启动时间，这里是16天34分钟，然后是登录的用户数，最后一段是系统负载，有三个数字，分别表示**1分钟**、**5分钟**、**15分钟**时间段内，系统的负载值，负载值是单位时间内，使用CPU的进程数的平均值，系统负载的最佳状态是一分钟内与逻辑CPU个数相等的负载值；\n\n  - 查看逻辑CPU个数，使用命令`cat /proc/cpuinfo`，查看输出的**processor**的个数是多少，那么CPU个数就是多少：\n\n    ```bash\n    [root@evobot ~]# cat /proc/cpuinfo\n    processor\t: 0\t\t# 只有一个，说明CPU为一核\n    vendor_id\t: GenuineIntel\n    cpu family\t: 6\n    model\t\t: 79\n    model name\t: Intel(R) Xeon(R) CPU E5-26xx v4\n    stepping\t: 1\n    microcode\t: 0x1\n    cpu MHz\t\t: 2394.446\n    cache size\t: 4096 KB\n    ```\n\n  - 如果是四核CPU，那么一分钟负载最佳数值就是4，大于4说明系统负载较大，小于4说明系统比较空闲；\n\n  - `w`命令的第一行输出与`uptime`命令的输出相同，所以也可以使用`uptime`命令查看CPU负载：\n\n    ```bash\n    [root@evobot ~]# uptime\n     01:37:02 up 16 days,  1:01,  1 user,  load average: 0.00, 0.01, 0.05\n    ```\n\n  - 第二行和第三行显示当前登录的用户的一些信息，分别显示用户名，登录的tty，网络远程登录tty都是`pts/[n]`，n是一个数字，本地登录则显示`tty[n]`然后是登录用户的IP地址，登录的时间，登录用户空闲时间以及最后使用CPU的时间和运行的命令。\n\n\n## **vmstat**命令\n\n- `vmstat`命令可以查看CPU，内存，swap交换分区，磁盘的io，和系统进程等相关信息；\n\n- 常用的`vmstat`命令方式为`vmstat 1`，这样可以持续输出系统信息，并且也可以指定输出次数，如输出5次之后结束命令，则用法为`vmstat 1 5`：\n\n  ```bash\n  [root@evobot ~]# vmstat 1 5\n  procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n   r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n   2  0      0 512080 226420 1047608    0    0     0    19   19   27  1  0 99  0  0\n   0  0      0 512080 226420 1047608    0    0     0     0   83   88  0  0 100  0  0\n   0  0      0 512096 226420 1047608    0    0     0     0   55   53  0  0 100  0  0\n   1  0      0 512096 226420 1047608    0    0     0     0   63   66  0  0 100  0  0\n   0  0      0 512096 226420 1047608    0    0     0     0   67   70  0  0 100  0  0\n  ```\n\n- `vmstat`命令的输出中，主要关注以下几列：\n\n<style>\ntable th {\n    text-align: center;\n}\ntable th:first-of-type {\n    width: 120px;\n}\n</style>\n\n|    常用列    | 输出说明                                     |\n| :-------: | ---------------------------------------- |\n|    `r`    | 表示有多少个进程处于`run`运行状态，`run`状态的进程包括正在运行和排队等待CPU资源的进程,值最大与CPU核数相同 |\n|    `b`    | 表示被CPU以外资源如硬盘，网络等阻塞(block)的进程，进程等待外部资源处理，大于1需要关注    |\n|  `swapd`  | 系统使用交换空间的大小，若这一列的数值在持续变化，说明系统内存不足     |\n| `si & so` | `si`表示有多少块(KB)数据从swap进入内存，`so`表示有多少块数据从内存出来到swap中去 |\n| `bi & bo` | `bi`表示有多少数据从磁盘读取到内存中，`bo`表示有多少数据写入的磁盘，当`bi`、`bo` 过高时，`b`列的值也会增加，说明进程等待磁盘io被阻塞 |\n|   `us`    | 用户态占用CPU资源百分比，当数值大于50时，说明CPU资源不足  |\n|   `sy`    | 系统本身的进程占用CPU资源百分比                        |\n|   `id`    | CPU空闲资源比例，`us+sy+id`为100%                |\n|   `wa`    | 等待CPU资源的进程百分比                            |\n\n- `vmstat`主要用来判断系统的瓶颈所在，如CPU资源不足，内存资源不足等等。\n\n## **top**命令\n\n- top命令类似于windows中的进程管理器，可以查看系统具体运行的进程，默认运行`top`，命令输出为3秒钟刷新一次：\n\n  ![top](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/top_cmd.png)\n\n  ```bash\n  Tasks: 152 total,   1 running, 151 sleeping,   0 stopped,   0 zombie\n  ```\n\n  - 第二行显示了系统目前的进程数、正在运行的进程数和休眠的进程数，另外还会显示已经停止的进程和僵尸进程的个数，僵尸进程是指父进程因为意外等原因被终止，子进程处于无法管理的状态的进程；\n\n  ```bash\n  %Cpu(s):  0.0 us,  0.1 sy,  0.0 ni, 99.9 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\n  ```\n\n  - 这一行显示的CPU占用率，类似`vmstat`命令的输出，其中`st`表示被偷走的CPU百分比，例如服务器上运行的虚拟机，可能会偷走部分CPU资源；\n  - CPU百分比中`us`和系统负载不一定相关，负载中的进程可能存在占用CPU等待的情况，所以`us`会比较低，而`us`占用高，会导致其他进程排队，从而造成系统负载高；\n\n  ```bash\n  KiB Mem :  3928092 total,  2185976 free,   294268 used,  1447848 buff/cache\n  KiB Swap:  4075516 total,  4075516 free,        0 used.  3274380 avail Mem \n  ```\n\n  - 这两行输出的内容是内存和swap交换分区使用情况，主要关注`free`剩余空闲内存。\n\n  ```bash\n    PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                       \n   6717 evobot    20   0   42260   3844   3252 R   0.3  0.1   0:01.91 top       \n  ```\n\n  - `top`命令剩余的显示内容就是系统的进程，默认按照进程占用CPU百分比进行排序，每列所表示的信息如下：\n\n|     列名      |    所表示信息     |\n| :---------: | :----------: |\n|    `PID`    |     进程ID     |\n| `PR` & `NI` |   进程优先级信息    |\n|    `RES`    | 物理内存使用大小(KB) |\n|   `%CPU`    |    CPU使用率    |\n|   `%MEM`    |    内存使用率     |\n|  `COMMAND`  |     进程命令     |\n\n- `top`命令默认按照CPU使用率排序，可以键入`M`，则会按照内存使用率排序，`P`则是按照CPU使用率排序，按`q`退出top命令，按`1`则会将CPU显示单个CPU内核的占用率：\n\n  ```bash\n  %Cpu0  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\n  %Cpu1  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\n  %Cpu2  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\n  %Cpu3  :  0.7 us,  0.0 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\n  ```\n\n- 使用`top -c`则top会显示进程的具体命令：\n\n  ![top-c](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/top-c.png)      \n\n- 而`top -bn1`则是静态的将所有进程列出来，适合在shell脚本中使用:\n\n  ![top-bn1](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/top-bn1.png)\n\n---\n\n# 监控网卡状态\n\n## **sar**命令\n\n- `sar`命令如果未安装，需要安装`sysstat`软件包：\n\n  ```bash\n  yum install -y sysstat\n  ```\n\n- 直接运行`sar`命令会提示*无法打开 /var/log/sa/sa05: 没有那个文件或目录*，这是因为`sar`命令每隔十分钟会把系统状态过滤并保存在上面的目录下，`/var/log/sa/sa[n]`这里的n是以生成文件的日期的日命名，文件最多保留一个月；\n\n- `sar -n DEV 1 10`用法，表示输出网卡的信息，`1 10`表示一秒输出一次，输出10次，与`vmstat 1 5`的用法类似：\n\n  ![sar-n](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/sar-n.png)\n\n  - 图片的输出中，第一列是时间，第二列是网卡名，主要关注下面这几列：`rxpck/s`是每秒接收到数据包，单位是个，`txpck/s`是发送的数据表，`rxkB/s`和`txkB/s`则分别表示每秒接收和发送的数据量，单位为KB。\n  - 实际运维中，需要关注接收的数据包和接收的数据量，如果数据过高，可能服务器受到了攻击，另外也要关注网卡的带宽是否被跑满；\n\n- 使用命令`sar -n DEV -f /var/log/sa/sa[n]`可以查看指定日期的历史数据：\n\n  ```bash\n  [root@evobot ~]# sar -n DEV -f /var/log/sa/sa05 \n  Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)\n\n  03时20分01秒     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s\n  03时30分01秒      eth0      2.72      2.87      0.26      0.36      0.00      0.00      0.00\n  03时30分01秒        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n  平均时间:      eth0      2.72      2.87      0.26      0.36      0.00      0.00      0.00\n  平均时间:        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n  ```\n\n- `sar -q 1 10`可以查看系统的负载，输出与`w`命令的系统负载相同，一般不会使用sar命令每秒输出查看系统负载，而是使用`sar -q -f /var/log/sa/sa[n]`查看当天历史负载，也可以指定sar生成的日志文件查看之前时间的历史负载：\n\n  ```bash\n  [root@evobot ~]# sar -q\n  Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)\n\n  03时20分01秒   runq-sz  plist-sz   ldavg-1   ldavg-5  ldavg-15   blocked\n  03时30分01秒         2        90      0.00      0.01      0.05         0\n  平均时间:         2        90      0.00      0.01      0.05         0\n\n  [root@evobot ~]# sar -q -f /var/log/sa/sa05 \n  Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)\n\n  03时20分01秒   runq-sz  plist-sz   ldavg-1   ldavg-5  ldavg-15   blocked\n  03时30分01秒         2        90      0.00      0.01      0.05         0\n  03时40分01秒         2        89      0.00      0.01      0.05         0\n  平均时间:         2        90      0.00      0.01      0.05         0\n  ```\n\n- `sar -b`可以查看磁盘的读写信息：\n\n  ```bash\n  [root@evobot ~]# sar -b\n  Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)\n\n  03时20分01秒       tps      rtps      wtps   bread/s   bwrtn/s\n  03时30分01秒      2.33      0.01      2.32      0.15     45.55\n  03时40分01秒      1.79      0.00      1.79      0.00     23.11\n  平均时间:      2.06      0.01      2.05      0.07     34.33\n\n  [root@evobot ~]# sar -b 1 5\n  Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)\n\n  03时41分26秒       tps      rtps      wtps   bread/s   bwrtn/s\n  03时41分27秒      0.00      0.00      0.00      0.00      0.00\n  03时41分28秒      0.00      0.00      0.00      0.00      0.00\n  03时41分29秒      0.00      0.00      0.00      0.00      0.00\n  03时41分30秒      0.00      0.00      0.00      0.00      0.00\n  03时41分31秒      1.98      0.00      1.98      0.00     31.68\n  平均时间:      0.40      0.00      0.40      0.00      6.40\n\n  [root@evobot ~]# sar -b -f /var/log/sa/sa05 \n  Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)\n\n  03时20分01秒       tps      rtps      wtps   bread/s   bwrtn/s\n  03时30分01秒      2.33      0.01      2.32      0.15     45.55\n  03时40分01秒      1.79      0.00      1.79      0.00     23.11\n  平均时间:      2.06      0.01      2.05      0.07     34.33\n  ```\n\n{% note success %}sar命令在/var/log/sa/目录下除了生成sa[n]文件外，在第二天还会生成sar[n]文件，两个文件的区别是sa[n]文件为二进制文件，而sar[n]则是文本文件，可以使用cat命令查看 。{% endnote %}\n\n## **nload**命令\n\n- `nload`默认也是没有安装，需要安装`epel-release`扩展源再安装`nload`软件包；\n\n- 执行`nload`命令，可以动态的显示网卡信息：\n\n  ![nload](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/nload.png)\n\n  - 输出界面中第一行会显示网卡的名字、ip以及当前是第几张网卡，使用向下方向键可以切换网卡，`q`键退出；\n  - 界面上半部分显示的是进入的流量，下半部分是出口流量，如果进入的流量非常大，可能服务器受到了攻击，右下角显示的信息分别是当前网络速率，平均、最小、最大速率；\n\n---","source":"_posts/Linux日常运维(一)—系统资源监控.md","raw":"---\ntitle: Linux日常运维(一)——系统资源监控\nauthor: Evobot\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\nabbrlink: 707efc0b\ndate: 2018-05-05 01:01:16\nimage:\n---\n\n本文主要介绍系统管理相关的w、vmstat、top、sar、nload几个命令和它们的使用方法，这几个命令主要用来监控系统状态，如CPU使用率，系统负载，内存和进程状态等。\n\n<!--more-->\n\n---\n\n# 监控系统状态\n\n## **w**命令\n\n- `w`命令的输出如下，主要分为三个部分：\n\n  ```bash\n  [root@evobot ~]# w\n   01:10:04 up 16 days, 34 min,  1 user,  load average: 0.00, 0.01, 0.05\n  USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\n  evobot   pts/0    192.168.75.254   00:58    4.00s  0.02s  0.00s sshd: evobot [priv]\n  ```\n\n  - 第一行首先是系统时间和系统启动时间，这里是16天34分钟，然后是登录的用户数，最后一段是系统负载，有三个数字，分别表示**1分钟**、**5分钟**、**15分钟**时间段内，系统的负载值，负载值是单位时间内，使用CPU的进程数的平均值，系统负载的最佳状态是一分钟内与逻辑CPU个数相等的负载值；\n\n  - 查看逻辑CPU个数，使用命令`cat /proc/cpuinfo`，查看输出的**processor**的个数是多少，那么CPU个数就是多少：\n\n    ```bash\n    [root@evobot ~]# cat /proc/cpuinfo\n    processor\t: 0\t\t# 只有一个，说明CPU为一核\n    vendor_id\t: GenuineIntel\n    cpu family\t: 6\n    model\t\t: 79\n    model name\t: Intel(R) Xeon(R) CPU E5-26xx v4\n    stepping\t: 1\n    microcode\t: 0x1\n    cpu MHz\t\t: 2394.446\n    cache size\t: 4096 KB\n    ```\n\n  - 如果是四核CPU，那么一分钟负载最佳数值就是4，大于4说明系统负载较大，小于4说明系统比较空闲；\n\n  - `w`命令的第一行输出与`uptime`命令的输出相同，所以也可以使用`uptime`命令查看CPU负载：\n\n    ```bash\n    [root@evobot ~]# uptime\n     01:37:02 up 16 days,  1:01,  1 user,  load average: 0.00, 0.01, 0.05\n    ```\n\n  - 第二行和第三行显示当前登录的用户的一些信息，分别显示用户名，登录的tty，网络远程登录tty都是`pts/[n]`，n是一个数字，本地登录则显示`tty[n]`然后是登录用户的IP地址，登录的时间，登录用户空闲时间以及最后使用CPU的时间和运行的命令。\n\n\n## **vmstat**命令\n\n- `vmstat`命令可以查看CPU，内存，swap交换分区，磁盘的io，和系统进程等相关信息；\n\n- 常用的`vmstat`命令方式为`vmstat 1`，这样可以持续输出系统信息，并且也可以指定输出次数，如输出5次之后结束命令，则用法为`vmstat 1 5`：\n\n  ```bash\n  [root@evobot ~]# vmstat 1 5\n  procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n   r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n   2  0      0 512080 226420 1047608    0    0     0    19   19   27  1  0 99  0  0\n   0  0      0 512080 226420 1047608    0    0     0     0   83   88  0  0 100  0  0\n   0  0      0 512096 226420 1047608    0    0     0     0   55   53  0  0 100  0  0\n   1  0      0 512096 226420 1047608    0    0     0     0   63   66  0  0 100  0  0\n   0  0      0 512096 226420 1047608    0    0     0     0   67   70  0  0 100  0  0\n  ```\n\n- `vmstat`命令的输出中，主要关注以下几列：\n\n<style>\ntable th {\n    text-align: center;\n}\ntable th:first-of-type {\n    width: 120px;\n}\n</style>\n\n|    常用列    | 输出说明                                     |\n| :-------: | ---------------------------------------- |\n|    `r`    | 表示有多少个进程处于`run`运行状态，`run`状态的进程包括正在运行和排队等待CPU资源的进程,值最大与CPU核数相同 |\n|    `b`    | 表示被CPU以外资源如硬盘，网络等阻塞(block)的进程，进程等待外部资源处理，大于1需要关注    |\n|  `swapd`  | 系统使用交换空间的大小，若这一列的数值在持续变化，说明系统内存不足     |\n| `si & so` | `si`表示有多少块(KB)数据从swap进入内存，`so`表示有多少块数据从内存出来到swap中去 |\n| `bi & bo` | `bi`表示有多少数据从磁盘读取到内存中，`bo`表示有多少数据写入的磁盘，当`bi`、`bo` 过高时，`b`列的值也会增加，说明进程等待磁盘io被阻塞 |\n|   `us`    | 用户态占用CPU资源百分比，当数值大于50时，说明CPU资源不足  |\n|   `sy`    | 系统本身的进程占用CPU资源百分比                        |\n|   `id`    | CPU空闲资源比例，`us+sy+id`为100%                |\n|   `wa`    | 等待CPU资源的进程百分比                            |\n\n- `vmstat`主要用来判断系统的瓶颈所在，如CPU资源不足，内存资源不足等等。\n\n## **top**命令\n\n- top命令类似于windows中的进程管理器，可以查看系统具体运行的进程，默认运行`top`，命令输出为3秒钟刷新一次：\n\n  ![top](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/top_cmd.png)\n\n  ```bash\n  Tasks: 152 total,   1 running, 151 sleeping,   0 stopped,   0 zombie\n  ```\n\n  - 第二行显示了系统目前的进程数、正在运行的进程数和休眠的进程数，另外还会显示已经停止的进程和僵尸进程的个数，僵尸进程是指父进程因为意外等原因被终止，子进程处于无法管理的状态的进程；\n\n  ```bash\n  %Cpu(s):  0.0 us,  0.1 sy,  0.0 ni, 99.9 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\n  ```\n\n  - 这一行显示的CPU占用率，类似`vmstat`命令的输出，其中`st`表示被偷走的CPU百分比，例如服务器上运行的虚拟机，可能会偷走部分CPU资源；\n  - CPU百分比中`us`和系统负载不一定相关，负载中的进程可能存在占用CPU等待的情况，所以`us`会比较低，而`us`占用高，会导致其他进程排队，从而造成系统负载高；\n\n  ```bash\n  KiB Mem :  3928092 total,  2185976 free,   294268 used,  1447848 buff/cache\n  KiB Swap:  4075516 total,  4075516 free,        0 used.  3274380 avail Mem \n  ```\n\n  - 这两行输出的内容是内存和swap交换分区使用情况，主要关注`free`剩余空闲内存。\n\n  ```bash\n    PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                       \n   6717 evobot    20   0   42260   3844   3252 R   0.3  0.1   0:01.91 top       \n  ```\n\n  - `top`命令剩余的显示内容就是系统的进程，默认按照进程占用CPU百分比进行排序，每列所表示的信息如下：\n\n|     列名      |    所表示信息     |\n| :---------: | :----------: |\n|    `PID`    |     进程ID     |\n| `PR` & `NI` |   进程优先级信息    |\n|    `RES`    | 物理内存使用大小(KB) |\n|   `%CPU`    |    CPU使用率    |\n|   `%MEM`    |    内存使用率     |\n|  `COMMAND`  |     进程命令     |\n\n- `top`命令默认按照CPU使用率排序，可以键入`M`，则会按照内存使用率排序，`P`则是按照CPU使用率排序，按`q`退出top命令，按`1`则会将CPU显示单个CPU内核的占用率：\n\n  ```bash\n  %Cpu0  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\n  %Cpu1  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\n  %Cpu2  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\n  %Cpu3  :  0.7 us,  0.0 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\n  ```\n\n- 使用`top -c`则top会显示进程的具体命令：\n\n  ![top-c](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/top-c.png)      \n\n- 而`top -bn1`则是静态的将所有进程列出来，适合在shell脚本中使用:\n\n  ![top-bn1](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/top-bn1.png)\n\n---\n\n# 监控网卡状态\n\n## **sar**命令\n\n- `sar`命令如果未安装，需要安装`sysstat`软件包：\n\n  ```bash\n  yum install -y sysstat\n  ```\n\n- 直接运行`sar`命令会提示*无法打开 /var/log/sa/sa05: 没有那个文件或目录*，这是因为`sar`命令每隔十分钟会把系统状态过滤并保存在上面的目录下，`/var/log/sa/sa[n]`这里的n是以生成文件的日期的日命名，文件最多保留一个月；\n\n- `sar -n DEV 1 10`用法，表示输出网卡的信息，`1 10`表示一秒输出一次，输出10次，与`vmstat 1 5`的用法类似：\n\n  ![sar-n](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/sar-n.png)\n\n  - 图片的输出中，第一列是时间，第二列是网卡名，主要关注下面这几列：`rxpck/s`是每秒接收到数据包，单位是个，`txpck/s`是发送的数据表，`rxkB/s`和`txkB/s`则分别表示每秒接收和发送的数据量，单位为KB。\n  - 实际运维中，需要关注接收的数据包和接收的数据量，如果数据过高，可能服务器受到了攻击，另外也要关注网卡的带宽是否被跑满；\n\n- 使用命令`sar -n DEV -f /var/log/sa/sa[n]`可以查看指定日期的历史数据：\n\n  ```bash\n  [root@evobot ~]# sar -n DEV -f /var/log/sa/sa05 \n  Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)\n\n  03时20分01秒     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s\n  03时30分01秒      eth0      2.72      2.87      0.26      0.36      0.00      0.00      0.00\n  03时30分01秒        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n  平均时间:      eth0      2.72      2.87      0.26      0.36      0.00      0.00      0.00\n  平均时间:        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00\n  ```\n\n- `sar -q 1 10`可以查看系统的负载，输出与`w`命令的系统负载相同，一般不会使用sar命令每秒输出查看系统负载，而是使用`sar -q -f /var/log/sa/sa[n]`查看当天历史负载，也可以指定sar生成的日志文件查看之前时间的历史负载：\n\n  ```bash\n  [root@evobot ~]# sar -q\n  Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)\n\n  03时20分01秒   runq-sz  plist-sz   ldavg-1   ldavg-5  ldavg-15   blocked\n  03时30分01秒         2        90      0.00      0.01      0.05         0\n  平均时间:         2        90      0.00      0.01      0.05         0\n\n  [root@evobot ~]# sar -q -f /var/log/sa/sa05 \n  Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)\n\n  03时20分01秒   runq-sz  plist-sz   ldavg-1   ldavg-5  ldavg-15   blocked\n  03时30分01秒         2        90      0.00      0.01      0.05         0\n  03时40分01秒         2        89      0.00      0.01      0.05         0\n  平均时间:         2        90      0.00      0.01      0.05         0\n  ```\n\n- `sar -b`可以查看磁盘的读写信息：\n\n  ```bash\n  [root@evobot ~]# sar -b\n  Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)\n\n  03时20分01秒       tps      rtps      wtps   bread/s   bwrtn/s\n  03时30分01秒      2.33      0.01      2.32      0.15     45.55\n  03时40分01秒      1.79      0.00      1.79      0.00     23.11\n  平均时间:      2.06      0.01      2.05      0.07     34.33\n\n  [root@evobot ~]# sar -b 1 5\n  Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)\n\n  03时41分26秒       tps      rtps      wtps   bread/s   bwrtn/s\n  03时41分27秒      0.00      0.00      0.00      0.00      0.00\n  03时41分28秒      0.00      0.00      0.00      0.00      0.00\n  03时41分29秒      0.00      0.00      0.00      0.00      0.00\n  03时41分30秒      0.00      0.00      0.00      0.00      0.00\n  03时41分31秒      1.98      0.00      1.98      0.00     31.68\n  平均时间:      0.40      0.00      0.40      0.00      6.40\n\n  [root@evobot ~]# sar -b -f /var/log/sa/sa05 \n  Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)\n\n  03时20分01秒       tps      rtps      wtps   bread/s   bwrtn/s\n  03时30分01秒      2.33      0.01      2.32      0.15     45.55\n  03时40分01秒      1.79      0.00      1.79      0.00     23.11\n  平均时间:      2.06      0.01      2.05      0.07     34.33\n  ```\n\n{% note success %}sar命令在/var/log/sa/目录下除了生成sa[n]文件外，在第二天还会生成sar[n]文件，两个文件的区别是sa[n]文件为二进制文件，而sar[n]则是文本文件，可以使用cat命令查看 。{% endnote %}\n\n## **nload**命令\n\n- `nload`默认也是没有安装，需要安装`epel-release`扩展源再安装`nload`软件包；\n\n- 执行`nload`命令，可以动态的显示网卡信息：\n\n  ![nload](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/nload.png)\n\n  - 输出界面中第一行会显示网卡的名字、ip以及当前是第几张网卡，使用向下方向键可以切换网卡，`q`键退出；\n  - 界面上半部分显示的是进入的流量，下半部分是出口流量，如果进入的流量非常大，可能服务器受到了攻击，右下角显示的信息分别是当前网络速率，平均、最小、最大速率；\n\n---","slug":"Linux日常运维(一)—系统资源监控","published":1,"updated":"2018-06-02T13:01:29.572Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazae001vu1jxsexcs6wb","content":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>本文主要介绍系统管理相关的w、vmstat、top、sar、nload几个命令和它们的使用方法，这几个命令主要用来监控系统状态，如CPU使用率，系统负载，内存和进程状态等。</p><a id=\"more\"></a><hr><h1 id=\"监控系统状态\"><a href=\"#监控系统状态\" class=\"headerlink\" title=\"监控系统状态\"></a>监控系统状态</h1><h2 id=\"w命令\"><a href=\"#w命令\" class=\"headerlink\" title=\"w命令\"></a><strong>w</strong>命令</h2><ul><li><p><code>w</code>命令的输出如下，主要分为三个部分：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># w</span></span><br><span class=\"line\"> 01:10:04 up 16 days, 34 min,  1 user,  load average: 0.00, 0.01, 0.05</span><br><span class=\"line\">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class=\"line\">evobot   pts/0    192.168.75.254   00:58    4.00s  0.02s  0.00s sshd: evobot [priv]</span><br></pre></td></tr></table></figure><ul><li><p>第一行首先是系统时间和系统启动时间，这里是16天34分钟，然后是登录的用户数，最后一段是系统负载，有三个数字，分别表示<strong>1分钟</strong>、<strong>5分钟</strong>、<strong>15分钟</strong>时间段内，系统的负载值，负载值是单位时间内，使用CPU的进程数的平均值，系统负载的最佳状态是一分钟内与逻辑CPU个数相等的负载值；</p></li><li><p>查看逻辑CPU个数，使用命令<code>cat /proc/cpuinfo</code>，查看输出的<strong>processor</strong>的个数是多少，那么CPU个数就是多少：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat /proc/cpuinfo</span></span><br><span class=\"line\">processor\t: 0\t\t<span class=\"comment\"># 只有一个，说明CPU为一核</span></span><br><span class=\"line\">vendor_id\t: GenuineIntel</span><br><span class=\"line\">cpu family\t: 6</span><br><span class=\"line\">model\t\t: 79</span><br><span class=\"line\">model name\t: Intel(R) Xeon(R) CPU E5-26xx v4</span><br><span class=\"line\">stepping\t: 1</span><br><span class=\"line\">microcode\t: 0x1</span><br><span class=\"line\">cpu MHz\t\t: 2394.446</span><br><span class=\"line\">cache size\t: 4096 KB</span><br></pre></td></tr></table></figure></li><li><p>如果是四核CPU，那么一分钟负载最佳数值就是4，大于4说明系统负载较大，小于4说明系统比较空闲；</p></li><li><p><code>w</code>命令的第一行输出与<code>uptime</code>命令的输出相同，所以也可以使用<code>uptime</code>命令查看CPU负载：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># uptime</span></span><br><span class=\"line\"> 01:37:02 up 16 days,  1:01,  1 user,  load average: 0.00, 0.01, 0.05</span><br></pre></td></tr></table></figure></li><li><p>第二行和第三行显示当前登录的用户的一些信息，分别显示用户名，登录的tty，网络远程登录tty都是<code>pts/[n]</code>，n是一个数字，本地登录则显示<code>tty[n]</code>然后是登录用户的IP地址，登录的时间，登录用户空闲时间以及最后使用CPU的时间和运行的命令。</p></li></ul></li></ul><h2 id=\"vmstat命令\"><a href=\"#vmstat命令\" class=\"headerlink\" title=\"vmstat命令\"></a><strong>vmstat</strong>命令</h2><ul><li><p><code>vmstat</code>命令可以查看CPU，内存，swap交换分区，磁盘的io，和系统进程等相关信息；</p></li><li><p>常用的<code>vmstat</code>命令方式为<code>vmstat 1</code>，这样可以持续输出系统信息，并且也可以指定输出次数，如输出5次之后结束命令，则用法为<code>vmstat 1 5</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># vmstat 1 5</span></span><br><span class=\"line\">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class=\"line\"> r  b   swpd   free   buff  cache   si   so    bi    bo   <span class=\"keyword\">in</span>   cs us sy id wa st</span><br><span class=\"line\"> 2  0      0 512080 226420 1047608    0    0     0    19   19   27  1  0 99  0  0</span><br><span class=\"line\"> 0  0      0 512080 226420 1047608    0    0     0     0   83   88  0  0 100  0  0</span><br><span class=\"line\"> 0  0      0 512096 226420 1047608    0    0     0     0   55   53  0  0 100  0  0</span><br><span class=\"line\"> 1  0      0 512096 226420 1047608    0    0     0     0   63   66  0  0 100  0  0</span><br><span class=\"line\"> 0  0      0 512096 226420 1047608    0    0     0     0   67   70  0  0 100  0  0</span><br></pre></td></tr></table></figure></li><li><p><code>vmstat</code>命令的输出中，主要关注以下几列：</p></li></ul><style>table th{text-align:center}table th:first-of-type{width:120px}</style><table><thead><tr><th style=\"text-align:center\">常用列</th><th>输出说明</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>r</code></td><td>表示有多少个进程处于<code>run</code>运行状态，<code>run</code>状态的进程包括正在运行和排队等待CPU资源的进程,值最大与CPU核数相同</td></tr><tr><td style=\"text-align:center\"><code>b</code></td><td>表示被CPU以外资源如硬盘，网络等阻塞(block)的进程，进程等待外部资源处理，大于1需要关注</td></tr><tr><td style=\"text-align:center\"><code>swapd</code></td><td>系统使用交换空间的大小，若这一列的数值在持续变化，说明系统内存不足</td></tr><tr><td style=\"text-align:center\"><code>si &amp; so</code></td><td><code>si</code>表示有多少块(KB)数据从swap进入内存，<code>so</code>表示有多少块数据从内存出来到swap中去</td></tr><tr><td style=\"text-align:center\"><code>bi &amp; bo</code></td><td><code>bi</code>表示有多少数据从磁盘读取到内存中，<code>bo</code>表示有多少数据写入的磁盘，当<code>bi</code>、<code>bo</code> 过高时，<code>b</code>列的值也会增加，说明进程等待磁盘io被阻塞</td></tr><tr><td style=\"text-align:center\"><code>us</code></td><td>用户态占用CPU资源百分比，当数值大于50时，说明CPU资源不足</td></tr><tr><td style=\"text-align:center\"><code>sy</code></td><td>系统本身的进程占用CPU资源百分比</td></tr><tr><td style=\"text-align:center\"><code>id</code></td><td>CPU空闲资源比例，<code>us+sy+id</code>为100%</td></tr><tr><td style=\"text-align:center\"><code>wa</code></td><td>等待CPU资源的进程百分比</td></tr></tbody></table><ul><li><code>vmstat</code>主要用来判断系统的瓶颈所在，如CPU资源不足，内存资源不足等等。</li></ul><h2 id=\"top命令\"><a href=\"#top命令\" class=\"headerlink\" title=\"top命令\"></a><strong>top</strong>命令</h2><ul><li><p>top命令类似于windows中的进程管理器，可以查看系统具体运行的进程，默认运行<code>top</code>，命令输出为3秒钟刷新一次：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/top_cmd.png\" alt=\"top\"></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tasks: 152 total,   1 running, 151 sleeping,   0 stopped,   0 zombie</span><br></pre></td></tr></table></figure><ul><li>第二行显示了系统目前的进程数、正在运行的进程数和休眠的进程数，另外还会显示已经停止的进程和僵尸进程的个数，僵尸进程是指父进程因为意外等原因被终止，子进程处于无法管理的状态的进程；</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%Cpu(s):  0.0 us,  0.1 sy,  0.0 ni, 99.9 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br></pre></td></tr></table></figure><ul><li>这一行显示的CPU占用率，类似<code>vmstat</code>命令的输出，其中<code>st</code>表示被偷走的CPU百分比，例如服务器上运行的虚拟机，可能会偷走部分CPU资源；</li><li>CPU百分比中<code>us</code>和系统负载不一定相关，负载中的进程可能存在占用CPU等待的情况，所以<code>us</code>会比较低，而<code>us</code>占用高，会导致其他进程排队，从而造成系统负载高；</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KiB Mem :  3928092 total,  2185976 free,   294268 used,  1447848 buff/cache</span><br><span class=\"line\">KiB Swap:  4075516 total,  4075516 free,        0 used.  3274380 avail Mem</span><br></pre></td></tr></table></figure><ul><li>这两行输出的内容是内存和swap交换分区使用情况，主要关注<code>free</code>剩余空闲内存。</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                       </span><br><span class=\"line\">6717 evobot    20   0   42260   3844   3252 R   0.3  0.1   0:01.91 top</span><br></pre></td></tr></table></figure><ul><li><code>top</code>命令剩余的显示内容就是系统的进程，默认按照进程占用CPU百分比进行排序，每列所表示的信息如下：</li></ul></li></ul><table><thead><tr><th style=\"text-align:center\">列名</th><th style=\"text-align:center\">所表示信息</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>PID</code></td><td style=\"text-align:center\">进程ID</td></tr><tr><td style=\"text-align:center\"><code>PR</code> &amp; <code>NI</code></td><td style=\"text-align:center\">进程优先级信息</td></tr><tr><td style=\"text-align:center\"><code>RES</code></td><td style=\"text-align:center\">物理内存使用大小(KB)</td></tr><tr><td style=\"text-align:center\"><code>%CPU</code></td><td style=\"text-align:center\">CPU使用率</td></tr><tr><td style=\"text-align:center\"><code>%MEM</code></td><td style=\"text-align:center\">内存使用率</td></tr><tr><td style=\"text-align:center\"><code>COMMAND</code></td><td style=\"text-align:center\">进程命令</td></tr></tbody></table><ul><li><p><code>top</code>命令默认按照CPU使用率排序，可以键入<code>M</code>，则会按照内存使用率排序，<code>P</code>则是按照CPU使用率排序，按<code>q</code>退出top命令，按<code>1</code>则会将CPU显示单个CPU内核的占用率：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%Cpu0  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">%Cpu1  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">%Cpu2  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">%Cpu3  :  0.7 us,  0.0 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br></pre></td></tr></table></figure></li><li><p>使用<code>top -c</code>则top会显示进程的具体命令：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/top-c.png\" alt=\"top-c\"></p></li><li><p>而<code>top -bn1</code>则是静态的将所有进程列出来，适合在shell脚本中使用:</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/top-bn1.png\" alt=\"top-bn1\"></p></li></ul><hr><h1 id=\"监控网卡状态\"><a href=\"#监控网卡状态\" class=\"headerlink\" title=\"监控网卡状态\"></a>监控网卡状态</h1><h2 id=\"sar命令\"><a href=\"#sar命令\" class=\"headerlink\" title=\"sar命令\"></a><strong>sar</strong>命令</h2><ul><li><p><code>sar</code>命令如果未安装，需要安装<code>sysstat</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y sysstat</span><br></pre></td></tr></table></figure></li><li><p>直接运行<code>sar</code>命令会提示<em>无法打开 /var/log/sa/sa05: 没有那个文件或目录</em>，这是因为<code>sar</code>命令每隔十分钟会把系统状态过滤并保存在上面的目录下，<code>/var/log/sa/sa[n]</code>这里的n是以生成文件的日期的日命名，文件最多保留一个月；</p></li><li><p><code>sar -n DEV 1 10</code>用法，表示输出网卡的信息，<code>1 10</code>表示一秒输出一次，输出10次，与<code>vmstat 1 5</code>的用法类似：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/sar-n.png\" alt=\"sar-n\"></p><ul><li>图片的输出中，第一列是时间，第二列是网卡名，主要关注下面这几列：<code>rxpck/s</code>是每秒接收到数据包，单位是个，<code>txpck/s</code>是发送的数据表，<code>rxkB/s</code>和<code>txkB/s</code>则分别表示每秒接收和发送的数据量，单位为KB。</li><li>实际运维中，需要关注接收的数据包和接收的数据量，如果数据过高，可能服务器受到了攻击，另外也要关注网卡的带宽是否被跑满；</li></ul></li><li><p>使用命令<code>sar -n DEV -f /var/log/sa/sa[n]</code>可以查看指定日期的历史数据：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sar -n DEV -f /var/log/sa/sa05 </span></span><br><span class=\"line\">Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)</span><br><span class=\"line\"></span><br><span class=\"line\">03时20分01秒     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s</span><br><span class=\"line\">03时30分01秒      eth0      2.72      2.87      0.26      0.36      0.00      0.00      0.00</span><br><span class=\"line\">03时30分01秒        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class=\"line\">平均时间:      eth0      2.72      2.87      0.26      0.36      0.00      0.00      0.00</span><br><span class=\"line\">平均时间:        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br></pre></td></tr></table></figure></li><li><p><code>sar -q 1 10</code>可以查看系统的负载，输出与<code>w</code>命令的系统负载相同，一般不会使用sar命令每秒输出查看系统负载，而是使用<code>sar -q -f /var/log/sa/sa[n]</code>查看当天历史负载，也可以指定sar生成的日志文件查看之前时间的历史负载：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sar -q</span></span><br><span class=\"line\">Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)</span><br><span class=\"line\"></span><br><span class=\"line\">03时20分01秒   runq-sz  plist-sz   ldavg-1   ldavg-5  ldavg-15   blocked</span><br><span class=\"line\">03时30分01秒         2        90      0.00      0.01      0.05         0</span><br><span class=\"line\">平均时间:         2        90      0.00      0.01      0.05         0</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sar -q -f /var/log/sa/sa05 </span></span><br><span class=\"line\">Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)</span><br><span class=\"line\"></span><br><span class=\"line\">03时20分01秒   runq-sz  plist-sz   ldavg-1   ldavg-5  ldavg-15   blocked</span><br><span class=\"line\">03时30分01秒         2        90      0.00      0.01      0.05         0</span><br><span class=\"line\">03时40分01秒         2        89      0.00      0.01      0.05         0</span><br><span class=\"line\">平均时间:         2        90      0.00      0.01      0.05         0</span><br></pre></td></tr></table></figure></li><li><p><code>sar -b</code>可以查看磁盘的读写信息：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sar -b</span></span><br><span class=\"line\">Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)</span><br><span class=\"line\"></span><br><span class=\"line\">03时20分01秒       tps      rtps      wtps   bread/s   bwrtn/s</span><br><span class=\"line\">03时30分01秒      2.33      0.01      2.32      0.15     45.55</span><br><span class=\"line\">03时40分01秒      1.79      0.00      1.79      0.00     23.11</span><br><span class=\"line\">平均时间:      2.06      0.01      2.05      0.07     34.33</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sar -b 1 5</span></span><br><span class=\"line\">Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)</span><br><span class=\"line\"></span><br><span class=\"line\">03时41分26秒       tps      rtps      wtps   bread/s   bwrtn/s</span><br><span class=\"line\">03时41分27秒      0.00      0.00      0.00      0.00      0.00</span><br><span class=\"line\">03时41分28秒      0.00      0.00      0.00      0.00      0.00</span><br><span class=\"line\">03时41分29秒      0.00      0.00      0.00      0.00      0.00</span><br><span class=\"line\">03时41分30秒      0.00      0.00      0.00      0.00      0.00</span><br><span class=\"line\">03时41分31秒      1.98      0.00      1.98      0.00     31.68</span><br><span class=\"line\">平均时间:      0.40      0.00      0.40      0.00      6.40</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sar -b -f /var/log/sa/sa05 </span></span><br><span class=\"line\">Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)</span><br><span class=\"line\"></span><br><span class=\"line\">03时20分01秒       tps      rtps      wtps   bread/s   bwrtn/s</span><br><span class=\"line\">03时30分01秒      2.33      0.01      2.32      0.15     45.55</span><br><span class=\"line\">03时40分01秒      1.79      0.00      1.79      0.00     23.11</span><br><span class=\"line\">平均时间:      2.06      0.01      2.05      0.07     34.33</span><br></pre></td></tr></table></figure></li></ul><div class=\"note success\"><p>sar命令在/var/log/sa/目录下除了生成sa[n]文件外，在第二天还会生成sar[n]文件，两个文件的区别是sa[n]文件为二进制文件，而sar[n]则是文本文件，可以使用cat命令查看 。</p></div><h2 id=\"nload命令\"><a href=\"#nload命令\" class=\"headerlink\" title=\"nload命令\"></a><strong>nload</strong>命令</h2><ul><li><p><code>nload</code>默认也是没有安装，需要安装<code>epel-release</code>扩展源再安装<code>nload</code>软件包；</p></li><li><p>执行<code>nload</code>命令，可以动态的显示网卡信息：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/nload.png\" alt=\"nload\"></p><ul><li>输出界面中第一行会显示网卡的名字、ip以及当前是第几张网卡，使用向下方向键可以切换网卡，<code>q</code>键退出；</li><li>界面上半部分显示的是进入的流量，下半部分是出口流量，如果进入的流量非常大，可能服务器受到了攻击，右下角显示的信息分别是当前网络速率，平均、最小、最大速率；</li></ul></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>本文主要介绍系统管理相关的w、vmstat、top、sar、nload几个命令和它们的使用方法，这几个命令主要用来监控系统状态，如CPU使用率，系统负载，内存和进程状态等。</p>","more":"<hr><h1 id=\"监控系统状态\"><a href=\"#监控系统状态\" class=\"headerlink\" title=\"监控系统状态\"></a>监控系统状态</h1><h2 id=\"w命令\"><a href=\"#w命令\" class=\"headerlink\" title=\"w命令\"></a><strong>w</strong>命令</h2><ul><li><p><code>w</code>命令的输出如下，主要分为三个部分：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># w</span></span><br><span class=\"line\"> 01:10:04 up 16 days, 34 min,  1 user,  load average: 0.00, 0.01, 0.05</span><br><span class=\"line\">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class=\"line\">evobot   pts/0    192.168.75.254   00:58    4.00s  0.02s  0.00s sshd: evobot [priv]</span><br></pre></td></tr></table></figure><ul><li><p>第一行首先是系统时间和系统启动时间，这里是16天34分钟，然后是登录的用户数，最后一段是系统负载，有三个数字，分别表示<strong>1分钟</strong>、<strong>5分钟</strong>、<strong>15分钟</strong>时间段内，系统的负载值，负载值是单位时间内，使用CPU的进程数的平均值，系统负载的最佳状态是一分钟内与逻辑CPU个数相等的负载值；</p></li><li><p>查看逻辑CPU个数，使用命令<code>cat /proc/cpuinfo</code>，查看输出的<strong>processor</strong>的个数是多少，那么CPU个数就是多少：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat /proc/cpuinfo</span></span><br><span class=\"line\">processor\t: 0\t\t<span class=\"comment\"># 只有一个，说明CPU为一核</span></span><br><span class=\"line\">vendor_id\t: GenuineIntel</span><br><span class=\"line\">cpu family\t: 6</span><br><span class=\"line\">model\t\t: 79</span><br><span class=\"line\">model name\t: Intel(R) Xeon(R) CPU E5-26xx v4</span><br><span class=\"line\">stepping\t: 1</span><br><span class=\"line\">microcode\t: 0x1</span><br><span class=\"line\">cpu MHz\t\t: 2394.446</span><br><span class=\"line\">cache size\t: 4096 KB</span><br></pre></td></tr></table></figure></li><li><p>如果是四核CPU，那么一分钟负载最佳数值就是4，大于4说明系统负载较大，小于4说明系统比较空闲；</p></li><li><p><code>w</code>命令的第一行输出与<code>uptime</code>命令的输出相同，所以也可以使用<code>uptime</code>命令查看CPU负载：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># uptime</span></span><br><span class=\"line\"> 01:37:02 up 16 days,  1:01,  1 user,  load average: 0.00, 0.01, 0.05</span><br></pre></td></tr></table></figure></li><li><p>第二行和第三行显示当前登录的用户的一些信息，分别显示用户名，登录的tty，网络远程登录tty都是<code>pts/[n]</code>，n是一个数字，本地登录则显示<code>tty[n]</code>然后是登录用户的IP地址，登录的时间，登录用户空闲时间以及最后使用CPU的时间和运行的命令。</p></li></ul></li></ul><h2 id=\"vmstat命令\"><a href=\"#vmstat命令\" class=\"headerlink\" title=\"vmstat命令\"></a><strong>vmstat</strong>命令</h2><ul><li><p><code>vmstat</code>命令可以查看CPU，内存，swap交换分区，磁盘的io，和系统进程等相关信息；</p></li><li><p>常用的<code>vmstat</code>命令方式为<code>vmstat 1</code>，这样可以持续输出系统信息，并且也可以指定输出次数，如输出5次之后结束命令，则用法为<code>vmstat 1 5</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># vmstat 1 5</span></span><br><span class=\"line\">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class=\"line\"> r  b   swpd   free   buff  cache   si   so    bi    bo   <span class=\"keyword\">in</span>   cs us sy id wa st</span><br><span class=\"line\"> 2  0      0 512080 226420 1047608    0    0     0    19   19   27  1  0 99  0  0</span><br><span class=\"line\"> 0  0      0 512080 226420 1047608    0    0     0     0   83   88  0  0 100  0  0</span><br><span class=\"line\"> 0  0      0 512096 226420 1047608    0    0     0     0   55   53  0  0 100  0  0</span><br><span class=\"line\"> 1  0      0 512096 226420 1047608    0    0     0     0   63   66  0  0 100  0  0</span><br><span class=\"line\"> 0  0      0 512096 226420 1047608    0    0     0     0   67   70  0  0 100  0  0</span><br></pre></td></tr></table></figure></li><li><p><code>vmstat</code>命令的输出中，主要关注以下几列：</p></li></ul><style>table th{text-align:center}table th:first-of-type{width:120px}</style><table><thead><tr><th style=\"text-align:center\">常用列</th><th>输出说明</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>r</code></td><td>表示有多少个进程处于<code>run</code>运行状态，<code>run</code>状态的进程包括正在运行和排队等待CPU资源的进程,值最大与CPU核数相同</td></tr><tr><td style=\"text-align:center\"><code>b</code></td><td>表示被CPU以外资源如硬盘，网络等阻塞(block)的进程，进程等待外部资源处理，大于1需要关注</td></tr><tr><td style=\"text-align:center\"><code>swapd</code></td><td>系统使用交换空间的大小，若这一列的数值在持续变化，说明系统内存不足</td></tr><tr><td style=\"text-align:center\"><code>si &amp; so</code></td><td><code>si</code>表示有多少块(KB)数据从swap进入内存，<code>so</code>表示有多少块数据从内存出来到swap中去</td></tr><tr><td style=\"text-align:center\"><code>bi &amp; bo</code></td><td><code>bi</code>表示有多少数据从磁盘读取到内存中，<code>bo</code>表示有多少数据写入的磁盘，当<code>bi</code>、<code>bo</code> 过高时，<code>b</code>列的值也会增加，说明进程等待磁盘io被阻塞</td></tr><tr><td style=\"text-align:center\"><code>us</code></td><td>用户态占用CPU资源百分比，当数值大于50时，说明CPU资源不足</td></tr><tr><td style=\"text-align:center\"><code>sy</code></td><td>系统本身的进程占用CPU资源百分比</td></tr><tr><td style=\"text-align:center\"><code>id</code></td><td>CPU空闲资源比例，<code>us+sy+id</code>为100%</td></tr><tr><td style=\"text-align:center\"><code>wa</code></td><td>等待CPU资源的进程百分比</td></tr></tbody></table><ul><li><code>vmstat</code>主要用来判断系统的瓶颈所在，如CPU资源不足，内存资源不足等等。</li></ul><h2 id=\"top命令\"><a href=\"#top命令\" class=\"headerlink\" title=\"top命令\"></a><strong>top</strong>命令</h2><ul><li><p>top命令类似于windows中的进程管理器，可以查看系统具体运行的进程，默认运行<code>top</code>，命令输出为3秒钟刷新一次：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/top_cmd.png\" alt=\"top\"></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tasks: 152 total,   1 running, 151 sleeping,   0 stopped,   0 zombie</span><br></pre></td></tr></table></figure><ul><li>第二行显示了系统目前的进程数、正在运行的进程数和休眠的进程数，另外还会显示已经停止的进程和僵尸进程的个数，僵尸进程是指父进程因为意外等原因被终止，子进程处于无法管理的状态的进程；</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%Cpu(s):  0.0 us,  0.1 sy,  0.0 ni, 99.9 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br></pre></td></tr></table></figure><ul><li>这一行显示的CPU占用率，类似<code>vmstat</code>命令的输出，其中<code>st</code>表示被偷走的CPU百分比，例如服务器上运行的虚拟机，可能会偷走部分CPU资源；</li><li>CPU百分比中<code>us</code>和系统负载不一定相关，负载中的进程可能存在占用CPU等待的情况，所以<code>us</code>会比较低，而<code>us</code>占用高，会导致其他进程排队，从而造成系统负载高；</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KiB Mem :  3928092 total,  2185976 free,   294268 used,  1447848 buff/cache</span><br><span class=\"line\">KiB Swap:  4075516 total,  4075516 free,        0 used.  3274380 avail Mem</span><br></pre></td></tr></table></figure><ul><li>这两行输出的内容是内存和swap交换分区使用情况，主要关注<code>free</code>剩余空闲内存。</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                       </span><br><span class=\"line\">6717 evobot    20   0   42260   3844   3252 R   0.3  0.1   0:01.91 top</span><br></pre></td></tr></table></figure><ul><li><code>top</code>命令剩余的显示内容就是系统的进程，默认按照进程占用CPU百分比进行排序，每列所表示的信息如下：</li></ul></li></ul><table><thead><tr><th style=\"text-align:center\">列名</th><th style=\"text-align:center\">所表示信息</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>PID</code></td><td style=\"text-align:center\">进程ID</td></tr><tr><td style=\"text-align:center\"><code>PR</code> &amp; <code>NI</code></td><td style=\"text-align:center\">进程优先级信息</td></tr><tr><td style=\"text-align:center\"><code>RES</code></td><td style=\"text-align:center\">物理内存使用大小(KB)</td></tr><tr><td style=\"text-align:center\"><code>%CPU</code></td><td style=\"text-align:center\">CPU使用率</td></tr><tr><td style=\"text-align:center\"><code>%MEM</code></td><td style=\"text-align:center\">内存使用率</td></tr><tr><td style=\"text-align:center\"><code>COMMAND</code></td><td style=\"text-align:center\">进程命令</td></tr></tbody></table><ul><li><p><code>top</code>命令默认按照CPU使用率排序，可以键入<code>M</code>，则会按照内存使用率排序，<code>P</code>则是按照CPU使用率排序，按<code>q</code>退出top命令，按<code>1</code>则会将CPU显示单个CPU内核的占用率：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%Cpu0  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">%Cpu1  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">%Cpu2  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">%Cpu3  :  0.7 us,  0.0 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br></pre></td></tr></table></figure></li><li><p>使用<code>top -c</code>则top会显示进程的具体命令：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/top-c.png\" alt=\"top-c\"></p></li><li><p>而<code>top -bn1</code>则是静态的将所有进程列出来，适合在shell脚本中使用:</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/top-bn1.png\" alt=\"top-bn1\"></p></li></ul><hr><h1 id=\"监控网卡状态\"><a href=\"#监控网卡状态\" class=\"headerlink\" title=\"监控网卡状态\"></a>监控网卡状态</h1><h2 id=\"sar命令\"><a href=\"#sar命令\" class=\"headerlink\" title=\"sar命令\"></a><strong>sar</strong>命令</h2><ul><li><p><code>sar</code>命令如果未安装，需要安装<code>sysstat</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y sysstat</span><br></pre></td></tr></table></figure></li><li><p>直接运行<code>sar</code>命令会提示<em>无法打开 /var/log/sa/sa05: 没有那个文件或目录</em>，这是因为<code>sar</code>命令每隔十分钟会把系统状态过滤并保存在上面的目录下，<code>/var/log/sa/sa[n]</code>这里的n是以生成文件的日期的日命名，文件最多保留一个月；</p></li><li><p><code>sar -n DEV 1 10</code>用法，表示输出网卡的信息，<code>1 10</code>表示一秒输出一次，输出10次，与<code>vmstat 1 5</code>的用法类似：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/sar-n.png\" alt=\"sar-n\"></p><ul><li>图片的输出中，第一列是时间，第二列是网卡名，主要关注下面这几列：<code>rxpck/s</code>是每秒接收到数据包，单位是个，<code>txpck/s</code>是发送的数据表，<code>rxkB/s</code>和<code>txkB/s</code>则分别表示每秒接收和发送的数据量，单位为KB。</li><li>实际运维中，需要关注接收的数据包和接收的数据量，如果数据过高，可能服务器受到了攻击，另外也要关注网卡的带宽是否被跑满；</li></ul></li><li><p>使用命令<code>sar -n DEV -f /var/log/sa/sa[n]</code>可以查看指定日期的历史数据：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sar -n DEV -f /var/log/sa/sa05 </span></span><br><span class=\"line\">Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)</span><br><span class=\"line\"></span><br><span class=\"line\">03时20分01秒     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s</span><br><span class=\"line\">03时30分01秒      eth0      2.72      2.87      0.26      0.36      0.00      0.00      0.00</span><br><span class=\"line\">03时30分01秒        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class=\"line\">平均时间:      eth0      2.72      2.87      0.26      0.36      0.00      0.00      0.00</span><br><span class=\"line\">平均时间:        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br></pre></td></tr></table></figure></li><li><p><code>sar -q 1 10</code>可以查看系统的负载，输出与<code>w</code>命令的系统负载相同，一般不会使用sar命令每秒输出查看系统负载，而是使用<code>sar -q -f /var/log/sa/sa[n]</code>查看当天历史负载，也可以指定sar生成的日志文件查看之前时间的历史负载：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sar -q</span></span><br><span class=\"line\">Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)</span><br><span class=\"line\"></span><br><span class=\"line\">03时20分01秒   runq-sz  plist-sz   ldavg-1   ldavg-5  ldavg-15   blocked</span><br><span class=\"line\">03时30分01秒         2        90      0.00      0.01      0.05         0</span><br><span class=\"line\">平均时间:         2        90      0.00      0.01      0.05         0</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sar -q -f /var/log/sa/sa05 </span></span><br><span class=\"line\">Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)</span><br><span class=\"line\"></span><br><span class=\"line\">03时20分01秒   runq-sz  plist-sz   ldavg-1   ldavg-5  ldavg-15   blocked</span><br><span class=\"line\">03时30分01秒         2        90      0.00      0.01      0.05         0</span><br><span class=\"line\">03时40分01秒         2        89      0.00      0.01      0.05         0</span><br><span class=\"line\">平均时间:         2        90      0.00      0.01      0.05         0</span><br></pre></td></tr></table></figure></li><li><p><code>sar -b</code>可以查看磁盘的读写信息：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sar -b</span></span><br><span class=\"line\">Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)</span><br><span class=\"line\"></span><br><span class=\"line\">03时20分01秒       tps      rtps      wtps   bread/s   bwrtn/s</span><br><span class=\"line\">03时30分01秒      2.33      0.01      2.32      0.15     45.55</span><br><span class=\"line\">03时40分01秒      1.79      0.00      1.79      0.00     23.11</span><br><span class=\"line\">平均时间:      2.06      0.01      2.05      0.07     34.33</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sar -b 1 5</span></span><br><span class=\"line\">Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)</span><br><span class=\"line\"></span><br><span class=\"line\">03时41分26秒       tps      rtps      wtps   bread/s   bwrtn/s</span><br><span class=\"line\">03时41分27秒      0.00      0.00      0.00      0.00      0.00</span><br><span class=\"line\">03时41分28秒      0.00      0.00      0.00      0.00      0.00</span><br><span class=\"line\">03时41分29秒      0.00      0.00      0.00      0.00      0.00</span><br><span class=\"line\">03时41分30秒      0.00      0.00      0.00      0.00      0.00</span><br><span class=\"line\">03时41分31秒      1.98      0.00      1.98      0.00     31.68</span><br><span class=\"line\">平均时间:      0.40      0.00      0.40      0.00      6.40</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sar -b -f /var/log/sa/sa05 </span></span><br><span class=\"line\">Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月05日 \t_x86_64_\t(1 CPU)</span><br><span class=\"line\"></span><br><span class=\"line\">03时20分01秒       tps      rtps      wtps   bread/s   bwrtn/s</span><br><span class=\"line\">03时30分01秒      2.33      0.01      2.32      0.15     45.55</span><br><span class=\"line\">03时40分01秒      1.79      0.00      1.79      0.00     23.11</span><br><span class=\"line\">平均时间:      2.06      0.01      2.05      0.07     34.33</span><br></pre></td></tr></table></figure></li></ul><div class=\"note success\"><p>sar命令在/var/log/sa/目录下除了生成sa[n]文件外，在第二天还会生成sar[n]文件，两个文件的区别是sa[n]文件为二进制文件，而sar[n]则是文本文件，可以使用cat命令查看 。</p></div><h2 id=\"nload命令\"><a href=\"#nload命令\" class=\"headerlink\" title=\"nload命令\"></a><strong>nload</strong>命令</h2><ul><li><p><code>nload</code>默认也是没有安装，需要安装<code>epel-release</code>扩展源再安装<code>nload</code>软件包；</p></li><li><p>执行<code>nload</code>命令，可以动态的显示网卡信息：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/nload.png\" alt=\"nload\"></p><ul><li>输出界面中第一行会显示网卡的名字、ip以及当前是第几张网卡，使用向下方向键可以切换网卡，<code>q</code>键退出；</li><li>界面上半部分显示的是进入的流量，下半部分是出口流量，如果进入的流量非常大，可能服务器受到了攻击，右下角显示的信息分别是当前网络速率，平均、最小、最大速率；</li></ul></li></ul><hr><!-- rebuild by neat -->"},{"title":"Linux日常运维(三)——网络相关命令","author":"Evobot","abbrlink":"e1f132a7","date":"2018-05-08T13:03:49.000Z","image":null,"_content":"\n\n\n本文主要介绍Linux网络相关的知识，包括防火墙、路由等方面的配置和用法以及设置DNS，设定IP等。\n\n<!--more-->\n\n---\n\n# Linux网络相关命令\n\n## ifconfig命令\n\n- Centos7默认没有`ifconfig`命令，使用钱需要安装`net-tools`软件包：\n\n  ```bash\n  # ifconfig \n  eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n          inet 10.139.151.2  netmask 255.255.224.0  broadcast 10.139.159.255\n          ether 52:54:00:3f:03:93  txqueuelen 1000  (Ethernet)\n          RX packets 4817340  bytes 563694620 (537.5 MiB)\n          RX errors 0  dropped 0  overruns 0  frame 0\n          TX packets 5154346  bytes 703940024 (671.3 MiB)\n          TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n  lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\n          inet 127.0.0.1  netmask 255.0.0.0\n          loop  txqueuelen 1  (Local Loopback)\n          RX packets 546  bytes 30132 (29.4 KiB)\n          RX errors 0  dropped 0  overruns 0  frame 0\n          TX packets 546  bytes 30132 (29.4 KiB)\n          TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n  ```\n\n- `ifconfig -a`用来在网卡没有ip或者网卡down掉时，同样将网卡信息显示出来。\n\n## ifup/ifdown命令\n\n- `ifdown`用来将网卡状态转为down状态，命令为`ifdown ens33`;\n\n- `ifup`用来将网卡状态置为up状态，命令为`ifup ens33`。\n\n- 在远程连接服务器时，如果对网卡进行了配置，如ip，网关等，不能直接使用`ifdown`关闭网卡，而应该`ifdown ens33 && ifup ens33`这样使用，避免网卡down了之后网络无法恢复。\n\n\n## 增加虚拟网卡\n\n- 增加虚拟网卡可以为设备增加ip，具体操作为复制原ens33的网卡配置文件：\n\n  ```bash\n  # cp /etc/sysconfig/network-scripts/ifcfg-eth0 /etc/sysconfig/network-scripts/ifcfg-eth0\\:0\n  ```\n\n- 编辑`ifcfg-eth0:0`配置文件：\n\n  ```bash\n  BOOTPROTO=none\n  DEFROUTE=yes\n  # 修改网卡名\n  DEVICE=eth0:0\n  # 配置网关\n  GATEWAY=192.168.199.1\n  HWADDR=52:54:00:3f:03:93\n  # 配置ip地址及掩码\n  IPADDR=192.168.199.133\n  NETMASK=255.255.225.0\n  NM_CONTROLLED=no\n  ONBOOT=yes\n  TYPE=Ethernet\n  USERCTL=no\n  ```\n\n- 保存退出后执行`ifdown eth0 && ifup eth0`命令后网址就会生效：\n\n  ```bash\n  [root@evobot network-scripts]# ifconfig \n  eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n          inet 10.139.151.2  netmask 255.255.224.0  broadcast 10.139.159.255\n          ether 52:54:00:3f:03:93  txqueuelen 1000  (Ethernet)\n          RX packets 4820651  bytes 564010062 (537.8 MiB)\n          RX errors 0  dropped 0  overruns 0  frame 0\n          TX packets 5157474  bytes 704334346 (671.7 MiB)\n          TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n  # 新的网卡及地址已生效\n  eth0:0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n          inet 192.168.199.133  netmask 255.255.255.0  broadcast 192.168.199.255\n          ether 52:54:00:3f:03:93  txqueuelen 1000  (Ethernet)\n  ```\n\n## 网卡状态查看\n\n- `mii-tool`命令用来查看网卡是否连接，状态是否正常：\n\n  ```bash\n  # mii-tool enp1s0 \n  enp1s0: negotiated 1000baseT-FD flow-control, link ok\n  ```\n\n- 如果提示**Operation not supported**，也可以使用`ethtool`命令：\n\n  ```bash\n  # ethtool enp1s0\n  Settings for enp1s0:\n  \tSupported ports: [ TP MII ]\n  \tSupported link modes:   10baseT/Half 10baseT/Full \n  \t                        100baseT/Half 100baseT/Full \n  \t                        1000baseT/Half 1000baseT/Full \n  \tSupported pause frame use: No\n  \tSupports auto-negotiation: Yes\n  \tAdvertised link modes:  10baseT/Half 10baseT/Full \n  \t                        100baseT/Half 100baseT/Full \n  \t                        1000baseT/Half 1000baseT/Full \n  \tAdvertised pause frame use: Symmetric Receive-only\n  \tAdvertised auto-negotiation: Yes\n  \tLink partner advertised link modes:  10baseT/Half 10baseT/Full \n  \t                                     100baseT/Half 100baseT/Full \n  \t                                     1000baseT/Full \n  \tLink partner advertised pause frame use: Symmetric\n  \tLink partner advertised auto-negotiation: Yes\n  \tSpeed: 1000Mb/s\n  \tDuplex: Full\n  \tPort: MII\n  \tPHYAD: 0\n  \tTransceiver: internal\n  \tAuto-negotiation: on\n  \tSupports Wake-on: pumbg\n  \tWake-on: g\n  \tCurrent message level: 0x00000033 (51)\n  \t\t\t       drv probe ifdown ifup\n  \tLink detected: yes\t#表示连接状态正常\n  ```\n\n## 设置主机名\n\n- Centos7设置主机名使用`hostnamectl`命令，用法为`hostnamectl set-hostname [hostname]`：\n\n  ```bash\n  [root@evobot ~]# hostnamectl set-hostname evobot-cn\n  [root@evobot ~]# bash\t# 新开一个bash生效\n  [root@evobot-cn ~]# \n  ```\n\n- hostname的配置文件是`/etc/hostname`：\n\n  ```bash\n  [root@evobot-cn ~]# cat /etc/hostname \n  evobot-cn\n  ```\n\n## DNS设置\n\n- Centos7的DNS配置在配置文件`/etc/resolv.conf`中：\n\n  ```bash\n  [root@evobot ~]# cat /etc/resolv.conf \n  # Your system has been configured with 'manage-resolv-conf' set to true.\n  # As a result, cloud-init has written this file with configuration data\n  # that it has been provided. Cloud-init, by default, will write this file\n  # a single time (PER_ONCE).\n  #\n  nameserver 100.88.222.14\n  nameserver 100.88.222.16\t\n  ```\n\n- DNS在网卡配置文件中添加DNS即可，临时更改也可以更改`resolv.conf`文件，网卡配置如下：\n\n  ```bash\n  TYPE=Ethernet\n  BOOTPROTO=static\n  DEFROUTE=yes\n  PEERDNS=yes\n  PEERROUTES=yes\n  IPV4_FAILURE_FATAL=no\n  IPV6INIT=yes\n  IPV6_AUTOCONF=yes\n  IPV6_DEFROUTE=yes\n  IPV6_PEERDNS=yes\n  IPV6_PEERROUTES=yes\n  IPV6_FAILURE_FATAL=no\n  IPV6_ADDR_GEN_MODE=stable-privacy\n  NAME=enp0s3\n  UUID=fc2ccabb-fec8-4b8b-a27e-0f5f101310ca\n  DEVICE=enp0s3\n  ONBOOT=yes\n  IPADDR=192.168.199.224\n  NETMASK=255.255.255.0\n  GATEWAY=192.168.199.1\n  DNS1=114.114.114.114\n  # 增加一行DNS1，即可为网卡添加一个DNS\n  ```\n\n## hosts文件\n\n- Linux中的hosts文件如Windows中相同，主要用来为指定的域名指定对应的ip地址，文件格式左边为ip，右边为域名，且一个ip可以配置多个域名，当有一个域名对应多个ip时，最后面的行才生效：\t\n\n  ```bash\n  # cat /etc/hosts\n  127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n  ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n  192.168.199.224 www.baidu.com\n\n  # ping www.baidu.com\n  PING www.baidu.com (192.168.199.224) 56(84) bytes of data.\n  64 bytes from www.baidu.com (192.168.199.224): icmp_seq=1 ttl=64 time=0.061 ms\n  64 bytes from www.baidu.com (192.168.199.224): icmp_seq=2 ttl=64 time=0.052 ms\n  ^C\n  --- www.baidu.com ping statistics ---\n  2 packets transmitted, 2 received, 0% packet loss, time 999ms\n  rtt min/avg/max/mdev = 0.052/0.056/0.061/0.008 ms\n  ```\n\n# netfilter防火墙\n\n## 开启netfilter服务\n\n- 临时关闭selinux的命令为`setenforce 0`，永久关闭则是修改`/etc/selinux/config`文件：\n\n  ```bash\n  # 修改SELINUX为disabled即可\n  SELINUX=disabled\n  SELINUXTYPE=targeted\n  ```\n\n  ```bash\n  $ getenforce \n  Permissive\n  # Permissive在遇到安全问题需要阻断时，不会真正阻断，只会进行记录\n  ```\n  > 关于selinux，可以参考[SELinux：linux内核的安全保镖](http://os.51cto.com/art/201209/355490.htm)一文，或者[下载相应的电子书](https://pan.baidu.com/s/1jGGdExK)。\n\n- netfilter防火墙是Centos7之前的版本默认的防火墙，在Centos7中netfilter是关闭状态的，Centos7中默认的防火墙时firewalld，所以使用netfilter前需要关闭firewalld：\n\n  ```bash\n  // 关闭firewalld自启动\n  # systemctl disable firewalld.service\n  // 停止firewalld服务\n  # systemctl stop firewalld.service \n  ```\n\n- 开启netfilter前需要安装`iptables-services`软件包：\n\n  ```bash\n  // 安装iptables\n  # yum install -y iptables-services\n  // 开启iptables服务\n  # systemctl start iptables.service\n  ```\n\n- 使用命令`ipstables -nvL`可以查看iptables自带的一些规则：\n\n  ```bash\n  [root@localhost ~]# iptables -nvL\n  Chain INPUT (policy ACCEPT 0 packets, 0 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n    135  9408 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED\n      0     0 ACCEPT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0           \n      0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0           \n      0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:22\n      7  3488 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited\n\n  Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n      0     0 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited\n\n  Chain OUTPUT (policy ACCEPT 72 packets, 7264 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n  ```\n\n## netfilter 5表5链\n\n- netfilter默认有5个表(table)，分别是**filter**、**nat** 、**mangle**、**raw**、**security**表；\n- filter表主要起过滤数据包作用，包含3个内置的链，分别是**INPUT**、**FORWARD**和**OUTPUT**链：\n  - INPUT：用来检查进入本机的数据包，如果发现可疑的源IP，则会禁止掉；\n  - FORWARD：是对需要转发的数据包进行处理，会对目的地址非本机的数据包进行转发，或者对目的地址进行更改；\n  - OUTPUT：是对本机产生的需要对外发送的数据包进行处理，例如发送给某个IP的数据包，但对方IP被加入到新名单，则OUTPUT会将其禁止。\n- nat表中同样具有3个链，分别是**PERROUTING**、**OUTPUT**、**POSTROUTING**，该表主要用在如路由器，端口映射等：\n  - PERROUTING：在数据包进来的时候对其进行更改；\n  - POSTROUTING：在数据包出去的时候对其进行更改；\n  - OUTPUT：与filter表的OUTPUT作用相同。\n- 其余的mangle、raw、security表很少使用，这里不做介绍。\n\n## iptables数据处理流程\n\n- iptables的处理流程可以参考下面的流程图：\n\n![iptables流程](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/iptables.png)\n\n  - 当数据包进入网卡时，首先会进入`PERROUTING`链，内核根据数据包目的IP判断是否需要转发；\n  - 如果数据包是进入本机的，则会继续到达`INPUT`链，数据包到`INPUT`链后，任何进程都可以收到数据包，本机上的程序可以发送数据包，这些数据包会经过`OUTPUT`链，然后到达`POSTROUTING`链发送出去；\n  - 如果数据包不是进入本机的，时需要转发出去的，且内核允许转发，数据包就会进入`FORWARD`链，然后到达`POSTROUTING`链输出。\n\n## iptables语法\n\n### 查看、保存、清空规则\n\n- `iptables -nvL`可以看到默认规则，而默认规则保存在`/etc/sysconfig/iptables`文件内：\n\n  ```bash\n  [root@localhost ~]# cat /etc/sysconfig/iptables\n  # sample configuration for iptables service\n  # you can edit this manually or use system-config-firewall\n  # please do not ask us to add additional ports/services to this default configuration\n  *filter\n  :INPUT ACCEPT [0:0]\n  :FORWARD ACCEPT [0:0]\n  :OUTPUT ACCEPT [0:0]\n  -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n  -A INPUT -p icmp -j ACCEPT\n  -A INPUT -i lo -j ACCEPT\n  -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\n  -A INPUT -j REJECT --reject-with icmp-host-prohibited\n  -A FORWARD -j REJECT --reject-with icmp-host-prohibited\n  COMMIT\n  ```\n\n- 清空iptables所以规则，使用`iptables -F`，但是这样只能临时清空，实际配置文件中还存在，重启之后会恢复：\n\n  ```bash\n  [root@localhost ~]# iptables -F\n  [root@localhost ~]# iptables -nvL\n  Chain INPUT (policy ACCEPT 31 packets, 2152 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n\n  Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n\n  Chain OUTPUT (policy ACCEPT 16 packets, 1472 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n  ```\n\n- 想要保存当前的规则，需要执行`service iptables save`命令；\n\n- 上面的操作所改动的都是`filter`表，想要操作指定表，需要使用`iptables -t [table] -nvL`:\n\n  ```bash\n  [root@localhost ~]# iptables -t nat -nvL\n  Chain PREROUTING (policy ACCEPT 0 packets, 0 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n\n  Chain INPUT (policy ACCEPT 0 packets, 0 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n\n  Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n\n  Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)\n   pkts bytes target     prot opt in     out     source               destination\n  ```\n\n- 在查看默认规则时，命令输出有这样两行：\n\n  ```bash\n   pkts bytes target     prot opt in     out     source               destination         \n     25  1732 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED\n  ```\n\n  - 这里显示了数据包的数量和字节大小，清空这个数据使用`iptables -Z`将其清零。\n\n### 增加规则\n\n```bash\n[root@localhost ~]# iptables -A INPUT -s 192.168.188.1 -p tcp --sport 1234 -d 192.168.188.128 --dport 80 -j DROP\n```\n\n{% note danger %}\n\n`-A`表示增加规则，会将规则添加在最后，`INPUT`表示指定为INPUT链，未使用`-t`指定表名，默认操作的是`filter`表，`-s`表示源IP地址，`-p`指定链接的协议是tcp或udp，指定端口时，必须指定协议，`--sport`指定源端口；\n\n`-d`指定目的IP地址，`--dport`指定目的端口，`-j`指定要执行的操作，操作有`DROP`和`REJECT`，DROP表示丢弃，REJECT会在查看数据包之后拒绝并丢弃，一般使用DROP\n\n{% endnote %}\n\n```bash\n[root@localhost ~]# iptables -I INPUT -p tcp --dport 80 -j DROP\n```\n\n{% note danger %}\n\n这里`-I`表示插入规则，使用`-I`插入规则，规则会在iptables规则的最前面，而`-A`则增加在最后面。\n\n规则的前后，会有限过滤前面的规则，比如一个数据包同时满足两条规则，但会优先匹配在前面的一条，而不会再匹配后面的规则。\n\n{% endnote %}\n\n```bash\n[root@localhost ~]# iptables -I INPUT -s 192.168.1.1/24 -i eth0 -j ACCEPT \n```\n\n{% note danger %}\n\n`-i`作用是指定网卡，这里规则的含义是允许来自eth0网卡且源IP为192.168.1.1/24的数据包进入。\n\n{% endnote %}\n\n\n\n### 删除规则\n\n```bash\n[root@localhost ~]# iptables -D INPUT -p tcp --dport 80 -j DROP\n[root@localhost ~]# iptables -D INPUT -s 192.168.188.1 -p tcp --sport 1234 -d 192.168.188.128 --dport 80 -j DROP\n```\n\n{% note danger %}\n\n使用`-D`选项可以将之前的规则删除，除了选项为`-D`之外，其他规则内容与增加规则时相同。\n\n{% endnote %}\n\n- 使用`iptables -nvL --line-number`可以在每条规则前输出相应的编号，使用编号可以方便我们删除对应的规则：\n\n  ```bash\n  [root@localhost ~]# iptables -nvL --line-number\n  Chain INPUT (policy ACCEPT 0 packets, 0 bytes)\n  num   pkts bytes target     prot opt in     out     source               destination         \n  1      813 57860 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED\n  2        0     0 ACCEPT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0           \n  3        0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0           \n  4        0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:22\n  5      191 98123 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited\n  6        0     0 DROP       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0  \n  ```\n\n  ```bash\n  [root@localhost ~]# iptables -D INPUT 6\n  # 使用编号对规则进行删除\n  ```\n\n### 更改默认策略\n\n- 在iptables输出的规则中，每个链表后面会有一行`policy ACCEPT 0 packets, 0 bytes`，这表示默认策略为ACCEPT，即数据包没有匹配的规则时，就按照默认策略执行；\n\n- 更改默认策略，使用iptables的`-P`选项：\n\n  ```bash\n  [root@localhost ~]# iptables -P FORWARD DROP\n  Chain FORWARD (policy DROP 0 packets, 0 bytes)\n  ```\n\n- 由于更改默认策略容易导致一些问题，一般不建议更改默认策略，保持默认即可。\n\n---","source":"_posts/Linux日常运维(三)—网络相关命令.md","raw":"---\ntitle: Linux日常运维(三)——网络相关命令\nauthor: Evobot\nabbrlink: e1f132a7\ndate: 2018-05-08 21:03:49\ncategories: Centos7\ntags: [Linux, Centos]\nimage:\n---\n\n\n\n本文主要介绍Linux网络相关的知识，包括防火墙、路由等方面的配置和用法以及设置DNS，设定IP等。\n\n<!--more-->\n\n---\n\n# Linux网络相关命令\n\n## ifconfig命令\n\n- Centos7默认没有`ifconfig`命令，使用钱需要安装`net-tools`软件包：\n\n  ```bash\n  # ifconfig \n  eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n          inet 10.139.151.2  netmask 255.255.224.0  broadcast 10.139.159.255\n          ether 52:54:00:3f:03:93  txqueuelen 1000  (Ethernet)\n          RX packets 4817340  bytes 563694620 (537.5 MiB)\n          RX errors 0  dropped 0  overruns 0  frame 0\n          TX packets 5154346  bytes 703940024 (671.3 MiB)\n          TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n  lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\n          inet 127.0.0.1  netmask 255.0.0.0\n          loop  txqueuelen 1  (Local Loopback)\n          RX packets 546  bytes 30132 (29.4 KiB)\n          RX errors 0  dropped 0  overruns 0  frame 0\n          TX packets 546  bytes 30132 (29.4 KiB)\n          TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n  ```\n\n- `ifconfig -a`用来在网卡没有ip或者网卡down掉时，同样将网卡信息显示出来。\n\n## ifup/ifdown命令\n\n- `ifdown`用来将网卡状态转为down状态，命令为`ifdown ens33`;\n\n- `ifup`用来将网卡状态置为up状态，命令为`ifup ens33`。\n\n- 在远程连接服务器时，如果对网卡进行了配置，如ip，网关等，不能直接使用`ifdown`关闭网卡，而应该`ifdown ens33 && ifup ens33`这样使用，避免网卡down了之后网络无法恢复。\n\n\n## 增加虚拟网卡\n\n- 增加虚拟网卡可以为设备增加ip，具体操作为复制原ens33的网卡配置文件：\n\n  ```bash\n  # cp /etc/sysconfig/network-scripts/ifcfg-eth0 /etc/sysconfig/network-scripts/ifcfg-eth0\\:0\n  ```\n\n- 编辑`ifcfg-eth0:0`配置文件：\n\n  ```bash\n  BOOTPROTO=none\n  DEFROUTE=yes\n  # 修改网卡名\n  DEVICE=eth0:0\n  # 配置网关\n  GATEWAY=192.168.199.1\n  HWADDR=52:54:00:3f:03:93\n  # 配置ip地址及掩码\n  IPADDR=192.168.199.133\n  NETMASK=255.255.225.0\n  NM_CONTROLLED=no\n  ONBOOT=yes\n  TYPE=Ethernet\n  USERCTL=no\n  ```\n\n- 保存退出后执行`ifdown eth0 && ifup eth0`命令后网址就会生效：\n\n  ```bash\n  [root@evobot network-scripts]# ifconfig \n  eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n          inet 10.139.151.2  netmask 255.255.224.0  broadcast 10.139.159.255\n          ether 52:54:00:3f:03:93  txqueuelen 1000  (Ethernet)\n          RX packets 4820651  bytes 564010062 (537.8 MiB)\n          RX errors 0  dropped 0  overruns 0  frame 0\n          TX packets 5157474  bytes 704334346 (671.7 MiB)\n          TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n  # 新的网卡及地址已生效\n  eth0:0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n          inet 192.168.199.133  netmask 255.255.255.0  broadcast 192.168.199.255\n          ether 52:54:00:3f:03:93  txqueuelen 1000  (Ethernet)\n  ```\n\n## 网卡状态查看\n\n- `mii-tool`命令用来查看网卡是否连接，状态是否正常：\n\n  ```bash\n  # mii-tool enp1s0 \n  enp1s0: negotiated 1000baseT-FD flow-control, link ok\n  ```\n\n- 如果提示**Operation not supported**，也可以使用`ethtool`命令：\n\n  ```bash\n  # ethtool enp1s0\n  Settings for enp1s0:\n  \tSupported ports: [ TP MII ]\n  \tSupported link modes:   10baseT/Half 10baseT/Full \n  \t                        100baseT/Half 100baseT/Full \n  \t                        1000baseT/Half 1000baseT/Full \n  \tSupported pause frame use: No\n  \tSupports auto-negotiation: Yes\n  \tAdvertised link modes:  10baseT/Half 10baseT/Full \n  \t                        100baseT/Half 100baseT/Full \n  \t                        1000baseT/Half 1000baseT/Full \n  \tAdvertised pause frame use: Symmetric Receive-only\n  \tAdvertised auto-negotiation: Yes\n  \tLink partner advertised link modes:  10baseT/Half 10baseT/Full \n  \t                                     100baseT/Half 100baseT/Full \n  \t                                     1000baseT/Full \n  \tLink partner advertised pause frame use: Symmetric\n  \tLink partner advertised auto-negotiation: Yes\n  \tSpeed: 1000Mb/s\n  \tDuplex: Full\n  \tPort: MII\n  \tPHYAD: 0\n  \tTransceiver: internal\n  \tAuto-negotiation: on\n  \tSupports Wake-on: pumbg\n  \tWake-on: g\n  \tCurrent message level: 0x00000033 (51)\n  \t\t\t       drv probe ifdown ifup\n  \tLink detected: yes\t#表示连接状态正常\n  ```\n\n## 设置主机名\n\n- Centos7设置主机名使用`hostnamectl`命令，用法为`hostnamectl set-hostname [hostname]`：\n\n  ```bash\n  [root@evobot ~]# hostnamectl set-hostname evobot-cn\n  [root@evobot ~]# bash\t# 新开一个bash生效\n  [root@evobot-cn ~]# \n  ```\n\n- hostname的配置文件是`/etc/hostname`：\n\n  ```bash\n  [root@evobot-cn ~]# cat /etc/hostname \n  evobot-cn\n  ```\n\n## DNS设置\n\n- Centos7的DNS配置在配置文件`/etc/resolv.conf`中：\n\n  ```bash\n  [root@evobot ~]# cat /etc/resolv.conf \n  # Your system has been configured with 'manage-resolv-conf' set to true.\n  # As a result, cloud-init has written this file with configuration data\n  # that it has been provided. Cloud-init, by default, will write this file\n  # a single time (PER_ONCE).\n  #\n  nameserver 100.88.222.14\n  nameserver 100.88.222.16\t\n  ```\n\n- DNS在网卡配置文件中添加DNS即可，临时更改也可以更改`resolv.conf`文件，网卡配置如下：\n\n  ```bash\n  TYPE=Ethernet\n  BOOTPROTO=static\n  DEFROUTE=yes\n  PEERDNS=yes\n  PEERROUTES=yes\n  IPV4_FAILURE_FATAL=no\n  IPV6INIT=yes\n  IPV6_AUTOCONF=yes\n  IPV6_DEFROUTE=yes\n  IPV6_PEERDNS=yes\n  IPV6_PEERROUTES=yes\n  IPV6_FAILURE_FATAL=no\n  IPV6_ADDR_GEN_MODE=stable-privacy\n  NAME=enp0s3\n  UUID=fc2ccabb-fec8-4b8b-a27e-0f5f101310ca\n  DEVICE=enp0s3\n  ONBOOT=yes\n  IPADDR=192.168.199.224\n  NETMASK=255.255.255.0\n  GATEWAY=192.168.199.1\n  DNS1=114.114.114.114\n  # 增加一行DNS1，即可为网卡添加一个DNS\n  ```\n\n## hosts文件\n\n- Linux中的hosts文件如Windows中相同，主要用来为指定的域名指定对应的ip地址，文件格式左边为ip，右边为域名，且一个ip可以配置多个域名，当有一个域名对应多个ip时，最后面的行才生效：\t\n\n  ```bash\n  # cat /etc/hosts\n  127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n  ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n  192.168.199.224 www.baidu.com\n\n  # ping www.baidu.com\n  PING www.baidu.com (192.168.199.224) 56(84) bytes of data.\n  64 bytes from www.baidu.com (192.168.199.224): icmp_seq=1 ttl=64 time=0.061 ms\n  64 bytes from www.baidu.com (192.168.199.224): icmp_seq=2 ttl=64 time=0.052 ms\n  ^C\n  --- www.baidu.com ping statistics ---\n  2 packets transmitted, 2 received, 0% packet loss, time 999ms\n  rtt min/avg/max/mdev = 0.052/0.056/0.061/0.008 ms\n  ```\n\n# netfilter防火墙\n\n## 开启netfilter服务\n\n- 临时关闭selinux的命令为`setenforce 0`，永久关闭则是修改`/etc/selinux/config`文件：\n\n  ```bash\n  # 修改SELINUX为disabled即可\n  SELINUX=disabled\n  SELINUXTYPE=targeted\n  ```\n\n  ```bash\n  $ getenforce \n  Permissive\n  # Permissive在遇到安全问题需要阻断时，不会真正阻断，只会进行记录\n  ```\n  > 关于selinux，可以参考[SELinux：linux内核的安全保镖](http://os.51cto.com/art/201209/355490.htm)一文，或者[下载相应的电子书](https://pan.baidu.com/s/1jGGdExK)。\n\n- netfilter防火墙是Centos7之前的版本默认的防火墙，在Centos7中netfilter是关闭状态的，Centos7中默认的防火墙时firewalld，所以使用netfilter前需要关闭firewalld：\n\n  ```bash\n  // 关闭firewalld自启动\n  # systemctl disable firewalld.service\n  // 停止firewalld服务\n  # systemctl stop firewalld.service \n  ```\n\n- 开启netfilter前需要安装`iptables-services`软件包：\n\n  ```bash\n  // 安装iptables\n  # yum install -y iptables-services\n  // 开启iptables服务\n  # systemctl start iptables.service\n  ```\n\n- 使用命令`ipstables -nvL`可以查看iptables自带的一些规则：\n\n  ```bash\n  [root@localhost ~]# iptables -nvL\n  Chain INPUT (policy ACCEPT 0 packets, 0 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n    135  9408 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED\n      0     0 ACCEPT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0           \n      0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0           \n      0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:22\n      7  3488 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited\n\n  Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n      0     0 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited\n\n  Chain OUTPUT (policy ACCEPT 72 packets, 7264 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n  ```\n\n## netfilter 5表5链\n\n- netfilter默认有5个表(table)，分别是**filter**、**nat** 、**mangle**、**raw**、**security**表；\n- filter表主要起过滤数据包作用，包含3个内置的链，分别是**INPUT**、**FORWARD**和**OUTPUT**链：\n  - INPUT：用来检查进入本机的数据包，如果发现可疑的源IP，则会禁止掉；\n  - FORWARD：是对需要转发的数据包进行处理，会对目的地址非本机的数据包进行转发，或者对目的地址进行更改；\n  - OUTPUT：是对本机产生的需要对外发送的数据包进行处理，例如发送给某个IP的数据包，但对方IP被加入到新名单，则OUTPUT会将其禁止。\n- nat表中同样具有3个链，分别是**PERROUTING**、**OUTPUT**、**POSTROUTING**，该表主要用在如路由器，端口映射等：\n  - PERROUTING：在数据包进来的时候对其进行更改；\n  - POSTROUTING：在数据包出去的时候对其进行更改；\n  - OUTPUT：与filter表的OUTPUT作用相同。\n- 其余的mangle、raw、security表很少使用，这里不做介绍。\n\n## iptables数据处理流程\n\n- iptables的处理流程可以参考下面的流程图：\n\n![iptables流程](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/iptables.png)\n\n  - 当数据包进入网卡时，首先会进入`PERROUTING`链，内核根据数据包目的IP判断是否需要转发；\n  - 如果数据包是进入本机的，则会继续到达`INPUT`链，数据包到`INPUT`链后，任何进程都可以收到数据包，本机上的程序可以发送数据包，这些数据包会经过`OUTPUT`链，然后到达`POSTROUTING`链发送出去；\n  - 如果数据包不是进入本机的，时需要转发出去的，且内核允许转发，数据包就会进入`FORWARD`链，然后到达`POSTROUTING`链输出。\n\n## iptables语法\n\n### 查看、保存、清空规则\n\n- `iptables -nvL`可以看到默认规则，而默认规则保存在`/etc/sysconfig/iptables`文件内：\n\n  ```bash\n  [root@localhost ~]# cat /etc/sysconfig/iptables\n  # sample configuration for iptables service\n  # you can edit this manually or use system-config-firewall\n  # please do not ask us to add additional ports/services to this default configuration\n  *filter\n  :INPUT ACCEPT [0:0]\n  :FORWARD ACCEPT [0:0]\n  :OUTPUT ACCEPT [0:0]\n  -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n  -A INPUT -p icmp -j ACCEPT\n  -A INPUT -i lo -j ACCEPT\n  -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\n  -A INPUT -j REJECT --reject-with icmp-host-prohibited\n  -A FORWARD -j REJECT --reject-with icmp-host-prohibited\n  COMMIT\n  ```\n\n- 清空iptables所以规则，使用`iptables -F`，但是这样只能临时清空，实际配置文件中还存在，重启之后会恢复：\n\n  ```bash\n  [root@localhost ~]# iptables -F\n  [root@localhost ~]# iptables -nvL\n  Chain INPUT (policy ACCEPT 31 packets, 2152 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n\n  Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n\n  Chain OUTPUT (policy ACCEPT 16 packets, 1472 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n  ```\n\n- 想要保存当前的规则，需要执行`service iptables save`命令；\n\n- 上面的操作所改动的都是`filter`表，想要操作指定表，需要使用`iptables -t [table] -nvL`:\n\n  ```bash\n  [root@localhost ~]# iptables -t nat -nvL\n  Chain PREROUTING (policy ACCEPT 0 packets, 0 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n\n  Chain INPUT (policy ACCEPT 0 packets, 0 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n\n  Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n\n  Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)\n   pkts bytes target     prot opt in     out     source               destination\n  ```\n\n- 在查看默认规则时，命令输出有这样两行：\n\n  ```bash\n   pkts bytes target     prot opt in     out     source               destination         \n     25  1732 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED\n  ```\n\n  - 这里显示了数据包的数量和字节大小，清空这个数据使用`iptables -Z`将其清零。\n\n### 增加规则\n\n```bash\n[root@localhost ~]# iptables -A INPUT -s 192.168.188.1 -p tcp --sport 1234 -d 192.168.188.128 --dport 80 -j DROP\n```\n\n{% note danger %}\n\n`-A`表示增加规则，会将规则添加在最后，`INPUT`表示指定为INPUT链，未使用`-t`指定表名，默认操作的是`filter`表，`-s`表示源IP地址，`-p`指定链接的协议是tcp或udp，指定端口时，必须指定协议，`--sport`指定源端口；\n\n`-d`指定目的IP地址，`--dport`指定目的端口，`-j`指定要执行的操作，操作有`DROP`和`REJECT`，DROP表示丢弃，REJECT会在查看数据包之后拒绝并丢弃，一般使用DROP\n\n{% endnote %}\n\n```bash\n[root@localhost ~]# iptables -I INPUT -p tcp --dport 80 -j DROP\n```\n\n{% note danger %}\n\n这里`-I`表示插入规则，使用`-I`插入规则，规则会在iptables规则的最前面，而`-A`则增加在最后面。\n\n规则的前后，会有限过滤前面的规则，比如一个数据包同时满足两条规则，但会优先匹配在前面的一条，而不会再匹配后面的规则。\n\n{% endnote %}\n\n```bash\n[root@localhost ~]# iptables -I INPUT -s 192.168.1.1/24 -i eth0 -j ACCEPT \n```\n\n{% note danger %}\n\n`-i`作用是指定网卡，这里规则的含义是允许来自eth0网卡且源IP为192.168.1.1/24的数据包进入。\n\n{% endnote %}\n\n\n\n### 删除规则\n\n```bash\n[root@localhost ~]# iptables -D INPUT -p tcp --dport 80 -j DROP\n[root@localhost ~]# iptables -D INPUT -s 192.168.188.1 -p tcp --sport 1234 -d 192.168.188.128 --dport 80 -j DROP\n```\n\n{% note danger %}\n\n使用`-D`选项可以将之前的规则删除，除了选项为`-D`之外，其他规则内容与增加规则时相同。\n\n{% endnote %}\n\n- 使用`iptables -nvL --line-number`可以在每条规则前输出相应的编号，使用编号可以方便我们删除对应的规则：\n\n  ```bash\n  [root@localhost ~]# iptables -nvL --line-number\n  Chain INPUT (policy ACCEPT 0 packets, 0 bytes)\n  num   pkts bytes target     prot opt in     out     source               destination         \n  1      813 57860 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED\n  2        0     0 ACCEPT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0           \n  3        0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0           \n  4        0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:22\n  5      191 98123 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited\n  6        0     0 DROP       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0  \n  ```\n\n  ```bash\n  [root@localhost ~]# iptables -D INPUT 6\n  # 使用编号对规则进行删除\n  ```\n\n### 更改默认策略\n\n- 在iptables输出的规则中，每个链表后面会有一行`policy ACCEPT 0 packets, 0 bytes`，这表示默认策略为ACCEPT，即数据包没有匹配的规则时，就按照默认策略执行；\n\n- 更改默认策略，使用iptables的`-P`选项：\n\n  ```bash\n  [root@localhost ~]# iptables -P FORWARD DROP\n  Chain FORWARD (policy DROP 0 packets, 0 bytes)\n  ```\n\n- 由于更改默认策略容易导致一些问题，一般不建议更改默认策略，保持默认即可。\n\n---","slug":"Linux日常运维(三)—网络相关命令","published":1,"updated":"2018-06-02T13:01:29.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazao001zu1jxlmlcz0mz","content":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>本文主要介绍Linux网络相关的知识，包括防火墙、路由等方面的配置和用法以及设置DNS，设定IP等。</p><a id=\"more\"></a><hr><h1 id=\"Linux网络相关命令\"><a href=\"#Linux网络相关命令\" class=\"headerlink\" title=\"Linux网络相关命令\"></a>Linux网络相关命令</h1><h2 id=\"ifconfig命令\"><a href=\"#ifconfig命令\" class=\"headerlink\" title=\"ifconfig命令\"></a>ifconfig命令</h2><ul><li><p>Centos7默认没有<code>ifconfig</code>命令，使用钱需要安装<code>net-tools</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ifconfig </span></span><br><span class=\"line\">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 10.139.151.2  netmask 255.255.224.0  broadcast 10.139.159.255</span><br><span class=\"line\">        ether 52:54:00:3f:03:93  txqueuelen 1000  (Ethernet)</span><br><span class=\"line\">        RX packets 4817340  bytes 563694620 (537.5 MiB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 5154346  bytes 703940024 (671.3 MiB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class=\"line\">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class=\"line\">        loop  txqueuelen 1  (Local Loopback)</span><br><span class=\"line\">        RX packets 546  bytes 30132 (29.4 KiB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 546  bytes 30132 (29.4 KiB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure></li><li><p><code>ifconfig -a</code>用来在网卡没有ip或者网卡down掉时，同样将网卡信息显示出来。</p></li></ul><h2 id=\"ifup-ifdown命令\"><a href=\"#ifup-ifdown命令\" class=\"headerlink\" title=\"ifup/ifdown命令\"></a>ifup/ifdown命令</h2><ul><li><p><code>ifdown</code>用来将网卡状态转为down状态，命令为<code>ifdown ens33</code>;</p></li><li><p><code>ifup</code>用来将网卡状态置为up状态，命令为<code>ifup ens33</code>。</p></li><li><p>在远程连接服务器时，如果对网卡进行了配置，如ip，网关等，不能直接使用<code>ifdown</code>关闭网卡，而应该<code>ifdown ens33 &amp;&amp; ifup ens33</code>这样使用，避免网卡down了之后网络无法恢复。</p></li></ul><h2 id=\"增加虚拟网卡\"><a href=\"#增加虚拟网卡\" class=\"headerlink\" title=\"增加虚拟网卡\"></a>增加虚拟网卡</h2><ul><li><p>增加虚拟网卡可以为设备增加ip，具体操作为复制原ens33的网卡配置文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cp /etc/sysconfig/network-scripts/ifcfg-eth0 /etc/sysconfig/network-scripts/ifcfg-eth0\\:0</span></span><br></pre></td></tr></table></figure></li><li><p>编辑<code>ifcfg-eth0:0</code>配置文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOTPROTO=none</span><br><span class=\"line\">DEFROUTE=yes</span><br><span class=\"line\"><span class=\"comment\"># 修改网卡名</span></span><br><span class=\"line\">DEVICE=eth0:0</span><br><span class=\"line\"><span class=\"comment\"># 配置网关</span></span><br><span class=\"line\">GATEWAY=192.168.199.1</span><br><span class=\"line\">HWADDR=52:54:00:3f:03:93</span><br><span class=\"line\"><span class=\"comment\"># 配置ip地址及掩码</span></span><br><span class=\"line\">IPADDR=192.168.199.133</span><br><span class=\"line\">NETMASK=255.255.225.0</span><br><span class=\"line\">NM_CONTROLLED=no</span><br><span class=\"line\">ONBOOT=yes</span><br><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">USERCTL=no</span><br></pre></td></tr></table></figure></li><li><p>保存退出后执行<code>ifdown eth0 &amp;&amp; ifup eth0</code>命令后网址就会生效：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot network-scripts]<span class=\"comment\"># ifconfig </span></span><br><span class=\"line\">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 10.139.151.2  netmask 255.255.224.0  broadcast 10.139.159.255</span><br><span class=\"line\">        ether 52:54:00:3f:03:93  txqueuelen 1000  (Ethernet)</span><br><span class=\"line\">        RX packets 4820651  bytes 564010062 (537.8 MiB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 5157474  bytes 704334346 (671.7 MiB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新的网卡及地址已生效</span></span><br><span class=\"line\">eth0:0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 192.168.199.133  netmask 255.255.255.0  broadcast 192.168.199.255</span><br><span class=\"line\">        ether 52:54:00:3f:03:93  txqueuelen 1000  (Ethernet)</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"网卡状态查看\"><a href=\"#网卡状态查看\" class=\"headerlink\" title=\"网卡状态查看\"></a>网卡状态查看</h2><ul><li><p><code>mii-tool</code>命令用来查看网卡是否连接，状态是否正常：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mii-tool enp1s0 </span></span><br><span class=\"line\">enp1s0: negotiated 1000baseT-FD flow-control, link ok</span><br></pre></td></tr></table></figure></li><li><p>如果提示<strong>Operation not supported</strong>，也可以使用<code>ethtool</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ethtool enp1s0</span></span><br><span class=\"line\">Settings <span class=\"keyword\">for</span> enp1s0:</span><br><span class=\"line\">\tSupported ports: [ TP MII ]</span><br><span class=\"line\">\tSupported link modes:   10baseT/Half 10baseT/Full </span><br><span class=\"line\">\t                        100baseT/Half 100baseT/Full </span><br><span class=\"line\">\t                        1000baseT/Half 1000baseT/Full </span><br><span class=\"line\">\tSupported pause frame use: No</span><br><span class=\"line\">\tSupports auto-negotiation: Yes</span><br><span class=\"line\">\tAdvertised link modes:  10baseT/Half 10baseT/Full </span><br><span class=\"line\">\t                        100baseT/Half 100baseT/Full </span><br><span class=\"line\">\t                        1000baseT/Half 1000baseT/Full </span><br><span class=\"line\">\tAdvertised pause frame use: Symmetric Receive-only</span><br><span class=\"line\">\tAdvertised auto-negotiation: Yes</span><br><span class=\"line\">\tLink partner advertised link modes:  10baseT/Half 10baseT/Full </span><br><span class=\"line\">\t                                     100baseT/Half 100baseT/Full </span><br><span class=\"line\">\t                                     1000baseT/Full </span><br><span class=\"line\">\tLink partner advertised pause frame use: Symmetric</span><br><span class=\"line\">\tLink partner advertised auto-negotiation: Yes</span><br><span class=\"line\">\tSpeed: 1000Mb/s</span><br><span class=\"line\">\tDuplex: Full</span><br><span class=\"line\">\tPort: MII</span><br><span class=\"line\">\tPHYAD: 0</span><br><span class=\"line\">\tTransceiver: internal</span><br><span class=\"line\">\tAuto-negotiation: on</span><br><span class=\"line\">\tSupports Wake-on: pumbg</span><br><span class=\"line\">\tWake-on: g</span><br><span class=\"line\">\tCurrent message level: 0x00000033 (51)</span><br><span class=\"line\">\t\t\t       drv probe ifdown ifup</span><br><span class=\"line\">\tLink detected: yes\t<span class=\"comment\">#表示连接状态正常</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"设置主机名\"><a href=\"#设置主机名\" class=\"headerlink\" title=\"设置主机名\"></a>设置主机名</h2><ul><li><p>Centos7设置主机名使用<code>hostnamectl</code>命令，用法为<code>hostnamectl set-hostname [hostname]</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># hostnamectl set-hostname evobot-cn</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># bash\t# 新开一个bash生效</span></span><br><span class=\"line\">[root@evobot-cn ~]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure></li><li><p>hostname的配置文件是<code>/etc/hostname</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot-cn ~]<span class=\"comment\"># cat /etc/hostname </span></span><br><span class=\"line\">evobot-cn</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"DNS设置\"><a href=\"#DNS设置\" class=\"headerlink\" title=\"DNS设置\"></a>DNS设置</h2><ul><li><p>Centos7的DNS配置在配置文件<code>/etc/resolv.conf</code>中：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat /etc/resolv.conf </span></span><br><span class=\"line\"><span class=\"comment\"># Your system has been configured with 'manage-resolv-conf' set to true.</span></span><br><span class=\"line\"><span class=\"comment\"># As a result, cloud-init has written this file with configuration data</span></span><br><span class=\"line\"><span class=\"comment\"># that it has been provided. Cloud-init, by default, will write this file</span></span><br><span class=\"line\"><span class=\"comment\"># a single time (PER_ONCE).</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">nameserver 100.88.222.14</span><br><span class=\"line\">nameserver 100.88.222.16</span><br></pre></td></tr></table></figure></li><li><p>DNS在网卡配置文件中添加DNS即可，临时更改也可以更改<code>resolv.conf</code>文件，网卡配置如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">BOOTPROTO=static</span><br><span class=\"line\">DEFROUTE=yes</span><br><span class=\"line\">PEERDNS=yes</span><br><span class=\"line\">PEERROUTES=yes</span><br><span class=\"line\">IPV4_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6INIT=yes</span><br><span class=\"line\">IPV6_AUTOCONF=yes</span><br><span class=\"line\">IPV6_DEFROUTE=yes</span><br><span class=\"line\">IPV6_PEERDNS=yes</span><br><span class=\"line\">IPV6_PEERROUTES=yes</span><br><span class=\"line\">IPV6_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class=\"line\">NAME=enp0s3</span><br><span class=\"line\">UUID=fc2ccabb-fec8-4b8b-a27e-0f5f101310ca</span><br><span class=\"line\">DEVICE=enp0s3</span><br><span class=\"line\">ONBOOT=yes</span><br><span class=\"line\">IPADDR=192.168.199.224</span><br><span class=\"line\">NETMASK=255.255.255.0</span><br><span class=\"line\">GATEWAY=192.168.199.1</span><br><span class=\"line\">DNS1=114.114.114.114</span><br><span class=\"line\"><span class=\"comment\"># 增加一行DNS1，即可为网卡添加一个DNS</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"hosts文件\"><a href=\"#hosts文件\" class=\"headerlink\" title=\"hosts文件\"></a>hosts文件</h2><ul><li><p>Linux中的hosts文件如Windows中相同，主要用来为指定的域名指定对应的ip地址，文件格式左边为ip，右边为域名，且一个ip可以配置多个域名，当有一个域名对应多个ip时，最后面的行才生效：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat /etc/hosts</span></span><br><span class=\"line\">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class=\"line\">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class=\"line\">192.168.199.224 www.baidu.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ping www.baidu.com</span></span><br><span class=\"line\">PING www.baidu.com (192.168.199.224) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from www.baidu.com (192.168.199.224): icmp_seq=1 ttl=64 time=0.061 ms</span><br><span class=\"line\">64 bytes from www.baidu.com (192.168.199.224): icmp_seq=2 ttl=64 time=0.052 ms</span><br><span class=\"line\">^C</span><br><span class=\"line\">--- www.baidu.com ping statistics ---</span><br><span class=\"line\">2 packets transmitted, 2 received, 0% packet loss, time 999ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 0.052/0.056/0.061/0.008 ms</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"netfilter防火墙\"><a href=\"#netfilter防火墙\" class=\"headerlink\" title=\"netfilter防火墙\"></a>netfilter防火墙</h1><h2 id=\"开启netfilter服务\"><a href=\"#开启netfilter服务\" class=\"headerlink\" title=\"开启netfilter服务\"></a>开启netfilter服务</h2><ul><li><p>临时关闭selinux的命令为<code>setenforce 0</code>，永久关闭则是修改<code>/etc/selinux/config</code>文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改SELINUX为disabled即可</span></span><br><span class=\"line\">SELINUX=disabled</span><br><span class=\"line\">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ getenforce </span><br><span class=\"line\">Permissive</span><br><span class=\"line\"><span class=\"comment\"># Permissive在遇到安全问题需要阻断时，不会真正阻断，只会进行记录</span></span><br></pre></td></tr></table></figure><blockquote><p>关于selinux，可以参考<a href=\"http://os.51cto.com/art/201209/355490.htm\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">SELinux：linux内核的安全保镖</a>一文，或者<a href=\"https://pan.baidu.com/s/1jGGdExK\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">下载相应的电子书</a>。</p></blockquote></li><li><p>netfilter防火墙是Centos7之前的版本默认的防火墙，在Centos7中netfilter是关闭状态的，Centos7中默认的防火墙时firewalld，所以使用netfilter前需要关闭firewalld：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 关闭firewalld自启动</span><br><span class=\"line\"><span class=\"comment\"># systemctl disable firewalld.service</span></span><br><span class=\"line\">// 停止firewalld服务</span><br><span class=\"line\"><span class=\"comment\"># systemctl stop firewalld.service</span></span><br></pre></td></tr></table></figure></li><li><p>开启netfilter前需要安装<code>iptables-services</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装iptables</span><br><span class=\"line\"><span class=\"comment\"># yum install -y iptables-services</span></span><br><span class=\"line\">// 开启iptables服务</span><br><span class=\"line\"><span class=\"comment\"># systemctl start iptables.service</span></span><br></pre></td></tr></table></figure></li><li><p>使用命令<code>ipstables -nvL</code>可以查看iptables自带的一些规则：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -nvL</span></span><br><span class=\"line\">Chain INPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\">  135  9408 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED</span><br><span class=\"line\">    0     0 ACCEPT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br><span class=\"line\">    0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0           </span><br><span class=\"line\">    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:22</span><br><span class=\"line\">    7  3488 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited</span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\">    0     0 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited</span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT 72 packets, 7264 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"netfilter-5表5链\"><a href=\"#netfilter-5表5链\" class=\"headerlink\" title=\"netfilter 5表5链\"></a>netfilter 5表5链</h2><ul><li>netfilter默认有5个表(table)，分别是<strong>filter</strong>、<strong>nat</strong> 、<strong>mangle</strong>、<strong>raw</strong>、<strong>security</strong>表；</li><li>filter表主要起过滤数据包作用，包含3个内置的链，分别是<strong>INPUT</strong>、<strong>FORWARD</strong>和<strong>OUTPUT</strong>链：<ul><li>INPUT：用来检查进入本机的数据包，如果发现可疑的源IP，则会禁止掉；</li><li>FORWARD：是对需要转发的数据包进行处理，会对目的地址非本机的数据包进行转发，或者对目的地址进行更改；</li><li>OUTPUT：是对本机产生的需要对外发送的数据包进行处理，例如发送给某个IP的数据包，但对方IP被加入到新名单，则OUTPUT会将其禁止。</li></ul></li><li>nat表中同样具有3个链，分别是<strong>PERROUTING</strong>、<strong>OUTPUT</strong>、<strong>POSTROUTING</strong>，该表主要用在如路由器，端口映射等：<ul><li>PERROUTING：在数据包进来的时候对其进行更改；</li><li>POSTROUTING：在数据包出去的时候对其进行更改；</li><li>OUTPUT：与filter表的OUTPUT作用相同。</li></ul></li><li>其余的mangle、raw、security表很少使用，这里不做介绍。</li></ul><h2 id=\"iptables数据处理流程\"><a href=\"#iptables数据处理流程\" class=\"headerlink\" title=\"iptables数据处理流程\"></a>iptables数据处理流程</h2><ul><li>iptables的处理流程可以参考下面的流程图：</li></ul><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/iptables.png\" alt=\"iptables流程\"></p><ul><li>当数据包进入网卡时，首先会进入<code>PERROUTING</code>链，内核根据数据包目的IP判断是否需要转发；</li><li>如果数据包是进入本机的，则会继续到达<code>INPUT</code>链，数据包到<code>INPUT</code>链后，任何进程都可以收到数据包，本机上的程序可以发送数据包，这些数据包会经过<code>OUTPUT</code>链，然后到达<code>POSTROUTING</code>链发送出去；</li><li>如果数据包不是进入本机的，时需要转发出去的，且内核允许转发，数据包就会进入<code>FORWARD</code>链，然后到达<code>POSTROUTING</code>链输出。</li></ul><h2 id=\"iptables语法\"><a href=\"#iptables语法\" class=\"headerlink\" title=\"iptables语法\"></a>iptables语法</h2><h3 id=\"查看、保存、清空规则\"><a href=\"#查看、保存、清空规则\" class=\"headerlink\" title=\"查看、保存、清空规则\"></a>查看、保存、清空规则</h3><ul><li><p><code>iptables -nvL</code>可以看到默认规则，而默认规则保存在<code>/etc/sysconfig/iptables</code>文件内：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cat /etc/sysconfig/iptables</span></span><br><span class=\"line\"><span class=\"comment\"># sample configuration for iptables service</span></span><br><span class=\"line\"><span class=\"comment\"># you can edit this manually or use system-config-firewall</span></span><br><span class=\"line\"><span class=\"comment\"># please do not ask us to add additional ports/services to this default configuration</span></span><br><span class=\"line\">*filter</span><br><span class=\"line\">:INPUT ACCEPT [0:0]</span><br><span class=\"line\">:FORWARD ACCEPT [0:0]</span><br><span class=\"line\">:OUTPUT ACCEPT [0:0]</span><br><span class=\"line\">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">-A INPUT -p icmp -j ACCEPT</span><br><span class=\"line\">-A INPUT -i lo -j ACCEPT</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br><span class=\"line\">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span><br><span class=\"line\">COMMIT</span><br></pre></td></tr></table></figure></li><li><p>清空iptables所以规则，使用<code>iptables -F</code>，但是这样只能临时清空，实际配置文件中还存在，重启之后会恢复：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -F</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -nvL</span></span><br><span class=\"line\">Chain INPUT (policy ACCEPT 31 packets, 2152 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT 16 packets, 1472 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination</span><br></pre></td></tr></table></figure></li><li><p>想要保存当前的规则，需要执行<code>service iptables save</code>命令；</p></li><li><p>上面的操作所改动的都是<code>filter</code>表，想要操作指定表，需要使用<code>iptables -t [table] -nvL</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -t nat -nvL</span></span><br><span class=\"line\">Chain PREROUTING (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain INPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination</span><br></pre></td></tr></table></figure></li><li><p>在查看默认规则时，命令输出有这样两行：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\">  25  1732 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED</span><br></pre></td></tr></table></figure><ul><li>这里显示了数据包的数量和字节大小，清空这个数据使用<code>iptables -Z</code>将其清零。</li></ul></li></ul><h3 id=\"增加规则\"><a href=\"#增加规则\" class=\"headerlink\" title=\"增加规则\"></a>增加规则</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -A INPUT -s 192.168.188.1 -p tcp --sport 1234 -d 192.168.188.128 --dport 80 -j DROP</span></span><br></pre></td></tr></table></figure><div class=\"note danger\"><p><code>-A</code>表示增加规则，会将规则添加在最后，<code>INPUT</code>表示指定为INPUT链，未使用<code>-t</code>指定表名，默认操作的是<code>filter</code>表，<code>-s</code>表示源IP地址，<code>-p</code>指定链接的协议是tcp或udp，指定端口时，必须指定协议，<code>--sport</code>指定源端口；</p><p><code>-d</code>指定目的IP地址，<code>--dport</code>指定目的端口，<code>-j</code>指定要执行的操作，操作有<code>DROP</code>和<code>REJECT</code>，DROP表示丢弃，REJECT会在查看数据包之后拒绝并丢弃，一般使用DROP</p></div><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -I INPUT -p tcp --dport 80 -j DROP</span></span><br></pre></td></tr></table></figure><div class=\"note danger\"><p>这里<code>-I</code>表示插入规则，使用<code>-I</code>插入规则，规则会在iptables规则的最前面，而<code>-A</code>则增加在最后面。</p><p>规则的前后，会有限过滤前面的规则，比如一个数据包同时满足两条规则，但会优先匹配在前面的一条，而不会再匹配后面的规则。</p></div><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -I INPUT -s 192.168.1.1/24 -i eth0 -j ACCEPT</span></span><br></pre></td></tr></table></figure><div class=\"note danger\"><p><code>-i</code>作用是指定网卡，这里规则的含义是允许来自eth0网卡且源IP为192.168.1.1/24的数据包进入。</p></div><h3 id=\"删除规则\"><a href=\"#删除规则\" class=\"headerlink\" title=\"删除规则\"></a>删除规则</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -D INPUT -p tcp --dport 80 -j DROP</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -D INPUT -s 192.168.188.1 -p tcp --sport 1234 -d 192.168.188.128 --dport 80 -j DROP</span></span><br></pre></td></tr></table></figure><div class=\"note danger\"><p>使用<code>-D</code>选项可以将之前的规则删除，除了选项为<code>-D</code>之外，其他规则内容与增加规则时相同。</p></div><ul><li><p>使用<code>iptables -nvL --line-number</code>可以在每条规则前输出相应的编号，使用编号可以方便我们删除对应的规则：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -nvL --line-number</span></span><br><span class=\"line\">Chain INPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\">num   pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\">1      813 57860 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED</span><br><span class=\"line\">2        0     0 ACCEPT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br><span class=\"line\">3        0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0           </span><br><span class=\"line\">4        0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:22</span><br><span class=\"line\">5      191 98123 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited</span><br><span class=\"line\">6        0     0 DROP       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -D INPUT 6</span></span><br><span class=\"line\"><span class=\"comment\"># 使用编号对规则进行删除</span></span><br></pre></td></tr></table></figure></li></ul><h3 id=\"更改默认策略\"><a href=\"#更改默认策略\" class=\"headerlink\" title=\"更改默认策略\"></a>更改默认策略</h3><ul><li><p>在iptables输出的规则中，每个链表后面会有一行<code>policy ACCEPT 0 packets, 0 bytes</code>，这表示默认策略为ACCEPT，即数据包没有匹配的规则时，就按照默认策略执行；</p></li><li><p>更改默认策略，使用iptables的<code>-P</code>选项：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -P FORWARD DROP</span></span><br><span class=\"line\">Chain FORWARD (policy DROP 0 packets, 0 bytes)</span><br></pre></td></tr></table></figure></li><li><p>由于更改默认策略容易导致一些问题，一般不建议更改默认策略，保持默认即可。</p></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:38 GMT+0800 (CST) --><p>本文主要介绍Linux网络相关的知识，包括防火墙、路由等方面的配置和用法以及设置DNS，设定IP等。</p>","more":"<hr><h1 id=\"Linux网络相关命令\"><a href=\"#Linux网络相关命令\" class=\"headerlink\" title=\"Linux网络相关命令\"></a>Linux网络相关命令</h1><h2 id=\"ifconfig命令\"><a href=\"#ifconfig命令\" class=\"headerlink\" title=\"ifconfig命令\"></a>ifconfig命令</h2><ul><li><p>Centos7默认没有<code>ifconfig</code>命令，使用钱需要安装<code>net-tools</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ifconfig </span></span><br><span class=\"line\">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 10.139.151.2  netmask 255.255.224.0  broadcast 10.139.159.255</span><br><span class=\"line\">        ether 52:54:00:3f:03:93  txqueuelen 1000  (Ethernet)</span><br><span class=\"line\">        RX packets 4817340  bytes 563694620 (537.5 MiB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 5154346  bytes 703940024 (671.3 MiB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class=\"line\">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class=\"line\">        loop  txqueuelen 1  (Local Loopback)</span><br><span class=\"line\">        RX packets 546  bytes 30132 (29.4 KiB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 546  bytes 30132 (29.4 KiB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure></li><li><p><code>ifconfig -a</code>用来在网卡没有ip或者网卡down掉时，同样将网卡信息显示出来。</p></li></ul><h2 id=\"ifup-ifdown命令\"><a href=\"#ifup-ifdown命令\" class=\"headerlink\" title=\"ifup/ifdown命令\"></a>ifup/ifdown命令</h2><ul><li><p><code>ifdown</code>用来将网卡状态转为down状态，命令为<code>ifdown ens33</code>;</p></li><li><p><code>ifup</code>用来将网卡状态置为up状态，命令为<code>ifup ens33</code>。</p></li><li><p>在远程连接服务器时，如果对网卡进行了配置，如ip，网关等，不能直接使用<code>ifdown</code>关闭网卡，而应该<code>ifdown ens33 &amp;&amp; ifup ens33</code>这样使用，避免网卡down了之后网络无法恢复。</p></li></ul><h2 id=\"增加虚拟网卡\"><a href=\"#增加虚拟网卡\" class=\"headerlink\" title=\"增加虚拟网卡\"></a>增加虚拟网卡</h2><ul><li><p>增加虚拟网卡可以为设备增加ip，具体操作为复制原ens33的网卡配置文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cp /etc/sysconfig/network-scripts/ifcfg-eth0 /etc/sysconfig/network-scripts/ifcfg-eth0\\:0</span></span><br></pre></td></tr></table></figure></li><li><p>编辑<code>ifcfg-eth0:0</code>配置文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOTPROTO=none</span><br><span class=\"line\">DEFROUTE=yes</span><br><span class=\"line\"><span class=\"comment\"># 修改网卡名</span></span><br><span class=\"line\">DEVICE=eth0:0</span><br><span class=\"line\"><span class=\"comment\"># 配置网关</span></span><br><span class=\"line\">GATEWAY=192.168.199.1</span><br><span class=\"line\">HWADDR=52:54:00:3f:03:93</span><br><span class=\"line\"><span class=\"comment\"># 配置ip地址及掩码</span></span><br><span class=\"line\">IPADDR=192.168.199.133</span><br><span class=\"line\">NETMASK=255.255.225.0</span><br><span class=\"line\">NM_CONTROLLED=no</span><br><span class=\"line\">ONBOOT=yes</span><br><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">USERCTL=no</span><br></pre></td></tr></table></figure></li><li><p>保存退出后执行<code>ifdown eth0 &amp;&amp; ifup eth0</code>命令后网址就会生效：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot network-scripts]<span class=\"comment\"># ifconfig </span></span><br><span class=\"line\">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 10.139.151.2  netmask 255.255.224.0  broadcast 10.139.159.255</span><br><span class=\"line\">        ether 52:54:00:3f:03:93  txqueuelen 1000  (Ethernet)</span><br><span class=\"line\">        RX packets 4820651  bytes 564010062 (537.8 MiB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 5157474  bytes 704334346 (671.7 MiB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新的网卡及地址已生效</span></span><br><span class=\"line\">eth0:0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 192.168.199.133  netmask 255.255.255.0  broadcast 192.168.199.255</span><br><span class=\"line\">        ether 52:54:00:3f:03:93  txqueuelen 1000  (Ethernet)</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"网卡状态查看\"><a href=\"#网卡状态查看\" class=\"headerlink\" title=\"网卡状态查看\"></a>网卡状态查看</h2><ul><li><p><code>mii-tool</code>命令用来查看网卡是否连接，状态是否正常：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mii-tool enp1s0 </span></span><br><span class=\"line\">enp1s0: negotiated 1000baseT-FD flow-control, link ok</span><br></pre></td></tr></table></figure></li><li><p>如果提示<strong>Operation not supported</strong>，也可以使用<code>ethtool</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ethtool enp1s0</span></span><br><span class=\"line\">Settings <span class=\"keyword\">for</span> enp1s0:</span><br><span class=\"line\">\tSupported ports: [ TP MII ]</span><br><span class=\"line\">\tSupported link modes:   10baseT/Half 10baseT/Full </span><br><span class=\"line\">\t                        100baseT/Half 100baseT/Full </span><br><span class=\"line\">\t                        1000baseT/Half 1000baseT/Full </span><br><span class=\"line\">\tSupported pause frame use: No</span><br><span class=\"line\">\tSupports auto-negotiation: Yes</span><br><span class=\"line\">\tAdvertised link modes:  10baseT/Half 10baseT/Full </span><br><span class=\"line\">\t                        100baseT/Half 100baseT/Full </span><br><span class=\"line\">\t                        1000baseT/Half 1000baseT/Full </span><br><span class=\"line\">\tAdvertised pause frame use: Symmetric Receive-only</span><br><span class=\"line\">\tAdvertised auto-negotiation: Yes</span><br><span class=\"line\">\tLink partner advertised link modes:  10baseT/Half 10baseT/Full </span><br><span class=\"line\">\t                                     100baseT/Half 100baseT/Full </span><br><span class=\"line\">\t                                     1000baseT/Full </span><br><span class=\"line\">\tLink partner advertised pause frame use: Symmetric</span><br><span class=\"line\">\tLink partner advertised auto-negotiation: Yes</span><br><span class=\"line\">\tSpeed: 1000Mb/s</span><br><span class=\"line\">\tDuplex: Full</span><br><span class=\"line\">\tPort: MII</span><br><span class=\"line\">\tPHYAD: 0</span><br><span class=\"line\">\tTransceiver: internal</span><br><span class=\"line\">\tAuto-negotiation: on</span><br><span class=\"line\">\tSupports Wake-on: pumbg</span><br><span class=\"line\">\tWake-on: g</span><br><span class=\"line\">\tCurrent message level: 0x00000033 (51)</span><br><span class=\"line\">\t\t\t       drv probe ifdown ifup</span><br><span class=\"line\">\tLink detected: yes\t<span class=\"comment\">#表示连接状态正常</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"设置主机名\"><a href=\"#设置主机名\" class=\"headerlink\" title=\"设置主机名\"></a>设置主机名</h2><ul><li><p>Centos7设置主机名使用<code>hostnamectl</code>命令，用法为<code>hostnamectl set-hostname [hostname]</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># hostnamectl set-hostname evobot-cn</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># bash\t# 新开一个bash生效</span></span><br><span class=\"line\">[root@evobot-cn ~]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure></li><li><p>hostname的配置文件是<code>/etc/hostname</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot-cn ~]<span class=\"comment\"># cat /etc/hostname </span></span><br><span class=\"line\">evobot-cn</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"DNS设置\"><a href=\"#DNS设置\" class=\"headerlink\" title=\"DNS设置\"></a>DNS设置</h2><ul><li><p>Centos7的DNS配置在配置文件<code>/etc/resolv.conf</code>中：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat /etc/resolv.conf </span></span><br><span class=\"line\"><span class=\"comment\"># Your system has been configured with 'manage-resolv-conf' set to true.</span></span><br><span class=\"line\"><span class=\"comment\"># As a result, cloud-init has written this file with configuration data</span></span><br><span class=\"line\"><span class=\"comment\"># that it has been provided. Cloud-init, by default, will write this file</span></span><br><span class=\"line\"><span class=\"comment\"># a single time (PER_ONCE).</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">nameserver 100.88.222.14</span><br><span class=\"line\">nameserver 100.88.222.16</span><br></pre></td></tr></table></figure></li><li><p>DNS在网卡配置文件中添加DNS即可，临时更改也可以更改<code>resolv.conf</code>文件，网卡配置如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">BOOTPROTO=static</span><br><span class=\"line\">DEFROUTE=yes</span><br><span class=\"line\">PEERDNS=yes</span><br><span class=\"line\">PEERROUTES=yes</span><br><span class=\"line\">IPV4_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6INIT=yes</span><br><span class=\"line\">IPV6_AUTOCONF=yes</span><br><span class=\"line\">IPV6_DEFROUTE=yes</span><br><span class=\"line\">IPV6_PEERDNS=yes</span><br><span class=\"line\">IPV6_PEERROUTES=yes</span><br><span class=\"line\">IPV6_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class=\"line\">NAME=enp0s3</span><br><span class=\"line\">UUID=fc2ccabb-fec8-4b8b-a27e-0f5f101310ca</span><br><span class=\"line\">DEVICE=enp0s3</span><br><span class=\"line\">ONBOOT=yes</span><br><span class=\"line\">IPADDR=192.168.199.224</span><br><span class=\"line\">NETMASK=255.255.255.0</span><br><span class=\"line\">GATEWAY=192.168.199.1</span><br><span class=\"line\">DNS1=114.114.114.114</span><br><span class=\"line\"><span class=\"comment\"># 增加一行DNS1，即可为网卡添加一个DNS</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"hosts文件\"><a href=\"#hosts文件\" class=\"headerlink\" title=\"hosts文件\"></a>hosts文件</h2><ul><li><p>Linux中的hosts文件如Windows中相同，主要用来为指定的域名指定对应的ip地址，文件格式左边为ip，右边为域名，且一个ip可以配置多个域名，当有一个域名对应多个ip时，最后面的行才生效：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat /etc/hosts</span></span><br><span class=\"line\">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class=\"line\">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class=\"line\">192.168.199.224 www.baidu.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ping www.baidu.com</span></span><br><span class=\"line\">PING www.baidu.com (192.168.199.224) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from www.baidu.com (192.168.199.224): icmp_seq=1 ttl=64 time=0.061 ms</span><br><span class=\"line\">64 bytes from www.baidu.com (192.168.199.224): icmp_seq=2 ttl=64 time=0.052 ms</span><br><span class=\"line\">^C</span><br><span class=\"line\">--- www.baidu.com ping statistics ---</span><br><span class=\"line\">2 packets transmitted, 2 received, 0% packet loss, time 999ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 0.052/0.056/0.061/0.008 ms</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"netfilter防火墙\"><a href=\"#netfilter防火墙\" class=\"headerlink\" title=\"netfilter防火墙\"></a>netfilter防火墙</h1><h2 id=\"开启netfilter服务\"><a href=\"#开启netfilter服务\" class=\"headerlink\" title=\"开启netfilter服务\"></a>开启netfilter服务</h2><ul><li><p>临时关闭selinux的命令为<code>setenforce 0</code>，永久关闭则是修改<code>/etc/selinux/config</code>文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改SELINUX为disabled即可</span></span><br><span class=\"line\">SELINUX=disabled</span><br><span class=\"line\">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ getenforce </span><br><span class=\"line\">Permissive</span><br><span class=\"line\"><span class=\"comment\"># Permissive在遇到安全问题需要阻断时，不会真正阻断，只会进行记录</span></span><br></pre></td></tr></table></figure><blockquote><p>关于selinux，可以参考<a href=\"http://os.51cto.com/art/201209/355490.htm\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">SELinux：linux内核的安全保镖</a>一文，或者<a href=\"https://pan.baidu.com/s/1jGGdExK\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">下载相应的电子书</a>。</p></blockquote></li><li><p>netfilter防火墙是Centos7之前的版本默认的防火墙，在Centos7中netfilter是关闭状态的，Centos7中默认的防火墙时firewalld，所以使用netfilter前需要关闭firewalld：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 关闭firewalld自启动</span><br><span class=\"line\"><span class=\"comment\"># systemctl disable firewalld.service</span></span><br><span class=\"line\">// 停止firewalld服务</span><br><span class=\"line\"><span class=\"comment\"># systemctl stop firewalld.service</span></span><br></pre></td></tr></table></figure></li><li><p>开启netfilter前需要安装<code>iptables-services</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装iptables</span><br><span class=\"line\"><span class=\"comment\"># yum install -y iptables-services</span></span><br><span class=\"line\">// 开启iptables服务</span><br><span class=\"line\"><span class=\"comment\"># systemctl start iptables.service</span></span><br></pre></td></tr></table></figure></li><li><p>使用命令<code>ipstables -nvL</code>可以查看iptables自带的一些规则：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -nvL</span></span><br><span class=\"line\">Chain INPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\">  135  9408 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED</span><br><span class=\"line\">    0     0 ACCEPT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br><span class=\"line\">    0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0           </span><br><span class=\"line\">    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:22</span><br><span class=\"line\">    7  3488 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited</span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\">    0     0 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited</span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT 72 packets, 7264 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"netfilter-5表5链\"><a href=\"#netfilter-5表5链\" class=\"headerlink\" title=\"netfilter 5表5链\"></a>netfilter 5表5链</h2><ul><li>netfilter默认有5个表(table)，分别是<strong>filter</strong>、<strong>nat</strong> 、<strong>mangle</strong>、<strong>raw</strong>、<strong>security</strong>表；</li><li>filter表主要起过滤数据包作用，包含3个内置的链，分别是<strong>INPUT</strong>、<strong>FORWARD</strong>和<strong>OUTPUT</strong>链：<ul><li>INPUT：用来检查进入本机的数据包，如果发现可疑的源IP，则会禁止掉；</li><li>FORWARD：是对需要转发的数据包进行处理，会对目的地址非本机的数据包进行转发，或者对目的地址进行更改；</li><li>OUTPUT：是对本机产生的需要对外发送的数据包进行处理，例如发送给某个IP的数据包，但对方IP被加入到新名单，则OUTPUT会将其禁止。</li></ul></li><li>nat表中同样具有3个链，分别是<strong>PERROUTING</strong>、<strong>OUTPUT</strong>、<strong>POSTROUTING</strong>，该表主要用在如路由器，端口映射等：<ul><li>PERROUTING：在数据包进来的时候对其进行更改；</li><li>POSTROUTING：在数据包出去的时候对其进行更改；</li><li>OUTPUT：与filter表的OUTPUT作用相同。</li></ul></li><li>其余的mangle、raw、security表很少使用，这里不做介绍。</li></ul><h2 id=\"iptables数据处理流程\"><a href=\"#iptables数据处理流程\" class=\"headerlink\" title=\"iptables数据处理流程\"></a>iptables数据处理流程</h2><ul><li>iptables的处理流程可以参考下面的流程图：</li></ul><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/iptables.png\" alt=\"iptables流程\"></p><ul><li>当数据包进入网卡时，首先会进入<code>PERROUTING</code>链，内核根据数据包目的IP判断是否需要转发；</li><li>如果数据包是进入本机的，则会继续到达<code>INPUT</code>链，数据包到<code>INPUT</code>链后，任何进程都可以收到数据包，本机上的程序可以发送数据包，这些数据包会经过<code>OUTPUT</code>链，然后到达<code>POSTROUTING</code>链发送出去；</li><li>如果数据包不是进入本机的，时需要转发出去的，且内核允许转发，数据包就会进入<code>FORWARD</code>链，然后到达<code>POSTROUTING</code>链输出。</li></ul><h2 id=\"iptables语法\"><a href=\"#iptables语法\" class=\"headerlink\" title=\"iptables语法\"></a>iptables语法</h2><h3 id=\"查看、保存、清空规则\"><a href=\"#查看、保存、清空规则\" class=\"headerlink\" title=\"查看、保存、清空规则\"></a>查看、保存、清空规则</h3><ul><li><p><code>iptables -nvL</code>可以看到默认规则，而默认规则保存在<code>/etc/sysconfig/iptables</code>文件内：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cat /etc/sysconfig/iptables</span></span><br><span class=\"line\"><span class=\"comment\"># sample configuration for iptables service</span></span><br><span class=\"line\"><span class=\"comment\"># you can edit this manually or use system-config-firewall</span></span><br><span class=\"line\"><span class=\"comment\"># please do not ask us to add additional ports/services to this default configuration</span></span><br><span class=\"line\">*filter</span><br><span class=\"line\">:INPUT ACCEPT [0:0]</span><br><span class=\"line\">:FORWARD ACCEPT [0:0]</span><br><span class=\"line\">:OUTPUT ACCEPT [0:0]</span><br><span class=\"line\">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">-A INPUT -p icmp -j ACCEPT</span><br><span class=\"line\">-A INPUT -i lo -j ACCEPT</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br><span class=\"line\">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span><br><span class=\"line\">COMMIT</span><br></pre></td></tr></table></figure></li><li><p>清空iptables所以规则，使用<code>iptables -F</code>，但是这样只能临时清空，实际配置文件中还存在，重启之后会恢复：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -F</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -nvL</span></span><br><span class=\"line\">Chain INPUT (policy ACCEPT 31 packets, 2152 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT 16 packets, 1472 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination</span><br></pre></td></tr></table></figure></li><li><p>想要保存当前的规则，需要执行<code>service iptables save</code>命令；</p></li><li><p>上面的操作所改动的都是<code>filter</code>表，想要操作指定表，需要使用<code>iptables -t [table] -nvL</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -t nat -nvL</span></span><br><span class=\"line\">Chain PREROUTING (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain INPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination</span><br></pre></td></tr></table></figure></li><li><p>在查看默认规则时，命令输出有这样两行：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\">  25  1732 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED</span><br></pre></td></tr></table></figure><ul><li>这里显示了数据包的数量和字节大小，清空这个数据使用<code>iptables -Z</code>将其清零。</li></ul></li></ul><h3 id=\"增加规则\"><a href=\"#增加规则\" class=\"headerlink\" title=\"增加规则\"></a>增加规则</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -A INPUT -s 192.168.188.1 -p tcp --sport 1234 -d 192.168.188.128 --dport 80 -j DROP</span></span><br></pre></td></tr></table></figure><div class=\"note danger\"><p><code>-A</code>表示增加规则，会将规则添加在最后，<code>INPUT</code>表示指定为INPUT链，未使用<code>-t</code>指定表名，默认操作的是<code>filter</code>表，<code>-s</code>表示源IP地址，<code>-p</code>指定链接的协议是tcp或udp，指定端口时，必须指定协议，<code>--sport</code>指定源端口；</p><p><code>-d</code>指定目的IP地址，<code>--dport</code>指定目的端口，<code>-j</code>指定要执行的操作，操作有<code>DROP</code>和<code>REJECT</code>，DROP表示丢弃，REJECT会在查看数据包之后拒绝并丢弃，一般使用DROP</p></div><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -I INPUT -p tcp --dport 80 -j DROP</span></span><br></pre></td></tr></table></figure><div class=\"note danger\"><p>这里<code>-I</code>表示插入规则，使用<code>-I</code>插入规则，规则会在iptables规则的最前面，而<code>-A</code>则增加在最后面。</p><p>规则的前后，会有限过滤前面的规则，比如一个数据包同时满足两条规则，但会优先匹配在前面的一条，而不会再匹配后面的规则。</p></div><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -I INPUT -s 192.168.1.1/24 -i eth0 -j ACCEPT</span></span><br></pre></td></tr></table></figure><div class=\"note danger\"><p><code>-i</code>作用是指定网卡，这里规则的含义是允许来自eth0网卡且源IP为192.168.1.1/24的数据包进入。</p></div><h3 id=\"删除规则\"><a href=\"#删除规则\" class=\"headerlink\" title=\"删除规则\"></a>删除规则</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -D INPUT -p tcp --dport 80 -j DROP</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -D INPUT -s 192.168.188.1 -p tcp --sport 1234 -d 192.168.188.128 --dport 80 -j DROP</span></span><br></pre></td></tr></table></figure><div class=\"note danger\"><p>使用<code>-D</code>选项可以将之前的规则删除，除了选项为<code>-D</code>之外，其他规则内容与增加规则时相同。</p></div><ul><li><p>使用<code>iptables -nvL --line-number</code>可以在每条规则前输出相应的编号，使用编号可以方便我们删除对应的规则：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -nvL --line-number</span></span><br><span class=\"line\">Chain INPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\">num   pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\">1      813 57860 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED</span><br><span class=\"line\">2        0     0 ACCEPT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br><span class=\"line\">3        0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0           </span><br><span class=\"line\">4        0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:22</span><br><span class=\"line\">5      191 98123 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited</span><br><span class=\"line\">6        0     0 DROP       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -D INPUT 6</span></span><br><span class=\"line\"><span class=\"comment\"># 使用编号对规则进行删除</span></span><br></pre></td></tr></table></figure></li></ul><h3 id=\"更改默认策略\"><a href=\"#更改默认策略\" class=\"headerlink\" title=\"更改默认策略\"></a>更改默认策略</h3><ul><li><p>在iptables输出的规则中，每个链表后面会有一行<code>policy ACCEPT 0 packets, 0 bytes</code>，这表示默认策略为ACCEPT，即数据包没有匹配的规则时，就按照默认策略执行；</p></li><li><p>更改默认策略，使用iptables的<code>-P</code>选项：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># iptables -P FORWARD DROP</span></span><br><span class=\"line\">Chain FORWARD (policy DROP 0 packets, 0 bytes)</span><br></pre></td></tr></table></figure></li><li><p>由于更改默认策略容易导致一些问题，一般不建议更改默认策略，保持默认即可。</p></li></ul><hr><!-- rebuild by neat -->"},{"title":"Linux日常运维(二)——进程、内存网络监控","author":"Evobot","abbrlink":"9f02128c","date":"2018-05-06T14:49:49.000Z","image":null,"_content":"\n\n\n本文主要介绍LInux日常运维中如何监控io性能，以及free查看内存的命令和ps查看进程的命令，另外介绍如何查看网络状态并且对网络进行抓包的相关知识。\n\n<!--more-->\n\n---\n\n# 磁盘监控\n\n## **iostat**命令\n\n- 使用`vmstat`查看系统状态时，如果bi、bo或者wa列数值过高，那么需要查看磁盘更详细的状态，就可以使用`iostat`命令；\n\n- `iostat`命令是在安装`sysstat`软件包时一并安装到系统中的，直接执行`iostat`命令可以查看系统中各个磁盘的详细信息，也可以像`vmstat`命令一样执行`iostat 1`命令每秒刷新输出磁盘信息；\n\n  ```bash\n  [root@evobot ~]# iostat \n  Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月06日 \t_x86_64_\t(1 CPU)\n\n  avg-cpu:  %user   %nice %system %iowait  %steal   %idle\n             0.61    0.00    0.24    0.29    0.00   98.85\n\n  Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn\n  vda               2.04         0.29        18.04     454791   27963960\n  scd0              0.00         0.00         0.00        552          0\n  ```\n\n- 列出的信息中，每列分别表示设备名、每秒进程下发的IO读写请求数量、每秒读取的kB数，每秒写入的kB数、取样时间间隔内读取的kB总数和取样时间间隔内写入的kB总量；\n\n- 上面的输出信息与`sar -b`查看到的内容是一样的，更常用的用法为`iostat -x 1`:\n\n  ```bash\n  [root@evobot ~]# iostat -x\n  Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月06日 \t_x86_64_\t(1 CPU)\n\n  avg-cpu:  %user   %nice %system %iowait  %steal   %idle\n             0.61    0.00    0.24    0.29    0.00   98.85\n\n  Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util\n  vda               0.00     2.36    0.01    2.03     0.29    18.04    17.98     0.03   16.11    9.70   16.16   1.77   0.36\n  scd0              0.00     0.00    0.00    0.00     0.00     0.00     9.95     0.00    1.41    1.41    0.00   1.41   0.00\n  ```\n\n  - 这里列出的信息，主要关注`%util`列，其表示**进程被I/O需求消耗的CPU百分比**，如果这里的值超过50%，但wkB/s和rkB/s比较小，则说明磁盘io繁忙，磁盘存在一些问题，可能需要更换磁盘；\n\n## **iotop**命令\n\n- 当我们使用`iostat`查看到磁盘io较高时，可能需要查看是哪个进程的磁盘读写较高，就可以使用`iotop`命令，使用`iotop`命令需要安装`iotop`软件包；\n\n- 执行`iotop`命令，其命令输出类似于`top`命令，每秒钟刷新一次：\n\n  ![iotop](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/iotop.png)\n\n- 主要关注的是`IO`列和`COMMAND`列，来查看具体哪个进程占用IO比例最高；\n\n---\n\n# 内存和进程监控\n\n## **free**命令\n\n- `free`命令主要用来查看内存的使用情况：\n\n  ```bash\n  [root@evobot ~]# free\n                total        used        free      shared  buff/cache   available\n  Mem:        1883540       97652      468720         392     1317168     1586592\n  Swap:             0           0           0\n  ```\n\n- 所列出的信息中，第一行为标题，第二行为内存使用情况，第三行为交换分区使用情况；\n- 各列所表示信息如下表，默认`free`命令输出信息单位为`kB`，可以使用`free -m`转换单位为MB，或者使用`free -h`人性化显示：\n\n<style>\ntable th {\n    text-align: center;\n}\ntable th:first-of-type {\n    width: 120px;\n}\n</style>\n\n| 标示         | 说明                                       |\n| :----------: | ---------------------------------------- |\n| total      | 内存总大小                                    |\n| used       | 内存已被使用的大小                                |\n| free       | 空闲内存大小                                   |\n| shared     | 共享的内存大小                                  |\n| buff/cache | 缓冲(buff)及缓存(cache)大小，cache是从磁盘预先读取出来准备送往CPU处理的数据，buf则是CPU处理完的准备存储到磁盘上的数据 |\n| available  | 表示空闲内存加上未分配给buff/cache的内存大小              |\n\n- `free`命令的输出中，total=used+free+buff/cache，而avaliable=free+(buff/cache剩余部分)，所以在查看内存状态时，应该关注的是**avaliable**的值。\n- 而swap行如果占用过高，或者swap剩余为0，则需要增加内存，或者有程序存在内存泄露，需要进一步排查。\n\n## **ps**命令\n\n- `ps`命令用来查看当前系统运行的进程快照，`ps aux`用来查看所有的进程，并列出进程命令；\n\n- 常用使用`ps`命令与管道符和`grep`使用查看具体的进程是否运行，另外查看进程也可以用`ps -elf`命令：\n\n  ![ps](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/ps.png)\n\n- `ps`命令可以查看到进程的PID，PID可以用来杀死一个进程，使用`kill [pid]`命令杀死进程；\n\n- 使用`ls -l /proc/[pid]`可以查看进程运行的信息和相关文件：\n\n  ```bash\n  [root@evobot ~]# ls -l /proc/447/\n  总用量 0\n  dr-xr-xr-x 2 root root 0 4月  19 00:35 attr\n  -rw-r--r-- 1 root root 0 5月   7 22:47 autogroup\n  -r-------- 1 root root 0 5月   7 22:47 auxv\n  -r--r--r-- 1 root root 0 4月  19 00:35 cgroup\n  --w------- 1 root root 0 5月   7 22:47 clear_refs\n  -r--r--r-- 1 root root 0 4月  19 00:35 cmdline\n  -rw-r--r-- 1 root root 0 4月  19 00:35 comm\n  -rw-r--r-- 1 root root 0 5月   7 22:47 coredump_filter\n  -r--r--r-- 1 root root 0 5月   7 22:47 cpuset\n  lrwxrwxrwx 1 root root 0 5月   7 22:47 cwd -> /\n  -r-------- 1 root root 0 5月   7 22:38 environ\n  lrwxrwxrwx 1 root root 0 4月  19 00:35 exe -> /usr/sbin/auditd\n  ```\n\n- `ps`命令所列的信息中，包括CPU和内存百分比，`VSZ`表示进程占用的虚拟内存，`RSS`表示进程占用的物理内存与`top`命令的`RES`列相同，`TTY`表示进程在哪个tty所运行，`START`表示进程开始运行的时间，`TIME`表示进程运行的总时间，`COMMAND`表示进程的命令，`STAT`表示进程的状态，具体存在的状态如下表：\n\n| 状态表示字符 | 说明                                     |\n| :----: | -------------------------------------- |\n|   D    | 不能中断的进程                                |\n|   R    | run状态正在运行的进程                           |\n|   S    | sleep睡眠状态的进程，有些进程运行时占用CPU时间非常短暂，也会显示为S |\n|   T    | 暂停的进程，如ctrl+z暂停的进程                     |\n|   +    | 表示前台进程                                 |\n|   Z    | 僵尸进程                                   |\n|   <    | 高优先级进程，有限占用CPU资源                       |\n|   N    | 低优先级进程                                 |\n|   L    | 内存中被锁了内存分页的进程，少见                       |\n|   s    | 主进程，例如nginx进程，存在一个主进程，另外还衍生出多个子进程      |\n|   l    | 多线程进程，一个进程可以有多个线程，线程间共享进程的内存           |\n\n---\n\n# 网络监控和抓包\n\n## **netstat**命令\n\n- `netstat`命令用来查看系统的网络状态，常用的用法分为以下三种：\n\n  1. `netstat -lnp`：查看服务监听的端口，如下图，tcp和udp分别监听的端口，另外也列出了系统的socket文件：\n\n  ![netstat -lnp](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/netstat-lnp.png)\n\n  2. `netstat -an`：查看系统的网络连接状态，具体状态含义可以查看[tcp的三次握手和四次挥手](http://www.doc88.com/p-9913773324388.html)：\n\n  ![netstat -an](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/netstat-an.png)\n\n  3. 上面的命令输出中将TCP和UDP都列出来了，如果想要只查看tcp连接，可以使用`-t`参数，查看udp连接使用`-u`参数，使用这两个参数时不会列出socket：\n\n  ```bash\n  [root@evobot ~]# netstat -ant\n  Active Internet connections (servers and established)\n  Proto Recv-Q Send-Q Local Address           Foreign Address         State      \n  tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN     \n  tcp        0      0 0.0.0.0:2233            0.0.0.0:*               LISTEN     \n  tcp        0     36 10.139.151.2:2233       118.113.205.177:25473   ESTABLISHED\n\n  [root@evobot ~]# netstat -anu\n  Active Internet connections (servers and established)\n  Proto Recv-Q Send-Q Local Address           Foreign Address         State      \n  udp        0      0 10.139.151.2:34290      114.114.114.114:53      ESTABLISHED\n  udp        0      0 10.139.151.2:123        0.0.0.0:*                          \n  udp        0      0 127.0.0.1:123           0.0.0.0:*                          \n  udp        0      0 0.0.0.0:123             0.0.0.0:*                          \n  udp6       0      0 :::123                  :::*                              \n  ```\n\n- `ss -an`命令同样也可以输出系统的网络连接状态，但不会显示进程名：\n\n  ```bash\n  [root@evobot ~]# ss -an\n  Netid  State      Recv-Q Send-Q       Local Address:Port                      Peer Address:Port              \n  nl     UNCONN     0      0                        0:490                                   *                   \n  u_str  ESTAB      0      0      /run/systemd/journal/stdout 12258                                * 12257              \n  udp    ESTAB      0      0             10.139.151.2:35758                  114.114.114.114:53                 \n  udp    UNCONN     0      0             10.139.151.2:123                                  *:*                  \n  udp    UNCONN     0      0                127.0.0.1:123                                  *:*                  \n  tcp    LISTEN     0      128                      *:111                                  *:*                  \n  tcp    LISTEN     0      128                      *:2233                                 *:*                  \n  tcp    ESTAB      0      0             10.139.151.2:2233                   118.113.205.177:25473              \n  ```\n\n- `netstat -an | awk '/^tcp/{++sta[$NF]} END {for(key in sta) print key,\"\\t\",sta[key]}'`命令可以统计出系统各个网络连接的总数：\n\n  ```bash\n  [root@evobot ~]# netstat -an | awk '/^tcp/{++sta[$NF]} END {for(key in sta) print key,\"\\t\",sta[key]}'\n  LISTEN \t 2\n  ESTABLISHED \t 1\n  ```\n\n  - 这其中我们主要关注**ESTABLISHED**状态数，其表示正在和服务器通信的连接数。\n\n## **tcpdump**命令\n\n- `tcpdump`命令是用来网络抓包的命令行工具，使用前需要安装`tcpdump`软件包；\n\n- 常用用法有以下几种：\n\n  1. `tcpdump -nn -i [网卡名]`： 这里的参数`-nn`，第一个**n**表示显示ip地址，否则显示主机名，第二个**n**表示显示端口，否则使用服务名表示；\n\n  ![tcpdump -nn](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/tcpdump-nn.png)\n\n  ![tcpdump -i](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/tcpdum-i.png)\n\n  > 上面的输出中分别表示时间，IP，源ip.端口，目的ip.端口以及数据包信息；\n\n  2. `tcpdump -nn port [端口号]`：抓取指定端口的数据包，同样也可以使用`tcpdump -nn -i eth0 not port [端口号]`抓取除指定端口外的数据包，或者`tcpdump -nn -i eth0 not port [端口号] and host [ip地址]`来抓取指定host除指定端口外的数据包：\n\n  ```bash\n  root@Deppin:~# tcpdump -nn -i wlp2s0 not port 22 and host 180.97.33.108\n  tcpdump: verbose output suppressed, use -v or -vv for full protocol decode\n  listening on wlp2s0, link-type EN10MB (Ethernet), capture size 262144 bytes\n  00:23:25.460925 IP 192.168.199.199.43109 > 180.97.33.108.80: Flags [F.], seq 836106603, ack 3946427568, win 229, length 0\n  00:23:29.332936 IP 192.168.199.199.43109 > 180.97.33.108.80: Flags [F.], seq 0, ack 1, win 229, length 0\n  00:23:29.332966 IP 192.168.199.199.34253 > 180.97.33.108.80: Flags [F.], seq 3073252526, ack 1107915791, win 229, length 0\n  00:23:29.332975 IP 192.168.199.199.42371 > 180.97.33.108.80: Flags [F.], seq 1787139822, ack 537241163, win 229, length 0\n  ^C\n  4 packets captured\n  4 packets received by filter\n  0 packets dropped by kernel\n  ```\n\n  3. 也可以指定抓取的数据包个数和指定存储到哪个文件：`root@Deppin:~# tcpdump -nn -i wlp2s0 -c 5 -w /tmp/1.cap`:\n\n  ```bash\n  root@Deppin:~# tcpdump -nn -i wlp2s0 -c 5 -w /tmp/1.cap\n  tcpdump: listening on wlp2s0, link-type EN10MB (Ethernet), capture size 262144 bytes\n  5 packets captured\n  35 packets received by filter\n  0 packets dropped by kernel\n\n  root@Deppin:~# file /tmp/1.cap \n  /tmp/1.cap: tcpdump capture file (little-endian) - version 2.4 (Ethernet, capture length 262144)\n  ```\n\n  {% note success %} \n  抓取的文件是无法使用cat命令查看的，查看需要使用`tcpdump -r [filename]`进行查看。\n  {% endnote %}\n\n- `tshark`命令是类似`tcpdump`的工具，使用这个命令需要安装`wireshark`软件包，常用用法如下:\n\n  ```bash\n  # tshark -n -t a -R http.request -T fields -e \"frame.time\" -e \"ip.src\" -e \"http.host\" -e \"http.request.method\" -e \"http.request.uri\"\n  tshark: -R without -2 is deprecated. For single-pass filtering use -Y.\n  Running as user \"root\" and group \"root\". This could be dangerous.\n  Capturing on 'eth0'\n  \"May  8, 2018 00:35:03.807043090 CST\"\t10.139.151.2\treceiver.barad.tencentyun.com\tPOST\t/ca_report.cgi\n  \"May  8, 2018 00:35:08.814790915 CST\"\t10.139.151.2\treceiver.barad.tencentyun.com\tPOST\t/ca_report.cgi\n  \"May  8, 2018 00:35:13.823298617 CST\"\t10.139.151.2\treceiver.barad.tencentyun.com\tPOST\t/heart_report.cgi\n  \"May  8, 2018 00:35:18.831342319 CST\"\t10.139.151.2\treceiver.barad.tencentyun.com\tPOST\t/ca_report.cgi\n  \"May  8, 2018 00:35:23.840005021 CST\"\t10.139.151.2\treceiver.barad.tencentyun.com\tPOST\t/ca_report.cgi\n  ^C1 packet dropped\n  5 packets captured\n  ```\n\n  {% note success %} \n  上面的命令可以看到详细的ip地址、访问的网址，请求方法和请求的资源。关于`tshark`更多的用法，可以参考[tshark----wireshark的命令行工具](https://blog.csdn.net/hello2mao/article/details/53967900)\n  {% endnote %}\n---","source":"_posts/Linux日常运维(二)—进程、内存网络监控.md","raw":"---\ntitle: Linux日常运维(二)——进程、内存网络监控\nauthor: Evobot\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\nabbrlink: 9f02128c\ndate: 2018-05-06 22:49:49\nimage:\n---\n\n\n\n本文主要介绍LInux日常运维中如何监控io性能，以及free查看内存的命令和ps查看进程的命令，另外介绍如何查看网络状态并且对网络进行抓包的相关知识。\n\n<!--more-->\n\n---\n\n# 磁盘监控\n\n## **iostat**命令\n\n- 使用`vmstat`查看系统状态时，如果bi、bo或者wa列数值过高，那么需要查看磁盘更详细的状态，就可以使用`iostat`命令；\n\n- `iostat`命令是在安装`sysstat`软件包时一并安装到系统中的，直接执行`iostat`命令可以查看系统中各个磁盘的详细信息，也可以像`vmstat`命令一样执行`iostat 1`命令每秒刷新输出磁盘信息；\n\n  ```bash\n  [root@evobot ~]# iostat \n  Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月06日 \t_x86_64_\t(1 CPU)\n\n  avg-cpu:  %user   %nice %system %iowait  %steal   %idle\n             0.61    0.00    0.24    0.29    0.00   98.85\n\n  Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn\n  vda               2.04         0.29        18.04     454791   27963960\n  scd0              0.00         0.00         0.00        552          0\n  ```\n\n- 列出的信息中，每列分别表示设备名、每秒进程下发的IO读写请求数量、每秒读取的kB数，每秒写入的kB数、取样时间间隔内读取的kB总数和取样时间间隔内写入的kB总量；\n\n- 上面的输出信息与`sar -b`查看到的内容是一样的，更常用的用法为`iostat -x 1`:\n\n  ```bash\n  [root@evobot ~]# iostat -x\n  Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月06日 \t_x86_64_\t(1 CPU)\n\n  avg-cpu:  %user   %nice %system %iowait  %steal   %idle\n             0.61    0.00    0.24    0.29    0.00   98.85\n\n  Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util\n  vda               0.00     2.36    0.01    2.03     0.29    18.04    17.98     0.03   16.11    9.70   16.16   1.77   0.36\n  scd0              0.00     0.00    0.00    0.00     0.00     0.00     9.95     0.00    1.41    1.41    0.00   1.41   0.00\n  ```\n\n  - 这里列出的信息，主要关注`%util`列，其表示**进程被I/O需求消耗的CPU百分比**，如果这里的值超过50%，但wkB/s和rkB/s比较小，则说明磁盘io繁忙，磁盘存在一些问题，可能需要更换磁盘；\n\n## **iotop**命令\n\n- 当我们使用`iostat`查看到磁盘io较高时，可能需要查看是哪个进程的磁盘读写较高，就可以使用`iotop`命令，使用`iotop`命令需要安装`iotop`软件包；\n\n- 执行`iotop`命令，其命令输出类似于`top`命令，每秒钟刷新一次：\n\n  ![iotop](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/iotop.png)\n\n- 主要关注的是`IO`列和`COMMAND`列，来查看具体哪个进程占用IO比例最高；\n\n---\n\n# 内存和进程监控\n\n## **free**命令\n\n- `free`命令主要用来查看内存的使用情况：\n\n  ```bash\n  [root@evobot ~]# free\n                total        used        free      shared  buff/cache   available\n  Mem:        1883540       97652      468720         392     1317168     1586592\n  Swap:             0           0           0\n  ```\n\n- 所列出的信息中，第一行为标题，第二行为内存使用情况，第三行为交换分区使用情况；\n- 各列所表示信息如下表，默认`free`命令输出信息单位为`kB`，可以使用`free -m`转换单位为MB，或者使用`free -h`人性化显示：\n\n<style>\ntable th {\n    text-align: center;\n}\ntable th:first-of-type {\n    width: 120px;\n}\n</style>\n\n| 标示         | 说明                                       |\n| :----------: | ---------------------------------------- |\n| total      | 内存总大小                                    |\n| used       | 内存已被使用的大小                                |\n| free       | 空闲内存大小                                   |\n| shared     | 共享的内存大小                                  |\n| buff/cache | 缓冲(buff)及缓存(cache)大小，cache是从磁盘预先读取出来准备送往CPU处理的数据，buf则是CPU处理完的准备存储到磁盘上的数据 |\n| available  | 表示空闲内存加上未分配给buff/cache的内存大小              |\n\n- `free`命令的输出中，total=used+free+buff/cache，而avaliable=free+(buff/cache剩余部分)，所以在查看内存状态时，应该关注的是**avaliable**的值。\n- 而swap行如果占用过高，或者swap剩余为0，则需要增加内存，或者有程序存在内存泄露，需要进一步排查。\n\n## **ps**命令\n\n- `ps`命令用来查看当前系统运行的进程快照，`ps aux`用来查看所有的进程，并列出进程命令；\n\n- 常用使用`ps`命令与管道符和`grep`使用查看具体的进程是否运行，另外查看进程也可以用`ps -elf`命令：\n\n  ![ps](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/ps.png)\n\n- `ps`命令可以查看到进程的PID，PID可以用来杀死一个进程，使用`kill [pid]`命令杀死进程；\n\n- 使用`ls -l /proc/[pid]`可以查看进程运行的信息和相关文件：\n\n  ```bash\n  [root@evobot ~]# ls -l /proc/447/\n  总用量 0\n  dr-xr-xr-x 2 root root 0 4月  19 00:35 attr\n  -rw-r--r-- 1 root root 0 5月   7 22:47 autogroup\n  -r-------- 1 root root 0 5月   7 22:47 auxv\n  -r--r--r-- 1 root root 0 4月  19 00:35 cgroup\n  --w------- 1 root root 0 5月   7 22:47 clear_refs\n  -r--r--r-- 1 root root 0 4月  19 00:35 cmdline\n  -rw-r--r-- 1 root root 0 4月  19 00:35 comm\n  -rw-r--r-- 1 root root 0 5月   7 22:47 coredump_filter\n  -r--r--r-- 1 root root 0 5月   7 22:47 cpuset\n  lrwxrwxrwx 1 root root 0 5月   7 22:47 cwd -> /\n  -r-------- 1 root root 0 5月   7 22:38 environ\n  lrwxrwxrwx 1 root root 0 4月  19 00:35 exe -> /usr/sbin/auditd\n  ```\n\n- `ps`命令所列的信息中，包括CPU和内存百分比，`VSZ`表示进程占用的虚拟内存，`RSS`表示进程占用的物理内存与`top`命令的`RES`列相同，`TTY`表示进程在哪个tty所运行，`START`表示进程开始运行的时间，`TIME`表示进程运行的总时间，`COMMAND`表示进程的命令，`STAT`表示进程的状态，具体存在的状态如下表：\n\n| 状态表示字符 | 说明                                     |\n| :----: | -------------------------------------- |\n|   D    | 不能中断的进程                                |\n|   R    | run状态正在运行的进程                           |\n|   S    | sleep睡眠状态的进程，有些进程运行时占用CPU时间非常短暂，也会显示为S |\n|   T    | 暂停的进程，如ctrl+z暂停的进程                     |\n|   +    | 表示前台进程                                 |\n|   Z    | 僵尸进程                                   |\n|   <    | 高优先级进程，有限占用CPU资源                       |\n|   N    | 低优先级进程                                 |\n|   L    | 内存中被锁了内存分页的进程，少见                       |\n|   s    | 主进程，例如nginx进程，存在一个主进程，另外还衍生出多个子进程      |\n|   l    | 多线程进程，一个进程可以有多个线程，线程间共享进程的内存           |\n\n---\n\n# 网络监控和抓包\n\n## **netstat**命令\n\n- `netstat`命令用来查看系统的网络状态，常用的用法分为以下三种：\n\n  1. `netstat -lnp`：查看服务监听的端口，如下图，tcp和udp分别监听的端口，另外也列出了系统的socket文件：\n\n  ![netstat -lnp](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/netstat-lnp.png)\n\n  2. `netstat -an`：查看系统的网络连接状态，具体状态含义可以查看[tcp的三次握手和四次挥手](http://www.doc88.com/p-9913773324388.html)：\n\n  ![netstat -an](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/netstat-an.png)\n\n  3. 上面的命令输出中将TCP和UDP都列出来了，如果想要只查看tcp连接，可以使用`-t`参数，查看udp连接使用`-u`参数，使用这两个参数时不会列出socket：\n\n  ```bash\n  [root@evobot ~]# netstat -ant\n  Active Internet connections (servers and established)\n  Proto Recv-Q Send-Q Local Address           Foreign Address         State      \n  tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN     \n  tcp        0      0 0.0.0.0:2233            0.0.0.0:*               LISTEN     \n  tcp        0     36 10.139.151.2:2233       118.113.205.177:25473   ESTABLISHED\n\n  [root@evobot ~]# netstat -anu\n  Active Internet connections (servers and established)\n  Proto Recv-Q Send-Q Local Address           Foreign Address         State      \n  udp        0      0 10.139.151.2:34290      114.114.114.114:53      ESTABLISHED\n  udp        0      0 10.139.151.2:123        0.0.0.0:*                          \n  udp        0      0 127.0.0.1:123           0.0.0.0:*                          \n  udp        0      0 0.0.0.0:123             0.0.0.0:*                          \n  udp6       0      0 :::123                  :::*                              \n  ```\n\n- `ss -an`命令同样也可以输出系统的网络连接状态，但不会显示进程名：\n\n  ```bash\n  [root@evobot ~]# ss -an\n  Netid  State      Recv-Q Send-Q       Local Address:Port                      Peer Address:Port              \n  nl     UNCONN     0      0                        0:490                                   *                   \n  u_str  ESTAB      0      0      /run/systemd/journal/stdout 12258                                * 12257              \n  udp    ESTAB      0      0             10.139.151.2:35758                  114.114.114.114:53                 \n  udp    UNCONN     0      0             10.139.151.2:123                                  *:*                  \n  udp    UNCONN     0      0                127.0.0.1:123                                  *:*                  \n  tcp    LISTEN     0      128                      *:111                                  *:*                  \n  tcp    LISTEN     0      128                      *:2233                                 *:*                  \n  tcp    ESTAB      0      0             10.139.151.2:2233                   118.113.205.177:25473              \n  ```\n\n- `netstat -an | awk '/^tcp/{++sta[$NF]} END {for(key in sta) print key,\"\\t\",sta[key]}'`命令可以统计出系统各个网络连接的总数：\n\n  ```bash\n  [root@evobot ~]# netstat -an | awk '/^tcp/{++sta[$NF]} END {for(key in sta) print key,\"\\t\",sta[key]}'\n  LISTEN \t 2\n  ESTABLISHED \t 1\n  ```\n\n  - 这其中我们主要关注**ESTABLISHED**状态数，其表示正在和服务器通信的连接数。\n\n## **tcpdump**命令\n\n- `tcpdump`命令是用来网络抓包的命令行工具，使用前需要安装`tcpdump`软件包；\n\n- 常用用法有以下几种：\n\n  1. `tcpdump -nn -i [网卡名]`： 这里的参数`-nn`，第一个**n**表示显示ip地址，否则显示主机名，第二个**n**表示显示端口，否则使用服务名表示；\n\n  ![tcpdump -nn](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/tcpdump-nn.png)\n\n  ![tcpdump -i](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/tcpdum-i.png)\n\n  > 上面的输出中分别表示时间，IP，源ip.端口，目的ip.端口以及数据包信息；\n\n  2. `tcpdump -nn port [端口号]`：抓取指定端口的数据包，同样也可以使用`tcpdump -nn -i eth0 not port [端口号]`抓取除指定端口外的数据包，或者`tcpdump -nn -i eth0 not port [端口号] and host [ip地址]`来抓取指定host除指定端口外的数据包：\n\n  ```bash\n  root@Deppin:~# tcpdump -nn -i wlp2s0 not port 22 and host 180.97.33.108\n  tcpdump: verbose output suppressed, use -v or -vv for full protocol decode\n  listening on wlp2s0, link-type EN10MB (Ethernet), capture size 262144 bytes\n  00:23:25.460925 IP 192.168.199.199.43109 > 180.97.33.108.80: Flags [F.], seq 836106603, ack 3946427568, win 229, length 0\n  00:23:29.332936 IP 192.168.199.199.43109 > 180.97.33.108.80: Flags [F.], seq 0, ack 1, win 229, length 0\n  00:23:29.332966 IP 192.168.199.199.34253 > 180.97.33.108.80: Flags [F.], seq 3073252526, ack 1107915791, win 229, length 0\n  00:23:29.332975 IP 192.168.199.199.42371 > 180.97.33.108.80: Flags [F.], seq 1787139822, ack 537241163, win 229, length 0\n  ^C\n  4 packets captured\n  4 packets received by filter\n  0 packets dropped by kernel\n  ```\n\n  3. 也可以指定抓取的数据包个数和指定存储到哪个文件：`root@Deppin:~# tcpdump -nn -i wlp2s0 -c 5 -w /tmp/1.cap`:\n\n  ```bash\n  root@Deppin:~# tcpdump -nn -i wlp2s0 -c 5 -w /tmp/1.cap\n  tcpdump: listening on wlp2s0, link-type EN10MB (Ethernet), capture size 262144 bytes\n  5 packets captured\n  35 packets received by filter\n  0 packets dropped by kernel\n\n  root@Deppin:~# file /tmp/1.cap \n  /tmp/1.cap: tcpdump capture file (little-endian) - version 2.4 (Ethernet, capture length 262144)\n  ```\n\n  {% note success %} \n  抓取的文件是无法使用cat命令查看的，查看需要使用`tcpdump -r [filename]`进行查看。\n  {% endnote %}\n\n- `tshark`命令是类似`tcpdump`的工具，使用这个命令需要安装`wireshark`软件包，常用用法如下:\n\n  ```bash\n  # tshark -n -t a -R http.request -T fields -e \"frame.time\" -e \"ip.src\" -e \"http.host\" -e \"http.request.method\" -e \"http.request.uri\"\n  tshark: -R without -2 is deprecated. For single-pass filtering use -Y.\n  Running as user \"root\" and group \"root\". This could be dangerous.\n  Capturing on 'eth0'\n  \"May  8, 2018 00:35:03.807043090 CST\"\t10.139.151.2\treceiver.barad.tencentyun.com\tPOST\t/ca_report.cgi\n  \"May  8, 2018 00:35:08.814790915 CST\"\t10.139.151.2\treceiver.barad.tencentyun.com\tPOST\t/ca_report.cgi\n  \"May  8, 2018 00:35:13.823298617 CST\"\t10.139.151.2\treceiver.barad.tencentyun.com\tPOST\t/heart_report.cgi\n  \"May  8, 2018 00:35:18.831342319 CST\"\t10.139.151.2\treceiver.barad.tencentyun.com\tPOST\t/ca_report.cgi\n  \"May  8, 2018 00:35:23.840005021 CST\"\t10.139.151.2\treceiver.barad.tencentyun.com\tPOST\t/ca_report.cgi\n  ^C1 packet dropped\n  5 packets captured\n  ```\n\n  {% note success %} \n  上面的命令可以看到详细的ip地址、访问的网址，请求方法和请求的资源。关于`tshark`更多的用法，可以参考[tshark----wireshark的命令行工具](https://blog.csdn.net/hello2mao/article/details/53967900)\n  {% endnote %}\n---","slug":"Linux日常运维(二)—进程、内存网络监控","published":1,"updated":"2018-06-02T13:01:29.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazau0022u1jxuxywcule","content":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p>本文主要介绍LInux日常运维中如何监控io性能，以及free查看内存的命令和ps查看进程的命令，另外介绍如何查看网络状态并且对网络进行抓包的相关知识。</p><a id=\"more\"></a><hr><h1 id=\"磁盘监控\"><a href=\"#磁盘监控\" class=\"headerlink\" title=\"磁盘监控\"></a>磁盘监控</h1><h2 id=\"iostat命令\"><a href=\"#iostat命令\" class=\"headerlink\" title=\"iostat命令\"></a><strong>iostat</strong>命令</h2><ul><li><p>使用<code>vmstat</code>查看系统状态时，如果bi、bo或者wa列数值过高，那么需要查看磁盘更详细的状态，就可以使用<code>iostat</code>命令；</p></li><li><p><code>iostat</code>命令是在安装<code>sysstat</code>软件包时一并安装到系统中的，直接执行<code>iostat</code>命令可以查看系统中各个磁盘的详细信息，也可以像<code>vmstat</code>命令一样执行<code>iostat 1</code>命令每秒刷新输出磁盘信息；</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># iostat </span></span><br><span class=\"line\">Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月06日 \t_x86_64_\t(1 CPU)</span><br><span class=\"line\"></span><br><span class=\"line\">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class=\"line\">           0.61    0.00    0.24    0.29    0.00   98.85</span><br><span class=\"line\"></span><br><span class=\"line\">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class=\"line\">vda               2.04         0.29        18.04     454791   27963960</span><br><span class=\"line\">scd0              0.00         0.00         0.00        552          0</span><br></pre></td></tr></table></figure></li><li><p>列出的信息中，每列分别表示设备名、每秒进程下发的IO读写请求数量、每秒读取的kB数，每秒写入的kB数、取样时间间隔内读取的kB总数和取样时间间隔内写入的kB总量；</p></li><li><p>上面的输出信息与<code>sar -b</code>查看到的内容是一样的，更常用的用法为<code>iostat -x 1</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># iostat -x</span></span><br><span class=\"line\">Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月06日 \t_x86_64_\t(1 CPU)</span><br><span class=\"line\"></span><br><span class=\"line\">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class=\"line\">           0.61    0.00    0.24    0.29    0.00   98.85</span><br><span class=\"line\"></span><br><span class=\"line\">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class=\"line\">vda               0.00     2.36    0.01    2.03     0.29    18.04    17.98     0.03   16.11    9.70   16.16   1.77   0.36</span><br><span class=\"line\">scd0              0.00     0.00    0.00    0.00     0.00     0.00     9.95     0.00    1.41    1.41    0.00   1.41   0.00</span><br></pre></td></tr></table></figure><ul><li>这里列出的信息，主要关注<code>%util</code>列，其表示<strong>进程被I/O需求消耗的CPU百分比</strong>，如果这里的值超过50%，但wkB/s和rkB/s比较小，则说明磁盘io繁忙，磁盘存在一些问题，可能需要更换磁盘；</li></ul></li></ul><h2 id=\"iotop命令\"><a href=\"#iotop命令\" class=\"headerlink\" title=\"iotop命令\"></a><strong>iotop</strong>命令</h2><ul><li><p>当我们使用<code>iostat</code>查看到磁盘io较高时，可能需要查看是哪个进程的磁盘读写较高，就可以使用<code>iotop</code>命令，使用<code>iotop</code>命令需要安装<code>iotop</code>软件包；</p></li><li><p>执行<code>iotop</code>命令，其命令输出类似于<code>top</code>命令，每秒钟刷新一次：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/iotop.png\" alt=\"iotop\"></p></li><li><p>主要关注的是<code>IO</code>列和<code>COMMAND</code>列，来查看具体哪个进程占用IO比例最高；</p></li></ul><hr><h1 id=\"内存和进程监控\"><a href=\"#内存和进程监控\" class=\"headerlink\" title=\"内存和进程监控\"></a>内存和进程监控</h1><h2 id=\"free命令\"><a href=\"#free命令\" class=\"headerlink\" title=\"free命令\"></a><strong>free</strong>命令</h2><ul><li><p><code>free</code>命令主要用来查看内存的使用情况：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># free</span></span><br><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\">Mem:        1883540       97652      468720         392     1317168     1586592</span><br><span class=\"line\">Swap:             0           0           0</span><br></pre></td></tr></table></figure></li><li><p>所列出的信息中，第一行为标题，第二行为内存使用情况，第三行为交换分区使用情况；</p></li><li>各列所表示信息如下表，默认<code>free</code>命令输出信息单位为<code>kB</code>，可以使用<code>free -m</code>转换单位为MB，或者使用<code>free -h</code>人性化显示：</li></ul><style>table th{text-align:center}table th:first-of-type{width:120px}</style><table><thead><tr><th style=\"text-align:center\">标示</th><th>说明</th></tr></thead><tbody><tr><td style=\"text-align:center\">total</td><td>内存总大小</td></tr><tr><td style=\"text-align:center\">used</td><td>内存已被使用的大小</td></tr><tr><td style=\"text-align:center\">free</td><td>空闲内存大小</td></tr><tr><td style=\"text-align:center\">shared</td><td>共享的内存大小</td></tr><tr><td style=\"text-align:center\">buff/cache</td><td>缓冲(buff)及缓存(cache)大小，cache是从磁盘预先读取出来准备送往CPU处理的数据，buf则是CPU处理完的准备存储到磁盘上的数据</td></tr><tr><td style=\"text-align:center\">available</td><td>表示空闲内存加上未分配给buff/cache的内存大小</td></tr></tbody></table><ul><li><code>free</code>命令的输出中，total=used+free+buff/cache，而avaliable=free+(buff/cache剩余部分)，所以在查看内存状态时，应该关注的是<strong>avaliable</strong>的值。</li><li>而swap行如果占用过高，或者swap剩余为0，则需要增加内存，或者有程序存在内存泄露，需要进一步排查。</li></ul><h2 id=\"ps命令\"><a href=\"#ps命令\" class=\"headerlink\" title=\"ps命令\"></a><strong>ps</strong>命令</h2><ul><li><p><code>ps</code>命令用来查看当前系统运行的进程快照，<code>ps aux</code>用来查看所有的进程，并列出进程命令；</p></li><li><p>常用使用<code>ps</code>命令与管道符和<code>grep</code>使用查看具体的进程是否运行，另外查看进程也可以用<code>ps -elf</code>命令：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/ps.png\" alt=\"ps\"></p></li><li><p><code>ps</code>命令可以查看到进程的PID，PID可以用来杀死一个进程，使用<code>kill [pid]</code>命令杀死进程；</p></li><li><p>使用<code>ls -l /proc/[pid]</code>可以查看进程运行的信息和相关文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -l /proc/447/</span></span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">dr-xr-xr-x 2 root root 0 4月  19 00:35 attr</span><br><span class=\"line\">-rw-r--r-- 1 root root 0 5月   7 22:47 autogroup</span><br><span class=\"line\">-r-------- 1 root root 0 5月   7 22:47 auxv</span><br><span class=\"line\">-r--r--r-- 1 root root 0 4月  19 00:35 cgroup</span><br><span class=\"line\">--w------- 1 root root 0 5月   7 22:47 clear_refs</span><br><span class=\"line\">-r--r--r-- 1 root root 0 4月  19 00:35 cmdline</span><br><span class=\"line\">-rw-r--r-- 1 root root 0 4月  19 00:35 comm</span><br><span class=\"line\">-rw-r--r-- 1 root root 0 5月   7 22:47 coredump_filter</span><br><span class=\"line\">-r--r--r-- 1 root root 0 5月   7 22:47 cpuset</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 5月   7 22:47 cwd -&gt; /</span><br><span class=\"line\">-r-------- 1 root root 0 5月   7 22:38 environ</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 4月  19 00:35 exe -&gt; /usr/sbin/auditd</span><br></pre></td></tr></table></figure></li><li><p><code>ps</code>命令所列的信息中，包括CPU和内存百分比，<code>VSZ</code>表示进程占用的虚拟内存，<code>RSS</code>表示进程占用的物理内存与<code>top</code>命令的<code>RES</code>列相同，<code>TTY</code>表示进程在哪个tty所运行，<code>START</code>表示进程开始运行的时间，<code>TIME</code>表示进程运行的总时间，<code>COMMAND</code>表示进程的命令，<code>STAT</code>表示进程的状态，具体存在的状态如下表：</p></li></ul><table><thead><tr><th style=\"text-align:center\">状态表示字符</th><th>说明</th></tr></thead><tbody><tr><td style=\"text-align:center\">D</td><td>不能中断的进程</td></tr><tr><td style=\"text-align:center\">R</td><td>run状态正在运行的进程</td></tr><tr><td style=\"text-align:center\">S</td><td>sleep睡眠状态的进程，有些进程运行时占用CPU时间非常短暂，也会显示为S</td></tr><tr><td style=\"text-align:center\">T</td><td>暂停的进程，如ctrl+z暂停的进程</td></tr><tr><td style=\"text-align:center\">+</td><td>表示前台进程</td></tr><tr><td style=\"text-align:center\">Z</td><td>僵尸进程</td></tr><tr><td style=\"text-align:center\">&lt;</td><td>高优先级进程，有限占用CPU资源</td></tr><tr><td style=\"text-align:center\">N</td><td>低优先级进程</td></tr><tr><td style=\"text-align:center\">L</td><td>内存中被锁了内存分页的进程，少见</td></tr><tr><td style=\"text-align:center\">s</td><td>主进程，例如nginx进程，存在一个主进程，另外还衍生出多个子进程</td></tr><tr><td style=\"text-align:center\">l</td><td>多线程进程，一个进程可以有多个线程，线程间共享进程的内存</td></tr></tbody></table><hr><h1 id=\"网络监控和抓包\"><a href=\"#网络监控和抓包\" class=\"headerlink\" title=\"网络监控和抓包\"></a>网络监控和抓包</h1><h2 id=\"netstat命令\"><a href=\"#netstat命令\" class=\"headerlink\" title=\"netstat命令\"></a><strong>netstat</strong>命令</h2><ul><li><p><code>netstat</code>命令用来查看系统的网络状态，常用的用法分为以下三种：</p><ol><li><code>netstat -lnp</code>：查看服务监听的端口，如下图，tcp和udp分别监听的端口，另外也列出了系统的socket文件：</li></ol><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/netstat-lnp.png\" alt=\"netstat -lnp\"></p><ol start=\"2\"><li><code>netstat -an</code>：查看系统的网络连接状态，具体状态含义可以查看<a href=\"http://www.doc88.com/p-9913773324388.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">tcp的三次握手和四次挥手</a>：</li></ol><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/netstat-an.png\" alt=\"netstat -an\"></p><ol start=\"3\"><li>上面的命令输出中将TCP和UDP都列出来了，如果想要只查看tcp连接，可以使用<code>-t</code>参数，查看udp连接使用<code>-u</code>参数，使用这两个参数时不会列出socket：</li></ol><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># netstat -ant</span></span><br><span class=\"line\">Active Internet connections (servers and established)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State      </span><br><span class=\"line\">tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN     </span><br><span class=\"line\">tcp        0      0 0.0.0.0:2233            0.0.0.0:*               LISTEN     </span><br><span class=\"line\">tcp        0     36 10.139.151.2:2233       118.113.205.177:25473   ESTABLISHED</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># netstat -anu</span></span><br><span class=\"line\">Active Internet connections (servers and established)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State      </span><br><span class=\"line\">udp        0      0 10.139.151.2:34290      114.114.114.114:53      ESTABLISHED</span><br><span class=\"line\">udp        0      0 10.139.151.2:123        0.0.0.0:*                          </span><br><span class=\"line\">udp        0      0 127.0.0.1:123           0.0.0.0:*                          </span><br><span class=\"line\">udp        0      0 0.0.0.0:123             0.0.0.0:*                          </span><br><span class=\"line\">udp6       0      0 :::123                  :::*</span><br></pre></td></tr></table></figure></li><li><p><code>ss -an</code>命令同样也可以输出系统的网络连接状态，但不会显示进程名：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ss -an</span></span><br><span class=\"line\">Netid  State      Recv-Q Send-Q       Local Address:Port                      Peer Address:Port              </span><br><span class=\"line\">nl     UNCONN     0      0                        0:490                                   *                   </span><br><span class=\"line\">u_str  ESTAB      0      0      /run/systemd/journal/stdout 12258                                * 12257              </span><br><span class=\"line\">udp    ESTAB      0      0             10.139.151.2:35758                  114.114.114.114:53                 </span><br><span class=\"line\">udp    UNCONN     0      0             10.139.151.2:123                                  *:*                  </span><br><span class=\"line\">udp    UNCONN     0      0                127.0.0.1:123                                  *:*                  </span><br><span class=\"line\">tcp    LISTEN     0      128                      *:111                                  *:*                  </span><br><span class=\"line\">tcp    LISTEN     0      128                      *:2233                                 *:*                  </span><br><span class=\"line\">tcp    ESTAB      0      0             10.139.151.2:2233                   118.113.205.177:25473</span><br></pre></td></tr></table></figure></li><li><p><code>netstat -an | awk &#39;/^tcp/{++sta[$NF]} END {for(key in sta) print key,&quot;\\t&quot;,sta[key]}&#39;</code>命令可以统计出系统各个网络连接的总数：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># netstat -an | awk '/^tcp/&#123;++sta[$NF]&#125; END &#123;for(key in sta) print key,\"\\t\",sta[key]&#125;'</span></span><br><span class=\"line\">LISTEN \t 2</span><br><span class=\"line\">ESTABLISHED \t 1</span><br></pre></td></tr></table></figure><ul><li>这其中我们主要关注<strong>ESTABLISHED</strong>状态数，其表示正在和服务器通信的连接数。</li></ul></li></ul><h2 id=\"tcpdump命令\"><a href=\"#tcpdump命令\" class=\"headerlink\" title=\"tcpdump命令\"></a><strong>tcpdump</strong>命令</h2><ul><li><p><code>tcpdump</code>命令是用来网络抓包的命令行工具，使用前需要安装<code>tcpdump</code>软件包；</p></li><li><p>常用用法有以下几种：</p><ol><li><code>tcpdump -nn -i [网卡名]</code>： 这里的参数<code>-nn</code>，第一个<strong>n</strong>表示显示ip地址，否则显示主机名，第二个<strong>n</strong>表示显示端口，否则使用服务名表示；</li></ol><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/tcpdump-nn.png\" alt=\"tcpdump -nn\"></p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/tcpdum-i.png\" alt=\"tcpdump -i\"></p><blockquote><p>上面的输出中分别表示时间，IP，源ip.端口，目的ip.端口以及数据包信息；</p></blockquote><ol start=\"2\"><li><code>tcpdump -nn port [端口号]</code>：抓取指定端口的数据包，同样也可以使用<code>tcpdump -nn -i eth0 not port [端口号]</code>抓取除指定端口外的数据包，或者<code>tcpdump -nn -i eth0 not port [端口号] and host [ip地址]</code>来抓取指定host除指定端口外的数据包：</li></ol><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@Deppin:~<span class=\"comment\"># tcpdump -nn -i wlp2s0 not port 22 and host 180.97.33.108</span></span><br><span class=\"line\">tcpdump: verbose output suppressed, use -v or -vv <span class=\"keyword\">for</span> full protocol decode</span><br><span class=\"line\">listening on wlp2s0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class=\"line\">00:23:25.460925 IP 192.168.199.199.43109 &gt; 180.97.33.108.80: Flags [F.], seq 836106603, ack 3946427568, win 229, length 0</span><br><span class=\"line\">00:23:29.332936 IP 192.168.199.199.43109 &gt; 180.97.33.108.80: Flags [F.], seq 0, ack 1, win 229, length 0</span><br><span class=\"line\">00:23:29.332966 IP 192.168.199.199.34253 &gt; 180.97.33.108.80: Flags [F.], seq 3073252526, ack 1107915791, win 229, length 0</span><br><span class=\"line\">00:23:29.332975 IP 192.168.199.199.42371 &gt; 180.97.33.108.80: Flags [F.], seq 1787139822, ack 537241163, win 229, length 0</span><br><span class=\"line\">^C</span><br><span class=\"line\">4 packets captured</span><br><span class=\"line\">4 packets received by filter</span><br><span class=\"line\">0 packets dropped by kernel</span><br></pre></td></tr></table></figure><ol start=\"3\"><li>也可以指定抓取的数据包个数和指定存储到哪个文件：<code>root@Deppin:~# tcpdump -nn -i wlp2s0 -c 5 -w /tmp/1.cap</code>:</li></ol><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@Deppin:~<span class=\"comment\"># tcpdump -nn -i wlp2s0 -c 5 -w /tmp/1.cap</span></span><br><span class=\"line\">tcpdump: listening on wlp2s0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class=\"line\">5 packets captured</span><br><span class=\"line\">35 packets received by filter</span><br><span class=\"line\">0 packets dropped by kernel</span><br><span class=\"line\"></span><br><span class=\"line\">root@Deppin:~<span class=\"comment\"># file /tmp/1.cap </span></span><br><span class=\"line\">/tmp/1.cap: tcpdump capture file (little-endian) - version 2.4 (Ethernet, capture length 262144)</span><br></pre></td></tr></table></figure><div class=\"note success\"><p>抓取的文件是无法使用cat命令查看的，查看需要使用<code>tcpdump -r [filename]</code>进行查看。</p></div></li><li><p><code>tshark</code>命令是类似<code>tcpdump</code>的工具，使用这个命令需要安装<code>wireshark</code>软件包，常用用法如下:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># tshark -n -t a -R http.request -T fields -e \"frame.time\" -e \"ip.src\" -e \"http.host\" -e \"http.request.method\" -e \"http.request.uri\"</span></span><br><span class=\"line\">tshark: -R without -2 is deprecated. For single-pass filtering use -Y.</span><br><span class=\"line\">Running as user <span class=\"string\">\"root\"</span> and group <span class=\"string\">\"root\"</span>. This could be dangerous.</span><br><span class=\"line\">Capturing on <span class=\"string\">'eth0'</span></span><br><span class=\"line\"><span class=\"string\">\"May  8, 2018 00:35:03.807043090 CST\"</span>\t10.139.151.2\treceiver.barad.tencentyun.com\tPOST\t/ca_report.cgi</span><br><span class=\"line\"><span class=\"string\">\"May  8, 2018 00:35:08.814790915 CST\"</span>\t10.139.151.2\treceiver.barad.tencentyun.com\tPOST\t/ca_report.cgi</span><br><span class=\"line\"><span class=\"string\">\"May  8, 2018 00:35:13.823298617 CST\"</span>\t10.139.151.2\treceiver.barad.tencentyun.com\tPOST\t/heart_report.cgi</span><br><span class=\"line\"><span class=\"string\">\"May  8, 2018 00:35:18.831342319 CST\"</span>\t10.139.151.2\treceiver.barad.tencentyun.com\tPOST\t/ca_report.cgi</span><br><span class=\"line\"><span class=\"string\">\"May  8, 2018 00:35:23.840005021 CST\"</span>\t10.139.151.2\treceiver.barad.tencentyun.com\tPOST\t/ca_report.cgi</span><br><span class=\"line\">^C1 packet dropped</span><br><span class=\"line\">5 packets captured</span><br></pre></td></tr></table></figure><div class=\"note success\"><p>上面的命令可以看到详细的ip地址、访问的网址，请求方法和请求的资源。关于<code>tshark</code>更多的用法，可以参考<a href=\"https://blog.csdn.net/hello2mao/article/details/53967900\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">tshark—-wireshark的命令行工具</a></p></div></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p>本文主要介绍LInux日常运维中如何监控io性能，以及free查看内存的命令和ps查看进程的命令，另外介绍如何查看网络状态并且对网络进行抓包的相关知识。</p>","more":"<hr><h1 id=\"磁盘监控\"><a href=\"#磁盘监控\" class=\"headerlink\" title=\"磁盘监控\"></a>磁盘监控</h1><h2 id=\"iostat命令\"><a href=\"#iostat命令\" class=\"headerlink\" title=\"iostat命令\"></a><strong>iostat</strong>命令</h2><ul><li><p>使用<code>vmstat</code>查看系统状态时，如果bi、bo或者wa列数值过高，那么需要查看磁盘更详细的状态，就可以使用<code>iostat</code>命令；</p></li><li><p><code>iostat</code>命令是在安装<code>sysstat</code>软件包时一并安装到系统中的，直接执行<code>iostat</code>命令可以查看系统中各个磁盘的详细信息，也可以像<code>vmstat</code>命令一样执行<code>iostat 1</code>命令每秒刷新输出磁盘信息；</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># iostat </span></span><br><span class=\"line\">Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月06日 \t_x86_64_\t(1 CPU)</span><br><span class=\"line\"></span><br><span class=\"line\">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class=\"line\">           0.61    0.00    0.24    0.29    0.00   98.85</span><br><span class=\"line\"></span><br><span class=\"line\">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class=\"line\">vda               2.04         0.29        18.04     454791   27963960</span><br><span class=\"line\">scd0              0.00         0.00         0.00        552          0</span><br></pre></td></tr></table></figure></li><li><p>列出的信息中，每列分别表示设备名、每秒进程下发的IO读写请求数量、每秒读取的kB数，每秒写入的kB数、取样时间间隔内读取的kB总数和取样时间间隔内写入的kB总量；</p></li><li><p>上面的输出信息与<code>sar -b</code>查看到的内容是一样的，更常用的用法为<code>iostat -x 1</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># iostat -x</span></span><br><span class=\"line\">Linux 3.10.0-693.21.1.el7.x86_64 (evobot) \t2018年05月06日 \t_x86_64_\t(1 CPU)</span><br><span class=\"line\"></span><br><span class=\"line\">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class=\"line\">           0.61    0.00    0.24    0.29    0.00   98.85</span><br><span class=\"line\"></span><br><span class=\"line\">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class=\"line\">vda               0.00     2.36    0.01    2.03     0.29    18.04    17.98     0.03   16.11    9.70   16.16   1.77   0.36</span><br><span class=\"line\">scd0              0.00     0.00    0.00    0.00     0.00     0.00     9.95     0.00    1.41    1.41    0.00   1.41   0.00</span><br></pre></td></tr></table></figure><ul><li>这里列出的信息，主要关注<code>%util</code>列，其表示<strong>进程被I/O需求消耗的CPU百分比</strong>，如果这里的值超过50%，但wkB/s和rkB/s比较小，则说明磁盘io繁忙，磁盘存在一些问题，可能需要更换磁盘；</li></ul></li></ul><h2 id=\"iotop命令\"><a href=\"#iotop命令\" class=\"headerlink\" title=\"iotop命令\"></a><strong>iotop</strong>命令</h2><ul><li><p>当我们使用<code>iostat</code>查看到磁盘io较高时，可能需要查看是哪个进程的磁盘读写较高，就可以使用<code>iotop</code>命令，使用<code>iotop</code>命令需要安装<code>iotop</code>软件包；</p></li><li><p>执行<code>iotop</code>命令，其命令输出类似于<code>top</code>命令，每秒钟刷新一次：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/iotop.png\" alt=\"iotop\"></p></li><li><p>主要关注的是<code>IO</code>列和<code>COMMAND</code>列，来查看具体哪个进程占用IO比例最高；</p></li></ul><hr><h1 id=\"内存和进程监控\"><a href=\"#内存和进程监控\" class=\"headerlink\" title=\"内存和进程监控\"></a>内存和进程监控</h1><h2 id=\"free命令\"><a href=\"#free命令\" class=\"headerlink\" title=\"free命令\"></a><strong>free</strong>命令</h2><ul><li><p><code>free</code>命令主要用来查看内存的使用情况：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># free</span></span><br><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\">Mem:        1883540       97652      468720         392     1317168     1586592</span><br><span class=\"line\">Swap:             0           0           0</span><br></pre></td></tr></table></figure></li><li><p>所列出的信息中，第一行为标题，第二行为内存使用情况，第三行为交换分区使用情况；</p></li><li>各列所表示信息如下表，默认<code>free</code>命令输出信息单位为<code>kB</code>，可以使用<code>free -m</code>转换单位为MB，或者使用<code>free -h</code>人性化显示：</li></ul><style>table th{text-align:center}table th:first-of-type{width:120px}</style><table><thead><tr><th style=\"text-align:center\">标示</th><th>说明</th></tr></thead><tbody><tr><td style=\"text-align:center\">total</td><td>内存总大小</td></tr><tr><td style=\"text-align:center\">used</td><td>内存已被使用的大小</td></tr><tr><td style=\"text-align:center\">free</td><td>空闲内存大小</td></tr><tr><td style=\"text-align:center\">shared</td><td>共享的内存大小</td></tr><tr><td style=\"text-align:center\">buff/cache</td><td>缓冲(buff)及缓存(cache)大小，cache是从磁盘预先读取出来准备送往CPU处理的数据，buf则是CPU处理完的准备存储到磁盘上的数据</td></tr><tr><td style=\"text-align:center\">available</td><td>表示空闲内存加上未分配给buff/cache的内存大小</td></tr></tbody></table><ul><li><code>free</code>命令的输出中，total=used+free+buff/cache，而avaliable=free+(buff/cache剩余部分)，所以在查看内存状态时，应该关注的是<strong>avaliable</strong>的值。</li><li>而swap行如果占用过高，或者swap剩余为0，则需要增加内存，或者有程序存在内存泄露，需要进一步排查。</li></ul><h2 id=\"ps命令\"><a href=\"#ps命令\" class=\"headerlink\" title=\"ps命令\"></a><strong>ps</strong>命令</h2><ul><li><p><code>ps</code>命令用来查看当前系统运行的进程快照，<code>ps aux</code>用来查看所有的进程，并列出进程命令；</p></li><li><p>常用使用<code>ps</code>命令与管道符和<code>grep</code>使用查看具体的进程是否运行，另外查看进程也可以用<code>ps -elf</code>命令：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/ps.png\" alt=\"ps\"></p></li><li><p><code>ps</code>命令可以查看到进程的PID，PID可以用来杀死一个进程，使用<code>kill [pid]</code>命令杀死进程；</p></li><li><p>使用<code>ls -l /proc/[pid]</code>可以查看进程运行的信息和相关文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -l /proc/447/</span></span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">dr-xr-xr-x 2 root root 0 4月  19 00:35 attr</span><br><span class=\"line\">-rw-r--r-- 1 root root 0 5月   7 22:47 autogroup</span><br><span class=\"line\">-r-------- 1 root root 0 5月   7 22:47 auxv</span><br><span class=\"line\">-r--r--r-- 1 root root 0 4月  19 00:35 cgroup</span><br><span class=\"line\">--w------- 1 root root 0 5月   7 22:47 clear_refs</span><br><span class=\"line\">-r--r--r-- 1 root root 0 4月  19 00:35 cmdline</span><br><span class=\"line\">-rw-r--r-- 1 root root 0 4月  19 00:35 comm</span><br><span class=\"line\">-rw-r--r-- 1 root root 0 5月   7 22:47 coredump_filter</span><br><span class=\"line\">-r--r--r-- 1 root root 0 5月   7 22:47 cpuset</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 5月   7 22:47 cwd -&gt; /</span><br><span class=\"line\">-r-------- 1 root root 0 5月   7 22:38 environ</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 4月  19 00:35 exe -&gt; /usr/sbin/auditd</span><br></pre></td></tr></table></figure></li><li><p><code>ps</code>命令所列的信息中，包括CPU和内存百分比，<code>VSZ</code>表示进程占用的虚拟内存，<code>RSS</code>表示进程占用的物理内存与<code>top</code>命令的<code>RES</code>列相同，<code>TTY</code>表示进程在哪个tty所运行，<code>START</code>表示进程开始运行的时间，<code>TIME</code>表示进程运行的总时间，<code>COMMAND</code>表示进程的命令，<code>STAT</code>表示进程的状态，具体存在的状态如下表：</p></li></ul><table><thead><tr><th style=\"text-align:center\">状态表示字符</th><th>说明</th></tr></thead><tbody><tr><td style=\"text-align:center\">D</td><td>不能中断的进程</td></tr><tr><td style=\"text-align:center\">R</td><td>run状态正在运行的进程</td></tr><tr><td style=\"text-align:center\">S</td><td>sleep睡眠状态的进程，有些进程运行时占用CPU时间非常短暂，也会显示为S</td></tr><tr><td style=\"text-align:center\">T</td><td>暂停的进程，如ctrl+z暂停的进程</td></tr><tr><td style=\"text-align:center\">+</td><td>表示前台进程</td></tr><tr><td style=\"text-align:center\">Z</td><td>僵尸进程</td></tr><tr><td style=\"text-align:center\">&lt;</td><td>高优先级进程，有限占用CPU资源</td></tr><tr><td style=\"text-align:center\">N</td><td>低优先级进程</td></tr><tr><td style=\"text-align:center\">L</td><td>内存中被锁了内存分页的进程，少见</td></tr><tr><td style=\"text-align:center\">s</td><td>主进程，例如nginx进程，存在一个主进程，另外还衍生出多个子进程</td></tr><tr><td style=\"text-align:center\">l</td><td>多线程进程，一个进程可以有多个线程，线程间共享进程的内存</td></tr></tbody></table><hr><h1 id=\"网络监控和抓包\"><a href=\"#网络监控和抓包\" class=\"headerlink\" title=\"网络监控和抓包\"></a>网络监控和抓包</h1><h2 id=\"netstat命令\"><a href=\"#netstat命令\" class=\"headerlink\" title=\"netstat命令\"></a><strong>netstat</strong>命令</h2><ul><li><p><code>netstat</code>命令用来查看系统的网络状态，常用的用法分为以下三种：</p><ol><li><code>netstat -lnp</code>：查看服务监听的端口，如下图，tcp和udp分别监听的端口，另外也列出了系统的socket文件：</li></ol><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/netstat-lnp.png\" alt=\"netstat -lnp\"></p><ol start=\"2\"><li><code>netstat -an</code>：查看系统的网络连接状态，具体状态含义可以查看<a href=\"http://www.doc88.com/p-9913773324388.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">tcp的三次握手和四次挥手</a>：</li></ol><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/netstat-an.png\" alt=\"netstat -an\"></p><ol start=\"3\"><li>上面的命令输出中将TCP和UDP都列出来了，如果想要只查看tcp连接，可以使用<code>-t</code>参数，查看udp连接使用<code>-u</code>参数，使用这两个参数时不会列出socket：</li></ol><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># netstat -ant</span></span><br><span class=\"line\">Active Internet connections (servers and established)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State      </span><br><span class=\"line\">tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN     </span><br><span class=\"line\">tcp        0      0 0.0.0.0:2233            0.0.0.0:*               LISTEN     </span><br><span class=\"line\">tcp        0     36 10.139.151.2:2233       118.113.205.177:25473   ESTABLISHED</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># netstat -anu</span></span><br><span class=\"line\">Active Internet connections (servers and established)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State      </span><br><span class=\"line\">udp        0      0 10.139.151.2:34290      114.114.114.114:53      ESTABLISHED</span><br><span class=\"line\">udp        0      0 10.139.151.2:123        0.0.0.0:*                          </span><br><span class=\"line\">udp        0      0 127.0.0.1:123           0.0.0.0:*                          </span><br><span class=\"line\">udp        0      0 0.0.0.0:123             0.0.0.0:*                          </span><br><span class=\"line\">udp6       0      0 :::123                  :::*</span><br></pre></td></tr></table></figure></li><li><p><code>ss -an</code>命令同样也可以输出系统的网络连接状态，但不会显示进程名：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ss -an</span></span><br><span class=\"line\">Netid  State      Recv-Q Send-Q       Local Address:Port                      Peer Address:Port              </span><br><span class=\"line\">nl     UNCONN     0      0                        0:490                                   *                   </span><br><span class=\"line\">u_str  ESTAB      0      0      /run/systemd/journal/stdout 12258                                * 12257              </span><br><span class=\"line\">udp    ESTAB      0      0             10.139.151.2:35758                  114.114.114.114:53                 </span><br><span class=\"line\">udp    UNCONN     0      0             10.139.151.2:123                                  *:*                  </span><br><span class=\"line\">udp    UNCONN     0      0                127.0.0.1:123                                  *:*                  </span><br><span class=\"line\">tcp    LISTEN     0      128                      *:111                                  *:*                  </span><br><span class=\"line\">tcp    LISTEN     0      128                      *:2233                                 *:*                  </span><br><span class=\"line\">tcp    ESTAB      0      0             10.139.151.2:2233                   118.113.205.177:25473</span><br></pre></td></tr></table></figure></li><li><p><code>netstat -an | awk &#39;/^tcp/{++sta[$NF]} END {for(key in sta) print key,&quot;\\t&quot;,sta[key]}&#39;</code>命令可以统计出系统各个网络连接的总数：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># netstat -an | awk '/^tcp/&#123;++sta[$NF]&#125; END &#123;for(key in sta) print key,\"\\t\",sta[key]&#125;'</span></span><br><span class=\"line\">LISTEN \t 2</span><br><span class=\"line\">ESTABLISHED \t 1</span><br></pre></td></tr></table></figure><ul><li>这其中我们主要关注<strong>ESTABLISHED</strong>状态数，其表示正在和服务器通信的连接数。</li></ul></li></ul><h2 id=\"tcpdump命令\"><a href=\"#tcpdump命令\" class=\"headerlink\" title=\"tcpdump命令\"></a><strong>tcpdump</strong>命令</h2><ul><li><p><code>tcpdump</code>命令是用来网络抓包的命令行工具，使用前需要安装<code>tcpdump</code>软件包；</p></li><li><p>常用用法有以下几种：</p><ol><li><code>tcpdump -nn -i [网卡名]</code>： 这里的参数<code>-nn</code>，第一个<strong>n</strong>表示显示ip地址，否则显示主机名，第二个<strong>n</strong>表示显示端口，否则使用服务名表示；</li></ol><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/tcpdump-nn.png\" alt=\"tcpdump -nn\"></p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/tcpdum-i.png\" alt=\"tcpdump -i\"></p><blockquote><p>上面的输出中分别表示时间，IP，源ip.端口，目的ip.端口以及数据包信息；</p></blockquote><ol start=\"2\"><li><code>tcpdump -nn port [端口号]</code>：抓取指定端口的数据包，同样也可以使用<code>tcpdump -nn -i eth0 not port [端口号]</code>抓取除指定端口外的数据包，或者<code>tcpdump -nn -i eth0 not port [端口号] and host [ip地址]</code>来抓取指定host除指定端口外的数据包：</li></ol><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@Deppin:~<span class=\"comment\"># tcpdump -nn -i wlp2s0 not port 22 and host 180.97.33.108</span></span><br><span class=\"line\">tcpdump: verbose output suppressed, use -v or -vv <span class=\"keyword\">for</span> full protocol decode</span><br><span class=\"line\">listening on wlp2s0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class=\"line\">00:23:25.460925 IP 192.168.199.199.43109 &gt; 180.97.33.108.80: Flags [F.], seq 836106603, ack 3946427568, win 229, length 0</span><br><span class=\"line\">00:23:29.332936 IP 192.168.199.199.43109 &gt; 180.97.33.108.80: Flags [F.], seq 0, ack 1, win 229, length 0</span><br><span class=\"line\">00:23:29.332966 IP 192.168.199.199.34253 &gt; 180.97.33.108.80: Flags [F.], seq 3073252526, ack 1107915791, win 229, length 0</span><br><span class=\"line\">00:23:29.332975 IP 192.168.199.199.42371 &gt; 180.97.33.108.80: Flags [F.], seq 1787139822, ack 537241163, win 229, length 0</span><br><span class=\"line\">^C</span><br><span class=\"line\">4 packets captured</span><br><span class=\"line\">4 packets received by filter</span><br><span class=\"line\">0 packets dropped by kernel</span><br></pre></td></tr></table></figure><ol start=\"3\"><li>也可以指定抓取的数据包个数和指定存储到哪个文件：<code>root@Deppin:~# tcpdump -nn -i wlp2s0 -c 5 -w /tmp/1.cap</code>:</li></ol><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@Deppin:~<span class=\"comment\"># tcpdump -nn -i wlp2s0 -c 5 -w /tmp/1.cap</span></span><br><span class=\"line\">tcpdump: listening on wlp2s0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class=\"line\">5 packets captured</span><br><span class=\"line\">35 packets received by filter</span><br><span class=\"line\">0 packets dropped by kernel</span><br><span class=\"line\"></span><br><span class=\"line\">root@Deppin:~<span class=\"comment\"># file /tmp/1.cap </span></span><br><span class=\"line\">/tmp/1.cap: tcpdump capture file (little-endian) - version 2.4 (Ethernet, capture length 262144)</span><br></pre></td></tr></table></figure><div class=\"note success\"><p>抓取的文件是无法使用cat命令查看的，查看需要使用<code>tcpdump -r [filename]</code>进行查看。</p></div></li><li><p><code>tshark</code>命令是类似<code>tcpdump</code>的工具，使用这个命令需要安装<code>wireshark</code>软件包，常用用法如下:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># tshark -n -t a -R http.request -T fields -e \"frame.time\" -e \"ip.src\" -e \"http.host\" -e \"http.request.method\" -e \"http.request.uri\"</span></span><br><span class=\"line\">tshark: -R without -2 is deprecated. For single-pass filtering use -Y.</span><br><span class=\"line\">Running as user <span class=\"string\">\"root\"</span> and group <span class=\"string\">\"root\"</span>. This could be dangerous.</span><br><span class=\"line\">Capturing on <span class=\"string\">'eth0'</span></span><br><span class=\"line\"><span class=\"string\">\"May  8, 2018 00:35:03.807043090 CST\"</span>\t10.139.151.2\treceiver.barad.tencentyun.com\tPOST\t/ca_report.cgi</span><br><span class=\"line\"><span class=\"string\">\"May  8, 2018 00:35:08.814790915 CST\"</span>\t10.139.151.2\treceiver.barad.tencentyun.com\tPOST\t/ca_report.cgi</span><br><span class=\"line\"><span class=\"string\">\"May  8, 2018 00:35:13.823298617 CST\"</span>\t10.139.151.2\treceiver.barad.tencentyun.com\tPOST\t/heart_report.cgi</span><br><span class=\"line\"><span class=\"string\">\"May  8, 2018 00:35:18.831342319 CST\"</span>\t10.139.151.2\treceiver.barad.tencentyun.com\tPOST\t/ca_report.cgi</span><br><span class=\"line\"><span class=\"string\">\"May  8, 2018 00:35:23.840005021 CST\"</span>\t10.139.151.2\treceiver.barad.tencentyun.com\tPOST\t/ca_report.cgi</span><br><span class=\"line\">^C1 packet dropped</span><br><span class=\"line\">5 packets captured</span><br></pre></td></tr></table></figure><div class=\"note success\"><p>上面的命令可以看到详细的ip地址、访问的网址，请求方法和请求的资源。关于<code>tshark</code>更多的用法，可以参考<a href=\"https://blog.csdn.net/hello2mao/article/details/53967900\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">tshark—-wireshark的命令行工具</a></p></div></li></ul><hr><!-- rebuild by neat -->"},{"title":"Linux日常运维(四)——iptables filter表及nat表应用","author":"Evobot","abbrlink":"f587388e","date":"2018-05-09T13:18:08.000Z","image":null,"_content":"\n\n\n本文继续介绍iptables的应用，主要针对filter表的一些案例进行讲解，以及nat表的各类应用方法进行介绍。\n\n<!--more-->\n\n---\n\n# iptables小案例\n\n- 需求：允许21、22、80端口的数据包进入，但22端口的只允许指定的IP地址段的数据包进入，使用shell脚本操作，脚本如下：\n\n  ```bash\n  #!/bin/bash\n  ipt=\"/usr/sbin/iptables\"\n  $ipt -F\n  $ipt -P INPUT DROP\n  $ipt -P OUTPUT ACCEPT\n  $ipt -P FORWARD ACCEPT\n  # -m state指定tcp的状态，RELATED表示在连接完成后额外一些连接的状态，ESTABLISHED表示连接状态\n  # 这条规则让通信更加顺畅\n  $ipt -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n  $ipt -A INPUT -s 192.168.199.0/24 -p tcp --dport 22 -j ACCEPT\n  $ipt -A INPUT -p tcp --dport 80 -j ACCEPT\n  $ipt -A INPUT -p tcp --dport 21 -j ACCEPT\n  ```\n\n- 执行脚本后，可以看到规则已经生效：\n\n  ```bash\n  [root@www ~]# iptables -nvL\n  Chain INPUT (policy DROP 0 packets, 0 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n     30  2072 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED\n      0     0 ACCEPT     tcp  --  *      *       192.168.199.0/24     0.0.0.0/0            tcp dpt:22\n      0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:80\n      0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:21\n\n  Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n\n  Chain OUTPUT (policy ACCEPT 21 packets, 2656 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n  ```\n\n- 需求：禁止其他机器ping通本机；其实上面的shell脚本内的规则也会禁止ping，另外ping命令使用的是icmp协议，所以可以使用下面的规则，其中`--icmp-type 8`指的时icmp协议的ping请求类型：\n\n  ```bash\n  [root@www ~]# iptables -I INPUT -p icmp --icmp-type 8 -j DROP\n  ```\n\n- 放通ping包则使用下面的规则：\n\n  ```bash\n  [root@www ~]# iptables -I INPUT -p icmp --icmp-type 8 -j ACCEPT\n  ```\n\n- 关于icmp的type，可以参考[ICMP-type对应表](http://www.361way.com/icmp-type/1186.html)\n\n# nat表应用\n\n- 案例：A机器有两块网卡，分别是ens33(192.168.199.224)和ens37(192.168.100.2)，其中ens33可以上外网，ens77连接内部局域网，B机器则只有ens37(192.168.100.100)网卡，和A机器的ens37能够互通。\n\n- 需求1：让B机器能够连接外网；从下图可以看到两台机器内网可通：\n\n  ![ip addr](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/ipaddr.png)\n\n  {% note danger %}\n\n  1. A机器打开路由转发功能，默认为0关闭状态：\n\n     `echo 1 > /proc/sys/net/ipv4/ip_forward`\n\n  2. A机器iptables添加规则：\n\n     `iptables -t nat -A POSTROUTING -s 192.168.100.0/24 -o enp0s3 -j MASQUERADE`\n\n  3. B机器设置网关为**192.168.100.2**，即A机器的内网地址：\n\n     `route add default gw 192.168.100.2`\n\n  4. 这时从B机器上已经能够ping通外网。\n\n  {% endnote %}\n\n- 需求2：C机器能够和A通信，让C机器能够直接连接到B机器的22端口，即需要做端口映射：\n\n  - 首先依然需要A上打开路由转发：`echo \"1\" > /proc/sys/net/ipv4/ip_forward`;\n\n  - A上添加iptables规则将进来的数据包做目的地址转发DNAT到B机器IP上：\n\n    `iptables -t nat -A PREROUTING -d 192.168.199.224 -p tcp --dport 1122 -j DNAT --to 192.168.100.100:22`\n\n  - 然后A再添加规则将从B机器过来的数据包做源地址转发SNAT到A的IP上:\n\n    `iptables -t nat -A POSTROUTING -s 192.168.100.100 -j SNAT --to 192.168.199.224`\n\n  - B机器添加A机器内网地址为网关，然后就可以使用ssh链接192.168.199.224:1122即可到达B机器。\n\n- 案例2：针对一个网段设置规则：\n\n  ```bash\n  $ iptables -I INPUT -m iprange --src-range 61.4.176.0-61.4.176.255 -j DROP\n  ```\n\n- 案例3：每5s内tcp3次握手超过20次的属于不正常访问，需要对这样的连接DROP处理： \n\n  ```bash\n  $ iptables -A INPUT -s 192.168.0.0/255.255.255.0 -d 192.168.0.101 -p tcp -m tcp --dport 80 -m state --state NEW -m recent --set --name httpuser --rsource\n  $ iptables -A INPUT -m recent --update --seconds 5 --hitcount 20 --name httpuser --rsource -j DROP\n  ```\n# iptables扩展\n\n- iptables中的DNAT、SNAT和MASQUERADE分别叫做目的地址转换、源地址转换和动态源地址转换；\n- 如下图所示的iptables的流程图：\n  ![iptables flow](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/iptables_nat.png)\n- 正菱形的区域是对数据包进行判定转发的地方。在这里，系统会根据IP数据包中的destination ip address中的IP地址对数据包进行分发。如果destination ip adress是本机地址，数据将会被转交给INPUT链。如果不是本机地址，则交给FORWARD链检测。\n- DNAT要在进入这个菱形转发区域之前，也就是在PREROUTING链中做，比如我们要把访问202.103.96.112的访问转发到192.168.0.112上：\n\n  ```bash\n  iptables -t nat -A PREROUTING -d 202.103.96.112 -j DNAT --to-destination 192.168.0.112\n  ```\n\n  - 这个转换过程当中，其实就是将已经达到这台Linux网关（防火墙）上的数据包上的destination ip address从202.103.96.112修改为192.168.0.112然后交给系统路由进行转发。\n  - 而SNAT自然是要在数据包流出这台机器之前的最后一个链也就是POSTROUTING链来进行操作:\n  ```bash\n  iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j SNAT --to-source 58.20.51.66\n  ```\n  - 这个语句就是告诉系统把即将要流出本机的数据的source ip address修改成为58.20.51.66。这样，数据包在达到目的机器以后，目的机器会将包返回到58.20.51.66也就是本机。如果不做这个操作，那么你的数据包在传递的过程中，reply的包肯定会丢失。\n  - 假如当前系统用的是ADSL/3G/4G动态拨号方式，那么每次拨号，出口IP都会改变，SNAT就会有局限性。\n  ```bash\n  iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j MASQUERADE\n  ```\n  - `MASQUERADE`这个设定值就是**IP伪装成为封包出去(-o)的那块装置上的IP**！不管现在eth0的出口获得了怎样的动态ip，MASQUERADE会自动读取eth0现在的ip地址然后做SNAT出去，这样就实现了很好的动态SNAT地址转换。\n\n---","source":"_posts/Linux日常运维(四)——iptables-filter表及nat表应用.md","raw":"---\ntitle: Linux日常运维(四)——iptables filter表及nat表应用\nauthor: Evobot\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\nabbrlink: f587388e\ndate: 2018-05-09 21:18:08\nimage:\n---\n\n\n\n本文继续介绍iptables的应用，主要针对filter表的一些案例进行讲解，以及nat表的各类应用方法进行介绍。\n\n<!--more-->\n\n---\n\n# iptables小案例\n\n- 需求：允许21、22、80端口的数据包进入，但22端口的只允许指定的IP地址段的数据包进入，使用shell脚本操作，脚本如下：\n\n  ```bash\n  #!/bin/bash\n  ipt=\"/usr/sbin/iptables\"\n  $ipt -F\n  $ipt -P INPUT DROP\n  $ipt -P OUTPUT ACCEPT\n  $ipt -P FORWARD ACCEPT\n  # -m state指定tcp的状态，RELATED表示在连接完成后额外一些连接的状态，ESTABLISHED表示连接状态\n  # 这条规则让通信更加顺畅\n  $ipt -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n  $ipt -A INPUT -s 192.168.199.0/24 -p tcp --dport 22 -j ACCEPT\n  $ipt -A INPUT -p tcp --dport 80 -j ACCEPT\n  $ipt -A INPUT -p tcp --dport 21 -j ACCEPT\n  ```\n\n- 执行脚本后，可以看到规则已经生效：\n\n  ```bash\n  [root@www ~]# iptables -nvL\n  Chain INPUT (policy DROP 0 packets, 0 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n     30  2072 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED\n      0     0 ACCEPT     tcp  --  *      *       192.168.199.0/24     0.0.0.0/0            tcp dpt:22\n      0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:80\n      0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:21\n\n  Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n\n  Chain OUTPUT (policy ACCEPT 21 packets, 2656 bytes)\n   pkts bytes target     prot opt in     out     source               destination         \n  ```\n\n- 需求：禁止其他机器ping通本机；其实上面的shell脚本内的规则也会禁止ping，另外ping命令使用的是icmp协议，所以可以使用下面的规则，其中`--icmp-type 8`指的时icmp协议的ping请求类型：\n\n  ```bash\n  [root@www ~]# iptables -I INPUT -p icmp --icmp-type 8 -j DROP\n  ```\n\n- 放通ping包则使用下面的规则：\n\n  ```bash\n  [root@www ~]# iptables -I INPUT -p icmp --icmp-type 8 -j ACCEPT\n  ```\n\n- 关于icmp的type，可以参考[ICMP-type对应表](http://www.361way.com/icmp-type/1186.html)\n\n# nat表应用\n\n- 案例：A机器有两块网卡，分别是ens33(192.168.199.224)和ens37(192.168.100.2)，其中ens33可以上外网，ens77连接内部局域网，B机器则只有ens37(192.168.100.100)网卡，和A机器的ens37能够互通。\n\n- 需求1：让B机器能够连接外网；从下图可以看到两台机器内网可通：\n\n  ![ip addr](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/ipaddr.png)\n\n  {% note danger %}\n\n  1. A机器打开路由转发功能，默认为0关闭状态：\n\n     `echo 1 > /proc/sys/net/ipv4/ip_forward`\n\n  2. A机器iptables添加规则：\n\n     `iptables -t nat -A POSTROUTING -s 192.168.100.0/24 -o enp0s3 -j MASQUERADE`\n\n  3. B机器设置网关为**192.168.100.2**，即A机器的内网地址：\n\n     `route add default gw 192.168.100.2`\n\n  4. 这时从B机器上已经能够ping通外网。\n\n  {% endnote %}\n\n- 需求2：C机器能够和A通信，让C机器能够直接连接到B机器的22端口，即需要做端口映射：\n\n  - 首先依然需要A上打开路由转发：`echo \"1\" > /proc/sys/net/ipv4/ip_forward`;\n\n  - A上添加iptables规则将进来的数据包做目的地址转发DNAT到B机器IP上：\n\n    `iptables -t nat -A PREROUTING -d 192.168.199.224 -p tcp --dport 1122 -j DNAT --to 192.168.100.100:22`\n\n  - 然后A再添加规则将从B机器过来的数据包做源地址转发SNAT到A的IP上:\n\n    `iptables -t nat -A POSTROUTING -s 192.168.100.100 -j SNAT --to 192.168.199.224`\n\n  - B机器添加A机器内网地址为网关，然后就可以使用ssh链接192.168.199.224:1122即可到达B机器。\n\n- 案例2：针对一个网段设置规则：\n\n  ```bash\n  $ iptables -I INPUT -m iprange --src-range 61.4.176.0-61.4.176.255 -j DROP\n  ```\n\n- 案例3：每5s内tcp3次握手超过20次的属于不正常访问，需要对这样的连接DROP处理： \n\n  ```bash\n  $ iptables -A INPUT -s 192.168.0.0/255.255.255.0 -d 192.168.0.101 -p tcp -m tcp --dport 80 -m state --state NEW -m recent --set --name httpuser --rsource\n  $ iptables -A INPUT -m recent --update --seconds 5 --hitcount 20 --name httpuser --rsource -j DROP\n  ```\n# iptables扩展\n\n- iptables中的DNAT、SNAT和MASQUERADE分别叫做目的地址转换、源地址转换和动态源地址转换；\n- 如下图所示的iptables的流程图：\n  ![iptables flow](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/iptables_nat.png)\n- 正菱形的区域是对数据包进行判定转发的地方。在这里，系统会根据IP数据包中的destination ip address中的IP地址对数据包进行分发。如果destination ip adress是本机地址，数据将会被转交给INPUT链。如果不是本机地址，则交给FORWARD链检测。\n- DNAT要在进入这个菱形转发区域之前，也就是在PREROUTING链中做，比如我们要把访问202.103.96.112的访问转发到192.168.0.112上：\n\n  ```bash\n  iptables -t nat -A PREROUTING -d 202.103.96.112 -j DNAT --to-destination 192.168.0.112\n  ```\n\n  - 这个转换过程当中，其实就是将已经达到这台Linux网关（防火墙）上的数据包上的destination ip address从202.103.96.112修改为192.168.0.112然后交给系统路由进行转发。\n  - 而SNAT自然是要在数据包流出这台机器之前的最后一个链也就是POSTROUTING链来进行操作:\n  ```bash\n  iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j SNAT --to-source 58.20.51.66\n  ```\n  - 这个语句就是告诉系统把即将要流出本机的数据的source ip address修改成为58.20.51.66。这样，数据包在达到目的机器以后，目的机器会将包返回到58.20.51.66也就是本机。如果不做这个操作，那么你的数据包在传递的过程中，reply的包肯定会丢失。\n  - 假如当前系统用的是ADSL/3G/4G动态拨号方式，那么每次拨号，出口IP都会改变，SNAT就会有局限性。\n  ```bash\n  iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j MASQUERADE\n  ```\n  - `MASQUERADE`这个设定值就是**IP伪装成为封包出去(-o)的那块装置上的IP**！不管现在eth0的出口获得了怎样的动态ip，MASQUERADE会自动读取eth0现在的ip地址然后做SNAT出去，这样就实现了很好的动态SNAT地址转换。\n\n---","slug":"Linux日常运维(四)——iptables-filter表及nat表应用","published":1,"updated":"2018-06-02T13:01:29.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazb00026u1jxv7vcvkjq","content":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p>本文继续介绍iptables的应用，主要针对filter表的一些案例进行讲解，以及nat表的各类应用方法进行介绍。</p><a id=\"more\"></a><hr><h1 id=\"iptables小案例\"><a href=\"#iptables小案例\" class=\"headerlink\" title=\"iptables小案例\"></a>iptables小案例</h1><ul><li><p>需求：允许21、22、80端口的数据包进入，但22端口的只允许指定的IP地址段的数据包进入，使用shell脚本操作，脚本如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">ipt=<span class=\"string\">\"/usr/sbin/iptables\"</span></span><br><span class=\"line\"><span class=\"variable\">$ipt</span> -F</span><br><span class=\"line\"><span class=\"variable\">$ipt</span> -P INPUT DROP</span><br><span class=\"line\"><span class=\"variable\">$ipt</span> -P OUTPUT ACCEPT</span><br><span class=\"line\"><span class=\"variable\">$ipt</span> -P FORWARD ACCEPT</span><br><span class=\"line\"><span class=\"comment\"># -m state指定tcp的状态，RELATED表示在连接完成后额外一些连接的状态，ESTABLISHED表示连接状态</span></span><br><span class=\"line\"><span class=\"comment\"># 这条规则让通信更加顺畅</span></span><br><span class=\"line\"><span class=\"variable\">$ipt</span> -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class=\"line\"><span class=\"variable\">$ipt</span> -A INPUT -s 192.168.199.0/24 -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\"><span class=\"variable\">$ipt</span> -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class=\"line\"><span class=\"variable\">$ipt</span> -A INPUT -p tcp --dport 21 -j ACCEPT</span><br></pre></td></tr></table></figure></li><li><p>执行脚本后，可以看到规则已经生效：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># iptables -nvL</span></span><br><span class=\"line\">Chain INPUT (policy DROP 0 packets, 0 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\">   30  2072 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED</span><br><span class=\"line\">    0     0 ACCEPT     tcp  --  *      *       192.168.199.0/24     0.0.0.0/0            tcp dpt:22</span><br><span class=\"line\">    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:80</span><br><span class=\"line\">    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:21</span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT 21 packets, 2656 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination</span><br></pre></td></tr></table></figure></li><li><p>需求：禁止其他机器ping通本机；其实上面的shell脚本内的规则也会禁止ping，另外ping命令使用的是icmp协议，所以可以使用下面的规则，其中<code>--icmp-type 8</code>指的时icmp协议的ping请求类型：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># iptables -I INPUT -p icmp --icmp-type 8 -j DROP</span></span><br></pre></td></tr></table></figure></li><li><p>放通ping包则使用下面的规则：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># iptables -I INPUT -p icmp --icmp-type 8 -j ACCEPT</span></span><br></pre></td></tr></table></figure></li><li><p>关于icmp的type，可以参考<a href=\"http://www.361way.com/icmp-type/1186.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">ICMP-type对应表</a></p></li></ul><h1 id=\"nat表应用\"><a href=\"#nat表应用\" class=\"headerlink\" title=\"nat表应用\"></a>nat表应用</h1><ul><li><p>案例：A机器有两块网卡，分别是ens33(192.168.199.224)和ens37(192.168.100.2)，其中ens33可以上外网，ens77连接内部局域网，B机器则只有ens37(192.168.100.100)网卡，和A机器的ens37能够互通。</p></li><li><p>需求1：让B机器能够连接外网；从下图可以看到两台机器内网可通：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/ipaddr.png\" alt=\"ip addr\"></p><div class=\"note danger\"><ol><li><p>A机器打开路由转发功能，默认为0关闭状态：</p><p><code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward</code></p></li><li><p>A机器iptables添加规则：</p><p><code>iptables -t nat -A POSTROUTING -s 192.168.100.0/24 -o enp0s3 -j MASQUERADE</code></p></li><li><p>B机器设置网关为<strong>192.168.100.2</strong>，即A机器的内网地址：</p><p><code>route add default gw 192.168.100.2</code></p></li><li><p>这时从B机器上已经能够ping通外网。</p></li></ol></div></li><li><p>需求2：C机器能够和A通信，让C机器能够直接连接到B机器的22端口，即需要做端口映射：</p><ul><li><p>首先依然需要A上打开路由转发：<code>echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward</code>;</p></li><li><p>A上添加iptables规则将进来的数据包做目的地址转发DNAT到B机器IP上：</p><p><code>iptables -t nat -A PREROUTING -d 192.168.199.224 -p tcp --dport 1122 -j DNAT --to 192.168.100.100:22</code></p></li><li><p>然后A再添加规则将从B机器过来的数据包做源地址转发SNAT到A的IP上:</p><p><code>iptables -t nat -A POSTROUTING -s 192.168.100.100 -j SNAT --to 192.168.199.224</code></p></li><li><p>B机器添加A机器内网地址为网关，然后就可以使用ssh链接192.168.199.224:1122即可到达B机器。</p></li></ul></li><li><p>案例2：针对一个网段设置规则：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -I INPUT -m iprange --src-range 61.4.176.0-61.4.176.255 -j DROP</span><br></pre></td></tr></table></figure></li><li><p>案例3：每5s内tcp3次握手超过20次的属于不正常访问，需要对这样的连接DROP处理：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -A INPUT -s 192.168.0.0/255.255.255.0 -d 192.168.0.101 -p tcp -m tcp --dport 80 -m state --state NEW -m recent --<span class=\"built_in\">set</span> --name httpuser --rsource</span><br><span class=\"line\">$ iptables -A INPUT -m recent --update --seconds 5 --hitcount 20 --name httpuser --rsource -j DROP</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"iptables扩展\"><a href=\"#iptables扩展\" class=\"headerlink\" title=\"iptables扩展\"></a>iptables扩展</h1><ul><li>iptables中的DNAT、SNAT和MASQUERADE分别叫做目的地址转换、源地址转换和动态源地址转换；</li><li>如下图所示的iptables的流程图：<br><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/iptables_nat.png\" alt=\"iptables flow\"></li><li>正菱形的区域是对数据包进行判定转发的地方。在这里，系统会根据IP数据包中的destination ip address中的IP地址对数据包进行分发。如果destination ip adress是本机地址，数据将会被转交给INPUT链。如果不是本机地址，则交给FORWARD链检测。</li><li><p>DNAT要在进入这个菱形转发区域之前，也就是在PREROUTING链中做，比如我们要把访问202.103.96.112的访问转发到192.168.0.112上：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A PREROUTING -d 202.103.96.112 -j DNAT --to-destination 192.168.0.112</span><br></pre></td></tr></table></figure><ul><li>这个转换过程当中，其实就是将已经达到这台Linux网关（防火墙）上的数据包上的destination ip address从202.103.96.112修改为192.168.0.112然后交给系统路由进行转发。</li><li><p>而SNAT自然是要在数据包流出这台机器之前的最后一个链也就是POSTROUTING链来进行操作:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j SNAT --to-source 58.20.51.66</span><br></pre></td></tr></table></figure></li><li><p>这个语句就是告诉系统把即将要流出本机的数据的source ip address修改成为58.20.51.66。这样，数据包在达到目的机器以后，目的机器会将包返回到58.20.51.66也就是本机。如果不做这个操作，那么你的数据包在传递的过程中，reply的包肯定会丢失。</p></li><li><p>假如当前系统用的是ADSL/3G/4G动态拨号方式，那么每次拨号，出口IP都会改变，SNAT就会有局限性。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure></li><li><p><code>MASQUERADE</code>这个设定值就是<strong>IP伪装成为封包出去(-o)的那块装置上的IP</strong>！不管现在eth0的出口获得了怎样的动态ip，MASQUERADE会自动读取eth0现在的ip地址然后做SNAT出去，这样就实现了很好的动态SNAT地址转换。</p></li></ul></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p>本文继续介绍iptables的应用，主要针对filter表的一些案例进行讲解，以及nat表的各类应用方法进行介绍。</p>","more":"<hr><h1 id=\"iptables小案例\"><a href=\"#iptables小案例\" class=\"headerlink\" title=\"iptables小案例\"></a>iptables小案例</h1><ul><li><p>需求：允许21、22、80端口的数据包进入，但22端口的只允许指定的IP地址段的数据包进入，使用shell脚本操作，脚本如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">ipt=<span class=\"string\">\"/usr/sbin/iptables\"</span></span><br><span class=\"line\"><span class=\"variable\">$ipt</span> -F</span><br><span class=\"line\"><span class=\"variable\">$ipt</span> -P INPUT DROP</span><br><span class=\"line\"><span class=\"variable\">$ipt</span> -P OUTPUT ACCEPT</span><br><span class=\"line\"><span class=\"variable\">$ipt</span> -P FORWARD ACCEPT</span><br><span class=\"line\"><span class=\"comment\"># -m state指定tcp的状态，RELATED表示在连接完成后额外一些连接的状态，ESTABLISHED表示连接状态</span></span><br><span class=\"line\"><span class=\"comment\"># 这条规则让通信更加顺畅</span></span><br><span class=\"line\"><span class=\"variable\">$ipt</span> -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class=\"line\"><span class=\"variable\">$ipt</span> -A INPUT -s 192.168.199.0/24 -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\"><span class=\"variable\">$ipt</span> -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class=\"line\"><span class=\"variable\">$ipt</span> -A INPUT -p tcp --dport 21 -j ACCEPT</span><br></pre></td></tr></table></figure></li><li><p>执行脚本后，可以看到规则已经生效：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># iptables -nvL</span></span><br><span class=\"line\">Chain INPUT (policy DROP 0 packets, 0 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\">   30  2072 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED</span><br><span class=\"line\">    0     0 ACCEPT     tcp  --  *      *       192.168.199.0/24     0.0.0.0/0            tcp dpt:22</span><br><span class=\"line\">    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:80</span><br><span class=\"line\">    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:21</span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT 21 packets, 2656 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination</span><br></pre></td></tr></table></figure></li><li><p>需求：禁止其他机器ping通本机；其实上面的shell脚本内的规则也会禁止ping，另外ping命令使用的是icmp协议，所以可以使用下面的规则，其中<code>--icmp-type 8</code>指的时icmp协议的ping请求类型：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># iptables -I INPUT -p icmp --icmp-type 8 -j DROP</span></span><br></pre></td></tr></table></figure></li><li><p>放通ping包则使用下面的规则：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># iptables -I INPUT -p icmp --icmp-type 8 -j ACCEPT</span></span><br></pre></td></tr></table></figure></li><li><p>关于icmp的type，可以参考<a href=\"http://www.361way.com/icmp-type/1186.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">ICMP-type对应表</a></p></li></ul><h1 id=\"nat表应用\"><a href=\"#nat表应用\" class=\"headerlink\" title=\"nat表应用\"></a>nat表应用</h1><ul><li><p>案例：A机器有两块网卡，分别是ens33(192.168.199.224)和ens37(192.168.100.2)，其中ens33可以上外网，ens77连接内部局域网，B机器则只有ens37(192.168.100.100)网卡，和A机器的ens37能够互通。</p></li><li><p>需求1：让B机器能够连接外网；从下图可以看到两台机器内网可通：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/ipaddr.png\" alt=\"ip addr\"></p><div class=\"note danger\"><ol><li><p>A机器打开路由转发功能，默认为0关闭状态：</p><p><code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward</code></p></li><li><p>A机器iptables添加规则：</p><p><code>iptables -t nat -A POSTROUTING -s 192.168.100.0/24 -o enp0s3 -j MASQUERADE</code></p></li><li><p>B机器设置网关为<strong>192.168.100.2</strong>，即A机器的内网地址：</p><p><code>route add default gw 192.168.100.2</code></p></li><li><p>这时从B机器上已经能够ping通外网。</p></li></ol></div></li><li><p>需求2：C机器能够和A通信，让C机器能够直接连接到B机器的22端口，即需要做端口映射：</p><ul><li><p>首先依然需要A上打开路由转发：<code>echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward</code>;</p></li><li><p>A上添加iptables规则将进来的数据包做目的地址转发DNAT到B机器IP上：</p><p><code>iptables -t nat -A PREROUTING -d 192.168.199.224 -p tcp --dport 1122 -j DNAT --to 192.168.100.100:22</code></p></li><li><p>然后A再添加规则将从B机器过来的数据包做源地址转发SNAT到A的IP上:</p><p><code>iptables -t nat -A POSTROUTING -s 192.168.100.100 -j SNAT --to 192.168.199.224</code></p></li><li><p>B机器添加A机器内网地址为网关，然后就可以使用ssh链接192.168.199.224:1122即可到达B机器。</p></li></ul></li><li><p>案例2：针对一个网段设置规则：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -I INPUT -m iprange --src-range 61.4.176.0-61.4.176.255 -j DROP</span><br></pre></td></tr></table></figure></li><li><p>案例3：每5s内tcp3次握手超过20次的属于不正常访问，需要对这样的连接DROP处理：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -A INPUT -s 192.168.0.0/255.255.255.0 -d 192.168.0.101 -p tcp -m tcp --dport 80 -m state --state NEW -m recent --<span class=\"built_in\">set</span> --name httpuser --rsource</span><br><span class=\"line\">$ iptables -A INPUT -m recent --update --seconds 5 --hitcount 20 --name httpuser --rsource -j DROP</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"iptables扩展\"><a href=\"#iptables扩展\" class=\"headerlink\" title=\"iptables扩展\"></a>iptables扩展</h1><ul><li>iptables中的DNAT、SNAT和MASQUERADE分别叫做目的地址转换、源地址转换和动态源地址转换；</li><li>如下图所示的iptables的流程图：<br><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/iptables_nat.png\" alt=\"iptables flow\"></li><li>正菱形的区域是对数据包进行判定转发的地方。在这里，系统会根据IP数据包中的destination ip address中的IP地址对数据包进行分发。如果destination ip adress是本机地址，数据将会被转交给INPUT链。如果不是本机地址，则交给FORWARD链检测。</li><li><p>DNAT要在进入这个菱形转发区域之前，也就是在PREROUTING链中做，比如我们要把访问202.103.96.112的访问转发到192.168.0.112上：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A PREROUTING -d 202.103.96.112 -j DNAT --to-destination 192.168.0.112</span><br></pre></td></tr></table></figure><ul><li>这个转换过程当中，其实就是将已经达到这台Linux网关（防火墙）上的数据包上的destination ip address从202.103.96.112修改为192.168.0.112然后交给系统路由进行转发。</li><li><p>而SNAT自然是要在数据包流出这台机器之前的最后一个链也就是POSTROUTING链来进行操作:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j SNAT --to-source 58.20.51.66</span><br></pre></td></tr></table></figure></li><li><p>这个语句就是告诉系统把即将要流出本机的数据的source ip address修改成为58.20.51.66。这样，数据包在达到目的机器以后，目的机器会将包返回到58.20.51.66也就是本机。如果不做这个操作，那么你的数据包在传递的过程中，reply的包肯定会丢失。</p></li><li><p>假如当前系统用的是ADSL/3G/4G动态拨号方式，那么每次拨号，出口IP都会改变，SNAT就会有局限性。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure></li><li><p><code>MASQUERADE</code>这个设定值就是<strong>IP伪装成为封包出去(-o)的那块装置上的IP</strong>！不管现在eth0的出口获得了怎样的动态ip，MASQUERADE会自动读取eth0现在的ip地址然后做SNAT出去，这样就实现了很好的动态SNAT地址转换。</p></li></ul></li></ul><hr><!-- rebuild by neat -->"},{"title":"Linux正则表达式——awk命令","author":"Evobot","abbrlink":"c7f852f3","date":"2018-04-27T14:17:13.000Z","image":null,"_content":"\n**awk**是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出。它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。awk有很多内建的功能，比如数组、函数等，这是它和C语言的相同之处，灵活性是awk最大的优势。\n\n<!--more-->\n\n---\n\n#  awk命令用法\n\n##  分段打印\n\n- `awk`命令相比`sed`，可以实现分段匹配，使用`-F`制定分隔符，命令格式为`awk -F ':' '{print $1}' [file]`，其中`$1`表示分割出的第一段，`{}`内就是所执行的操作,同样的`awk`也不会对原文件进行修改;\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '{print $1}' passwd \n  root\n  bin\n  daemon\n  adm\n  lp\n  sync\n  ```\n\n- `awk '{print $0}' [file]`可以打印出文件所有内容，在指定分隔符时，使用`$0`效果相同：\n\n  ```bash\n  [root@evobot ~]# head -n 3 passwd | awk -F ':' '{print $0}' \n  root:x:0:0:root:/root:/bin/BASH\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  [root@evobot ~]# head -n 3 passwd | awk '{print $0}' \n  root:x:0:0:root:/root:/bin/BASH\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  ```\n\n- `awk`未指定分隔符时,默认以空格或空白字符为分隔符:\n\n  ```bash\n  [root@evobot ~]# cat 1.txt \n  zx cc vv\n  sai amsomd sad\n  [root@evobot ~]# awk '{print $1,$3}' 1.txt \n  zx vv\n  sai sad\n  ```\n\n- 从上面的命令可以看出,打印多个分段,使用`,`分割指定的段即可;\n\n- 打印多个分段时,也可以指定输出分段之间的分隔符,只需要将`,`改为需要指定的符号并用双引号引起来即可:\n\n  ```bash\n  [root@evobot ~]# awk '{print $1\"#\"$3}' 1.txt \n  zx#vv\n  sai#sad\n  [root@evobot ~]# awk '{print $1\"$\"$3}' 1.txt \n  zx$vv\n  sai$sad\n  ```\n\n##  匹配用法\n\n- `awk`也可以实现匹配功能,命令为`awk '/pattern/' [file]`:\n\n  ```bash\n  [root@evobot ~]# head -n 3 passwd | awk '/login/'\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  ```\n\n- 匹配时可以在指定的段内匹配,如指定`$1`匹配,那么即使后面的分段有能匹配上关键字的字符串,`awk`也不会匹配,命令用法为`awk -F ':' '$1 ~ /pattern/' [file]`,这里的`~`表示匹配的意思,匹配时可以使用正则表达式:\n\n  ```bash\n  [root@evobot ~]# head -n 3 passwd \n  root:x:0:0:root:/root:/bin/BASH\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n\n  [root@evobot ~]# head -n 3 passwd | awk -F ':' '$1 ~ /bin/'\n  bin:x:1:1:bin:/bin:/sbin/nologin\n\n  [root@evobot ~]# head -n 3 passwd | awk -F ':' '$1 ~ /oo+/'\n  root:x:0:0:root:/root:/bin/BASH\n  ```\n\n- `awk`可以进行多个条件的匹配:\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '/root/ {print $1, $3} /evobot/ {print $3, $4}' passwd \n  root 0\n  1002 1002\n  [root@evobot ~]# grep -E 'root|evobot' passwd \n  root:x:0:0:root:/root:/bin/BASH\n  evobot:x:1002:1002::/home/evobot:/bin/bash\n  ```\n\n##  数学运算\n\n- `awk`匹配还可以进行数学运算如相等`==`,比较`>=`、`<=`和不等`!=`等条件进行匹配:\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '$3==0 {print $1}' passwd \n  root\n\n  [root@evobot ~]# awk -F ':' '$3>=1000 {print $1}' passwd \n  centos\n  lux\n  evobot\n\n  [root@evobot ~]# awk -F ':' '$7!=\"/sbin/nologin\" {print $0}' passwd \n  root:x:0:0:root:/root:/bin/BASH\n  sync:x:5:0:BUS:/sbin:/bin/sync\n  shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\n  halt:x:7:0:halt:/sbin:/sbin/halt\n  games:x:12:100:games:/usr/games:/sbin/noooologin\n  syslog:x:996:994::/home/syslog:/bin/false\n  centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH\n  lux:x:1001:1001::/home/lux:/bin/bash\n  evobot:x:1002:1002::/home/evobot:/bin/bash\n  ```\n\n- 如果对数字使用双引号`\"\"`,`awk`会将其认为是一个字符串,在比较时会以ASCII码进行比较:\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '$3>=\"1000\" {print $0}' passwd \n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  adm:x:3:4:adm:/var/adm:/sbin/nologin\n  lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n  sync:x:5:0:BUS:/sbin:/bin/sync\n  shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\n  halt:x:7:0:halt:/sbin:/sbin/halt\n  mail:x:8:12:mail:/var/spoool/mail:/sbin/nologin\n  ```\n\n- 除了数字或字符串比较之外，`awk`还可以对两个字段进行比较，如`$3<$4`这样的比较：\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '$3<$4 {print $0}' passwd \n  adm:x:3:4:adm:/var/adm:/sbin/nologin\n  lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n  mail:x:8:12:mail:/var/spoool/mail:/sbin/nologin\n  games:x:12:100:games:/usr/games:/sbin/noooologin\n  ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin\n\n  [root@evobot ~]# awk -F ':' '$3==$4 {print $0}' passwd \n  root:x:0:0:root:/root:/bin/BASH\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  nobody:x:99:99:Nobody:/:/sbin/nologin\n  systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin\n  dbus:x:81:81:System message bus:/:/sbin/nologin\n  centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH\n  lux:x:1001:1001::/home/lux:/bin/bash\n  evobot:x:1002:1002::/home/evobot:/bin/bash\n\n  [root@evobot ~]# awk -F ':' '$3>$4 {print $0}' passwd \n  sync:x:5:0:BUS:/sbin:/bin/sync\n  shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\n  halt:x:7:0:halt:/sbin:/sbin/halt\n  operator:x:11:0:operator:/rooooot:/sbin/nologin\n  polkitd:x:999:997:User for polkitd:/:/sbin/nologin\n  syslog:x:996:994::/home/syslog:/bin/false\n  nginx:x:995:993:Nginx web server:/var/lib/nginx:/sbin/nologin\n  ```\n\n- 比较条件还可以多个一起使用，如`$3>\"5\" && $3<\"7\"`：\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '$3>\"5\" && $3<\"7\"' passwd # 以ASCII码比较\n  daemon:x:59:2:daemon:/sbin:/sbin/nologin\n  shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\n\n  [root@evobot ~]# awk -F ':' '$3>5 && $3<7' passwd\t# 以数字大小比较 \n  shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\n\n  ```\n\n- 条件或比较，使用`$3>1000 || $7==\"/sbin/nologin\"`:\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '$3>1000 || $7==\"/bin/BASH\"' passwd \n  root:x:0:0:root:/root:/bin/BASH\n  centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH\n  lux:x:1001:1001::/home/lux:/bin/bash\n  evobot:x:1002:1002::/home/evobot:/bin/bash\n\n  [root@evobot ~]# awk -F ':' '$3>1000 || $7 ~ /BASH/' passwd \n  root:x:0:0:root:/root:/bin/BASH\n  centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH\n  lux:x:1001:1001::/home/lux:/bin/bash\n  evobot:x:1002:1002::/home/evobot:/bin/bash\n  ```\n\n##  指定输出定界符\n\n- `awk`不仅可以指定处理文档时的定界符，也可以指定输出时打印出来的定界符，命令格式为`awk -F ':' '{OFS=\"#\"} $3>1000 || $7 ~/BASH/ {print $1,$3,$7} [file]'`:\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '{OFS=\"#\"} $3>1000 || $7 ~ /BASH/ {print $1,$3,$7}' passwd \n  root#0#/bin/BASH\n  centos#1000#/bin/BASH\n  lux#1001#/bin/bash\n  evobot#1002#/bin/bash\n  ```\n\n- 匹配条件可以和`print`放在一个`{}`里，组成一个操作命令：\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '{OFS=\"#\"} {if ($3>1000) {print $1,$3,$7}}' passwd \n  lux#1001#/bin/bash\n  evobot#1002#/bin/bash\n  ```\n\n##  内置变量\n\n- 上面的指定`OFS`其实也是`awk`中的内置变量，常用的内置变量还有`NR`表示行、`NF`表示段：\n\n  ```bash\n  [root@evobot ~]# head -n 3 passwd | awk -F ':' '{print NR\":\"$0}'\t#打印行号\n  1:root:x:0:0:root:/root:/bin/BASH\n  2:bin:x:1:1:bin:/bin:/sbin/nologin\n  3:daemon:x:59:2:daemon:/sbin:/sbin/nologin\n\n  [root@evobot ~]# head -n3 passwd | awk -F ':' '{print NF\":\"$0}'\t#打印每行分成几段\n  7:root:x:0:0:root:/root:/bin/BASH\n  7:bin:x:1:1:bin:/bin:/sbin/nologin\n  7:daemon:x:59:2:daemon:/sbin:/sbin/nologin\n  ```\n\n- `NR`和`NF`还可以作为判断条件，例如打印前十行，在`sed`中命令为`sed -n '1,10'p [file]`,使用`awk`的命令为`awk -F ':' 'NR<=10' [file]`:\n\n  ```bash\n  [root@evobot ~]# awk -F ':' 'NR<=10' passwd \n  root:x:0:0:root:/root:/bin/BASH\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:59:2:daemon:/sbin:/sbin/nologin\n  adm:x:3:4:adm:/var/adm:/sbin/nologin\n  lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n  sync:x:5:0:BUS:/sbin:/bin/sync\n  shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\n  halt:x:7:0:halt:/sbin:/sbin/halt\n  mail:x:8:12:mail:/var/spoool/mail:/sbin/nologin\n  operator:x:11:0:operator:/rooooot:/sbin/nologin\n  ```\n\n  ```bash\n  # 打印前十行中第一段为root或者sync的行\n  [root@evobot ~]# awk -F ':' 'NR<=10 && $1 ~/root|sync/' passwd \n  root:x:0:0:root:/root:/bin/BASH\n  sync:x:5:0:BUS:/sbin:/bin/sync\n  ```\n\n- `NF`作为条件可以对段数进行判断，如打印分段数为6的行：\n\n  ```bash\n  [root@evobot ~]# awk -F ':' 'NF==6 {print $0}' passwd \n  adm:3:4:adm:/var/adm:/sbin/nologin\n  ```\n\n- 当使用`$NF`和`$NR`，这两个变量的意义不同，如`awk -F ':' '{print $NR\":\"$NF}' [file]`,这条命令会在每读取一行，输出`NR`对应的`$行号:$段数`，由于`NF`是固定的数字，所以`$NR`超过段数时，输出为空：\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '{print $NR\":\"$NF'} passwd \n  root:/bin/BASH\n  x:/sbin/nologin\n  59:/sbin/nologin\n  adm:/sbin/nologin\n  lp:/sbin/nologin\n  /sbin:/bin/sync\n  /sbin/shutdown:/sbin/shutdown\n  :/sbin/halt\n  :/sbin/nologin\n  :/sbin/nologin\n  :/sbin/noooologin\n  ```\n\n##  赋值\n\n- 使用`=`表示给变量赋值，如在`awk`中使用`$1=\"root\"`，则所有的输出行的`$1`都变成了`root`：\n\n  ```bash\n  [root@evobot ~]# head -n 3 passwd | awk -F ':' '$1=\"awk\"'\n  awk x 0 0 root /root /bin/BASH\n  awk x 1 1 bin /bin /sbin/nologin\n  awk x 59 2 daemon /sbin /sbin/nologin\n\n  [root@evobot ~]# head -n3 passwd | awk -F ':' '{OFS=\":\"} $1=\"root\"'\n  root:x:0:0:root:/root:/bin/BASH\n  root:x:1:1:bin:/bin:/sbin/nologin\n  root:x:59:2:daemon:/sbin:/sbin/nologin\n  ```\n\n## END用法\n\n- 求和整个文件的一列数据并打印结果，需要使用`END`：\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '{(sum=sum+$3)}; END {print sum}' passwd \n  8969\n  ```\n\n  这其中`{(sum=sum+$3)}`是我们自己定义的累加求和的公式，也可以使用`{(tot=tot+$3)}`,`tot`表示求和；\n\n  `END`表示计算完成后最后执行的语句。\n\n---","source":"_posts/Linux正则表达式—awk命令.md","raw":"---\ntitle: Linux正则表达式——awk命令\nauthor: Evobot\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\nabbrlink: c7f852f3\ndate: 2018-04-27 22:17:13\nimage:\n---\n\n**awk**是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出。它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。awk有很多内建的功能，比如数组、函数等，这是它和C语言的相同之处，灵活性是awk最大的优势。\n\n<!--more-->\n\n---\n\n#  awk命令用法\n\n##  分段打印\n\n- `awk`命令相比`sed`，可以实现分段匹配，使用`-F`制定分隔符，命令格式为`awk -F ':' '{print $1}' [file]`，其中`$1`表示分割出的第一段，`{}`内就是所执行的操作,同样的`awk`也不会对原文件进行修改;\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '{print $1}' passwd \n  root\n  bin\n  daemon\n  adm\n  lp\n  sync\n  ```\n\n- `awk '{print $0}' [file]`可以打印出文件所有内容，在指定分隔符时，使用`$0`效果相同：\n\n  ```bash\n  [root@evobot ~]# head -n 3 passwd | awk -F ':' '{print $0}' \n  root:x:0:0:root:/root:/bin/BASH\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  [root@evobot ~]# head -n 3 passwd | awk '{print $0}' \n  root:x:0:0:root:/root:/bin/BASH\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  ```\n\n- `awk`未指定分隔符时,默认以空格或空白字符为分隔符:\n\n  ```bash\n  [root@evobot ~]# cat 1.txt \n  zx cc vv\n  sai amsomd sad\n  [root@evobot ~]# awk '{print $1,$3}' 1.txt \n  zx vv\n  sai sad\n  ```\n\n- 从上面的命令可以看出,打印多个分段,使用`,`分割指定的段即可;\n\n- 打印多个分段时,也可以指定输出分段之间的分隔符,只需要将`,`改为需要指定的符号并用双引号引起来即可:\n\n  ```bash\n  [root@evobot ~]# awk '{print $1\"#\"$3}' 1.txt \n  zx#vv\n  sai#sad\n  [root@evobot ~]# awk '{print $1\"$\"$3}' 1.txt \n  zx$vv\n  sai$sad\n  ```\n\n##  匹配用法\n\n- `awk`也可以实现匹配功能,命令为`awk '/pattern/' [file]`:\n\n  ```bash\n  [root@evobot ~]# head -n 3 passwd | awk '/login/'\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  ```\n\n- 匹配时可以在指定的段内匹配,如指定`$1`匹配,那么即使后面的分段有能匹配上关键字的字符串,`awk`也不会匹配,命令用法为`awk -F ':' '$1 ~ /pattern/' [file]`,这里的`~`表示匹配的意思,匹配时可以使用正则表达式:\n\n  ```bash\n  [root@evobot ~]# head -n 3 passwd \n  root:x:0:0:root:/root:/bin/BASH\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n\n  [root@evobot ~]# head -n 3 passwd | awk -F ':' '$1 ~ /bin/'\n  bin:x:1:1:bin:/bin:/sbin/nologin\n\n  [root@evobot ~]# head -n 3 passwd | awk -F ':' '$1 ~ /oo+/'\n  root:x:0:0:root:/root:/bin/BASH\n  ```\n\n- `awk`可以进行多个条件的匹配:\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '/root/ {print $1, $3} /evobot/ {print $3, $4}' passwd \n  root 0\n  1002 1002\n  [root@evobot ~]# grep -E 'root|evobot' passwd \n  root:x:0:0:root:/root:/bin/BASH\n  evobot:x:1002:1002::/home/evobot:/bin/bash\n  ```\n\n##  数学运算\n\n- `awk`匹配还可以进行数学运算如相等`==`,比较`>=`、`<=`和不等`!=`等条件进行匹配:\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '$3==0 {print $1}' passwd \n  root\n\n  [root@evobot ~]# awk -F ':' '$3>=1000 {print $1}' passwd \n  centos\n  lux\n  evobot\n\n  [root@evobot ~]# awk -F ':' '$7!=\"/sbin/nologin\" {print $0}' passwd \n  root:x:0:0:root:/root:/bin/BASH\n  sync:x:5:0:BUS:/sbin:/bin/sync\n  shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\n  halt:x:7:0:halt:/sbin:/sbin/halt\n  games:x:12:100:games:/usr/games:/sbin/noooologin\n  syslog:x:996:994::/home/syslog:/bin/false\n  centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH\n  lux:x:1001:1001::/home/lux:/bin/bash\n  evobot:x:1002:1002::/home/evobot:/bin/bash\n  ```\n\n- 如果对数字使用双引号`\"\"`,`awk`会将其认为是一个字符串,在比较时会以ASCII码进行比较:\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '$3>=\"1000\" {print $0}' passwd \n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  adm:x:3:4:adm:/var/adm:/sbin/nologin\n  lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n  sync:x:5:0:BUS:/sbin:/bin/sync\n  shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\n  halt:x:7:0:halt:/sbin:/sbin/halt\n  mail:x:8:12:mail:/var/spoool/mail:/sbin/nologin\n  ```\n\n- 除了数字或字符串比较之外，`awk`还可以对两个字段进行比较，如`$3<$4`这样的比较：\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '$3<$4 {print $0}' passwd \n  adm:x:3:4:adm:/var/adm:/sbin/nologin\n  lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n  mail:x:8:12:mail:/var/spoool/mail:/sbin/nologin\n  games:x:12:100:games:/usr/games:/sbin/noooologin\n  ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin\n\n  [root@evobot ~]# awk -F ':' '$3==$4 {print $0}' passwd \n  root:x:0:0:root:/root:/bin/BASH\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  nobody:x:99:99:Nobody:/:/sbin/nologin\n  systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin\n  dbus:x:81:81:System message bus:/:/sbin/nologin\n  centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH\n  lux:x:1001:1001::/home/lux:/bin/bash\n  evobot:x:1002:1002::/home/evobot:/bin/bash\n\n  [root@evobot ~]# awk -F ':' '$3>$4 {print $0}' passwd \n  sync:x:5:0:BUS:/sbin:/bin/sync\n  shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\n  halt:x:7:0:halt:/sbin:/sbin/halt\n  operator:x:11:0:operator:/rooooot:/sbin/nologin\n  polkitd:x:999:997:User for polkitd:/:/sbin/nologin\n  syslog:x:996:994::/home/syslog:/bin/false\n  nginx:x:995:993:Nginx web server:/var/lib/nginx:/sbin/nologin\n  ```\n\n- 比较条件还可以多个一起使用，如`$3>\"5\" && $3<\"7\"`：\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '$3>\"5\" && $3<\"7\"' passwd # 以ASCII码比较\n  daemon:x:59:2:daemon:/sbin:/sbin/nologin\n  shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\n\n  [root@evobot ~]# awk -F ':' '$3>5 && $3<7' passwd\t# 以数字大小比较 \n  shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\n\n  ```\n\n- 条件或比较，使用`$3>1000 || $7==\"/sbin/nologin\"`:\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '$3>1000 || $7==\"/bin/BASH\"' passwd \n  root:x:0:0:root:/root:/bin/BASH\n  centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH\n  lux:x:1001:1001::/home/lux:/bin/bash\n  evobot:x:1002:1002::/home/evobot:/bin/bash\n\n  [root@evobot ~]# awk -F ':' '$3>1000 || $7 ~ /BASH/' passwd \n  root:x:0:0:root:/root:/bin/BASH\n  centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH\n  lux:x:1001:1001::/home/lux:/bin/bash\n  evobot:x:1002:1002::/home/evobot:/bin/bash\n  ```\n\n##  指定输出定界符\n\n- `awk`不仅可以指定处理文档时的定界符，也可以指定输出时打印出来的定界符，命令格式为`awk -F ':' '{OFS=\"#\"} $3>1000 || $7 ~/BASH/ {print $1,$3,$7} [file]'`:\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '{OFS=\"#\"} $3>1000 || $7 ~ /BASH/ {print $1,$3,$7}' passwd \n  root#0#/bin/BASH\n  centos#1000#/bin/BASH\n  lux#1001#/bin/bash\n  evobot#1002#/bin/bash\n  ```\n\n- 匹配条件可以和`print`放在一个`{}`里，组成一个操作命令：\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '{OFS=\"#\"} {if ($3>1000) {print $1,$3,$7}}' passwd \n  lux#1001#/bin/bash\n  evobot#1002#/bin/bash\n  ```\n\n##  内置变量\n\n- 上面的指定`OFS`其实也是`awk`中的内置变量，常用的内置变量还有`NR`表示行、`NF`表示段：\n\n  ```bash\n  [root@evobot ~]# head -n 3 passwd | awk -F ':' '{print NR\":\"$0}'\t#打印行号\n  1:root:x:0:0:root:/root:/bin/BASH\n  2:bin:x:1:1:bin:/bin:/sbin/nologin\n  3:daemon:x:59:2:daemon:/sbin:/sbin/nologin\n\n  [root@evobot ~]# head -n3 passwd | awk -F ':' '{print NF\":\"$0}'\t#打印每行分成几段\n  7:root:x:0:0:root:/root:/bin/BASH\n  7:bin:x:1:1:bin:/bin:/sbin/nologin\n  7:daemon:x:59:2:daemon:/sbin:/sbin/nologin\n  ```\n\n- `NR`和`NF`还可以作为判断条件，例如打印前十行，在`sed`中命令为`sed -n '1,10'p [file]`,使用`awk`的命令为`awk -F ':' 'NR<=10' [file]`:\n\n  ```bash\n  [root@evobot ~]# awk -F ':' 'NR<=10' passwd \n  root:x:0:0:root:/root:/bin/BASH\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:59:2:daemon:/sbin:/sbin/nologin\n  adm:x:3:4:adm:/var/adm:/sbin/nologin\n  lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n  sync:x:5:0:BUS:/sbin:/bin/sync\n  shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\n  halt:x:7:0:halt:/sbin:/sbin/halt\n  mail:x:8:12:mail:/var/spoool/mail:/sbin/nologin\n  operator:x:11:0:operator:/rooooot:/sbin/nologin\n  ```\n\n  ```bash\n  # 打印前十行中第一段为root或者sync的行\n  [root@evobot ~]# awk -F ':' 'NR<=10 && $1 ~/root|sync/' passwd \n  root:x:0:0:root:/root:/bin/BASH\n  sync:x:5:0:BUS:/sbin:/bin/sync\n  ```\n\n- `NF`作为条件可以对段数进行判断，如打印分段数为6的行：\n\n  ```bash\n  [root@evobot ~]# awk -F ':' 'NF==6 {print $0}' passwd \n  adm:3:4:adm:/var/adm:/sbin/nologin\n  ```\n\n- 当使用`$NF`和`$NR`，这两个变量的意义不同，如`awk -F ':' '{print $NR\":\"$NF}' [file]`,这条命令会在每读取一行，输出`NR`对应的`$行号:$段数`，由于`NF`是固定的数字，所以`$NR`超过段数时，输出为空：\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '{print $NR\":\"$NF'} passwd \n  root:/bin/BASH\n  x:/sbin/nologin\n  59:/sbin/nologin\n  adm:/sbin/nologin\n  lp:/sbin/nologin\n  /sbin:/bin/sync\n  /sbin/shutdown:/sbin/shutdown\n  :/sbin/halt\n  :/sbin/nologin\n  :/sbin/nologin\n  :/sbin/noooologin\n  ```\n\n##  赋值\n\n- 使用`=`表示给变量赋值，如在`awk`中使用`$1=\"root\"`，则所有的输出行的`$1`都变成了`root`：\n\n  ```bash\n  [root@evobot ~]# head -n 3 passwd | awk -F ':' '$1=\"awk\"'\n  awk x 0 0 root /root /bin/BASH\n  awk x 1 1 bin /bin /sbin/nologin\n  awk x 59 2 daemon /sbin /sbin/nologin\n\n  [root@evobot ~]# head -n3 passwd | awk -F ':' '{OFS=\":\"} $1=\"root\"'\n  root:x:0:0:root:/root:/bin/BASH\n  root:x:1:1:bin:/bin:/sbin/nologin\n  root:x:59:2:daemon:/sbin:/sbin/nologin\n  ```\n\n## END用法\n\n- 求和整个文件的一列数据并打印结果，需要使用`END`：\n\n  ```bash\n  [root@evobot ~]# awk -F ':' '{(sum=sum+$3)}; END {print sum}' passwd \n  8969\n  ```\n\n  这其中`{(sum=sum+$3)}`是我们自己定义的累加求和的公式，也可以使用`{(tot=tot+$3)}`,`tot`表示求和；\n\n  `END`表示计算完成后最后执行的语句。\n\n---","slug":"Linux正则表达式—awk命令","published":1,"updated":"2018-06-02T13:01:29.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazb70029u1jx5vj68w68","content":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p><strong>awk</strong>是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出。它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。awk有很多内建的功能，比如数组、函数等，这是它和C语言的相同之处，灵活性是awk最大的优势。</p><a id=\"more\"></a><hr><h1 id=\"awk命令用法\"><a href=\"#awk命令用法\" class=\"headerlink\" title=\"awk命令用法\"></a>awk命令用法</h1><h2 id=\"分段打印\"><a href=\"#分段打印\" class=\"headerlink\" title=\"分段打印\"></a>分段打印</h2><ul><li><p><code>awk</code>命令相比<code>sed</code>，可以实现分段匹配，使用<code>-F</code>制定分隔符，命令格式为<code>awk -F &#39;:&#39; &#39;{print $1}&#39; [file]</code>，其中<code>$1</code>表示分割出的第一段，<code>{}</code>内就是所执行的操作,同样的<code>awk</code>也不会对原文件进行修改;</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '&#123;print $1&#125;' passwd </span></span><br><span class=\"line\">root</span><br><span class=\"line\">bin</span><br><span class=\"line\">daemon</span><br><span class=\"line\">adm</span><br><span class=\"line\">lp</span><br><span class=\"line\">sync</span><br></pre></td></tr></table></figure></li><li><p><code>awk &#39;{print $0}&#39; [file]</code>可以打印出文件所有内容，在指定分隔符时，使用<code>$0</code>效果相同：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | awk -F ':' '&#123;print $0&#125;' </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | awk '&#123;print $0&#125;' </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p><code>awk</code>未指定分隔符时,默认以空格或空白字符为分隔符:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat 1.txt </span></span><br><span class=\"line\">zx cc vv</span><br><span class=\"line\">sai amsomd sad</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk '&#123;print $1,$3&#125;' 1.txt </span></span><br><span class=\"line\">zx vv</span><br><span class=\"line\">sai sad</span><br></pre></td></tr></table></figure></li><li><p>从上面的命令可以看出,打印多个分段,使用<code>,</code>分割指定的段即可;</p></li><li><p>打印多个分段时,也可以指定输出分段之间的分隔符,只需要将<code>,</code>改为需要指定的符号并用双引号引起来即可:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk '&#123;print $1\"#\"$3&#125;' 1.txt </span></span><br><span class=\"line\">zx<span class=\"comment\">#vv</span></span><br><span class=\"line\">sai<span class=\"comment\">#sad</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk '&#123;print $1\"$\"$3&#125;' 1.txt </span></span><br><span class=\"line\">zx<span class=\"variable\">$vv</span></span><br><span class=\"line\">sai<span class=\"variable\">$sad</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"匹配用法\"><a href=\"#匹配用法\" class=\"headerlink\" title=\"匹配用法\"></a>匹配用法</h2><ul><li><p><code>awk</code>也可以实现匹配功能,命令为<code>awk &#39;/pattern/&#39; [file]</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | awk '/login/'</span></span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p>匹配时可以在指定的段内匹配,如指定<code>$1</code>匹配,那么即使后面的分段有能匹配上关键字的字符串,<code>awk</code>也不会匹配,命令用法为<code>awk -F &#39;:&#39; &#39;$1 ~ /pattern/&#39; [file]</code>,这里的<code>~</code>表示匹配的意思,匹配时可以使用正则表达式:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | awk -F ':' '$1 ~ /bin/'</span></span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | awk -F ':' '$1 ~ /oo+/'</span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br></pre></td></tr></table></figure></li><li><p><code>awk</code>可以进行多个条件的匹配:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '/root/ &#123;print $1, $3&#125; /evobot/ &#123;print $3, $4&#125;' passwd </span></span><br><span class=\"line\">root 0</span><br><span class=\"line\">1002 1002</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -E 'root|evobot' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">evobot:x:1002:1002::/home/evobot:/bin/bash</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"数学运算\"><a href=\"#数学运算\" class=\"headerlink\" title=\"数学运算\"></a>数学运算</h2><ul><li><p><code>awk</code>匹配还可以进行数学运算如相等<code>==</code>,比较<code>&gt;=</code>、<code>&lt;=</code>和不等<code>!=</code>等条件进行匹配:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$3==0 &#123;print $1&#125;' passwd </span></span><br><span class=\"line\">root</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$3&gt;=1000 &#123;print $1&#125;' passwd </span></span><br><span class=\"line\">centos</span><br><span class=\"line\">lux</span><br><span class=\"line\">evobot</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$7!=\"/sbin/nologin\" &#123;print $0&#125;' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">sync:x:5:0:BUS:/sbin:/bin/sync</span><br><span class=\"line\">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class=\"line\">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class=\"line\">games:x:12:100:games:/usr/games:/sbin/noooologin</span><br><span class=\"line\">syslog:x:996:994::/home/syslog:/bin/<span class=\"literal\">false</span></span><br><span class=\"line\">centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH</span><br><span class=\"line\">lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">evobot:x:1002:1002::/home/evobot:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p>如果对数字使用双引号<code>&quot;&quot;</code>,<code>awk</code>会将其认为是一个字符串,在比较时会以ASCII码进行比较:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$3&gt;=\"1000\" &#123;print $0&#125;' passwd </span></span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class=\"line\">sync:x:5:0:BUS:/sbin:/bin/sync</span><br><span class=\"line\">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class=\"line\">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class=\"line\">mail:x:8:12:mail:/var/spoool/mail:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p>除了数字或字符串比较之外，<code>awk</code>还可以对两个字段进行比较，如<code>$3&lt;$4</code>这样的比较：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$3&lt;$4 &#123;print $0&#125;' passwd </span></span><br><span class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class=\"line\">mail:x:8:12:mail:/var/spoool/mail:/sbin/nologin</span><br><span class=\"line\">games:x:12:100:games:/usr/games:/sbin/noooologin</span><br><span class=\"line\">ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$3==$4 &#123;print $0&#125;' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">nobody:x:99:99:Nobody:/:/sbin/nologin</span><br><span class=\"line\">systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin</span><br><span class=\"line\">dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class=\"line\">centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH</span><br><span class=\"line\">lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">evobot:x:1002:1002::/home/evobot:/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$3&gt;$4 &#123;print $0&#125;' passwd </span></span><br><span class=\"line\">sync:x:5:0:BUS:/sbin:/bin/sync</span><br><span class=\"line\">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class=\"line\">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class=\"line\">operator:x:11:0:operator:/rooooot:/sbin/nologin</span><br><span class=\"line\">polkitd:x:999:997:User <span class=\"keyword\">for</span> polkitd:/:/sbin/nologin</span><br><span class=\"line\">syslog:x:996:994::/home/syslog:/bin/<span class=\"literal\">false</span></span><br><span class=\"line\">nginx:x:995:993:Nginx web server:/var/lib/nginx:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p>比较条件还可以多个一起使用，如<code>$3&gt;&quot;5&quot; &amp;&amp; $3&lt;&quot;7&quot;</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$3&gt;\"5\" &amp;&amp; $3&lt;\"7\"' passwd # 以ASCII码比较</span></span><br><span class=\"line\">daemon:x:59:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$3&gt;5 &amp;&amp; $3&lt;7' passwd\t# 以数字大小比较 </span></span><br><span class=\"line\">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br></pre></td></tr></table></figure></li><li><p>条件或比较，使用<code>$3&gt;1000 || $7==&quot;/sbin/nologin&quot;</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$3&gt;1000 || $7==\"/bin/BASH\"' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH</span><br><span class=\"line\">lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">evobot:x:1002:1002::/home/evobot:/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$3&gt;1000 || $7 ~ /BASH/' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH</span><br><span class=\"line\">lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">evobot:x:1002:1002::/home/evobot:/bin/bash</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"指定输出定界符\"><a href=\"#指定输出定界符\" class=\"headerlink\" title=\"指定输出定界符\"></a>指定输出定界符</h2><ul><li><p><code>awk</code>不仅可以指定处理文档时的定界符，也可以指定输出时打印出来的定界符，命令格式为<code>awk -F &#39;:&#39; &#39;{OFS=&quot;#&quot;} $3&gt;1000 || $7 ~/BASH/ {print $1,$3,$7} [file]&#39;</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '&#123;OFS=\"#\"&#125; $3&gt;1000 || $7 ~ /BASH/ &#123;print $1,$3,$7&#125;' passwd </span></span><br><span class=\"line\">root<span class=\"comment\">#0#/bin/BASH</span></span><br><span class=\"line\">centos<span class=\"comment\">#1000#/bin/BASH</span></span><br><span class=\"line\">lux<span class=\"comment\">#1001#/bin/bash</span></span><br><span class=\"line\">evobot<span class=\"comment\">#1002#/bin/bash</span></span><br></pre></td></tr></table></figure></li><li><p>匹配条件可以和<code>print</code>放在一个<code>{}</code>里，组成一个操作命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '&#123;OFS=\"#\"&#125; &#123;if ($3&gt;1000) &#123;print $1,$3,$7&#125;&#125;' passwd </span></span><br><span class=\"line\">lux<span class=\"comment\">#1001#/bin/bash</span></span><br><span class=\"line\">evobot<span class=\"comment\">#1002#/bin/bash</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"内置变量\"><a href=\"#内置变量\" class=\"headerlink\" title=\"内置变量\"></a>内置变量</h2><ul><li><p>上面的指定<code>OFS</code>其实也是<code>awk</code>中的内置变量，常用的内置变量还有<code>NR</code>表示行、<code>NF</code>表示段：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | awk -F ':' '&#123;print NR\":\"$0&#125;'\t#打印行号</span></span><br><span class=\"line\">1:root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">2:bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">3:daemon:x:59:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n3 passwd | awk -F ':' '&#123;print NF\":\"$0&#125;'\t#打印每行分成几段</span></span><br><span class=\"line\">7:root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">7:bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">7:daemon:x:59:2:daemon:/sbin:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p><code>NR</code>和<code>NF</code>还可以作为判断条件，例如打印前十行，在<code>sed</code>中命令为<code>sed -n &#39;1,10&#39;p [file]</code>,使用<code>awk</code>的命令为<code>awk -F &#39;:&#39; &#39;NR&lt;=10&#39; [file]</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' 'NR&lt;=10' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:59:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class=\"line\">sync:x:5:0:BUS:/sbin:/bin/sync</span><br><span class=\"line\">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class=\"line\">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class=\"line\">mail:x:8:12:mail:/var/spoool/mail:/sbin/nologin</span><br><span class=\"line\">operator:x:11:0:operator:/rooooot:/sbin/nologin</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打印前十行中第一段为root或者sync的行</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' 'NR&lt;=10 &amp;&amp; $1 ~/root|sync/' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">sync:x:5:0:BUS:/sbin:/bin/sync</span><br></pre></td></tr></table></figure></li><li><p><code>NF</code>作为条件可以对段数进行判断，如打印分段数为6的行：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' 'NF==6 &#123;print $0&#125;' passwd </span></span><br><span class=\"line\">adm:3:4:adm:/var/adm:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p>当使用<code>$NF</code>和<code>$NR</code>，这两个变量的意义不同，如<code>awk -F &#39;:&#39; &#39;{print $NR&quot;:&quot;$NF}&#39; [file]</code>,这条命令会在每读取一行，输出<code>NR</code>对应的<code>$行号:$段数</code>，由于<code>NF</code>是固定的数字，所以<code>$NR</code>超过段数时，输出为空：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '&#123;print $NR\":\"$NF'&#125; passwd </span></span><br><span class=\"line\">root:/bin/BASH</span><br><span class=\"line\">x:/sbin/nologin</span><br><span class=\"line\">59:/sbin/nologin</span><br><span class=\"line\">adm:/sbin/nologin</span><br><span class=\"line\">lp:/sbin/nologin</span><br><span class=\"line\">/sbin:/bin/sync</span><br><span class=\"line\">/sbin/shutdown:/sbin/shutdown</span><br><span class=\"line\">:/sbin/halt</span><br><span class=\"line\">:/sbin/nologin</span><br><span class=\"line\">:/sbin/nologin</span><br><span class=\"line\">:/sbin/noooologin</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h2><ul><li><p>使用<code>=</code>表示给变量赋值，如在<code>awk</code>中使用<code>$1=&quot;root&quot;</code>，则所有的输出行的<code>$1</code>都变成了<code>root</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | awk -F ':' '$1=\"awk\"'</span></span><br><span class=\"line\">awk x 0 0 root /root /bin/BASH</span><br><span class=\"line\">awk x 1 1 bin /bin /sbin/nologin</span><br><span class=\"line\">awk x 59 2 daemon /sbin /sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n3 passwd | awk -F ':' '&#123;OFS=\":\"&#125; $1=\"root\"'</span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">root:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">root:x:59:2:daemon:/sbin:/sbin/nologin</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"END用法\"><a href=\"#END用法\" class=\"headerlink\" title=\"END用法\"></a>END用法</h2><ul><li><p>求和整个文件的一列数据并打印结果，需要使用<code>END</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '&#123;(sum=sum+$3)&#125;; END &#123;print sum&#125;' passwd </span></span><br><span class=\"line\">8969</span><br></pre></td></tr></table></figure><p>这其中<code>{(sum=sum+$3)}</code>是我们自己定义的累加求和的公式，也可以使用<code>{(tot=tot+$3)}</code>,<code>tot</code>表示求和；</p><p><code>END</code>表示计算完成后最后执行的语句。</p></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p><strong>awk</strong>是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出。它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。awk有很多内建的功能，比如数组、函数等，这是它和C语言的相同之处，灵活性是awk最大的优势。</p>","more":"<hr><h1 id=\"awk命令用法\"><a href=\"#awk命令用法\" class=\"headerlink\" title=\"awk命令用法\"></a>awk命令用法</h1><h2 id=\"分段打印\"><a href=\"#分段打印\" class=\"headerlink\" title=\"分段打印\"></a>分段打印</h2><ul><li><p><code>awk</code>命令相比<code>sed</code>，可以实现分段匹配，使用<code>-F</code>制定分隔符，命令格式为<code>awk -F &#39;:&#39; &#39;{print $1}&#39; [file]</code>，其中<code>$1</code>表示分割出的第一段，<code>{}</code>内就是所执行的操作,同样的<code>awk</code>也不会对原文件进行修改;</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '&#123;print $1&#125;' passwd </span></span><br><span class=\"line\">root</span><br><span class=\"line\">bin</span><br><span class=\"line\">daemon</span><br><span class=\"line\">adm</span><br><span class=\"line\">lp</span><br><span class=\"line\">sync</span><br></pre></td></tr></table></figure></li><li><p><code>awk &#39;{print $0}&#39; [file]</code>可以打印出文件所有内容，在指定分隔符时，使用<code>$0</code>效果相同：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | awk -F ':' '&#123;print $0&#125;' </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | awk '&#123;print $0&#125;' </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p><code>awk</code>未指定分隔符时,默认以空格或空白字符为分隔符:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat 1.txt </span></span><br><span class=\"line\">zx cc vv</span><br><span class=\"line\">sai amsomd sad</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk '&#123;print $1,$3&#125;' 1.txt </span></span><br><span class=\"line\">zx vv</span><br><span class=\"line\">sai sad</span><br></pre></td></tr></table></figure></li><li><p>从上面的命令可以看出,打印多个分段,使用<code>,</code>分割指定的段即可;</p></li><li><p>打印多个分段时,也可以指定输出分段之间的分隔符,只需要将<code>,</code>改为需要指定的符号并用双引号引起来即可:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk '&#123;print $1\"#\"$3&#125;' 1.txt </span></span><br><span class=\"line\">zx<span class=\"comment\">#vv</span></span><br><span class=\"line\">sai<span class=\"comment\">#sad</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk '&#123;print $1\"$\"$3&#125;' 1.txt </span></span><br><span class=\"line\">zx<span class=\"variable\">$vv</span></span><br><span class=\"line\">sai<span class=\"variable\">$sad</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"匹配用法\"><a href=\"#匹配用法\" class=\"headerlink\" title=\"匹配用法\"></a>匹配用法</h2><ul><li><p><code>awk</code>也可以实现匹配功能,命令为<code>awk &#39;/pattern/&#39; [file]</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | awk '/login/'</span></span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p>匹配时可以在指定的段内匹配,如指定<code>$1</code>匹配,那么即使后面的分段有能匹配上关键字的字符串,<code>awk</code>也不会匹配,命令用法为<code>awk -F &#39;:&#39; &#39;$1 ~ /pattern/&#39; [file]</code>,这里的<code>~</code>表示匹配的意思,匹配时可以使用正则表达式:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | awk -F ':' '$1 ~ /bin/'</span></span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | awk -F ':' '$1 ~ /oo+/'</span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br></pre></td></tr></table></figure></li><li><p><code>awk</code>可以进行多个条件的匹配:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '/root/ &#123;print $1, $3&#125; /evobot/ &#123;print $3, $4&#125;' passwd </span></span><br><span class=\"line\">root 0</span><br><span class=\"line\">1002 1002</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -E 'root|evobot' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">evobot:x:1002:1002::/home/evobot:/bin/bash</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"数学运算\"><a href=\"#数学运算\" class=\"headerlink\" title=\"数学运算\"></a>数学运算</h2><ul><li><p><code>awk</code>匹配还可以进行数学运算如相等<code>==</code>,比较<code>&gt;=</code>、<code>&lt;=</code>和不等<code>!=</code>等条件进行匹配:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$3==0 &#123;print $1&#125;' passwd </span></span><br><span class=\"line\">root</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$3&gt;=1000 &#123;print $1&#125;' passwd </span></span><br><span class=\"line\">centos</span><br><span class=\"line\">lux</span><br><span class=\"line\">evobot</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$7!=\"/sbin/nologin\" &#123;print $0&#125;' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">sync:x:5:0:BUS:/sbin:/bin/sync</span><br><span class=\"line\">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class=\"line\">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class=\"line\">games:x:12:100:games:/usr/games:/sbin/noooologin</span><br><span class=\"line\">syslog:x:996:994::/home/syslog:/bin/<span class=\"literal\">false</span></span><br><span class=\"line\">centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH</span><br><span class=\"line\">lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">evobot:x:1002:1002::/home/evobot:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p>如果对数字使用双引号<code>&quot;&quot;</code>,<code>awk</code>会将其认为是一个字符串,在比较时会以ASCII码进行比较:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$3&gt;=\"1000\" &#123;print $0&#125;' passwd </span></span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class=\"line\">sync:x:5:0:BUS:/sbin:/bin/sync</span><br><span class=\"line\">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class=\"line\">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class=\"line\">mail:x:8:12:mail:/var/spoool/mail:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p>除了数字或字符串比较之外，<code>awk</code>还可以对两个字段进行比较，如<code>$3&lt;$4</code>这样的比较：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$3&lt;$4 &#123;print $0&#125;' passwd </span></span><br><span class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class=\"line\">mail:x:8:12:mail:/var/spoool/mail:/sbin/nologin</span><br><span class=\"line\">games:x:12:100:games:/usr/games:/sbin/noooologin</span><br><span class=\"line\">ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$3==$4 &#123;print $0&#125;' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">nobody:x:99:99:Nobody:/:/sbin/nologin</span><br><span class=\"line\">systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin</span><br><span class=\"line\">dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class=\"line\">centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH</span><br><span class=\"line\">lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">evobot:x:1002:1002::/home/evobot:/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$3&gt;$4 &#123;print $0&#125;' passwd </span></span><br><span class=\"line\">sync:x:5:0:BUS:/sbin:/bin/sync</span><br><span class=\"line\">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class=\"line\">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class=\"line\">operator:x:11:0:operator:/rooooot:/sbin/nologin</span><br><span class=\"line\">polkitd:x:999:997:User <span class=\"keyword\">for</span> polkitd:/:/sbin/nologin</span><br><span class=\"line\">syslog:x:996:994::/home/syslog:/bin/<span class=\"literal\">false</span></span><br><span class=\"line\">nginx:x:995:993:Nginx web server:/var/lib/nginx:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p>比较条件还可以多个一起使用，如<code>$3&gt;&quot;5&quot; &amp;&amp; $3&lt;&quot;7&quot;</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$3&gt;\"5\" &amp;&amp; $3&lt;\"7\"' passwd # 以ASCII码比较</span></span><br><span class=\"line\">daemon:x:59:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$3&gt;5 &amp;&amp; $3&lt;7' passwd\t# 以数字大小比较 </span></span><br><span class=\"line\">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br></pre></td></tr></table></figure></li><li><p>条件或比较，使用<code>$3&gt;1000 || $7==&quot;/sbin/nologin&quot;</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$3&gt;1000 || $7==\"/bin/BASH\"' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH</span><br><span class=\"line\">lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">evobot:x:1002:1002::/home/evobot:/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '$3&gt;1000 || $7 ~ /BASH/' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH</span><br><span class=\"line\">lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">evobot:x:1002:1002::/home/evobot:/bin/bash</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"指定输出定界符\"><a href=\"#指定输出定界符\" class=\"headerlink\" title=\"指定输出定界符\"></a>指定输出定界符</h2><ul><li><p><code>awk</code>不仅可以指定处理文档时的定界符，也可以指定输出时打印出来的定界符，命令格式为<code>awk -F &#39;:&#39; &#39;{OFS=&quot;#&quot;} $3&gt;1000 || $7 ~/BASH/ {print $1,$3,$7} [file]&#39;</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '&#123;OFS=\"#\"&#125; $3&gt;1000 || $7 ~ /BASH/ &#123;print $1,$3,$7&#125;' passwd </span></span><br><span class=\"line\">root<span class=\"comment\">#0#/bin/BASH</span></span><br><span class=\"line\">centos<span class=\"comment\">#1000#/bin/BASH</span></span><br><span class=\"line\">lux<span class=\"comment\">#1001#/bin/bash</span></span><br><span class=\"line\">evobot<span class=\"comment\">#1002#/bin/bash</span></span><br></pre></td></tr></table></figure></li><li><p>匹配条件可以和<code>print</code>放在一个<code>{}</code>里，组成一个操作命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '&#123;OFS=\"#\"&#125; &#123;if ($3&gt;1000) &#123;print $1,$3,$7&#125;&#125;' passwd </span></span><br><span class=\"line\">lux<span class=\"comment\">#1001#/bin/bash</span></span><br><span class=\"line\">evobot<span class=\"comment\">#1002#/bin/bash</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"内置变量\"><a href=\"#内置变量\" class=\"headerlink\" title=\"内置变量\"></a>内置变量</h2><ul><li><p>上面的指定<code>OFS</code>其实也是<code>awk</code>中的内置变量，常用的内置变量还有<code>NR</code>表示行、<code>NF</code>表示段：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | awk -F ':' '&#123;print NR\":\"$0&#125;'\t#打印行号</span></span><br><span class=\"line\">1:root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">2:bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">3:daemon:x:59:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n3 passwd | awk -F ':' '&#123;print NF\":\"$0&#125;'\t#打印每行分成几段</span></span><br><span class=\"line\">7:root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">7:bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">7:daemon:x:59:2:daemon:/sbin:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p><code>NR</code>和<code>NF</code>还可以作为判断条件，例如打印前十行，在<code>sed</code>中命令为<code>sed -n &#39;1,10&#39;p [file]</code>,使用<code>awk</code>的命令为<code>awk -F &#39;:&#39; &#39;NR&lt;=10&#39; [file]</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' 'NR&lt;=10' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:59:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class=\"line\">sync:x:5:0:BUS:/sbin:/bin/sync</span><br><span class=\"line\">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class=\"line\">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class=\"line\">mail:x:8:12:mail:/var/spoool/mail:/sbin/nologin</span><br><span class=\"line\">operator:x:11:0:operator:/rooooot:/sbin/nologin</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打印前十行中第一段为root或者sync的行</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' 'NR&lt;=10 &amp;&amp; $1 ~/root|sync/' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">sync:x:5:0:BUS:/sbin:/bin/sync</span><br></pre></td></tr></table></figure></li><li><p><code>NF</code>作为条件可以对段数进行判断，如打印分段数为6的行：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' 'NF==6 &#123;print $0&#125;' passwd </span></span><br><span class=\"line\">adm:3:4:adm:/var/adm:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p>当使用<code>$NF</code>和<code>$NR</code>，这两个变量的意义不同，如<code>awk -F &#39;:&#39; &#39;{print $NR&quot;:&quot;$NF}&#39; [file]</code>,这条命令会在每读取一行，输出<code>NR</code>对应的<code>$行号:$段数</code>，由于<code>NF</code>是固定的数字，所以<code>$NR</code>超过段数时，输出为空：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '&#123;print $NR\":\"$NF'&#125; passwd </span></span><br><span class=\"line\">root:/bin/BASH</span><br><span class=\"line\">x:/sbin/nologin</span><br><span class=\"line\">59:/sbin/nologin</span><br><span class=\"line\">adm:/sbin/nologin</span><br><span class=\"line\">lp:/sbin/nologin</span><br><span class=\"line\">/sbin:/bin/sync</span><br><span class=\"line\">/sbin/shutdown:/sbin/shutdown</span><br><span class=\"line\">:/sbin/halt</span><br><span class=\"line\">:/sbin/nologin</span><br><span class=\"line\">:/sbin/nologin</span><br><span class=\"line\">:/sbin/noooologin</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h2><ul><li><p>使用<code>=</code>表示给变量赋值，如在<code>awk</code>中使用<code>$1=&quot;root&quot;</code>，则所有的输出行的<code>$1</code>都变成了<code>root</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | awk -F ':' '$1=\"awk\"'</span></span><br><span class=\"line\">awk x 0 0 root /root /bin/BASH</span><br><span class=\"line\">awk x 1 1 bin /bin /sbin/nologin</span><br><span class=\"line\">awk x 59 2 daemon /sbin /sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n3 passwd | awk -F ':' '&#123;OFS=\":\"&#125; $1=\"root\"'</span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">root:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">root:x:59:2:daemon:/sbin:/sbin/nologin</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"END用法\"><a href=\"#END用法\" class=\"headerlink\" title=\"END用法\"></a>END用法</h2><ul><li><p>求和整个文件的一列数据并打印结果，需要使用<code>END</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk -F ':' '&#123;(sum=sum+$3)&#125;; END &#123;print sum&#125;' passwd </span></span><br><span class=\"line\">8969</span><br></pre></td></tr></table></figure><p>这其中<code>{(sum=sum+$3)}</code>是我们自己定义的累加求和的公式，也可以使用<code>{(tot=tot+$3)}</code>,<code>tot</code>表示求和；</p><p><code>END</code>表示计算完成后最后执行的语句。</p></li></ul><hr><!-- rebuild by neat -->"},{"title":"Linux正则表达式——awk扩展学习","author":"Evobot","abbrlink":"9960c119","date":"2018-05-03T14:24:01.000Z","image":null,"_content":"\n\n\n# awk中使用外部shell变量\n\n- awk中调用shell的变量，例如`A=44;echo \"ABCD\" | awk -v GET_A=$A '{print GET_A}'`，`-v`选项用于定义awk的变量参数，这里就是将shell变量`A`赋予`GET_A`，如果要定义多个变量，就需要多个`-v`选项。\n\n- 在脚本中同样也可以让`awk`获取shell变量，如文件filename内容如下：\n\n  ```bash\n  1111111:13443253456\n  2222222:13211222122\n  1111111:13643543544\n  3333333:12341243123\n  2222222:12123123123\n  ```\n\n  脚本如下：\n\n  ```bash\n  #!/bin/bash\n\n  sort -n filename | awk -F ':' '{print $1}' | uniq > id.txt\n\n  for id in `cat id.txt`;do\n      echo \"[$id]\"\n      awk -v id2=$id -F ':' '$1==id2 {print $2}' filename\n  done\n  ```\n\n  输出结果：\n\n  ```bash\n  [root@evobot ~]# bash awkscript.sh \n  [1111111]\n  13443253456\n  13643543544\n  [2222222]\n  13211222122\n  12123123123\n  [3333333]\n  12341243123\n  ```\n\n# awk合并文件\n\n- 例如将两个文件中，第一列相同的行合并到同一行，文件内容如下：\n\n  {% codeblock 1.txt %}\n  1 aa\n  2 bb\n  3 ee\n  4 ss\n  {% endcodeblock %}\n  {% codeblock 2.txt %}\n  1 ab\n  2 cd\n  3 ad\n  4 bd\n  5 de\n  {% endcodeblock %}\n\n- 合并后结果为：\n\n  {% codeblock result.txt %}\n  1 ab aa\n  2 cd bb\n  3 ad ee\n  4 bd ss\n  5 de\n  {% endcodeblock %}\n\n- 使用`awk`实现的命令为：\n\n  ```bash\n  [root@evobot ~]# awk 'NR==FNR{a[$1]=$2}NR>FNR{print $0,a[$1]}' 1.txt 2.txt \n  1 ab aa\n  2 cd bb\n  3 ad ee\n  4 bd ss\n  5 de \n  ```\n\n  > `NR`表示读取的行数，FNR表示读取的当前行数\n  > 所以其实NR==FNR 就表示读取2.txt的时候。 同理NR>FNR表示读取1.txt的时候\n  > 数组a其实就相当于一个map\n\n- 因为读取了两个文件，当读取第二个文件时，`NR`行数会继续增加，但是当前行数`FNR`会从第二个文件重新计数，如下：\n\n  ```bash\n  [root@evobot ~]# awk '{print NR,$0}' 1.txt 2.txt \n  1 1 aa\n  2 2 bb\n  3 3 ee\n  4 4 ss\n  5 1 ab\n  6 2 cd\n  7 3 ad\n  8 4 bd\n  9 5 de\n  [root@evobot ~]# awk '{print FNR,$0}' 1.txt 2.txt \n  1 1 aa\n  2 2 bb\n  3 3 ee\n  4 4 ss\n  1 1 ab\n  2 2 cd\n  3 3 ad\n  4 4 bd\n  5 5 de\n  ```\n\n- 所以判断`NR>FNR`时，表示读取的是第二个文件，就可以打印第二个文件的内容，并且每行后面将第一个文件的`a`数组即第一个文件的`$2`添加到第二个文件后面。\n\n# 将文件多行输出为一行\n\n- 实现将文件内容多行输出为一行使用`cat`或者shell变量都可以实现：\n\n  ```bash\n  [root@evobot ~]# a=`cat 1.txt`\n  [root@evobot ~]# echo $a\n  1 aa 2 bb 3 ee 4 ss\n\n  [root@evobot ~]# cat 1.txt | xargs\n  1 aa 2 bb 3 ee 4 ss\n  ```\n\n- 使用`awk`实现的命令如下：\n\n  ```bash\n  [root@evobot ~]# awk '{printf(\"%s\",$0)}' 1.txt \n  1 aa2 bb3 ee4 ss\n\n  [root@evobot ~]# awk '{printf(\"%s \",$0)}' 1.txt\n  1 aa 2 bb 3 ee 4 ss \n  ```\n\n  - 这里`%s`后面有空格可以格式化输出，没有空格的话，内容将连在一起。\n\n# awk中gsub函数的使用\n\n```bash\nawk 'gsub(/www/,\"abc\")' /etc/passwd  # passwd文件中把所有www替换为abc\nawk -F ':' 'gsub(/www/,\"abc\",$1) {print $0}' /etc/passwd  # 替换$1中的www为abc\n```\n\n# awk截取指定多个域为一行\n\n```bash\nfor j in `seq 0 20`; do\n        let x=100*$j\n        let y=$x+1\n        let z=$x+100\n        for i in `seq $y $z` ; do\n                awk  -v a=$i '{printf $a \" \"}' example.txt >>/tmp/test.txt\n                echo \" \" >>/tmp/test.txt\n        done\ndone\n```\n\n# grep 或 egrep 或awk 过滤两个或多个关键词\n\n```bash\ngrep -E '123|abc' filename # 找出文件（filename）中包含123或者包含abc的行\negrep '123|abc' filename   # 用egrep同样可以实现\nawk '/123|abc/'  filename # awk 的实现方式\n```\n\n\n\n> 更多的awk用法，可以参考[awk使用入门](http://www.cnblogs.com/emanlee/p/3327576.html) \n\n---","source":"_posts/Linux正则表达式—awk扩展学习.md","raw":"---\ntitle: Linux正则表达式——awk扩展学习\nauthor: Evobot\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\nabbrlink: 9960c119\ndate: 2018-05-03 22:24:01\nimage:\n---\n\n\n\n# awk中使用外部shell变量\n\n- awk中调用shell的变量，例如`A=44;echo \"ABCD\" | awk -v GET_A=$A '{print GET_A}'`，`-v`选项用于定义awk的变量参数，这里就是将shell变量`A`赋予`GET_A`，如果要定义多个变量，就需要多个`-v`选项。\n\n- 在脚本中同样也可以让`awk`获取shell变量，如文件filename内容如下：\n\n  ```bash\n  1111111:13443253456\n  2222222:13211222122\n  1111111:13643543544\n  3333333:12341243123\n  2222222:12123123123\n  ```\n\n  脚本如下：\n\n  ```bash\n  #!/bin/bash\n\n  sort -n filename | awk -F ':' '{print $1}' | uniq > id.txt\n\n  for id in `cat id.txt`;do\n      echo \"[$id]\"\n      awk -v id2=$id -F ':' '$1==id2 {print $2}' filename\n  done\n  ```\n\n  输出结果：\n\n  ```bash\n  [root@evobot ~]# bash awkscript.sh \n  [1111111]\n  13443253456\n  13643543544\n  [2222222]\n  13211222122\n  12123123123\n  [3333333]\n  12341243123\n  ```\n\n# awk合并文件\n\n- 例如将两个文件中，第一列相同的行合并到同一行，文件内容如下：\n\n  {% codeblock 1.txt %}\n  1 aa\n  2 bb\n  3 ee\n  4 ss\n  {% endcodeblock %}\n  {% codeblock 2.txt %}\n  1 ab\n  2 cd\n  3 ad\n  4 bd\n  5 de\n  {% endcodeblock %}\n\n- 合并后结果为：\n\n  {% codeblock result.txt %}\n  1 ab aa\n  2 cd bb\n  3 ad ee\n  4 bd ss\n  5 de\n  {% endcodeblock %}\n\n- 使用`awk`实现的命令为：\n\n  ```bash\n  [root@evobot ~]# awk 'NR==FNR{a[$1]=$2}NR>FNR{print $0,a[$1]}' 1.txt 2.txt \n  1 ab aa\n  2 cd bb\n  3 ad ee\n  4 bd ss\n  5 de \n  ```\n\n  > `NR`表示读取的行数，FNR表示读取的当前行数\n  > 所以其实NR==FNR 就表示读取2.txt的时候。 同理NR>FNR表示读取1.txt的时候\n  > 数组a其实就相当于一个map\n\n- 因为读取了两个文件，当读取第二个文件时，`NR`行数会继续增加，但是当前行数`FNR`会从第二个文件重新计数，如下：\n\n  ```bash\n  [root@evobot ~]# awk '{print NR,$0}' 1.txt 2.txt \n  1 1 aa\n  2 2 bb\n  3 3 ee\n  4 4 ss\n  5 1 ab\n  6 2 cd\n  7 3 ad\n  8 4 bd\n  9 5 de\n  [root@evobot ~]# awk '{print FNR,$0}' 1.txt 2.txt \n  1 1 aa\n  2 2 bb\n  3 3 ee\n  4 4 ss\n  1 1 ab\n  2 2 cd\n  3 3 ad\n  4 4 bd\n  5 5 de\n  ```\n\n- 所以判断`NR>FNR`时，表示读取的是第二个文件，就可以打印第二个文件的内容，并且每行后面将第一个文件的`a`数组即第一个文件的`$2`添加到第二个文件后面。\n\n# 将文件多行输出为一行\n\n- 实现将文件内容多行输出为一行使用`cat`或者shell变量都可以实现：\n\n  ```bash\n  [root@evobot ~]# a=`cat 1.txt`\n  [root@evobot ~]# echo $a\n  1 aa 2 bb 3 ee 4 ss\n\n  [root@evobot ~]# cat 1.txt | xargs\n  1 aa 2 bb 3 ee 4 ss\n  ```\n\n- 使用`awk`实现的命令如下：\n\n  ```bash\n  [root@evobot ~]# awk '{printf(\"%s\",$0)}' 1.txt \n  1 aa2 bb3 ee4 ss\n\n  [root@evobot ~]# awk '{printf(\"%s \",$0)}' 1.txt\n  1 aa 2 bb 3 ee 4 ss \n  ```\n\n  - 这里`%s`后面有空格可以格式化输出，没有空格的话，内容将连在一起。\n\n# awk中gsub函数的使用\n\n```bash\nawk 'gsub(/www/,\"abc\")' /etc/passwd  # passwd文件中把所有www替换为abc\nawk -F ':' 'gsub(/www/,\"abc\",$1) {print $0}' /etc/passwd  # 替换$1中的www为abc\n```\n\n# awk截取指定多个域为一行\n\n```bash\nfor j in `seq 0 20`; do\n        let x=100*$j\n        let y=$x+1\n        let z=$x+100\n        for i in `seq $y $z` ; do\n                awk  -v a=$i '{printf $a \" \"}' example.txt >>/tmp/test.txt\n                echo \" \" >>/tmp/test.txt\n        done\ndone\n```\n\n# grep 或 egrep 或awk 过滤两个或多个关键词\n\n```bash\ngrep -E '123|abc' filename # 找出文件（filename）中包含123或者包含abc的行\negrep '123|abc' filename   # 用egrep同样可以实现\nawk '/123|abc/'  filename # awk 的实现方式\n```\n\n\n\n> 更多的awk用法，可以参考[awk使用入门](http://www.cnblogs.com/emanlee/p/3327576.html) \n\n---","slug":"Linux正则表达式—awk扩展学习","published":1,"updated":"2018-06-02T13:01:29.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazbe002du1jxpg4ryg5h","content":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><h1 id=\"awk中使用外部shell变量\"><a href=\"#awk中使用外部shell变量\" class=\"headerlink\" title=\"awk中使用外部shell变量\"></a>awk中使用外部shell变量</h1><ul><li><p>awk中调用shell的变量，例如<code>A=44;echo &quot;ABCD&quot; | awk -v GET_A=$A &#39;{print GET_A}&#39;</code>，<code>-v</code>选项用于定义awk的变量参数，这里就是将shell变量<code>A</code>赋予<code>GET_A</code>，如果要定义多个变量，就需要多个<code>-v</code>选项。</p></li><li><p>在脚本中同样也可以让<code>awk</code>获取shell变量，如文件filename内容如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1111111:13443253456</span><br><span class=\"line\">2222222:13211222122</span><br><span class=\"line\">1111111:13643543544</span><br><span class=\"line\">3333333:12341243123</span><br><span class=\"line\">2222222:12123123123</span><br></pre></td></tr></table></figure><p>脚本如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">sort -n filename | awk -F <span class=\"string\">':'</span> <span class=\"string\">'&#123;print $1&#125;'</span> | uniq &gt; id.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> id <span class=\"keyword\">in</span> `cat id.txt`;<span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"[<span class=\"variable\">$id</span>]\"</span></span><br><span class=\"line\">    awk -v id2=<span class=\"variable\">$id</span> -F <span class=\"string\">':'</span> <span class=\"string\">'$1==id2 &#123;print $2&#125;'</span> filename</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># bash awkscript.sh </span></span><br><span class=\"line\">[1111111]</span><br><span class=\"line\">13443253456</span><br><span class=\"line\">13643543544</span><br><span class=\"line\">[2222222]</span><br><span class=\"line\">13211222122</span><br><span class=\"line\">12123123123</span><br><span class=\"line\">[3333333]</span><br><span class=\"line\">12341243123</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"awk合并文件\"><a href=\"#awk合并文件\" class=\"headerlink\" title=\"awk合并文件\"></a>awk合并文件</h1><ul><li><p>例如将两个文件中，第一列相同的行合并到同一行，文件内容如下：</p><figure class=\"highlight plain\"><figcaption><span>1.txt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 aa</span><br><span class=\"line\">2 bb</span><br><span class=\"line\">3 ee</span><br><span class=\"line\">4 ss</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><figcaption><span>2.txt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 ab</span><br><span class=\"line\">2 cd</span><br><span class=\"line\">3 ad</span><br><span class=\"line\">4 bd</span><br><span class=\"line\">5 de</span><br></pre></td></tr></table></figure></li><li><p>合并后结果为：</p><figure class=\"highlight plain\"><figcaption><span>result.txt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 ab aa</span><br><span class=\"line\">2 cd bb</span><br><span class=\"line\">3 ad ee</span><br><span class=\"line\">4 bd ss</span><br><span class=\"line\">5 de</span><br></pre></td></tr></table></figure></li><li><p>使用<code>awk</code>实现的命令为：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk 'NR==FNR&#123;a[$1]=$2&#125;NR&gt;FNR&#123;print $0,a[$1]&#125;' 1.txt 2.txt </span></span><br><span class=\"line\">1 ab aa</span><br><span class=\"line\">2 <span class=\"built_in\">cd</span> bb</span><br><span class=\"line\">3 ad ee</span><br><span class=\"line\">4 bd ss</span><br><span class=\"line\">5 de</span><br></pre></td></tr></table></figure><blockquote><p><code>NR</code>表示读取的行数，FNR表示读取的当前行数<br>所以其实NR==FNR 就表示读取2.txt的时候。 同理NR&gt;FNR表示读取1.txt的时候<br>数组a其实就相当于一个map</p></blockquote></li><li><p>因为读取了两个文件，当读取第二个文件时，<code>NR</code>行数会继续增加，但是当前行数<code>FNR</code>会从第二个文件重新计数，如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk '&#123;print NR,$0&#125;' 1.txt 2.txt </span></span><br><span class=\"line\">1 1 aa</span><br><span class=\"line\">2 2 bb</span><br><span class=\"line\">3 3 ee</span><br><span class=\"line\">4 4 ss</span><br><span class=\"line\">5 1 ab</span><br><span class=\"line\">6 2 <span class=\"built_in\">cd</span></span><br><span class=\"line\">7 3 ad</span><br><span class=\"line\">8 4 bd</span><br><span class=\"line\">9 5 de</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk '&#123;print FNR,$0&#125;' 1.txt 2.txt </span></span><br><span class=\"line\">1 1 aa</span><br><span class=\"line\">2 2 bb</span><br><span class=\"line\">3 3 ee</span><br><span class=\"line\">4 4 ss</span><br><span class=\"line\">1 1 ab</span><br><span class=\"line\">2 2 <span class=\"built_in\">cd</span></span><br><span class=\"line\">3 3 ad</span><br><span class=\"line\">4 4 bd</span><br><span class=\"line\">5 5 de</span><br></pre></td></tr></table></figure></li><li><p>所以判断<code>NR&gt;FNR</code>时，表示读取的是第二个文件，就可以打印第二个文件的内容，并且每行后面将第一个文件的<code>a</code>数组即第一个文件的<code>$2</code>添加到第二个文件后面。</p></li></ul><h1 id=\"将文件多行输出为一行\"><a href=\"#将文件多行输出为一行\" class=\"headerlink\" title=\"将文件多行输出为一行\"></a>将文件多行输出为一行</h1><ul><li><p>实现将文件内容多行输出为一行使用<code>cat</code>或者shell变量都可以实现：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># a=`cat 1.txt`</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo $a</span></span><br><span class=\"line\">1 aa 2 bb 3 ee 4 ss</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat 1.txt | xargs</span></span><br><span class=\"line\">1 aa 2 bb 3 ee 4 ss</span><br></pre></td></tr></table></figure></li><li><p>使用<code>awk</code>实现的命令如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk '&#123;printf(\"%s\",$0)&#125;' 1.txt </span></span><br><span class=\"line\">1 aa2 bb3 ee4 ss</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk '&#123;printf(\"%s \",$0)&#125;' 1.txt</span></span><br><span class=\"line\">1 aa 2 bb 3 ee 4 ss</span><br></pre></td></tr></table></figure><ul><li>这里<code>%s</code>后面有空格可以格式化输出，没有空格的话，内容将连在一起。</li></ul></li></ul><h1 id=\"awk中gsub函数的使用\"><a href=\"#awk中gsub函数的使用\" class=\"headerlink\" title=\"awk中gsub函数的使用\"></a>awk中gsub函数的使用</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">'gsub(/www/,\"abc\")'</span> /etc/passwd  <span class=\"comment\"># passwd文件中把所有www替换为abc</span></span><br><span class=\"line\">awk -F <span class=\"string\">':'</span> <span class=\"string\">'gsub(/www/,\"abc\",$1) &#123;print $0&#125;'</span> /etc/passwd  <span class=\"comment\"># 替换$1中的www为abc</span></span><br></pre></td></tr></table></figure><h1 id=\"awk截取指定多个域为一行\"><a href=\"#awk截取指定多个域为一行\" class=\"headerlink\" title=\"awk截取指定多个域为一行\"></a>awk截取指定多个域为一行</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> `seq 0 20`; <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"built_in\">let</span> x=100*<span class=\"variable\">$j</span></span><br><span class=\"line\">        <span class=\"built_in\">let</span> y=<span class=\"variable\">$x</span>+1</span><br><span class=\"line\">        <span class=\"built_in\">let</span> z=<span class=\"variable\">$x</span>+100</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `seq <span class=\"variable\">$y</span> <span class=\"variable\">$z</span>` ; <span class=\"keyword\">do</span></span><br><span class=\"line\">                awk  -v a=<span class=\"variable\">$i</span> <span class=\"string\">'&#123;printf $a \" \"&#125;'</span> example.txt &gt;&gt;/tmp/test.txt</span><br><span class=\"line\">                <span class=\"built_in\">echo</span> <span class=\"string\">\" \"</span> &gt;&gt;/tmp/test.txt</span><br><span class=\"line\">        <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure><h1 id=\"grep-或-egrep-或awk-过滤两个或多个关键词\"><a href=\"#grep-或-egrep-或awk-过滤两个或多个关键词\" class=\"headerlink\" title=\"grep 或 egrep 或awk 过滤两个或多个关键词\"></a>grep 或 egrep 或awk 过滤两个或多个关键词</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -E <span class=\"string\">'123|abc'</span> filename <span class=\"comment\"># 找出文件（filename）中包含123或者包含abc的行</span></span><br><span class=\"line\">egrep <span class=\"string\">'123|abc'</span> filename   <span class=\"comment\"># 用egrep同样可以实现</span></span><br><span class=\"line\">awk <span class=\"string\">'/123|abc/'</span>  filename <span class=\"comment\"># awk 的实现方式</span></span><br></pre></td></tr></table></figure><blockquote><p>更多的awk用法，可以参考<a href=\"http://www.cnblogs.com/emanlee/p/3327576.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">awk使用入门</a></p></blockquote><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><h1 id=\"awk中使用外部shell变量\"><a href=\"#awk中使用外部shell变量\" class=\"headerlink\" title=\"awk中使用外部shell变量\"></a>awk中使用外部shell变量</h1><ul><li><p>awk中调用shell的变量，例如<code>A=44;echo &quot;ABCD&quot; | awk -v GET_A=$A &#39;{print GET_A}&#39;</code>，<code>-v</code>选项用于定义awk的变量参数，这里就是将shell变量<code>A</code>赋予<code>GET_A</code>，如果要定义多个变量，就需要多个<code>-v</code>选项。</p></li><li><p>在脚本中同样也可以让<code>awk</code>获取shell变量，如文件filename内容如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1111111:13443253456</span><br><span class=\"line\">2222222:13211222122</span><br><span class=\"line\">1111111:13643543544</span><br><span class=\"line\">3333333:12341243123</span><br><span class=\"line\">2222222:12123123123</span><br></pre></td></tr></table></figure><p>脚本如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">sort -n filename | awk -F <span class=\"string\">':'</span> <span class=\"string\">'&#123;print $1&#125;'</span> | uniq &gt; id.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> id <span class=\"keyword\">in</span> `cat id.txt`;<span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"[<span class=\"variable\">$id</span>]\"</span></span><br><span class=\"line\">    awk -v id2=<span class=\"variable\">$id</span> -F <span class=\"string\">':'</span> <span class=\"string\">'$1==id2 &#123;print $2&#125;'</span> filename</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># bash awkscript.sh </span></span><br><span class=\"line\">[1111111]</span><br><span class=\"line\">13443253456</span><br><span class=\"line\">13643543544</span><br><span class=\"line\">[2222222]</span><br><span class=\"line\">13211222122</span><br><span class=\"line\">12123123123</span><br><span class=\"line\">[3333333]</span><br><span class=\"line\">12341243123</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"awk合并文件\"><a href=\"#awk合并文件\" class=\"headerlink\" title=\"awk合并文件\"></a>awk合并文件</h1><ul><li><p>例如将两个文件中，第一列相同的行合并到同一行，文件内容如下：</p><figure class=\"highlight plain\"><figcaption><span>1.txt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 aa</span><br><span class=\"line\">2 bb</span><br><span class=\"line\">3 ee</span><br><span class=\"line\">4 ss</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><figcaption><span>2.txt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 ab</span><br><span class=\"line\">2 cd</span><br><span class=\"line\">3 ad</span><br><span class=\"line\">4 bd</span><br><span class=\"line\">5 de</span><br></pre></td></tr></table></figure></li><li><p>合并后结果为：</p><figure class=\"highlight plain\"><figcaption><span>result.txt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 ab aa</span><br><span class=\"line\">2 cd bb</span><br><span class=\"line\">3 ad ee</span><br><span class=\"line\">4 bd ss</span><br><span class=\"line\">5 de</span><br></pre></td></tr></table></figure></li><li><p>使用<code>awk</code>实现的命令为：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk 'NR==FNR&#123;a[$1]=$2&#125;NR&gt;FNR&#123;print $0,a[$1]&#125;' 1.txt 2.txt </span></span><br><span class=\"line\">1 ab aa</span><br><span class=\"line\">2 <span class=\"built_in\">cd</span> bb</span><br><span class=\"line\">3 ad ee</span><br><span class=\"line\">4 bd ss</span><br><span class=\"line\">5 de</span><br></pre></td></tr></table></figure><blockquote><p><code>NR</code>表示读取的行数，FNR表示读取的当前行数<br>所以其实NR==FNR 就表示读取2.txt的时候。 同理NR&gt;FNR表示读取1.txt的时候<br>数组a其实就相当于一个map</p></blockquote></li><li><p>因为读取了两个文件，当读取第二个文件时，<code>NR</code>行数会继续增加，但是当前行数<code>FNR</code>会从第二个文件重新计数，如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk '&#123;print NR,$0&#125;' 1.txt 2.txt </span></span><br><span class=\"line\">1 1 aa</span><br><span class=\"line\">2 2 bb</span><br><span class=\"line\">3 3 ee</span><br><span class=\"line\">4 4 ss</span><br><span class=\"line\">5 1 ab</span><br><span class=\"line\">6 2 <span class=\"built_in\">cd</span></span><br><span class=\"line\">7 3 ad</span><br><span class=\"line\">8 4 bd</span><br><span class=\"line\">9 5 de</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk '&#123;print FNR,$0&#125;' 1.txt 2.txt </span></span><br><span class=\"line\">1 1 aa</span><br><span class=\"line\">2 2 bb</span><br><span class=\"line\">3 3 ee</span><br><span class=\"line\">4 4 ss</span><br><span class=\"line\">1 1 ab</span><br><span class=\"line\">2 2 <span class=\"built_in\">cd</span></span><br><span class=\"line\">3 3 ad</span><br><span class=\"line\">4 4 bd</span><br><span class=\"line\">5 5 de</span><br></pre></td></tr></table></figure></li><li><p>所以判断<code>NR&gt;FNR</code>时，表示读取的是第二个文件，就可以打印第二个文件的内容，并且每行后面将第一个文件的<code>a</code>数组即第一个文件的<code>$2</code>添加到第二个文件后面。</p></li></ul><h1 id=\"将文件多行输出为一行\"><a href=\"#将文件多行输出为一行\" class=\"headerlink\" title=\"将文件多行输出为一行\"></a>将文件多行输出为一行</h1><ul><li><p>实现将文件内容多行输出为一行使用<code>cat</code>或者shell变量都可以实现：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># a=`cat 1.txt`</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo $a</span></span><br><span class=\"line\">1 aa 2 bb 3 ee 4 ss</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat 1.txt | xargs</span></span><br><span class=\"line\">1 aa 2 bb 3 ee 4 ss</span><br></pre></td></tr></table></figure></li><li><p>使用<code>awk</code>实现的命令如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk '&#123;printf(\"%s\",$0)&#125;' 1.txt </span></span><br><span class=\"line\">1 aa2 bb3 ee4 ss</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># awk '&#123;printf(\"%s \",$0)&#125;' 1.txt</span></span><br><span class=\"line\">1 aa 2 bb 3 ee 4 ss</span><br></pre></td></tr></table></figure><ul><li>这里<code>%s</code>后面有空格可以格式化输出，没有空格的话，内容将连在一起。</li></ul></li></ul><h1 id=\"awk中gsub函数的使用\"><a href=\"#awk中gsub函数的使用\" class=\"headerlink\" title=\"awk中gsub函数的使用\"></a>awk中gsub函数的使用</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">'gsub(/www/,\"abc\")'</span> /etc/passwd  <span class=\"comment\"># passwd文件中把所有www替换为abc</span></span><br><span class=\"line\">awk -F <span class=\"string\">':'</span> <span class=\"string\">'gsub(/www/,\"abc\",$1) &#123;print $0&#125;'</span> /etc/passwd  <span class=\"comment\"># 替换$1中的www为abc</span></span><br></pre></td></tr></table></figure><h1 id=\"awk截取指定多个域为一行\"><a href=\"#awk截取指定多个域为一行\" class=\"headerlink\" title=\"awk截取指定多个域为一行\"></a>awk截取指定多个域为一行</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> `seq 0 20`; <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"built_in\">let</span> x=100*<span class=\"variable\">$j</span></span><br><span class=\"line\">        <span class=\"built_in\">let</span> y=<span class=\"variable\">$x</span>+1</span><br><span class=\"line\">        <span class=\"built_in\">let</span> z=<span class=\"variable\">$x</span>+100</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `seq <span class=\"variable\">$y</span> <span class=\"variable\">$z</span>` ; <span class=\"keyword\">do</span></span><br><span class=\"line\">                awk  -v a=<span class=\"variable\">$i</span> <span class=\"string\">'&#123;printf $a \" \"&#125;'</span> example.txt &gt;&gt;/tmp/test.txt</span><br><span class=\"line\">                <span class=\"built_in\">echo</span> <span class=\"string\">\" \"</span> &gt;&gt;/tmp/test.txt</span><br><span class=\"line\">        <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure><h1 id=\"grep-或-egrep-或awk-过滤两个或多个关键词\"><a href=\"#grep-或-egrep-或awk-过滤两个或多个关键词\" class=\"headerlink\" title=\"grep 或 egrep 或awk 过滤两个或多个关键词\"></a>grep 或 egrep 或awk 过滤两个或多个关键词</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -E <span class=\"string\">'123|abc'</span> filename <span class=\"comment\"># 找出文件（filename）中包含123或者包含abc的行</span></span><br><span class=\"line\">egrep <span class=\"string\">'123|abc'</span> filename   <span class=\"comment\"># 用egrep同样可以实现</span></span><br><span class=\"line\">awk <span class=\"string\">'/123|abc/'</span>  filename <span class=\"comment\"># awk 的实现方式</span></span><br></pre></td></tr></table></figure><blockquote><p>更多的awk用法，可以参考<a href=\"http://www.cnblogs.com/emanlee/p/3327576.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">awk使用入门</a></p></blockquote><hr><!-- rebuild by neat -->"},{"title":"Linux正则表达式——grep命令","author":"Evobot","abbrlink":"400407c0","date":"2018-04-25T13:26:55.000Z","image":null,"_content":"\n\n\n![正则表达式](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/regex.png)\n\n正则表达式又称为规则表达式，是用事先定义好的一些特定的字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑；掌握好正则对于编写shell脚本也会有很大的帮助。\n\n<!--more-->\n\n---\n\n# **grep**命令的用法\n\n​    `grep`命令主要用来过滤指定的关键词的，最简单的用法是`grep [keyword] [filename]`，在Centos7中使用grep命令，会自动高亮显示过滤的关键词。\n\n![grep高亮显示](http://p5qynomrl.bkt.clouddn.com/1524665036744upqnxqqe.png?imageslim)\n\n## **grep**命令的选项\n\n- `grep -c`选项，用来过滤行数，即存在过滤的关键词的行有多少：\n\n  ```bash\n  [root@evobot ~]# grep -c 'nologin' passwd \n  21\n  ```\n\n- `grep -n`选项，用来显示行号：\n\n  ```bash\n  [root@evobot ~]# grep -n 'bash' passwd \n  1:root:x:0:0:root:/root:/bin/bash\n  26:centos:x:1000:1000:Cloud User:/home/centos:/bin/bash\n  27:lux:x:1001:1001::/home/lux:/bin/bash\n  29:evobot:x:1002:1002::/home/evobot:/bin/bash\n  ```\n\n- `grep -i`选项，表示不区分大小写过滤关键字：\n\n  ```bash\n  [root@evobot ~]# grep -ni 'bash' passwd \n  1:root:x:0:0:root:/root:/bin/bash\n  26:centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH\t# 大写被过滤出来\n  27:lux:x:1001:1001::/home/lux:/bin/bash\n  29:evobot:x:1002:1002::/home/evobot:/bin/bash\n  [root@evobot ~]# grep -n 'bash' passwd \n  1:root:x:0:0:root:/root:/bin/bash\n  27:lux:x:1001:1001::/home/lux:/bin/bash\n  29:evobot:x:1002:1002::/home/evobot:/bin/bash\n  ```\n\n- `grep -v`选项，表示取反过滤，即过滤出不包括关键字的行：\n\n  ```bash\n  [root@evobot ~]# grep -nv 'nologin' passwd \n  1:root:x:0:0:root:/root:/bin/bash\n  6:sync:x:5:0:sync:/sbin:/bin/sync\n  7:shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\n  8:halt:x:7:0:halt:/sbin:/sbin/halt\n  25:syslog:x:996:994::/home/syslog:/bin/false\n  26:centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH\n  27:lux:x:1001:1001::/home/lux:/bin/bash\n  29:evobot:x:1002:1002::/home/evobot:/bin/bash\n  ```\n\n- `grep -r [keyword] [dir]`选项，表示遍历所有子目录内文件的内容，并过滤出关键字：\n\n  ```bash\n  [root@evobot grepprac]# ls\n  1.sh  2.sh\n  [root@evobot grepprac]# grep -rn 'bash' ./\n  ./1.sh:1:#!/bin/bash\n  ./2.sh:1:#!/bin/bash                       \n  ```\n\n- `grep -[A/B/C]n`三个选项：\n\n  - `An`选项表示过滤出符合要求的行及其下面`n`行；\n  - `Bn`选项表示过滤出复合要求的行及其上面`n`行；\n  - `Cn`选项表示过滤出复合要求的行及其上下各`n`行。\n\n  ```bash\n  [root@evobot ~]# grep -nA2 'root' passwd \n  1:root:x:0:0:root:/root:/bin/bash\n  2-bin:x:1:1:bin:/bin:/sbin/nologin\n  3-daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  --\n  10:operator:x:11:0:operator:/root:/sbin/nologin\n  11-games:x:12:100:games:/usr/games:/sbin/nologin\n  12-ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin\n\n  [root@evobot ~]# grep -nB2 'root' passwd \n  1:root:x:0:0:root:/root:/bin/bash\t# 这里由于是第一行，所以无法列出上面两行\n  --\n  8-halt:x:7:0:halt:/sbin:/sbin/halt\n  9-mail:x:8:12:mail:/var/spool/mail:/sbin/nologin\n  10:operator:x:11:0:operator:/root:/sbin/nologin\n\n  [root@evobot ~]# grep -nC1 'false' passwd \n  24-tcpdump:x:72:72::/:/sbin/nologin\n  25:syslog:x:996:994::/home/syslog:/bin/false\n  26-centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH\n  ```\n\n- `grep`过滤结果中包括或排除指定的文件，使用`--include`包括，`--exclude`排除，如只在目录中的`.py`和`.html`中过滤内容：\n\n  ```bash\n  [root@evobot ~]# grep -r --include '*.py' 'yield' '.'\n  ./Scripts/generate_company_test_datas.py:        yield User(\n  ./Scripts/generate_company_test_datas.py:        yield Resume(\n  ./Scripts/generate_company_test_datas.py:        yield Seeker(\n  ./Scripts/generate_company_test_datas.py:        yield Delivery(\n  ./Scripts/generate_company_test_datas.py:        yield User(\n  ./Scripts/generate_company_test_datas.py:        yield photo['manager_photo']\n  ./Scripts/generate_company_test_datas.py:        yield Company(\n  ./Scripts/generate_company_test_datas.py:            yield Job(\n  ```\n\n  ```bash\n  [root@evobot ~]# grep -r --exclude '*.py' 'endpoint' '.'\n  ./jobplus/templates/macros.html:      <li><a href=\"{{ url_for(endpoint, page=page, company_id=company_id) }}\">{{ page }}</a></li>\n  ./jobplus/templates/macros.html:    <li{% if not pagination.has_next %} class=\"disabled\"{% endif %}><a href=\"{{url_for(endpoint, page=pagination.next_num, company_id=company_id) if pagination.has_next else '#'}}\">&raquo;</a></li>\n  ```\n\n## 正则表达式\n\n### 基础正则表达式\n\n<style>\ntable th {\n    text-align: center;\n}\n</style>\n\n|    元字符    | 作用                                       |\n| :-------: | ---------------------------------------- |\n|    `*`    | **前一个字符**匹配0次或任意多次，匹配0次前一个字符则表示匹配任意字符，包括空白行|\n|    `.`    | 匹配除了换行符以外任意一个字符，“.*”匹配所有内容               |\n|    `^`    | 用于指定匹配字符串的头部，也称**行首定位符**；匹配行首。例如：^hello会匹配以hello开头的行，grep -n “^$” test.txt匹配空白行并显示行号 |\n|    `$`    | 用于指定匹配字符串的尾部，也称**行尾定位符**；匹配行尾。例如：hello$会匹配以hello结尾的行 |\n|   `[]`    | 匹配中括号中指定的任意一个字符，只匹配一个字符，要匹配`[`则要转义`\\[`   |\n|   `[^]`   | 匹配除中括号的字符以外的任意一个字符                       |\n|    `\\`    | 转义符用于取消特殊符号的含义，匹配包含以`.`结尾的行`grep “\\.$” test.txt` |\n|  `\\{n\\}`  | 表示其前面的字符恰好出现n次。例如：[0-9]\\{4\\}匹配4位数字，但注意添加两边的定界符，以精确匹配 |\n| `\\{n,\\}`  | 表示其前面的字符出现不小于n次。例如：[0-9]\\{2,\\}匹配2位以上的数字  |\n| `\\{n,m\\}` | 表示其前面的字符至少出现n次，最多出现m次。例如：[a-z]\\{6,8}匹配6到8位的小写字母 |\n\n### 扩展正则表达式\n\n| 元字符| 作用                                       |\n| :--: | ---------------------------------------- |\n| `｜`  | 管道符，表示“或”，即匹配其中任何一个，”book｜desk”将匹配”book”或”desk” |\n| `()` | 小括号，可以将正则字符和元字符或表达式进行组合，”(book｜desk)s”将匹配”books”或”desks” |\n| `?`  | 问号，匹配0个或1个前导表达式，如”a?”匹配其他字符串或a           |\n| `\\<` | 反斜杠+小于号，**词首定位符**， “\\< abc”表示所有包含以”abc”开头的单词的行 |\n| `\\>` | 反斜杠+大于号，**词尾定位符**， “\\>abc”表示所有包含以”abc”结尾的单词的行 |\n| `-`  | 减号，用于指明字符范围， “[a-c]”将匹配包含a、b和c中任意一个字符的字符串 |\n| `+`  | 加号，匹配一个或多个前导表达式，相当于 expr{1,}             |\n\n- 在`grep`中使用扩展正则表达式需要使用`grep -E [pattern] [filename]`，相当于`egrep`；\n\n## **grep/egrep**示例\n\n- `egrep`相当于`grep`的增强版，能够是现实`grep`的所有功能；\n\n- `grep/egrep`可以在过滤时使用正则表达式表示关键字，比如过滤出所有包含数字的行：`grep [0-9] [filename]`：\n\n  ```bash\n  [root@evobot ~]# grep [0-9] passwd \n  root:x:0:0:root:/root:/bin/bash\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  adm:x:3:4:adm:/var/adm:/sbin/nologin\n  lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n  sync:x:5:0:sync:/sbin:/bin/sync\n  polkitd:x:999:997:User for polkitd:/:/sbin/nologin\n  ```\n\n### 示例\n\n1. 过滤不包含数字的行：\n\n   ```bash\n   [root@evobot ~]# grep -nv '[0-9]' 2.sh \n   1:#!/bin/bash\n   2:\n   5:A=C      \n   6:export A\n   ```\n\n2.  过滤指定关键字开头的行：\n\n   ```bash\n   [root@evobot ~]# grep -n '^#' 2.sh \n   1:#!/bin/bash\n   ```\n\n3.  过滤`#`开头的注释行并去除空行：\n\n   ```bash\n   [root@evobot ~]# grep -vn '^#' inittab\n   9:assdfg\n   13:24vubnklm\n   14:afggwege\n   15:\n\n   [root@evobot ~]# grep -v '^#' inittab |grep -vn '^$'\n   1:assdfg\n   2:24vubnklm\n   3:afggwege\n   ```\n\n4.  过滤非数字的行和非数字开头的行：\n\n   > 非数字的行，包含数字的行中，除数字外都被匹配\n\n   ![非数字的行](http://p5qynomrl.bkt.clouddn.com/1524669414781k7u9ah56.png?imageslim)\n\n   > 过滤非数字开头的行\n\n   ![非数字开头的行](http://p5qynomrl.bkt.clouddn.com/1524669534782i30jjmce.png?imageslim)\n\n5.  过滤包含任意一个字符的关键字：\n\n   ```bash\n   [root@evobot ~]# grep 'r.o' passwd \n   root:x:0:0:root:/root:/bin/bash\n   operator:x:11:0:operator:/root:/sbin/nologin\n\n   [root@evobot ~]# grep 'ba.' passwd \n   root:x:0:0:root:/root:/bin/bash\n   lux:x:1001:1001::/home/lux:/bin/bash\n   evobot:x:1002:1002::/home/evobot:/bin/bash\n   ```\n\n6.  过滤前一个字符0次或多次：\n\n   ```bash\n   [root@evobot ~]# grep 'ro*t' passwd \n   root:x:0:0:root:/root:/bin/bash\n   operator:x:11:0:operator:/root:/sbin/nologin\n   abrt:x:173:173::/etc/abrt:/sbin/nologin\n\n   [root@evobot ~]# grep 'c.*' passwd \n   sync:x:5:0:sync:/sbin:/bin/sync\n   libstoragemgmt:x:998:996:daemon account for libstoragemgmt:/var/run/lsm:/sbin/nologin\n   abrt:x:173:173::/etc/abrt:/sbin/nologin\n   rpc:x:32:32:Rpcbind Daemon:/var/lib/rpcbind:/sbin/nologin\n   ntp:x:38:38::/etc/ntp:/sbin/nologin\n   chrony:x:997:995::/var/lib/chrony:/sbin/nologin\n   tcpdump:x:72:72::/:/sbin/nologin\n   centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH\n   ```\n\n7.  指定范围过滤：\n\n   ```bash\n   [root@evobot ~]# grep 'o\\{2\\}' passwd \n   root:x:0:0:root:/root:/bin/bash\n   lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n   mail:x:8:12:mail:/var/spool/mail:/sbin/nologin\n   operator:x:11:0:operator:/root:/sbin/nologin\n   postfix:x:89:89::/var/spool/postfix:/sbin/nologin\n\n   [root@evobot ~]# grep 'o\\{2,3\\}' passwd \n   root:x:0:0:root:/root:/bin/bash\n   lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n   mail:x:8:12:mail:/var/spoool/mail:/sbin/nologin\n   operator:x:11:0:operator:/rooooot:/sbin/nologin\n   games:x:12:100:games:/usr/games:/sbin/noooologin\n   rpc:x:32:32:Rpcbind Daemoon:/var/lib/rpcbind:/sbin/nologin\n   postfix:x:89:89::/var/spool/postfix:/sbin/nologin\n   ```\n\n- 上面的过滤中需要对`{}`进行脱义，如果不想使用脱义符，可以使用`grep -E`选项，或者直接使用`egrep`进行过滤：\n\n  ```bash\n  [root@evobot ~]# egrep 'root|lux' passwd \n  root:x:0:0:root:/root:/bin/bash\n  lux:x:1001:1001::/home/lux:/bin/bash\n  ```\n\n---","source":"_posts/Linux正则表达式—grep命令.md","raw":"---\ntitle: Linux正则表达式——grep命令\nauthor: Evobot\nabbrlink: 400407c0\ndate: 2018-04-25 21:26:55\ncategories: Centos7\ntags: [Linux, Centos]\nimage:\n---\n\n\n\n![正则表达式](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/regex.png)\n\n正则表达式又称为规则表达式，是用事先定义好的一些特定的字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑；掌握好正则对于编写shell脚本也会有很大的帮助。\n\n<!--more-->\n\n---\n\n# **grep**命令的用法\n\n​    `grep`命令主要用来过滤指定的关键词的，最简单的用法是`grep [keyword] [filename]`，在Centos7中使用grep命令，会自动高亮显示过滤的关键词。\n\n![grep高亮显示](http://p5qynomrl.bkt.clouddn.com/1524665036744upqnxqqe.png?imageslim)\n\n## **grep**命令的选项\n\n- `grep -c`选项，用来过滤行数，即存在过滤的关键词的行有多少：\n\n  ```bash\n  [root@evobot ~]# grep -c 'nologin' passwd \n  21\n  ```\n\n- `grep -n`选项，用来显示行号：\n\n  ```bash\n  [root@evobot ~]# grep -n 'bash' passwd \n  1:root:x:0:0:root:/root:/bin/bash\n  26:centos:x:1000:1000:Cloud User:/home/centos:/bin/bash\n  27:lux:x:1001:1001::/home/lux:/bin/bash\n  29:evobot:x:1002:1002::/home/evobot:/bin/bash\n  ```\n\n- `grep -i`选项，表示不区分大小写过滤关键字：\n\n  ```bash\n  [root@evobot ~]# grep -ni 'bash' passwd \n  1:root:x:0:0:root:/root:/bin/bash\n  26:centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH\t# 大写被过滤出来\n  27:lux:x:1001:1001::/home/lux:/bin/bash\n  29:evobot:x:1002:1002::/home/evobot:/bin/bash\n  [root@evobot ~]# grep -n 'bash' passwd \n  1:root:x:0:0:root:/root:/bin/bash\n  27:lux:x:1001:1001::/home/lux:/bin/bash\n  29:evobot:x:1002:1002::/home/evobot:/bin/bash\n  ```\n\n- `grep -v`选项，表示取反过滤，即过滤出不包括关键字的行：\n\n  ```bash\n  [root@evobot ~]# grep -nv 'nologin' passwd \n  1:root:x:0:0:root:/root:/bin/bash\n  6:sync:x:5:0:sync:/sbin:/bin/sync\n  7:shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\n  8:halt:x:7:0:halt:/sbin:/sbin/halt\n  25:syslog:x:996:994::/home/syslog:/bin/false\n  26:centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH\n  27:lux:x:1001:1001::/home/lux:/bin/bash\n  29:evobot:x:1002:1002::/home/evobot:/bin/bash\n  ```\n\n- `grep -r [keyword] [dir]`选项，表示遍历所有子目录内文件的内容，并过滤出关键字：\n\n  ```bash\n  [root@evobot grepprac]# ls\n  1.sh  2.sh\n  [root@evobot grepprac]# grep -rn 'bash' ./\n  ./1.sh:1:#!/bin/bash\n  ./2.sh:1:#!/bin/bash                       \n  ```\n\n- `grep -[A/B/C]n`三个选项：\n\n  - `An`选项表示过滤出符合要求的行及其下面`n`行；\n  - `Bn`选项表示过滤出复合要求的行及其上面`n`行；\n  - `Cn`选项表示过滤出复合要求的行及其上下各`n`行。\n\n  ```bash\n  [root@evobot ~]# grep -nA2 'root' passwd \n  1:root:x:0:0:root:/root:/bin/bash\n  2-bin:x:1:1:bin:/bin:/sbin/nologin\n  3-daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  --\n  10:operator:x:11:0:operator:/root:/sbin/nologin\n  11-games:x:12:100:games:/usr/games:/sbin/nologin\n  12-ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin\n\n  [root@evobot ~]# grep -nB2 'root' passwd \n  1:root:x:0:0:root:/root:/bin/bash\t# 这里由于是第一行，所以无法列出上面两行\n  --\n  8-halt:x:7:0:halt:/sbin:/sbin/halt\n  9-mail:x:8:12:mail:/var/spool/mail:/sbin/nologin\n  10:operator:x:11:0:operator:/root:/sbin/nologin\n\n  [root@evobot ~]# grep -nC1 'false' passwd \n  24-tcpdump:x:72:72::/:/sbin/nologin\n  25:syslog:x:996:994::/home/syslog:/bin/false\n  26-centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH\n  ```\n\n- `grep`过滤结果中包括或排除指定的文件，使用`--include`包括，`--exclude`排除，如只在目录中的`.py`和`.html`中过滤内容：\n\n  ```bash\n  [root@evobot ~]# grep -r --include '*.py' 'yield' '.'\n  ./Scripts/generate_company_test_datas.py:        yield User(\n  ./Scripts/generate_company_test_datas.py:        yield Resume(\n  ./Scripts/generate_company_test_datas.py:        yield Seeker(\n  ./Scripts/generate_company_test_datas.py:        yield Delivery(\n  ./Scripts/generate_company_test_datas.py:        yield User(\n  ./Scripts/generate_company_test_datas.py:        yield photo['manager_photo']\n  ./Scripts/generate_company_test_datas.py:        yield Company(\n  ./Scripts/generate_company_test_datas.py:            yield Job(\n  ```\n\n  ```bash\n  [root@evobot ~]# grep -r --exclude '*.py' 'endpoint' '.'\n  ./jobplus/templates/macros.html:      <li><a href=\"{{ url_for(endpoint, page=page, company_id=company_id) }}\">{{ page }}</a></li>\n  ./jobplus/templates/macros.html:    <li{% if not pagination.has_next %} class=\"disabled\"{% endif %}><a href=\"{{url_for(endpoint, page=pagination.next_num, company_id=company_id) if pagination.has_next else '#'}}\">&raquo;</a></li>\n  ```\n\n## 正则表达式\n\n### 基础正则表达式\n\n<style>\ntable th {\n    text-align: center;\n}\n</style>\n\n|    元字符    | 作用                                       |\n| :-------: | ---------------------------------------- |\n|    `*`    | **前一个字符**匹配0次或任意多次，匹配0次前一个字符则表示匹配任意字符，包括空白行|\n|    `.`    | 匹配除了换行符以外任意一个字符，“.*”匹配所有内容               |\n|    `^`    | 用于指定匹配字符串的头部，也称**行首定位符**；匹配行首。例如：^hello会匹配以hello开头的行，grep -n “^$” test.txt匹配空白行并显示行号 |\n|    `$`    | 用于指定匹配字符串的尾部，也称**行尾定位符**；匹配行尾。例如：hello$会匹配以hello结尾的行 |\n|   `[]`    | 匹配中括号中指定的任意一个字符，只匹配一个字符，要匹配`[`则要转义`\\[`   |\n|   `[^]`   | 匹配除中括号的字符以外的任意一个字符                       |\n|    `\\`    | 转义符用于取消特殊符号的含义，匹配包含以`.`结尾的行`grep “\\.$” test.txt` |\n|  `\\{n\\}`  | 表示其前面的字符恰好出现n次。例如：[0-9]\\{4\\}匹配4位数字，但注意添加两边的定界符，以精确匹配 |\n| `\\{n,\\}`  | 表示其前面的字符出现不小于n次。例如：[0-9]\\{2,\\}匹配2位以上的数字  |\n| `\\{n,m\\}` | 表示其前面的字符至少出现n次，最多出现m次。例如：[a-z]\\{6,8}匹配6到8位的小写字母 |\n\n### 扩展正则表达式\n\n| 元字符| 作用                                       |\n| :--: | ---------------------------------------- |\n| `｜`  | 管道符，表示“或”，即匹配其中任何一个，”book｜desk”将匹配”book”或”desk” |\n| `()` | 小括号，可以将正则字符和元字符或表达式进行组合，”(book｜desk)s”将匹配”books”或”desks” |\n| `?`  | 问号，匹配0个或1个前导表达式，如”a?”匹配其他字符串或a           |\n| `\\<` | 反斜杠+小于号，**词首定位符**， “\\< abc”表示所有包含以”abc”开头的单词的行 |\n| `\\>` | 反斜杠+大于号，**词尾定位符**， “\\>abc”表示所有包含以”abc”结尾的单词的行 |\n| `-`  | 减号，用于指明字符范围， “[a-c]”将匹配包含a、b和c中任意一个字符的字符串 |\n| `+`  | 加号，匹配一个或多个前导表达式，相当于 expr{1,}             |\n\n- 在`grep`中使用扩展正则表达式需要使用`grep -E [pattern] [filename]`，相当于`egrep`；\n\n## **grep/egrep**示例\n\n- `egrep`相当于`grep`的增强版，能够是现实`grep`的所有功能；\n\n- `grep/egrep`可以在过滤时使用正则表达式表示关键字，比如过滤出所有包含数字的行：`grep [0-9] [filename]`：\n\n  ```bash\n  [root@evobot ~]# grep [0-9] passwd \n  root:x:0:0:root:/root:/bin/bash\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  adm:x:3:4:adm:/var/adm:/sbin/nologin\n  lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n  sync:x:5:0:sync:/sbin:/bin/sync\n  polkitd:x:999:997:User for polkitd:/:/sbin/nologin\n  ```\n\n### 示例\n\n1. 过滤不包含数字的行：\n\n   ```bash\n   [root@evobot ~]# grep -nv '[0-9]' 2.sh \n   1:#!/bin/bash\n   2:\n   5:A=C      \n   6:export A\n   ```\n\n2.  过滤指定关键字开头的行：\n\n   ```bash\n   [root@evobot ~]# grep -n '^#' 2.sh \n   1:#!/bin/bash\n   ```\n\n3.  过滤`#`开头的注释行并去除空行：\n\n   ```bash\n   [root@evobot ~]# grep -vn '^#' inittab\n   9:assdfg\n   13:24vubnklm\n   14:afggwege\n   15:\n\n   [root@evobot ~]# grep -v '^#' inittab |grep -vn '^$'\n   1:assdfg\n   2:24vubnklm\n   3:afggwege\n   ```\n\n4.  过滤非数字的行和非数字开头的行：\n\n   > 非数字的行，包含数字的行中，除数字外都被匹配\n\n   ![非数字的行](http://p5qynomrl.bkt.clouddn.com/1524669414781k7u9ah56.png?imageslim)\n\n   > 过滤非数字开头的行\n\n   ![非数字开头的行](http://p5qynomrl.bkt.clouddn.com/1524669534782i30jjmce.png?imageslim)\n\n5.  过滤包含任意一个字符的关键字：\n\n   ```bash\n   [root@evobot ~]# grep 'r.o' passwd \n   root:x:0:0:root:/root:/bin/bash\n   operator:x:11:0:operator:/root:/sbin/nologin\n\n   [root@evobot ~]# grep 'ba.' passwd \n   root:x:0:0:root:/root:/bin/bash\n   lux:x:1001:1001::/home/lux:/bin/bash\n   evobot:x:1002:1002::/home/evobot:/bin/bash\n   ```\n\n6.  过滤前一个字符0次或多次：\n\n   ```bash\n   [root@evobot ~]# grep 'ro*t' passwd \n   root:x:0:0:root:/root:/bin/bash\n   operator:x:11:0:operator:/root:/sbin/nologin\n   abrt:x:173:173::/etc/abrt:/sbin/nologin\n\n   [root@evobot ~]# grep 'c.*' passwd \n   sync:x:5:0:sync:/sbin:/bin/sync\n   libstoragemgmt:x:998:996:daemon account for libstoragemgmt:/var/run/lsm:/sbin/nologin\n   abrt:x:173:173::/etc/abrt:/sbin/nologin\n   rpc:x:32:32:Rpcbind Daemon:/var/lib/rpcbind:/sbin/nologin\n   ntp:x:38:38::/etc/ntp:/sbin/nologin\n   chrony:x:997:995::/var/lib/chrony:/sbin/nologin\n   tcpdump:x:72:72::/:/sbin/nologin\n   centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH\n   ```\n\n7.  指定范围过滤：\n\n   ```bash\n   [root@evobot ~]# grep 'o\\{2\\}' passwd \n   root:x:0:0:root:/root:/bin/bash\n   lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n   mail:x:8:12:mail:/var/spool/mail:/sbin/nologin\n   operator:x:11:0:operator:/root:/sbin/nologin\n   postfix:x:89:89::/var/spool/postfix:/sbin/nologin\n\n   [root@evobot ~]# grep 'o\\{2,3\\}' passwd \n   root:x:0:0:root:/root:/bin/bash\n   lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n   mail:x:8:12:mail:/var/spoool/mail:/sbin/nologin\n   operator:x:11:0:operator:/rooooot:/sbin/nologin\n   games:x:12:100:games:/usr/games:/sbin/noooologin\n   rpc:x:32:32:Rpcbind Daemoon:/var/lib/rpcbind:/sbin/nologin\n   postfix:x:89:89::/var/spool/postfix:/sbin/nologin\n   ```\n\n- 上面的过滤中需要对`{}`进行脱义，如果不想使用脱义符，可以使用`grep -E`选项，或者直接使用`egrep`进行过滤：\n\n  ```bash\n  [root@evobot ~]# egrep 'root|lux' passwd \n  root:x:0:0:root:/root:/bin/bash\n  lux:x:1001:1001::/home/lux:/bin/bash\n  ```\n\n---","slug":"Linux正则表达式—grep命令","published":1,"updated":"2018-06-02T13:01:29.588Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazbl002gu1jx6l4mpxun","content":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/regex.png\" alt=\"正则表达式\"></p><p>正则表达式又称为规则表达式，是用事先定义好的一些特定的字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑；掌握好正则对于编写shell脚本也会有很大的帮助。</p><a id=\"more\"></a><hr><h1 id=\"grep命令的用法\"><a href=\"#grep命令的用法\" class=\"headerlink\" title=\"grep命令的用法\"></a><strong>grep</strong>命令的用法</h1><p>​ <code>grep</code>命令主要用来过滤指定的关键词的，最简单的用法是<code>grep [keyword] [filename]</code>，在Centos7中使用grep命令，会自动高亮显示过滤的关键词。</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1524665036744upqnxqqe.png?imageslim\" alt=\"grep高亮显示\"></p><h2 id=\"grep命令的选项\"><a href=\"#grep命令的选项\" class=\"headerlink\" title=\"grep命令的选项\"></a><strong>grep</strong>命令的选项</h2><ul><li><p><code>grep -c</code>选项，用来过滤行数，即存在过滤的关键词的行有多少：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -c 'nologin' passwd </span></span><br><span class=\"line\">21</span><br></pre></td></tr></table></figure></li><li><p><code>grep -n</code>选项，用来显示行号：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -n 'bash' passwd </span></span><br><span class=\"line\">1:root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">26:centos:x:1000:1000:Cloud User:/home/centos:/bin/bash</span><br><span class=\"line\">27:lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">29:evobot:x:1002:1002::/home/evobot:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p><code>grep -i</code>选项，表示不区分大小写过滤关键字：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -ni 'bash' passwd </span></span><br><span class=\"line\">1:root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">26:centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH\t<span class=\"comment\"># 大写被过滤出来</span></span><br><span class=\"line\">27:lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">29:evobot:x:1002:1002::/home/evobot:/bin/bash</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -n 'bash' passwd </span></span><br><span class=\"line\">1:root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">27:lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">29:evobot:x:1002:1002::/home/evobot:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p><code>grep -v</code>选项，表示取反过滤，即过滤出不包括关键字的行：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -nv 'nologin' passwd </span></span><br><span class=\"line\">1:root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">6:sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class=\"line\">7:shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class=\"line\">8:halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class=\"line\">25:syslog:x:996:994::/home/syslog:/bin/<span class=\"literal\">false</span></span><br><span class=\"line\">26:centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH</span><br><span class=\"line\">27:lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">29:evobot:x:1002:1002::/home/evobot:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p><code>grep -r [keyword] [dir]</code>选项，表示遍历所有子目录内文件的内容，并过滤出关键字：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot grepprac]<span class=\"comment\"># ls</span></span><br><span class=\"line\">1.sh  2.sh</span><br><span class=\"line\">[root@evobot grepprac]<span class=\"comment\"># grep -rn 'bash' ./</span></span><br><span class=\"line\">./1.sh:1:<span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">./2.sh:1:<span class=\"comment\">#!/bin/bash</span></span><br></pre></td></tr></table></figure></li><li><p><code>grep -[A/B/C]n</code>三个选项：</p><ul><li><code>An</code>选项表示过滤出符合要求的行及其下面<code>n</code>行；</li><li><code>Bn</code>选项表示过滤出复合要求的行及其上面<code>n</code>行；</li><li><code>Cn</code>选项表示过滤出复合要求的行及其上下各<code>n</code>行。</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -nA2 'root' passwd </span></span><br><span class=\"line\">1:root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">2-bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">3-daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">--</span><br><span class=\"line\">10:operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class=\"line\">11-games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class=\"line\">12-ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -nB2 'root' passwd </span></span><br><span class=\"line\">1:root:x:0:0:root:/root:/bin/bash\t<span class=\"comment\"># 这里由于是第一行，所以无法列出上面两行</span></span><br><span class=\"line\">--</span><br><span class=\"line\">8-halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class=\"line\">9-mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class=\"line\">10:operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -nC1 'false' passwd </span></span><br><span class=\"line\">24-tcpdump:x:72:72::/:/sbin/nologin</span><br><span class=\"line\">25:syslog:x:996:994::/home/syslog:/bin/<span class=\"literal\">false</span></span><br><span class=\"line\">26-centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH</span><br></pre></td></tr></table></figure></li><li><p><code>grep</code>过滤结果中包括或排除指定的文件，使用<code>--include</code>包括，<code>--exclude</code>排除，如只在目录中的<code>.py</code>和<code>.html</code>中过滤内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -r --include '*.py' 'yield' '.'</span></span><br><span class=\"line\">./Scripts/generate_company_test_datas.py:        yield User(</span><br><span class=\"line\">./Scripts/generate_company_test_datas.py:        yield Resume(</span><br><span class=\"line\">./Scripts/generate_company_test_datas.py:        yield Seeker(</span><br><span class=\"line\">./Scripts/generate_company_test_datas.py:        yield Delivery(</span><br><span class=\"line\">./Scripts/generate_company_test_datas.py:        yield User(</span><br><span class=\"line\">./Scripts/generate_company_test_datas.py:        yield photo[<span class=\"string\">'manager_photo'</span>]</span><br><span class=\"line\">./Scripts/generate_company_test_datas.py:        yield Company(</span><br><span class=\"line\">./Scripts/generate_company_test_datas.py:            yield Job(</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -r --exclude '*.py' 'endpoint' '.'</span></span><br><span class=\"line\">./jobplus/templates/macros.html:      &lt;li&gt;&lt;a href=<span class=\"string\">\"&#123;&#123; url_for(endpoint, page=page, company_id=company_id) &#125;&#125;\"</span>&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">./jobplus/templates/macros.html:    &lt;li&#123;% <span class=\"keyword\">if</span> not pagination.has_next %&#125; class=<span class=\"string\">\"disabled\"</span>&#123;% endif %&#125;&gt;&lt;a href=<span class=\"string\">\"&#123;&#123;url_for(endpoint, page=pagination.next_num, company_id=company_id) if pagination.has_next else '#'&#125;&#125;\"</span>&gt;&amp;raquo;&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><h3 id=\"基础正则表达式\"><a href=\"#基础正则表达式\" class=\"headerlink\" title=\"基础正则表达式\"></a>基础正则表达式</h3><style>table th{text-align:center}</style><table><thead><tr><th style=\"text-align:center\">元字符</th><th>作用</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>*</code></td><td><strong>前一个字符</strong>匹配0次或任意多次，匹配0次前一个字符则表示匹配任意字符，包括空白行</td></tr><tr><td style=\"text-align:center\"><code>.</code></td><td>匹配除了换行符以外任意一个字符，“.*”匹配所有内容</td></tr><tr><td style=\"text-align:center\"><code>^</code></td><td>用于指定匹配字符串的头部，也称<strong>行首定位符</strong>；匹配行首。例如：^hello会匹配以hello开头的行，grep -n “^$” test.txt匹配空白行并显示行号</td></tr><tr><td style=\"text-align:center\"><code>$</code></td><td>用于指定匹配字符串的尾部，也称<strong>行尾定位符</strong>；匹配行尾。例如：hello$会匹配以hello结尾的行</td></tr><tr><td style=\"text-align:center\"><code>[]</code></td><td>匹配中括号中指定的任意一个字符，只匹配一个字符，要匹配<code>[</code>则要转义<code>\\[</code></td></tr><tr><td style=\"text-align:center\"><code>[^]</code></td><td>匹配除中括号的字符以外的任意一个字符</td></tr><tr><td style=\"text-align:center\"><code>\\</code></td><td>转义符用于取消特殊符号的含义，匹配包含以<code>.</code>结尾的行<code>grep “\\.$” test.txt</code></td></tr><tr><td style=\"text-align:center\"><code>\\{n\\}</code></td><td>表示其前面的字符恰好出现n次。例如：[0-9]{4}匹配4位数字，但注意添加两边的定界符，以精确匹配</td></tr><tr><td style=\"text-align:center\"><code>\\{n,\\}</code></td><td>表示其前面的字符出现不小于n次。例如：[0-9]{2,}匹配2位以上的数字</td></tr><tr><td style=\"text-align:center\"><code>\\{n,m\\}</code></td><td>表示其前面的字符至少出现n次，最多出现m次。例如：[a-z]{6,8}匹配6到8位的小写字母</td></tr></tbody></table><h3 id=\"扩展正则表达式\"><a href=\"#扩展正则表达式\" class=\"headerlink\" title=\"扩展正则表达式\"></a>扩展正则表达式</h3><table><thead><tr><th style=\"text-align:center\">元字符</th><th>作用</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>｜</code></td><td>管道符，表示“或”，即匹配其中任何一个，”book｜desk”将匹配”book”或”desk”</td></tr><tr><td style=\"text-align:center\"><code>()</code></td><td>小括号，可以将正则字符和元字符或表达式进行组合，”(book｜desk)s”将匹配”books”或”desks”</td></tr><tr><td style=\"text-align:center\"><code>?</code></td><td>问号，匹配0个或1个前导表达式，如”a?”匹配其他字符串或a</td></tr><tr><td style=\"text-align:center\"><code>\\&lt;</code></td><td>反斜杠+小于号，<strong>词首定位符</strong>， “\\&lt; abc”表示所有包含以”abc”开头的单词的行</td></tr><tr><td style=\"text-align:center\"><code>\\&gt;</code></td><td>反斜杠+大于号，<strong>词尾定位符</strong>， “>abc”表示所有包含以”abc”结尾的单词的行</td></tr><tr><td style=\"text-align:center\"><code>-</code></td><td>减号，用于指明字符范围， “[a-c]”将匹配包含a、b和c中任意一个字符的字符串</td></tr><tr><td style=\"text-align:center\"><code>+</code></td><td>加号，匹配一个或多个前导表达式，相当于 expr{1,}</td></tr></tbody></table><ul><li>在<code>grep</code>中使用扩展正则表达式需要使用<code>grep -E [pattern] [filename]</code>，相当于<code>egrep</code>；</li></ul><h2 id=\"grep-egrep示例\"><a href=\"#grep-egrep示例\" class=\"headerlink\" title=\"grep/egrep示例\"></a><strong>grep/egrep</strong>示例</h2><ul><li><p><code>egrep</code>相当于<code>grep</code>的增强版，能够是现实<code>grep</code>的所有功能；</p></li><li><p><code>grep/egrep</code>可以在过滤时使用正则表达式表示关键字，比如过滤出所有包含数字的行：<code>grep [0-9] [filename]</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep [0-9] passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class=\"line\">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class=\"line\">polkitd:x:999:997:User <span class=\"keyword\">for</span> polkitd:/:/sbin/nologin</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ol><li><p>过滤不包含数字的行：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -nv '[0-9]' 2.sh </span></span><br><span class=\"line\">1:<span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">2:</span><br><span class=\"line\">5:A=C      </span><br><span class=\"line\">6:<span class=\"built_in\">export</span> A</span><br></pre></td></tr></table></figure></li><li><p>过滤指定关键字开头的行：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -n '^#' 2.sh </span></span><br><span class=\"line\">1:<span class=\"comment\">#!/bin/bash</span></span><br></pre></td></tr></table></figure></li><li><p>过滤<code>#</code>开头的注释行并去除空行：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -vn '^#' inittab</span></span><br><span class=\"line\">9:assdfg</span><br><span class=\"line\">13:24vubnklm</span><br><span class=\"line\">14:afggwege</span><br><span class=\"line\">15:</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -v '^#' inittab |grep -vn '^$'</span></span><br><span class=\"line\">1:assdfg</span><br><span class=\"line\">2:24vubnklm</span><br><span class=\"line\">3:afggwege</span><br></pre></td></tr></table></figure></li><li><p>过滤非数字的行和非数字开头的行：</p><blockquote><p>非数字的行，包含数字的行中，除数字外都被匹配</p></blockquote><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1524669414781k7u9ah56.png?imageslim\" alt=\"非数字的行\"></p><blockquote><p>过滤非数字开头的行</p></blockquote><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1524669534782i30jjmce.png?imageslim\" alt=\"非数字开头的行\"></p></li><li><p>过滤包含任意一个字符的关键字：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep 'r.o' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep 'ba.' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">evobot:x:1002:1002::/home/evobot:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p>过滤前一个字符0次或多次：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep 'ro*t' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class=\"line\">abrt:x:173:173::/etc/abrt:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep 'c.*' passwd </span></span><br><span class=\"line\">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class=\"line\">libstoragemgmt:x:998:996:daemon account <span class=\"keyword\">for</span> libstoragemgmt:/var/run/lsm:/sbin/nologin</span><br><span class=\"line\">abrt:x:173:173::/etc/abrt:/sbin/nologin</span><br><span class=\"line\">rpc:x:32:32:Rpcbind Daemon:/var/lib/rpcbind:/sbin/nologin</span><br><span class=\"line\">ntp:x:38:38::/etc/ntp:/sbin/nologin</span><br><span class=\"line\">chrony:x:997:995::/var/lib/chrony:/sbin/nologin</span><br><span class=\"line\">tcpdump:x:72:72::/:/sbin/nologin</span><br><span class=\"line\">centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH</span><br></pre></td></tr></table></figure></li><li><p>指定范围过滤：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep 'o\\&#123;2\\&#125;' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class=\"line\">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class=\"line\">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class=\"line\">postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep 'o\\&#123;2,3\\&#125;' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class=\"line\">mail:x:8:12:mail:/var/spoool/mail:/sbin/nologin</span><br><span class=\"line\">operator:x:11:0:operator:/rooooot:/sbin/nologin</span><br><span class=\"line\">games:x:12:100:games:/usr/games:/sbin/noooologin</span><br><span class=\"line\">rpc:x:32:32:Rpcbind Daemoon:/var/lib/rpcbind:/sbin/nologin</span><br><span class=\"line\">postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>上面的过滤中需要对<code>{}</code>进行脱义，如果不想使用脱义符，可以使用<code>grep -E</code>选项，或者直接使用<code>egrep</code>进行过滤：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># egrep 'root|lux' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">lux:x:1001:1001::/home/lux:/bin/bash</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/regex.png\" alt=\"正则表达式\"></p><p>正则表达式又称为规则表达式，是用事先定义好的一些特定的字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑；掌握好正则对于编写shell脚本也会有很大的帮助。</p>","more":"<hr><h1 id=\"grep命令的用法\"><a href=\"#grep命令的用法\" class=\"headerlink\" title=\"grep命令的用法\"></a><strong>grep</strong>命令的用法</h1><p>​ <code>grep</code>命令主要用来过滤指定的关键词的，最简单的用法是<code>grep [keyword] [filename]</code>，在Centos7中使用grep命令，会自动高亮显示过滤的关键词。</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1524665036744upqnxqqe.png?imageslim\" alt=\"grep高亮显示\"></p><h2 id=\"grep命令的选项\"><a href=\"#grep命令的选项\" class=\"headerlink\" title=\"grep命令的选项\"></a><strong>grep</strong>命令的选项</h2><ul><li><p><code>grep -c</code>选项，用来过滤行数，即存在过滤的关键词的行有多少：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -c 'nologin' passwd </span></span><br><span class=\"line\">21</span><br></pre></td></tr></table></figure></li><li><p><code>grep -n</code>选项，用来显示行号：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -n 'bash' passwd </span></span><br><span class=\"line\">1:root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">26:centos:x:1000:1000:Cloud User:/home/centos:/bin/bash</span><br><span class=\"line\">27:lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">29:evobot:x:1002:1002::/home/evobot:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p><code>grep -i</code>选项，表示不区分大小写过滤关键字：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -ni 'bash' passwd </span></span><br><span class=\"line\">1:root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">26:centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH\t<span class=\"comment\"># 大写被过滤出来</span></span><br><span class=\"line\">27:lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">29:evobot:x:1002:1002::/home/evobot:/bin/bash</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -n 'bash' passwd </span></span><br><span class=\"line\">1:root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">27:lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">29:evobot:x:1002:1002::/home/evobot:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p><code>grep -v</code>选项，表示取反过滤，即过滤出不包括关键字的行：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -nv 'nologin' passwd </span></span><br><span class=\"line\">1:root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">6:sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class=\"line\">7:shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class=\"line\">8:halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class=\"line\">25:syslog:x:996:994::/home/syslog:/bin/<span class=\"literal\">false</span></span><br><span class=\"line\">26:centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH</span><br><span class=\"line\">27:lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">29:evobot:x:1002:1002::/home/evobot:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p><code>grep -r [keyword] [dir]</code>选项，表示遍历所有子目录内文件的内容，并过滤出关键字：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot grepprac]<span class=\"comment\"># ls</span></span><br><span class=\"line\">1.sh  2.sh</span><br><span class=\"line\">[root@evobot grepprac]<span class=\"comment\"># grep -rn 'bash' ./</span></span><br><span class=\"line\">./1.sh:1:<span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">./2.sh:1:<span class=\"comment\">#!/bin/bash</span></span><br></pre></td></tr></table></figure></li><li><p><code>grep -[A/B/C]n</code>三个选项：</p><ul><li><code>An</code>选项表示过滤出符合要求的行及其下面<code>n</code>行；</li><li><code>Bn</code>选项表示过滤出复合要求的行及其上面<code>n</code>行；</li><li><code>Cn</code>选项表示过滤出复合要求的行及其上下各<code>n</code>行。</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -nA2 'root' passwd </span></span><br><span class=\"line\">1:root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">2-bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">3-daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">--</span><br><span class=\"line\">10:operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class=\"line\">11-games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class=\"line\">12-ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -nB2 'root' passwd </span></span><br><span class=\"line\">1:root:x:0:0:root:/root:/bin/bash\t<span class=\"comment\"># 这里由于是第一行，所以无法列出上面两行</span></span><br><span class=\"line\">--</span><br><span class=\"line\">8-halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class=\"line\">9-mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class=\"line\">10:operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -nC1 'false' passwd </span></span><br><span class=\"line\">24-tcpdump:x:72:72::/:/sbin/nologin</span><br><span class=\"line\">25:syslog:x:996:994::/home/syslog:/bin/<span class=\"literal\">false</span></span><br><span class=\"line\">26-centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH</span><br></pre></td></tr></table></figure></li><li><p><code>grep</code>过滤结果中包括或排除指定的文件，使用<code>--include</code>包括，<code>--exclude</code>排除，如只在目录中的<code>.py</code>和<code>.html</code>中过滤内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -r --include '*.py' 'yield' '.'</span></span><br><span class=\"line\">./Scripts/generate_company_test_datas.py:        yield User(</span><br><span class=\"line\">./Scripts/generate_company_test_datas.py:        yield Resume(</span><br><span class=\"line\">./Scripts/generate_company_test_datas.py:        yield Seeker(</span><br><span class=\"line\">./Scripts/generate_company_test_datas.py:        yield Delivery(</span><br><span class=\"line\">./Scripts/generate_company_test_datas.py:        yield User(</span><br><span class=\"line\">./Scripts/generate_company_test_datas.py:        yield photo[<span class=\"string\">'manager_photo'</span>]</span><br><span class=\"line\">./Scripts/generate_company_test_datas.py:        yield Company(</span><br><span class=\"line\">./Scripts/generate_company_test_datas.py:            yield Job(</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -r --exclude '*.py' 'endpoint' '.'</span></span><br><span class=\"line\">./jobplus/templates/macros.html:      &lt;li&gt;&lt;a href=<span class=\"string\">\"&#123;&#123; url_for(endpoint, page=page, company_id=company_id) &#125;&#125;\"</span>&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">./jobplus/templates/macros.html:    &lt;li&#123;% <span class=\"keyword\">if</span> not pagination.has_next %&#125; class=<span class=\"string\">\"disabled\"</span>&#123;% endif %&#125;&gt;&lt;a href=<span class=\"string\">\"&#123;&#123;url_for(endpoint, page=pagination.next_num, company_id=company_id) if pagination.has_next else '#'&#125;&#125;\"</span>&gt;&amp;raquo;&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><h3 id=\"基础正则表达式\"><a href=\"#基础正则表达式\" class=\"headerlink\" title=\"基础正则表达式\"></a>基础正则表达式</h3><style>table th{text-align:center}</style><table><thead><tr><th style=\"text-align:center\">元字符</th><th>作用</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>*</code></td><td><strong>前一个字符</strong>匹配0次或任意多次，匹配0次前一个字符则表示匹配任意字符，包括空白行</td></tr><tr><td style=\"text-align:center\"><code>.</code></td><td>匹配除了换行符以外任意一个字符，“.*”匹配所有内容</td></tr><tr><td style=\"text-align:center\"><code>^</code></td><td>用于指定匹配字符串的头部，也称<strong>行首定位符</strong>；匹配行首。例如：^hello会匹配以hello开头的行，grep -n “^$” test.txt匹配空白行并显示行号</td></tr><tr><td style=\"text-align:center\"><code>$</code></td><td>用于指定匹配字符串的尾部，也称<strong>行尾定位符</strong>；匹配行尾。例如：hello$会匹配以hello结尾的行</td></tr><tr><td style=\"text-align:center\"><code>[]</code></td><td>匹配中括号中指定的任意一个字符，只匹配一个字符，要匹配<code>[</code>则要转义<code>\\[</code></td></tr><tr><td style=\"text-align:center\"><code>[^]</code></td><td>匹配除中括号的字符以外的任意一个字符</td></tr><tr><td style=\"text-align:center\"><code>\\</code></td><td>转义符用于取消特殊符号的含义，匹配包含以<code>.</code>结尾的行<code>grep “\\.$” test.txt</code></td></tr><tr><td style=\"text-align:center\"><code>\\{n\\}</code></td><td>表示其前面的字符恰好出现n次。例如：[0-9]{4}匹配4位数字，但注意添加两边的定界符，以精确匹配</td></tr><tr><td style=\"text-align:center\"><code>\\{n,\\}</code></td><td>表示其前面的字符出现不小于n次。例如：[0-9]{2,}匹配2位以上的数字</td></tr><tr><td style=\"text-align:center\"><code>\\{n,m\\}</code></td><td>表示其前面的字符至少出现n次，最多出现m次。例如：[a-z]{6,8}匹配6到8位的小写字母</td></tr></tbody></table><h3 id=\"扩展正则表达式\"><a href=\"#扩展正则表达式\" class=\"headerlink\" title=\"扩展正则表达式\"></a>扩展正则表达式</h3><table><thead><tr><th style=\"text-align:center\">元字符</th><th>作用</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>｜</code></td><td>管道符，表示“或”，即匹配其中任何一个，”book｜desk”将匹配”book”或”desk”</td></tr><tr><td style=\"text-align:center\"><code>()</code></td><td>小括号，可以将正则字符和元字符或表达式进行组合，”(book｜desk)s”将匹配”books”或”desks”</td></tr><tr><td style=\"text-align:center\"><code>?</code></td><td>问号，匹配0个或1个前导表达式，如”a?”匹配其他字符串或a</td></tr><tr><td style=\"text-align:center\"><code>\\&lt;</code></td><td>反斜杠+小于号，<strong>词首定位符</strong>， “\\&lt; abc”表示所有包含以”abc”开头的单词的行</td></tr><tr><td style=\"text-align:center\"><code>\\&gt;</code></td><td>反斜杠+大于号，<strong>词尾定位符</strong>， “>abc”表示所有包含以”abc”结尾的单词的行</td></tr><tr><td style=\"text-align:center\"><code>-</code></td><td>减号，用于指明字符范围， “[a-c]”将匹配包含a、b和c中任意一个字符的字符串</td></tr><tr><td style=\"text-align:center\"><code>+</code></td><td>加号，匹配一个或多个前导表达式，相当于 expr{1,}</td></tr></tbody></table><ul><li>在<code>grep</code>中使用扩展正则表达式需要使用<code>grep -E [pattern] [filename]</code>，相当于<code>egrep</code>；</li></ul><h2 id=\"grep-egrep示例\"><a href=\"#grep-egrep示例\" class=\"headerlink\" title=\"grep/egrep示例\"></a><strong>grep/egrep</strong>示例</h2><ul><li><p><code>egrep</code>相当于<code>grep</code>的增强版，能够是现实<code>grep</code>的所有功能；</p></li><li><p><code>grep/egrep</code>可以在过滤时使用正则表达式表示关键字，比如过滤出所有包含数字的行：<code>grep [0-9] [filename]</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep [0-9] passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class=\"line\">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class=\"line\">polkitd:x:999:997:User <span class=\"keyword\">for</span> polkitd:/:/sbin/nologin</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ol><li><p>过滤不包含数字的行：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -nv '[0-9]' 2.sh </span></span><br><span class=\"line\">1:<span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">2:</span><br><span class=\"line\">5:A=C      </span><br><span class=\"line\">6:<span class=\"built_in\">export</span> A</span><br></pre></td></tr></table></figure></li><li><p>过滤指定关键字开头的行：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -n '^#' 2.sh </span></span><br><span class=\"line\">1:<span class=\"comment\">#!/bin/bash</span></span><br></pre></td></tr></table></figure></li><li><p>过滤<code>#</code>开头的注释行并去除空行：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -vn '^#' inittab</span></span><br><span class=\"line\">9:assdfg</span><br><span class=\"line\">13:24vubnklm</span><br><span class=\"line\">14:afggwege</span><br><span class=\"line\">15:</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -v '^#' inittab |grep -vn '^$'</span></span><br><span class=\"line\">1:assdfg</span><br><span class=\"line\">2:24vubnklm</span><br><span class=\"line\">3:afggwege</span><br></pre></td></tr></table></figure></li><li><p>过滤非数字的行和非数字开头的行：</p><blockquote><p>非数字的行，包含数字的行中，除数字外都被匹配</p></blockquote><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1524669414781k7u9ah56.png?imageslim\" alt=\"非数字的行\"></p><blockquote><p>过滤非数字开头的行</p></blockquote><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1524669534782i30jjmce.png?imageslim\" alt=\"非数字开头的行\"></p></li><li><p>过滤包含任意一个字符的关键字：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep 'r.o' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep 'ba.' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">evobot:x:1002:1002::/home/evobot:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p>过滤前一个字符0次或多次：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep 'ro*t' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class=\"line\">abrt:x:173:173::/etc/abrt:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep 'c.*' passwd </span></span><br><span class=\"line\">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class=\"line\">libstoragemgmt:x:998:996:daemon account <span class=\"keyword\">for</span> libstoragemgmt:/var/run/lsm:/sbin/nologin</span><br><span class=\"line\">abrt:x:173:173::/etc/abrt:/sbin/nologin</span><br><span class=\"line\">rpc:x:32:32:Rpcbind Daemon:/var/lib/rpcbind:/sbin/nologin</span><br><span class=\"line\">ntp:x:38:38::/etc/ntp:/sbin/nologin</span><br><span class=\"line\">chrony:x:997:995::/var/lib/chrony:/sbin/nologin</span><br><span class=\"line\">tcpdump:x:72:72::/:/sbin/nologin</span><br><span class=\"line\">centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH</span><br></pre></td></tr></table></figure></li><li><p>指定范围过滤：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep 'o\\&#123;2\\&#125;' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class=\"line\">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class=\"line\">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class=\"line\">postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep 'o\\&#123;2,3\\&#125;' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class=\"line\">mail:x:8:12:mail:/var/spoool/mail:/sbin/nologin</span><br><span class=\"line\">operator:x:11:0:operator:/rooooot:/sbin/nologin</span><br><span class=\"line\">games:x:12:100:games:/usr/games:/sbin/noooologin</span><br><span class=\"line\">rpc:x:32:32:Rpcbind Daemoon:/var/lib/rpcbind:/sbin/nologin</span><br><span class=\"line\">postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>上面的过滤中需要对<code>{}</code>进行脱义，如果不想使用脱义符，可以使用<code>grep -E</code>选项，或者直接使用<code>egrep</code>进行过滤：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># egrep 'root|lux' passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">lux:x:1001:1001::/home/lux:/bin/bash</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->"},{"title":"Linux正则表达式——sed命令","author":"Evobot","image":null,"abbrlink":"8d187ebb","date":"2018-04-26T13:13:33.000Z","_content":"\n\n\n**sed**是stream editor的简称上是一个编辑器，但是它是非交互式的流编辑器。\n\nsed的处理流程如下：\n\n![sed处理流程](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/sed.png)\n\n1. 读入一行内容到模式空间(Pattern Space)\n2. 对模式空间里的内容执行sed命令\n3. 输出模式空间的内容，当输出内容后，模式空间将被清空\n4. 重复以上的操作，直到文件的最后一行。\n\n<!--more-->\n\n---\n\n# **sed**命令的用法\n\n## 匹配用法\n\n- `sed`命令可以用来对文件内容进行查找替换，最简单的使用命令方法为`sed '/pattern/'p [filename]`，其中`p`表示打印的意思，使用`-n`参数可以不显示多余的内容：\n\n  ```bash\n  [root@evobot ~]# sed -n '/root/'p passwd \n  root:x:0:0:root:/root:/bin/bash\n  ```\n\n- `sed`命令同样也支持正则表达式，但是对扩展正则元字符需要使用脱义符脱义，或者使用`-r`参数：\n\n  ```bash\n  [root@evobot ~]# sed -n '/o\\+t/'p passwd \n  root:x:0:0:root:/root:/bin/bash\n  operator:x:11:0:operator:/rooooot:/sbin/nologin\n  evobot:x:1002:1002::/home/evobot:/bin/bash\n\n  [root@evobot ~]# sed -nr '/o+t/'p passwd \n  root:x:0:0:root:/root:/bin/bash\n  operator:x:11:0:operator:/rooooot:/sbin/nologin\n  evobot:x:1002:1002::/home/evobot:/bin/bash\n  ```\n\n- `sed`除了进行匹配外，还可以打印指定的行，或使用`,`分割指定行号范围，使用`$`表示末行：\n\n  ```bash\n  [root@evobot ~]# sed -n '2'p passwd \n  bin:x:1:1:bin:/bin:/sbin/nologin\n\n  [root@evobot ~]# sed -n '2,5'p passwd \n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  adm:x:3:4:adm:/var/adm:/sbin/nologin\n  lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n\n  [root@evobot ~]# sed -n '25,$'p passwd \n  syslog:x:996:994::/home/syslog:/bin/false\n  centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH\n  lux:x:1001:1001::/home/lux:/bin/bash\n  nginx:x:995:993:Nginx web server:/var/lib/nginx:/sbin/nologin\n  evobot:x:1002:1002::/home/evobot:/bin/bash\n  ```\n\n- `sed -e`参数表示在一个表达式内执行多个操作，如打印指定行并匹配指定字符串，多个动作时间使用`-e`参数，如果多个表达式匹配内容相同，会打印多次：\n\n  ```bash\n  # 打印第一行并匹配'evobot'字符串所在的行\n  [root@evobot ~]# sed -e '1'p -e '/evobot/'p -n passwd \n  root:x:0:0:root:/root:/bin/bash\n  evobot:x:1002:1002::/home/evobot:/bin/bash\n  ```\n\n- `sed`可以在匹配时不区分大小写，命令格式为`sed -n '/pattern/Ip [filename]'`：\n\n  ```bash\n  [root@evobot ~]# sed -n '/bus/'Ip passwd \n  sync:x:5:0:BUS:/sbin:/bin/sync\n  dbus:x:81:81:System message bus:/:/sbin/nologi\n  ```\n\n## 删除用法\n\n- `sed 'n,m'd [file]`可以将指定的行`n`或行数范围`n~m`行删除，例如对于一个日志文件，只需要指定日期之后的内容，可以先使用`grep -n`查看指定日期的行号，再删除之前的行：\n\n  ```bash\n  [root@evobot ~]# grep -n 'Apr 24' secure.log \n  180652:Apr 24 00:23:31 evobot sshd[9431]: Received disconnect from 118.113.33.203 port 11905:11: disconnected by user\n  180653:Apr 24 00:23:31 evobot sshd[9431]: Disconnected from 118.113.33.203 port 11905\n  180654:Apr 24 00:23:31 evobot sshd[9429]: pam_unix(sshd:session): session closed for user lux\n  180655:Apr 24 00:23:31 evobot sshd[2268]: Received disconnect from 118.113.33.203 port 11968:11: disconnected by user\n  180656:Apr 24 00:23:31 evobot sshd[2268]: Disconnected from 118.113.33.203 port 11968\n  180657:Apr 24 00:23:31 evobot sshd[2266]: pam_unix(sshd:session): session closed for user lux\n  180658:Apr 24 00:23:31 evobot su: pam_unix(su-l:session): session closed for user root\n  180659:Apr 24 04:08:30 evobot sshd[22139]: Did not receive identification string from 183.57.54.43 port 55728\n  180660:Apr 24 22:24:39 evobot sshd[3396]: Accepted publickey for lux from 118.113.33.203 port 8769 ssh2: RSA SHA256:Y7Fo5sjyHH9pIUnCz+uLdIIT/2wmR4lPn3Wh5x8H9O4\n  180661:Apr 24 22:24:39 evobot sshd[3396]: pam_unix(sshd:session): session opened for user lux by (uid=0)\n  180662:Apr 24 22:25:03 evobot sudo:     lux : TTY=pts/0 ; PWD=/home/lux ; USER=root ; COMMAND=/bin/su -\n  180663:Apr 24 22:25:03 evobot su: pam_unix(su-l:session): session opened for user root by lux(uid=0)\n\n  # 使用sed删除前180651行\n  [root@evobot ~]# sed '1,180651'd secure.log \n  Apr 24 00:23:31 evobot sshd[9431]: Received disconnect from 118.113.33.203 port 11905:11: disconnected by user\n  Apr 24 00:23:31 evobot sshd[9431]: Disconnected from 118.113.33.203 port 11905\n  Apr 24 00:23:31 evobot sshd[9429]: pam_unix(sshd:session): session closed for user lux\n  Apr 24 00:23:31 evobot sshd[2268]: Received disconnect from 118.113.33.203 port 11968:11: disconnected by user\n  Apr 24 00:23:31 evobot sshd[2268]: Disconnected from 118.113.33.203 port 11968\n  Apr 24 00:23:31 evobot sshd[2266]: pam_unix(sshd:session): session closed for user lux\n  Apr 24 00:23:31 evobot su: pam_unix(su-l:session): session closed for user root\n  Apr 24 04:08:30 evobot sshd[22139]: Did not receive identification string from 183.57.54.43 port 55728\n  Apr 24 22:24:39 evobot sshd[3396]: Accepted publickey for lux from 118.113.33.203 port 8769 ssh2: RSA SHA256:Y7Fo5sjyHH9pIUnCz+uLdIIT/2wmR4lPn3Wh5x8H9O4\n  Apr 24 22:24:39 evobot sshd[3396]: pam_unix(sshd:session): session opened for user lux by (uid=0)\n  Apr 24 22:25:03 evobot sudo:     lux : TTY=pts/0 ; PWD=/home/lux ; USER=root ; COMMAND=/bin/su -\n  Apr 24 22:25:03 evobot su: pam_unix(su-l:session): session opened for user root by lux(uid=0)\n  ```\n\n- 上面的删除方式只是将删除结果显示在屏幕上，并没有真正在文件内进行删除操作，使用`-i`选项可以直接更改文件内容，命令为`sed -i 'n,m'd [file]`：\n\n  ```bash\n  [root@evobot ~]# wc -l secure.log\n  180663 secure.log\n  [root@evobot ~]# sed -i '1,180651'd secure.log\n  [root@evobot ~]# wc -l secure.log\n  12 secure.log\n  ```\n\n## 替换用法\n\n- `sed`命令的替换用法与vim中的替换相似，命令用法为`sed s/book/books/g [file]`，其中`s`表示替换，`g`表示全局替换，不加`g`表示只替换每行匹配到的第一个关键字；\n\n- 在替换时，也可以指定范围进行替换，命令为`sed 'n,ms/book/books/g' [file]` :\n\n  ```bash\n  [root@evobot ~]# cat secure.log\n  Apr 24 00:23:31 evobot sshd[9431]: Received disconnect from 118.113.33.203 port 11905:11: disconnected by user\n  Apr 24 00:23:31 evobot sshd[9431]: Disconnected from 118.113.33.203 port 11905\n  Apr 24 00:23:31 evobot sshd[9429]: pam_unix(sshd:session): session closed for user lux\n\n  [root@evobot ~]# sed 's/evobot/sedtest/g' secure.log\n  Apr 24 00:23:31 sedtest sshd[9431]: Received disconnect from 118.113.33.203 port 11905:11: disconnected by user\n  Apr 24 00:23:31 sedtest sshd[9431]: Disconnected from 118.113.33.203 port 11905\n  Apr 24 00:23:31 sedtest sshd[9429]: pam_unix(sshd:session): session closed for user lux\n\n  [root@evobot ~]# sed '8,$s/evobot/mylinux/g' secure.log\n  Apr 24 00:23:31 evobot su: pam_unix(su-l:session): session closed for user root\n  Apr 24 04:08:30 mylinux sshd[22139]: Did not receive identification string from 183.57.54.43 port 55728\n  Apr 24 22:24:39 mylinux sshd[3396]: Accepted publickey for lux from 118.113.33.203 port 8769 ssh2: RSA SHA256:Y7Fo5sjyHH9pIUnCz+uLdIIT/2wmR4lPn3Wh5x8H9O4\n  Apr 24 22:24:39 mylinux sshd[3396]: pam_unix(sshd:session): session opened for user lux by (uid=0)\n  Apr 24 22:25:03 mylinux sudo:     lux : TTY=pts/0 ; PWD=/home/lux ; USER=root ; COMMAND=/bin/su -\n  Apr 24 22:25:03 mylinux su: pam_unix(su-l:session): session opened for user root by lux(uid=0)\n  ```\n\n- 同样的在替换时也可以使用正则表达式进行匹配替换：\n\n  ```bash\n  [root@evobot ~]# head -n 5 secure.log\n  Apr 24 00:23:31 evobot sshd[9431]: Received disconnect from 118.113.33.203 port 11905:11: disconnected by user\n  Apr 24 00:23:31 evobot sshd[9431]: Disconnected from 118.113.33.203 port 11905\n  Apr 24 00:23:31 evobot sshd[9429]: pam_unix(sshd:session): session closed for user lux\n  Apr 24 00:23:31 evobot sshd[2268]: Received disconnect from 118.113.33.203 port 11968:11: disconnected by user\n  Apr 24 00:23:31 evobot sshd[2268]: Disconnected from 118.113.33.203 port 11968\n\n  [root@evobot ~]# sed -r '1,5s/[0-9]+.[0-9]+.[0-9]+.[0-9]+/ipaddress/g' secure.log\n  Apr ipaddress evobot sshd[9431]: Received disconnect from ipaddress port ipaddress: disconnected by user\n  Apr ipaddress evobot sshd[9431]: Disconnected from ipaddress port 11905\n  Apr ipaddress evobot sshd[9429]: pam_unix(sshd:session): session closed for user lux\n  Apr ipaddress evobot sshd[2268]: Received disconnect from ipaddress port ipaddress: disconnected by user\n  Apr ipaddress evobot sshd[2268]: Disconnected from ipaddress port 11968\n  ```\n\n- `sed`也支持与管道符连用，对管道符前面的命令输出内容进行处理；\n\n- `sed`可以使用`()`包裹关键词进行匹配，`()`匹配到的内容，可以使用`\\1`这样的形式调用，比如将开头一段和结尾一段字符串进行调换：\n\n  ```bash\n  [root@evobot ~]# head -n 3 passwd \n  root:x:0:0:root:/root:/bin/bash\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n\n  [root@evobot ~]# head -n 3 passwd | sed -r '1,3s/(\\w+):(.*):([^:]+)/\\3:\\2:\\1/g'\t# \\w表示字符或数字\n  /bin/bash:x:0:0:root:/root:root\n  /sbin/nologin:x:1:1:bin:/bin:bin\n  /sbin/nologin:x:2:2:daemon:/sbin:daemon\n  ```\n\n- `sed`中如果匹配的内容中包括`/`，则需要使用转义符`\\`转义，或者将`sed`的分隔符换成`@`、`:`或`|`:\n\n  ```bash\n  [root@evobot ~]# head -n 3 passwd \n  root:x:0:0:root:/root:/bin/BASH\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  [root@evobot ~]# head -n 3 passwd | sed -r 's|/[a-z]+/[a-z]+|/home/bin|Ig'\n  root:x:0:0:root:/root:/home/bin\n  bin:x:1:1:bin:/bin:/home/bin\n  daemon:x:2:2:daemon:/sbin:/home/bin\n  ```\n\n- 替换时也可以不指定替换结果的字符串，则替换成空：\n\n  ```bash\n  [root@evobot ~]# head -n 3 passwd | sed 's/[a-zA-Z]//g'\n  ::0:0::/://\n  ::1:1::/://\n  ::2:2::/://\n  ```\n\n- 为所有行开头添加指定字符串，可以使用`sed -r 's/(.*)/xxx:&/'`表示，其中`&`的含义与前面使用的`\\1`含义相同：\n\n  ```bash\n  [root@evobot ~]# head -n 3 passwd | sed -r 's/^/test:&/'\n  test:root:x:0:0:root:/root:/bin/BASH\n  test:bin:x:1:1:bin:/bin:/sbin/nologin\n  test:daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  ```\n\n- 同样也可以在结尾增加内容：\n\n  ```bash\n  [root@evobot ~]# head -n 3 passwd | sed -r 's/$/&:test/'\n  root:x:0:0:root:/root:/bin/BASH:test\n  bin:x:1:1:bin:/bin:/sbin/nologin:test\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin:test\n  ```\n\n---","source":"_posts/Linux正则表达式—sed命令.md","raw":"---\ntitle: Linux正则表达式——sed命令\nauthor: Evobot\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\nimage:\nabbrlink: 8d187ebb\ndate: 2018-04-26 21:13:33\n---\n\n\n\n**sed**是stream editor的简称上是一个编辑器，但是它是非交互式的流编辑器。\n\nsed的处理流程如下：\n\n![sed处理流程](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/sed.png)\n\n1. 读入一行内容到模式空间(Pattern Space)\n2. 对模式空间里的内容执行sed命令\n3. 输出模式空间的内容，当输出内容后，模式空间将被清空\n4. 重复以上的操作，直到文件的最后一行。\n\n<!--more-->\n\n---\n\n# **sed**命令的用法\n\n## 匹配用法\n\n- `sed`命令可以用来对文件内容进行查找替换，最简单的使用命令方法为`sed '/pattern/'p [filename]`，其中`p`表示打印的意思，使用`-n`参数可以不显示多余的内容：\n\n  ```bash\n  [root@evobot ~]# sed -n '/root/'p passwd \n  root:x:0:0:root:/root:/bin/bash\n  ```\n\n- `sed`命令同样也支持正则表达式，但是对扩展正则元字符需要使用脱义符脱义，或者使用`-r`参数：\n\n  ```bash\n  [root@evobot ~]# sed -n '/o\\+t/'p passwd \n  root:x:0:0:root:/root:/bin/bash\n  operator:x:11:0:operator:/rooooot:/sbin/nologin\n  evobot:x:1002:1002::/home/evobot:/bin/bash\n\n  [root@evobot ~]# sed -nr '/o+t/'p passwd \n  root:x:0:0:root:/root:/bin/bash\n  operator:x:11:0:operator:/rooooot:/sbin/nologin\n  evobot:x:1002:1002::/home/evobot:/bin/bash\n  ```\n\n- `sed`除了进行匹配外，还可以打印指定的行，或使用`,`分割指定行号范围，使用`$`表示末行：\n\n  ```bash\n  [root@evobot ~]# sed -n '2'p passwd \n  bin:x:1:1:bin:/bin:/sbin/nologin\n\n  [root@evobot ~]# sed -n '2,5'p passwd \n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  adm:x:3:4:adm:/var/adm:/sbin/nologin\n  lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n\n  [root@evobot ~]# sed -n '25,$'p passwd \n  syslog:x:996:994::/home/syslog:/bin/false\n  centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH\n  lux:x:1001:1001::/home/lux:/bin/bash\n  nginx:x:995:993:Nginx web server:/var/lib/nginx:/sbin/nologin\n  evobot:x:1002:1002::/home/evobot:/bin/bash\n  ```\n\n- `sed -e`参数表示在一个表达式内执行多个操作，如打印指定行并匹配指定字符串，多个动作时间使用`-e`参数，如果多个表达式匹配内容相同，会打印多次：\n\n  ```bash\n  # 打印第一行并匹配'evobot'字符串所在的行\n  [root@evobot ~]# sed -e '1'p -e '/evobot/'p -n passwd \n  root:x:0:0:root:/root:/bin/bash\n  evobot:x:1002:1002::/home/evobot:/bin/bash\n  ```\n\n- `sed`可以在匹配时不区分大小写，命令格式为`sed -n '/pattern/Ip [filename]'`：\n\n  ```bash\n  [root@evobot ~]# sed -n '/bus/'Ip passwd \n  sync:x:5:0:BUS:/sbin:/bin/sync\n  dbus:x:81:81:System message bus:/:/sbin/nologi\n  ```\n\n## 删除用法\n\n- `sed 'n,m'd [file]`可以将指定的行`n`或行数范围`n~m`行删除，例如对于一个日志文件，只需要指定日期之后的内容，可以先使用`grep -n`查看指定日期的行号，再删除之前的行：\n\n  ```bash\n  [root@evobot ~]# grep -n 'Apr 24' secure.log \n  180652:Apr 24 00:23:31 evobot sshd[9431]: Received disconnect from 118.113.33.203 port 11905:11: disconnected by user\n  180653:Apr 24 00:23:31 evobot sshd[9431]: Disconnected from 118.113.33.203 port 11905\n  180654:Apr 24 00:23:31 evobot sshd[9429]: pam_unix(sshd:session): session closed for user lux\n  180655:Apr 24 00:23:31 evobot sshd[2268]: Received disconnect from 118.113.33.203 port 11968:11: disconnected by user\n  180656:Apr 24 00:23:31 evobot sshd[2268]: Disconnected from 118.113.33.203 port 11968\n  180657:Apr 24 00:23:31 evobot sshd[2266]: pam_unix(sshd:session): session closed for user lux\n  180658:Apr 24 00:23:31 evobot su: pam_unix(su-l:session): session closed for user root\n  180659:Apr 24 04:08:30 evobot sshd[22139]: Did not receive identification string from 183.57.54.43 port 55728\n  180660:Apr 24 22:24:39 evobot sshd[3396]: Accepted publickey for lux from 118.113.33.203 port 8769 ssh2: RSA SHA256:Y7Fo5sjyHH9pIUnCz+uLdIIT/2wmR4lPn3Wh5x8H9O4\n  180661:Apr 24 22:24:39 evobot sshd[3396]: pam_unix(sshd:session): session opened for user lux by (uid=0)\n  180662:Apr 24 22:25:03 evobot sudo:     lux : TTY=pts/0 ; PWD=/home/lux ; USER=root ; COMMAND=/bin/su -\n  180663:Apr 24 22:25:03 evobot su: pam_unix(su-l:session): session opened for user root by lux(uid=0)\n\n  # 使用sed删除前180651行\n  [root@evobot ~]# sed '1,180651'd secure.log \n  Apr 24 00:23:31 evobot sshd[9431]: Received disconnect from 118.113.33.203 port 11905:11: disconnected by user\n  Apr 24 00:23:31 evobot sshd[9431]: Disconnected from 118.113.33.203 port 11905\n  Apr 24 00:23:31 evobot sshd[9429]: pam_unix(sshd:session): session closed for user lux\n  Apr 24 00:23:31 evobot sshd[2268]: Received disconnect from 118.113.33.203 port 11968:11: disconnected by user\n  Apr 24 00:23:31 evobot sshd[2268]: Disconnected from 118.113.33.203 port 11968\n  Apr 24 00:23:31 evobot sshd[2266]: pam_unix(sshd:session): session closed for user lux\n  Apr 24 00:23:31 evobot su: pam_unix(su-l:session): session closed for user root\n  Apr 24 04:08:30 evobot sshd[22139]: Did not receive identification string from 183.57.54.43 port 55728\n  Apr 24 22:24:39 evobot sshd[3396]: Accepted publickey for lux from 118.113.33.203 port 8769 ssh2: RSA SHA256:Y7Fo5sjyHH9pIUnCz+uLdIIT/2wmR4lPn3Wh5x8H9O4\n  Apr 24 22:24:39 evobot sshd[3396]: pam_unix(sshd:session): session opened for user lux by (uid=0)\n  Apr 24 22:25:03 evobot sudo:     lux : TTY=pts/0 ; PWD=/home/lux ; USER=root ; COMMAND=/bin/su -\n  Apr 24 22:25:03 evobot su: pam_unix(su-l:session): session opened for user root by lux(uid=0)\n  ```\n\n- 上面的删除方式只是将删除结果显示在屏幕上，并没有真正在文件内进行删除操作，使用`-i`选项可以直接更改文件内容，命令为`sed -i 'n,m'd [file]`：\n\n  ```bash\n  [root@evobot ~]# wc -l secure.log\n  180663 secure.log\n  [root@evobot ~]# sed -i '1,180651'd secure.log\n  [root@evobot ~]# wc -l secure.log\n  12 secure.log\n  ```\n\n## 替换用法\n\n- `sed`命令的替换用法与vim中的替换相似，命令用法为`sed s/book/books/g [file]`，其中`s`表示替换，`g`表示全局替换，不加`g`表示只替换每行匹配到的第一个关键字；\n\n- 在替换时，也可以指定范围进行替换，命令为`sed 'n,ms/book/books/g' [file]` :\n\n  ```bash\n  [root@evobot ~]# cat secure.log\n  Apr 24 00:23:31 evobot sshd[9431]: Received disconnect from 118.113.33.203 port 11905:11: disconnected by user\n  Apr 24 00:23:31 evobot sshd[9431]: Disconnected from 118.113.33.203 port 11905\n  Apr 24 00:23:31 evobot sshd[9429]: pam_unix(sshd:session): session closed for user lux\n\n  [root@evobot ~]# sed 's/evobot/sedtest/g' secure.log\n  Apr 24 00:23:31 sedtest sshd[9431]: Received disconnect from 118.113.33.203 port 11905:11: disconnected by user\n  Apr 24 00:23:31 sedtest sshd[9431]: Disconnected from 118.113.33.203 port 11905\n  Apr 24 00:23:31 sedtest sshd[9429]: pam_unix(sshd:session): session closed for user lux\n\n  [root@evobot ~]# sed '8,$s/evobot/mylinux/g' secure.log\n  Apr 24 00:23:31 evobot su: pam_unix(su-l:session): session closed for user root\n  Apr 24 04:08:30 mylinux sshd[22139]: Did not receive identification string from 183.57.54.43 port 55728\n  Apr 24 22:24:39 mylinux sshd[3396]: Accepted publickey for lux from 118.113.33.203 port 8769 ssh2: RSA SHA256:Y7Fo5sjyHH9pIUnCz+uLdIIT/2wmR4lPn3Wh5x8H9O4\n  Apr 24 22:24:39 mylinux sshd[3396]: pam_unix(sshd:session): session opened for user lux by (uid=0)\n  Apr 24 22:25:03 mylinux sudo:     lux : TTY=pts/0 ; PWD=/home/lux ; USER=root ; COMMAND=/bin/su -\n  Apr 24 22:25:03 mylinux su: pam_unix(su-l:session): session opened for user root by lux(uid=0)\n  ```\n\n- 同样的在替换时也可以使用正则表达式进行匹配替换：\n\n  ```bash\n  [root@evobot ~]# head -n 5 secure.log\n  Apr 24 00:23:31 evobot sshd[9431]: Received disconnect from 118.113.33.203 port 11905:11: disconnected by user\n  Apr 24 00:23:31 evobot sshd[9431]: Disconnected from 118.113.33.203 port 11905\n  Apr 24 00:23:31 evobot sshd[9429]: pam_unix(sshd:session): session closed for user lux\n  Apr 24 00:23:31 evobot sshd[2268]: Received disconnect from 118.113.33.203 port 11968:11: disconnected by user\n  Apr 24 00:23:31 evobot sshd[2268]: Disconnected from 118.113.33.203 port 11968\n\n  [root@evobot ~]# sed -r '1,5s/[0-9]+.[0-9]+.[0-9]+.[0-9]+/ipaddress/g' secure.log\n  Apr ipaddress evobot sshd[9431]: Received disconnect from ipaddress port ipaddress: disconnected by user\n  Apr ipaddress evobot sshd[9431]: Disconnected from ipaddress port 11905\n  Apr ipaddress evobot sshd[9429]: pam_unix(sshd:session): session closed for user lux\n  Apr ipaddress evobot sshd[2268]: Received disconnect from ipaddress port ipaddress: disconnected by user\n  Apr ipaddress evobot sshd[2268]: Disconnected from ipaddress port 11968\n  ```\n\n- `sed`也支持与管道符连用，对管道符前面的命令输出内容进行处理；\n\n- `sed`可以使用`()`包裹关键词进行匹配，`()`匹配到的内容，可以使用`\\1`这样的形式调用，比如将开头一段和结尾一段字符串进行调换：\n\n  ```bash\n  [root@evobot ~]# head -n 3 passwd \n  root:x:0:0:root:/root:/bin/bash\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n\n  [root@evobot ~]# head -n 3 passwd | sed -r '1,3s/(\\w+):(.*):([^:]+)/\\3:\\2:\\1/g'\t# \\w表示字符或数字\n  /bin/bash:x:0:0:root:/root:root\n  /sbin/nologin:x:1:1:bin:/bin:bin\n  /sbin/nologin:x:2:2:daemon:/sbin:daemon\n  ```\n\n- `sed`中如果匹配的内容中包括`/`，则需要使用转义符`\\`转义，或者将`sed`的分隔符换成`@`、`:`或`|`:\n\n  ```bash\n  [root@evobot ~]# head -n 3 passwd \n  root:x:0:0:root:/root:/bin/BASH\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  [root@evobot ~]# head -n 3 passwd | sed -r 's|/[a-z]+/[a-z]+|/home/bin|Ig'\n  root:x:0:0:root:/root:/home/bin\n  bin:x:1:1:bin:/bin:/home/bin\n  daemon:x:2:2:daemon:/sbin:/home/bin\n  ```\n\n- 替换时也可以不指定替换结果的字符串，则替换成空：\n\n  ```bash\n  [root@evobot ~]# head -n 3 passwd | sed 's/[a-zA-Z]//g'\n  ::0:0::/://\n  ::1:1::/://\n  ::2:2::/://\n  ```\n\n- 为所有行开头添加指定字符串，可以使用`sed -r 's/(.*)/xxx:&/'`表示，其中`&`的含义与前面使用的`\\1`含义相同：\n\n  ```bash\n  [root@evobot ~]# head -n 3 passwd | sed -r 's/^/test:&/'\n  test:root:x:0:0:root:/root:/bin/BASH\n  test:bin:x:1:1:bin:/bin:/sbin/nologin\n  test:daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  ```\n\n- 同样也可以在结尾增加内容：\n\n  ```bash\n  [root@evobot ~]# head -n 3 passwd | sed -r 's/$/&:test/'\n  root:x:0:0:root:/root:/bin/BASH:test\n  bin:x:1:1:bin:/bin:/sbin/nologin:test\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin:test\n  ```\n\n---","slug":"Linux正则表达式—sed命令","published":1,"updated":"2018-06-02T13:01:29.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazbr002ku1jxrplqr75c","content":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p><strong>sed</strong>是stream editor的简称上是一个编辑器，但是它是非交互式的流编辑器。</p><p>sed的处理流程如下：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/sed.png\" alt=\"sed处理流程\"></p><ol><li>读入一行内容到模式空间(Pattern Space)</li><li>对模式空间里的内容执行sed命令</li><li>输出模式空间的内容，当输出内容后，模式空间将被清空</li><li>重复以上的操作，直到文件的最后一行。</li></ol><a id=\"more\"></a><hr><h1 id=\"sed命令的用法\"><a href=\"#sed命令的用法\" class=\"headerlink\" title=\"sed命令的用法\"></a><strong>sed</strong>命令的用法</h1><h2 id=\"匹配用法\"><a href=\"#匹配用法\" class=\"headerlink\" title=\"匹配用法\"></a>匹配用法</h2><ul><li><p><code>sed</code>命令可以用来对文件内容进行查找替换，最简单的使用命令方法为<code>sed &#39;/pattern/&#39;p [filename]</code>，其中<code>p</code>表示打印的意思，使用<code>-n</code>参数可以不显示多余的内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -n '/root/'p passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p><code>sed</code>命令同样也支持正则表达式，但是对扩展正则元字符需要使用脱义符脱义，或者使用<code>-r</code>参数：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -n '/o\\+t/'p passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">operator:x:11:0:operator:/rooooot:/sbin/nologin</span><br><span class=\"line\">evobot:x:1002:1002::/home/evobot:/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -nr '/o+t/'p passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">operator:x:11:0:operator:/rooooot:/sbin/nologin</span><br><span class=\"line\">evobot:x:1002:1002::/home/evobot:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p><code>sed</code>除了进行匹配外，还可以打印指定的行，或使用<code>,</code>分割指定行号范围，使用<code>$</code>表示末行：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -n '2'p passwd </span></span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -n '2,5'p passwd </span></span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -n '25,$'p passwd </span></span><br><span class=\"line\">syslog:x:996:994::/home/syslog:/bin/<span class=\"literal\">false</span></span><br><span class=\"line\">centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH</span><br><span class=\"line\">lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">nginx:x:995:993:Nginx web server:/var/lib/nginx:/sbin/nologin</span><br><span class=\"line\">evobot:x:1002:1002::/home/evobot:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p><code>sed -e</code>参数表示在一个表达式内执行多个操作，如打印指定行并匹配指定字符串，多个动作时间使用<code>-e</code>参数，如果多个表达式匹配内容相同，会打印多次：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打印第一行并匹配'evobot'字符串所在的行</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -e '1'p -e '/evobot/'p -n passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">evobot:x:1002:1002::/home/evobot:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p><code>sed</code>可以在匹配时不区分大小写，命令格式为<code>sed -n &#39;/pattern/Ip [filename]&#39;</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -n '/bus/'Ip passwd </span></span><br><span class=\"line\">sync:x:5:0:BUS:/sbin:/bin/sync</span><br><span class=\"line\">dbus:x:81:81:System message bus:/:/sbin/nologi</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"删除用法\"><a href=\"#删除用法\" class=\"headerlink\" title=\"删除用法\"></a>删除用法</h2><ul><li><p><code>sed &#39;n,m&#39;d [file]</code>可以将指定的行<code>n</code>或行数范围<code>n~m</code>行删除，例如对于一个日志文件，只需要指定日期之后的内容，可以先使用<code>grep -n</code>查看指定日期的行号，再删除之前的行：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -n 'Apr 24' secure.log </span></span><br><span class=\"line\">180652:Apr 24 00:23:31 evobot sshd[9431]: Received disconnect from 118.113.33.203 port 11905:11: disconnected by user</span><br><span class=\"line\">180653:Apr 24 00:23:31 evobot sshd[9431]: Disconnected from 118.113.33.203 port 11905</span><br><span class=\"line\">180654:Apr 24 00:23:31 evobot sshd[9429]: pam_unix(sshd:session): session closed <span class=\"keyword\">for</span> user lux</span><br><span class=\"line\">180655:Apr 24 00:23:31 evobot sshd[2268]: Received disconnect from 118.113.33.203 port 11968:11: disconnected by user</span><br><span class=\"line\">180656:Apr 24 00:23:31 evobot sshd[2268]: Disconnected from 118.113.33.203 port 11968</span><br><span class=\"line\">180657:Apr 24 00:23:31 evobot sshd[2266]: pam_unix(sshd:session): session closed <span class=\"keyword\">for</span> user lux</span><br><span class=\"line\">180658:Apr 24 00:23:31 evobot su: pam_unix(su<span class=\"_\">-l</span>:session): session closed <span class=\"keyword\">for</span> user root</span><br><span class=\"line\">180659:Apr 24 04:08:30 evobot sshd[22139]: Did not receive identification string from 183.57.54.43 port 55728</span><br><span class=\"line\">180660:Apr 24 22:24:39 evobot sshd[3396]: Accepted publickey <span class=\"keyword\">for</span> lux from 118.113.33.203 port 8769 ssh2: RSA SHA256:Y7Fo5sjyHH9pIUnCz+uLdIIT/2wmR4lPn3Wh5x8H9O4</span><br><span class=\"line\">180661:Apr 24 22:24:39 evobot sshd[3396]: pam_unix(sshd:session): session opened <span class=\"keyword\">for</span> user lux by (uid=0)</span><br><span class=\"line\">180662:Apr 24 22:25:03 evobot sudo:     lux : TTY=pts/0 ; PWD=/home/lux ; USER=root ; COMMAND=/bin/su -</span><br><span class=\"line\">180663:Apr 24 22:25:03 evobot su: pam_unix(su<span class=\"_\">-l</span>:session): session opened <span class=\"keyword\">for</span> user root by lux(uid=0)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用sed删除前180651行</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed '1,180651'd secure.log </span></span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[9431]: Received disconnect from 118.113.33.203 port 11905:11: disconnected by user</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[9431]: Disconnected from 118.113.33.203 port 11905</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[9429]: pam_unix(sshd:session): session closed <span class=\"keyword\">for</span> user lux</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[2268]: Received disconnect from 118.113.33.203 port 11968:11: disconnected by user</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[2268]: Disconnected from 118.113.33.203 port 11968</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[2266]: pam_unix(sshd:session): session closed <span class=\"keyword\">for</span> user lux</span><br><span class=\"line\">Apr 24 00:23:31 evobot su: pam_unix(su<span class=\"_\">-l</span>:session): session closed <span class=\"keyword\">for</span> user root</span><br><span class=\"line\">Apr 24 04:08:30 evobot sshd[22139]: Did not receive identification string from 183.57.54.43 port 55728</span><br><span class=\"line\">Apr 24 22:24:39 evobot sshd[3396]: Accepted publickey <span class=\"keyword\">for</span> lux from 118.113.33.203 port 8769 ssh2: RSA SHA256:Y7Fo5sjyHH9pIUnCz+uLdIIT/2wmR4lPn3Wh5x8H9O4</span><br><span class=\"line\">Apr 24 22:24:39 evobot sshd[3396]: pam_unix(sshd:session): session opened <span class=\"keyword\">for</span> user lux by (uid=0)</span><br><span class=\"line\">Apr 24 22:25:03 evobot sudo:     lux : TTY=pts/0 ; PWD=/home/lux ; USER=root ; COMMAND=/bin/su -</span><br><span class=\"line\">Apr 24 22:25:03 evobot su: pam_unix(su<span class=\"_\">-l</span>:session): session opened <span class=\"keyword\">for</span> user root by lux(uid=0)</span><br></pre></td></tr></table></figure></li><li><p>上面的删除方式只是将删除结果显示在屏幕上，并没有真正在文件内进行删除操作，使用<code>-i</code>选项可以直接更改文件内容，命令为<code>sed -i &#39;n,m&#39;d [file]</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># wc -l secure.log</span></span><br><span class=\"line\">180663 secure.log</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -i '1,180651'd secure.log</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># wc -l secure.log</span></span><br><span class=\"line\">12 secure.log</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"替换用法\"><a href=\"#替换用法\" class=\"headerlink\" title=\"替换用法\"></a>替换用法</h2><ul><li><p><code>sed</code>命令的替换用法与vim中的替换相似，命令用法为<code>sed s/book/books/g [file]</code>，其中<code>s</code>表示替换，<code>g</code>表示全局替换，不加<code>g</code>表示只替换每行匹配到的第一个关键字；</p></li><li><p>在替换时，也可以指定范围进行替换，命令为<code>sed &#39;n,ms/book/books/g&#39; [file]</code> :</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat secure.log</span></span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[9431]: Received disconnect from 118.113.33.203 port 11905:11: disconnected by user</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[9431]: Disconnected from 118.113.33.203 port 11905</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[9429]: pam_unix(sshd:session): session closed <span class=\"keyword\">for</span> user lux</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed 's/evobot/sedtest/g' secure.log</span></span><br><span class=\"line\">Apr 24 00:23:31 sedtest sshd[9431]: Received disconnect from 118.113.33.203 port 11905:11: disconnected by user</span><br><span class=\"line\">Apr 24 00:23:31 sedtest sshd[9431]: Disconnected from 118.113.33.203 port 11905</span><br><span class=\"line\">Apr 24 00:23:31 sedtest sshd[9429]: pam_unix(sshd:session): session closed <span class=\"keyword\">for</span> user lux</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed '8,$s/evobot/mylinux/g' secure.log</span></span><br><span class=\"line\">Apr 24 00:23:31 evobot su: pam_unix(su<span class=\"_\">-l</span>:session): session closed <span class=\"keyword\">for</span> user root</span><br><span class=\"line\">Apr 24 04:08:30 mylinux sshd[22139]: Did not receive identification string from 183.57.54.43 port 55728</span><br><span class=\"line\">Apr 24 22:24:39 mylinux sshd[3396]: Accepted publickey <span class=\"keyword\">for</span> lux from 118.113.33.203 port 8769 ssh2: RSA SHA256:Y7Fo5sjyHH9pIUnCz+uLdIIT/2wmR4lPn3Wh5x8H9O4</span><br><span class=\"line\">Apr 24 22:24:39 mylinux sshd[3396]: pam_unix(sshd:session): session opened <span class=\"keyword\">for</span> user lux by (uid=0)</span><br><span class=\"line\">Apr 24 22:25:03 mylinux sudo:     lux : TTY=pts/0 ; PWD=/home/lux ; USER=root ; COMMAND=/bin/su -</span><br><span class=\"line\">Apr 24 22:25:03 mylinux su: pam_unix(su<span class=\"_\">-l</span>:session): session opened <span class=\"keyword\">for</span> user root by lux(uid=0)</span><br></pre></td></tr></table></figure></li><li><p>同样的在替换时也可以使用正则表达式进行匹配替换：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 5 secure.log</span></span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[9431]: Received disconnect from 118.113.33.203 port 11905:11: disconnected by user</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[9431]: Disconnected from 118.113.33.203 port 11905</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[9429]: pam_unix(sshd:session): session closed <span class=\"keyword\">for</span> user lux</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[2268]: Received disconnect from 118.113.33.203 port 11968:11: disconnected by user</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[2268]: Disconnected from 118.113.33.203 port 11968</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -r '1,5s/[0-9]+.[0-9]+.[0-9]+.[0-9]+/ipaddress/g' secure.log</span></span><br><span class=\"line\">Apr ipaddress evobot sshd[9431]: Received disconnect from ipaddress port ipaddress: disconnected by user</span><br><span class=\"line\">Apr ipaddress evobot sshd[9431]: Disconnected from ipaddress port 11905</span><br><span class=\"line\">Apr ipaddress evobot sshd[9429]: pam_unix(sshd:session): session closed <span class=\"keyword\">for</span> user lux</span><br><span class=\"line\">Apr ipaddress evobot sshd[2268]: Received disconnect from ipaddress port ipaddress: disconnected by user</span><br><span class=\"line\">Apr ipaddress evobot sshd[2268]: Disconnected from ipaddress port 11968</span><br></pre></td></tr></table></figure></li><li><p><code>sed</code>也支持与管道符连用，对管道符前面的命令输出内容进行处理；</p></li><li><p><code>sed</code>可以使用<code>()</code>包裹关键词进行匹配，<code>()</code>匹配到的内容，可以使用<code>\\1</code>这样的形式调用，比如将开头一段和结尾一段字符串进行调换：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | sed -r '1,3s/(\\w+):(.*):([^:]+)/\\3:\\2:\\1/g'\t# \\w表示字符或数字</span></span><br><span class=\"line\">/bin/bash:x:0:0:root:/root:root</span><br><span class=\"line\">/sbin/nologin:x:1:1:bin:/bin:bin</span><br><span class=\"line\">/sbin/nologin:x:2:2:daemon:/sbin:daemon</span><br></pre></td></tr></table></figure></li><li><p><code>sed</code>中如果匹配的内容中包括<code>/</code>，则需要使用转义符<code>\\</code>转义，或者将<code>sed</code>的分隔符换成<code>@</code>、<code>:</code>或<code>|</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | sed -r 's|/[a-z]+/[a-z]+|/home/bin|Ig'</span></span><br><span class=\"line\">root:x:0:0:root:/root:/home/bin</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/home/bin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/home/bin</span><br></pre></td></tr></table></figure></li><li><p>替换时也可以不指定替换结果的字符串，则替换成空：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | sed 's/[a-zA-Z]//g'</span></span><br><span class=\"line\">::0:0::/://</span><br><span class=\"line\">::1:1::/://</span><br><span class=\"line\">::2:2::/://</span><br></pre></td></tr></table></figure></li><li><p>为所有行开头添加指定字符串，可以使用<code>sed -r &#39;s/(.*)/xxx:&amp;/&#39;</code>表示，其中<code>&amp;</code>的含义与前面使用的<code>\\1</code>含义相同：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | sed -r 's/^/test:&amp;/'</span></span><br><span class=\"line\"><span class=\"built_in\">test</span>:root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\"><span class=\"built_in\">test</span>:bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\"><span class=\"built_in\">test</span>:daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p>同样也可以在结尾增加内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | sed -r 's/$/&amp;:test/'</span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH:<span class=\"built_in\">test</span></span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin:<span class=\"built_in\">test</span></span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin:<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p><strong>sed</strong>是stream editor的简称上是一个编辑器，但是它是非交互式的流编辑器。</p><p>sed的处理流程如下：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/sed.png\" alt=\"sed处理流程\"></p><ol><li>读入一行内容到模式空间(Pattern Space)</li><li>对模式空间里的内容执行sed命令</li><li>输出模式空间的内容，当输出内容后，模式空间将被清空</li><li>重复以上的操作，直到文件的最后一行。</li></ol>","more":"<hr><h1 id=\"sed命令的用法\"><a href=\"#sed命令的用法\" class=\"headerlink\" title=\"sed命令的用法\"></a><strong>sed</strong>命令的用法</h1><h2 id=\"匹配用法\"><a href=\"#匹配用法\" class=\"headerlink\" title=\"匹配用法\"></a>匹配用法</h2><ul><li><p><code>sed</code>命令可以用来对文件内容进行查找替换，最简单的使用命令方法为<code>sed &#39;/pattern/&#39;p [filename]</code>，其中<code>p</code>表示打印的意思，使用<code>-n</code>参数可以不显示多余的内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -n '/root/'p passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p><code>sed</code>命令同样也支持正则表达式，但是对扩展正则元字符需要使用脱义符脱义，或者使用<code>-r</code>参数：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -n '/o\\+t/'p passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">operator:x:11:0:operator:/rooooot:/sbin/nologin</span><br><span class=\"line\">evobot:x:1002:1002::/home/evobot:/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -nr '/o+t/'p passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">operator:x:11:0:operator:/rooooot:/sbin/nologin</span><br><span class=\"line\">evobot:x:1002:1002::/home/evobot:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p><code>sed</code>除了进行匹配外，还可以打印指定的行，或使用<code>,</code>分割指定行号范围，使用<code>$</code>表示末行：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -n '2'p passwd </span></span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -n '2,5'p passwd </span></span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -n '25,$'p passwd </span></span><br><span class=\"line\">syslog:x:996:994::/home/syslog:/bin/<span class=\"literal\">false</span></span><br><span class=\"line\">centos:x:1000:1000:Cloud User:/home/centos:/bin/BASH</span><br><span class=\"line\">lux:x:1001:1001::/home/lux:/bin/bash</span><br><span class=\"line\">nginx:x:995:993:Nginx web server:/var/lib/nginx:/sbin/nologin</span><br><span class=\"line\">evobot:x:1002:1002::/home/evobot:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p><code>sed -e</code>参数表示在一个表达式内执行多个操作，如打印指定行并匹配指定字符串，多个动作时间使用<code>-e</code>参数，如果多个表达式匹配内容相同，会打印多次：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打印第一行并匹配'evobot'字符串所在的行</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -e '1'p -e '/evobot/'p -n passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">evobot:x:1002:1002::/home/evobot:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p><code>sed</code>可以在匹配时不区分大小写，命令格式为<code>sed -n &#39;/pattern/Ip [filename]&#39;</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -n '/bus/'Ip passwd </span></span><br><span class=\"line\">sync:x:5:0:BUS:/sbin:/bin/sync</span><br><span class=\"line\">dbus:x:81:81:System message bus:/:/sbin/nologi</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"删除用法\"><a href=\"#删除用法\" class=\"headerlink\" title=\"删除用法\"></a>删除用法</h2><ul><li><p><code>sed &#39;n,m&#39;d [file]</code>可以将指定的行<code>n</code>或行数范围<code>n~m</code>行删除，例如对于一个日志文件，只需要指定日期之后的内容，可以先使用<code>grep -n</code>查看指定日期的行号，再删除之前的行：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># grep -n 'Apr 24' secure.log </span></span><br><span class=\"line\">180652:Apr 24 00:23:31 evobot sshd[9431]: Received disconnect from 118.113.33.203 port 11905:11: disconnected by user</span><br><span class=\"line\">180653:Apr 24 00:23:31 evobot sshd[9431]: Disconnected from 118.113.33.203 port 11905</span><br><span class=\"line\">180654:Apr 24 00:23:31 evobot sshd[9429]: pam_unix(sshd:session): session closed <span class=\"keyword\">for</span> user lux</span><br><span class=\"line\">180655:Apr 24 00:23:31 evobot sshd[2268]: Received disconnect from 118.113.33.203 port 11968:11: disconnected by user</span><br><span class=\"line\">180656:Apr 24 00:23:31 evobot sshd[2268]: Disconnected from 118.113.33.203 port 11968</span><br><span class=\"line\">180657:Apr 24 00:23:31 evobot sshd[2266]: pam_unix(sshd:session): session closed <span class=\"keyword\">for</span> user lux</span><br><span class=\"line\">180658:Apr 24 00:23:31 evobot su: pam_unix(su<span class=\"_\">-l</span>:session): session closed <span class=\"keyword\">for</span> user root</span><br><span class=\"line\">180659:Apr 24 04:08:30 evobot sshd[22139]: Did not receive identification string from 183.57.54.43 port 55728</span><br><span class=\"line\">180660:Apr 24 22:24:39 evobot sshd[3396]: Accepted publickey <span class=\"keyword\">for</span> lux from 118.113.33.203 port 8769 ssh2: RSA SHA256:Y7Fo5sjyHH9pIUnCz+uLdIIT/2wmR4lPn3Wh5x8H9O4</span><br><span class=\"line\">180661:Apr 24 22:24:39 evobot sshd[3396]: pam_unix(sshd:session): session opened <span class=\"keyword\">for</span> user lux by (uid=0)</span><br><span class=\"line\">180662:Apr 24 22:25:03 evobot sudo:     lux : TTY=pts/0 ; PWD=/home/lux ; USER=root ; COMMAND=/bin/su -</span><br><span class=\"line\">180663:Apr 24 22:25:03 evobot su: pam_unix(su<span class=\"_\">-l</span>:session): session opened <span class=\"keyword\">for</span> user root by lux(uid=0)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用sed删除前180651行</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed '1,180651'd secure.log </span></span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[9431]: Received disconnect from 118.113.33.203 port 11905:11: disconnected by user</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[9431]: Disconnected from 118.113.33.203 port 11905</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[9429]: pam_unix(sshd:session): session closed <span class=\"keyword\">for</span> user lux</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[2268]: Received disconnect from 118.113.33.203 port 11968:11: disconnected by user</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[2268]: Disconnected from 118.113.33.203 port 11968</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[2266]: pam_unix(sshd:session): session closed <span class=\"keyword\">for</span> user lux</span><br><span class=\"line\">Apr 24 00:23:31 evobot su: pam_unix(su<span class=\"_\">-l</span>:session): session closed <span class=\"keyword\">for</span> user root</span><br><span class=\"line\">Apr 24 04:08:30 evobot sshd[22139]: Did not receive identification string from 183.57.54.43 port 55728</span><br><span class=\"line\">Apr 24 22:24:39 evobot sshd[3396]: Accepted publickey <span class=\"keyword\">for</span> lux from 118.113.33.203 port 8769 ssh2: RSA SHA256:Y7Fo5sjyHH9pIUnCz+uLdIIT/2wmR4lPn3Wh5x8H9O4</span><br><span class=\"line\">Apr 24 22:24:39 evobot sshd[3396]: pam_unix(sshd:session): session opened <span class=\"keyword\">for</span> user lux by (uid=0)</span><br><span class=\"line\">Apr 24 22:25:03 evobot sudo:     lux : TTY=pts/0 ; PWD=/home/lux ; USER=root ; COMMAND=/bin/su -</span><br><span class=\"line\">Apr 24 22:25:03 evobot su: pam_unix(su<span class=\"_\">-l</span>:session): session opened <span class=\"keyword\">for</span> user root by lux(uid=0)</span><br></pre></td></tr></table></figure></li><li><p>上面的删除方式只是将删除结果显示在屏幕上，并没有真正在文件内进行删除操作，使用<code>-i</code>选项可以直接更改文件内容，命令为<code>sed -i &#39;n,m&#39;d [file]</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># wc -l secure.log</span></span><br><span class=\"line\">180663 secure.log</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -i '1,180651'd secure.log</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># wc -l secure.log</span></span><br><span class=\"line\">12 secure.log</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"替换用法\"><a href=\"#替换用法\" class=\"headerlink\" title=\"替换用法\"></a>替换用法</h2><ul><li><p><code>sed</code>命令的替换用法与vim中的替换相似，命令用法为<code>sed s/book/books/g [file]</code>，其中<code>s</code>表示替换，<code>g</code>表示全局替换，不加<code>g</code>表示只替换每行匹配到的第一个关键字；</p></li><li><p>在替换时，也可以指定范围进行替换，命令为<code>sed &#39;n,ms/book/books/g&#39; [file]</code> :</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat secure.log</span></span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[9431]: Received disconnect from 118.113.33.203 port 11905:11: disconnected by user</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[9431]: Disconnected from 118.113.33.203 port 11905</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[9429]: pam_unix(sshd:session): session closed <span class=\"keyword\">for</span> user lux</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed 's/evobot/sedtest/g' secure.log</span></span><br><span class=\"line\">Apr 24 00:23:31 sedtest sshd[9431]: Received disconnect from 118.113.33.203 port 11905:11: disconnected by user</span><br><span class=\"line\">Apr 24 00:23:31 sedtest sshd[9431]: Disconnected from 118.113.33.203 port 11905</span><br><span class=\"line\">Apr 24 00:23:31 sedtest sshd[9429]: pam_unix(sshd:session): session closed <span class=\"keyword\">for</span> user lux</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed '8,$s/evobot/mylinux/g' secure.log</span></span><br><span class=\"line\">Apr 24 00:23:31 evobot su: pam_unix(su<span class=\"_\">-l</span>:session): session closed <span class=\"keyword\">for</span> user root</span><br><span class=\"line\">Apr 24 04:08:30 mylinux sshd[22139]: Did not receive identification string from 183.57.54.43 port 55728</span><br><span class=\"line\">Apr 24 22:24:39 mylinux sshd[3396]: Accepted publickey <span class=\"keyword\">for</span> lux from 118.113.33.203 port 8769 ssh2: RSA SHA256:Y7Fo5sjyHH9pIUnCz+uLdIIT/2wmR4lPn3Wh5x8H9O4</span><br><span class=\"line\">Apr 24 22:24:39 mylinux sshd[3396]: pam_unix(sshd:session): session opened <span class=\"keyword\">for</span> user lux by (uid=0)</span><br><span class=\"line\">Apr 24 22:25:03 mylinux sudo:     lux : TTY=pts/0 ; PWD=/home/lux ; USER=root ; COMMAND=/bin/su -</span><br><span class=\"line\">Apr 24 22:25:03 mylinux su: pam_unix(su<span class=\"_\">-l</span>:session): session opened <span class=\"keyword\">for</span> user root by lux(uid=0)</span><br></pre></td></tr></table></figure></li><li><p>同样的在替换时也可以使用正则表达式进行匹配替换：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 5 secure.log</span></span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[9431]: Received disconnect from 118.113.33.203 port 11905:11: disconnected by user</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[9431]: Disconnected from 118.113.33.203 port 11905</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[9429]: pam_unix(sshd:session): session closed <span class=\"keyword\">for</span> user lux</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[2268]: Received disconnect from 118.113.33.203 port 11968:11: disconnected by user</span><br><span class=\"line\">Apr 24 00:23:31 evobot sshd[2268]: Disconnected from 118.113.33.203 port 11968</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -r '1,5s/[0-9]+.[0-9]+.[0-9]+.[0-9]+/ipaddress/g' secure.log</span></span><br><span class=\"line\">Apr ipaddress evobot sshd[9431]: Received disconnect from ipaddress port ipaddress: disconnected by user</span><br><span class=\"line\">Apr ipaddress evobot sshd[9431]: Disconnected from ipaddress port 11905</span><br><span class=\"line\">Apr ipaddress evobot sshd[9429]: pam_unix(sshd:session): session closed <span class=\"keyword\">for</span> user lux</span><br><span class=\"line\">Apr ipaddress evobot sshd[2268]: Received disconnect from ipaddress port ipaddress: disconnected by user</span><br><span class=\"line\">Apr ipaddress evobot sshd[2268]: Disconnected from ipaddress port 11968</span><br></pre></td></tr></table></figure></li><li><p><code>sed</code>也支持与管道符连用，对管道符前面的命令输出内容进行处理；</p></li><li><p><code>sed</code>可以使用<code>()</code>包裹关键词进行匹配，<code>()</code>匹配到的内容，可以使用<code>\\1</code>这样的形式调用，比如将开头一段和结尾一段字符串进行调换：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | sed -r '1,3s/(\\w+):(.*):([^:]+)/\\3:\\2:\\1/g'\t# \\w表示字符或数字</span></span><br><span class=\"line\">/bin/bash:x:0:0:root:/root:root</span><br><span class=\"line\">/sbin/nologin:x:1:1:bin:/bin:bin</span><br><span class=\"line\">/sbin/nologin:x:2:2:daemon:/sbin:daemon</span><br></pre></td></tr></table></figure></li><li><p><code>sed</code>中如果匹配的内容中包括<code>/</code>，则需要使用转义符<code>\\</code>转义，或者将<code>sed</code>的分隔符换成<code>@</code>、<code>:</code>或<code>|</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | sed -r 's|/[a-z]+/[a-z]+|/home/bin|Ig'</span></span><br><span class=\"line\">root:x:0:0:root:/root:/home/bin</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/home/bin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/home/bin</span><br></pre></td></tr></table></figure></li><li><p>替换时也可以不指定替换结果的字符串，则替换成空：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | sed 's/[a-zA-Z]//g'</span></span><br><span class=\"line\">::0:0::/://</span><br><span class=\"line\">::1:1::/://</span><br><span class=\"line\">::2:2::/://</span><br></pre></td></tr></table></figure></li><li><p>为所有行开头添加指定字符串，可以使用<code>sed -r &#39;s/(.*)/xxx:&amp;/&#39;</code>表示，其中<code>&amp;</code>的含义与前面使用的<code>\\1</code>含义相同：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | sed -r 's/^/test:&amp;/'</span></span><br><span class=\"line\"><span class=\"built_in\">test</span>:root:x:0:0:root:/root:/bin/BASH</span><br><span class=\"line\"><span class=\"built_in\">test</span>:bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\"><span class=\"built_in\">test</span>:daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p>同样也可以在结尾增加内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 3 passwd | sed -r 's/$/&amp;:test/'</span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/BASH:<span class=\"built_in\">test</span></span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin:<span class=\"built_in\">test</span></span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin:<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->"},{"title":"Linux正则表达式——常用操作练习","author":"Evobot","abbrlink":"60aa0a0","date":"2018-05-02T14:44:31.000Z","image":null,"_content":"\n\n\n# **sed**使用练习\n\n1. 把/etc/passwd 复制到/root/test.txt，用sed打印所有行：\n\n   `sed -n '1,$'p passwd`\n\n2. 打印test.txt的3到10行：\n\n   `sed -n '3,10'p passwd`\n\n3. 打印test.txt 中包含 ‘root’ 的行：\n\n   `sed -n '/root/'p passwd`\n\n4. 删除test.txt 的15行以及以后所有行：\n\n   `sed -n '15,$'p passwd`\t\n\n5. 删除test.txt中包含 ‘bash’ 的行：\n\n   `sed -i '/bash/'d passwd`\n\n6. 替换test.txt 中 ‘root’ 为 ‘toor’：\n\n   `sed s/root/toor/g test.txt`\n\n7. 替换test.txt中 ‘/sbin/nologin’ 为 ‘/bin/login’：\n\n   `sed s#/sbin/nologin#/bin/login#g test.txt`\n\n8. 删除test.txt中5到10行中所有的数字：\n\n   `sed -r s#[0-9]##g test.txt`\n\n9. 删除test.txt 中所有特殊字符（除了数字以及大小写字母）：\n\n   `sed -r s#[^0-9a-zA-Z]##g test.txt`\n\n10. 把test.txt中第一个单词和最后一个单词调换位置：\n\n    `sed 's/\\(^[a-zA-Z][a-zA-Z]*\\)\\([^a-zA-Z].*\\)\\([^a-zA-Z]\\)\\([a-zA-Z][a-zA-Z]*$\\)/\\4\\2\\3\\1/' test.txt`\n\n11. 把test.txt中出现的第一个数字和最后一个单词替换位置:\n\n    `sed -r 's/([0-9]+)(.*$)/\\2\\1/' test.txt `\n\n12. 把test.txt 中第一个数字移动到行末尾：\n\n    `sed -r 's/([0-9]+)(.*$)/\\2\\1/' test.txt `\n\n13. 在test.txt  20行到末行最前面加 ‘aaa:’：\n\n    `sed -r 's/([0-9]+)(.*$)/\\2\\1/' test.txt `\n\n## 扩展用法\n\n### 打印文件中特定的某行到某行之间的内容\n\n- 文件test内容如下：\n\n  > ert\n  > fff\n  > **\n  > [abcfd]\n  > 123\n  > 324\n  > 444\n  > [rty]\n  > **\n  > fgfgf\n\n- 需要截取以下几行内容：\n\n  > [abcfd]\n  > 123\n  > 324\n  > 444\n  > [rty]\n\n- 使用`sed`命令，用法为`sed -nr '/\\[abcfd\\]/,/\\[rty\\]/'p test.txt`。\n\n### sed转换大小写字母\n\n在`sed`中，使用`\\u`表示大写，`\\l`表示小写。\n\n1. 将每个单词第一个小写字母转换为大写：\n\n   ```bash\n   [root@evobot ~]# head -n3 1.log | sed 's/\\b[a-z]/\\u&/g'\n   13:08:24 2018 123 45sdf Nsifud Ninfd 200 12000 Uavdfiya\n   13:08:24 2018 123 45sdf Nsifud Ninfd 200 11000 Uavdfiya\n   13:08:24 2018 123 45sdf Nsifud Ninfd 230 12000 Uavdfiya\n   ```\n\n2. 将所有小写变成大写：\n\n   ```\n   [root@evobot ~]# head -n3 1.log | sed 's/[a-z]/\\u&/g'\n   13:08:24 2018 123 45SDF NSIFUD NINFD 200 12000 UAVDFIYA\n   13:08:24 2018 123 45SDF NSIFUD NINFD 200 11000 UAVDFIYA\n   13:08:24 2018 123 45SDF NSIFUD NINFD 230 12000 UAVDFIYA\n   ```\n\n3. 大写转换为小写：\n\n   ```bash\n   [root@evobot ~]# sed 's/[A-Z]/\\l&/g' 1.log \n   13:08:24 2018 123 45sdf nsifud ninfd 200 12000 uavdfiya\n   13:08:24 2018 123 45sdf nsifud ninfd 200 11000 uavdfiya\n   13:08:24 2018 123 45sdf tvubhijn ninfd 230 12000 uavdfiya\n   13:08:24 2018 123 45sdf nsifud ninfd 200 11897 uavdfiya\n   ```\n\n### sed在文件某一行末尾添加数字\n\n```bash\n[root@evobot ~]# sed -r 's/(.*)/\\1 123/' 1.log \n13:08:24 2018 123 45sdf nsifud ninfd 200 12000 uavdfiya 123\n13:08:24 2018 123 45sdf nsifud ninfd 200 11000 uavdfiya 123\n13:08:24 2018 123 45sdf TVUBHIJN ninfd 230 12000 uavdfiya 123\n13:08:24 2018 123 45sdf nsifud ninfd 200 11897 uavdfiya 123\n\n[root@evobot ~]# sed -r 's/(^s.*)/\\1:123/' 1.txt \nzx cc vv\nsai amsomd sad:123\n```\n\n### sed删除某关键字的下一行到最后一行\n\n```bash\n[root@test200 ~]# cat test\na\nb\nc\nd\ne\nf\n\n[root@test200 ~]# sed '/c/{p;:a;N;$!ba;d}' test\na\nb\nc\n```\n\n- 定义一个标签a，匹配c，然后N把下一行加到模式空间里，匹配最后一行时，才退出标签循环，然后命令d，把这个模式空间里的内容全部清除。\n\n  if 匹配\"c\"\n  :a\n  追加下一行\n  if 不匹配\"$\"\n  goto a\n  最后退出循环，d命令删除。\n\n### sed打印指定范围包含某个字符串的行\n\n- 用法为`sed  -n '1,100{/abc/p}'  1.txt`：\n\n  ```bash\n  [root@evobot ~]# sed -n '1,3{/110/p}' 1.log \n  13:08:24 2018 123 45sdf nsifud ninfd 200 11000 uavdfiya\n  ```\n\n---\n\n# **awk**使用练习\n\n1. 用awk 打印整个test.txt （以下操作都是用awk工具实现，针对test.txt）:\n\n   `awk '{print $0}' test.txt`\n\n2. 查找所有包含 ‘bash’ 的行:\n\n   `awk '/bash/' test.txt`\n\n3. 用 ‘:’ 作为分隔符，查找第三段等于0的行:\n\n   `awk -F ':' '$3==0 {print $0}' test.txt`\n\n4. 用 ‘:’ 作为分隔符，查找第一段为 ‘root’ 的行，并把该段的 ‘root’ 换成 ‘toor’ (可以连同sed一起使用):\n\n   `awk -F ':' '$1==\"root\"' test.txt | sed s/root/toor/g`\n\n5. 用 ‘:’ 作为分隔符，打印最后一段:\n\n   `awk -F ':' '{print $NF}' test.txt`\n\n6. 打印行数大于20的所有行:\n\n   `wk '{if (NR>20) {print $0}}' test.txt`\n\n7. 用 ‘:’ 作为分隔符，打印所有第三段小于第四段的行:\n\n   `awk -F ':' '{if ($3<$4) {print $0}}' test.txt`\n\n8. 用 ‘:’ 作为分隔符，打印第一段以及最后一段，并且中间用 ‘@’ 连接 （例如，第一行应该是这样的形式 ['root@/bin/bash](mailto:'root%40/bin/bash)‘ ）:\n\n   `awk -F ':' '{OFS=\"@\"} {print $1,$NF}' test.txt`\n\n9. 用 ‘:’ 作为分隔符，把整个文档的第四段相加，求和:\n\n   `awk -F ':' '{(sum=sum+$4)}; END {print sum}' test.txt`。\n\n---\n\n# 相关练习\n\n1. 如何把 /etc/passwd 中用户uid 大于500 的行给打印出来？\n\n   `awk -F ':' '{if ($3>500) {print $0}}' /etc/passwd`\n\n2. awk中 NR，NF两个变量表示什么含义？`awk -F ':' '{print $NR}' /etc/passwd`  会打印出什么结果出来？\n\n   `NR`表示行，`NF`表示分段，`wk -F ':' '{print $NR}' /etc/passwd`表示打印和行数相等的分段，超出分段后打印为空。\n\n3. 用grep把1.txt文档中包含'abc'或者‘123’的行过滤出来，并在过滤出来的行前面加上行号.\n\n   `grep -n -e 'abc' -e '123' 1.txt`\n\n   `grep -E -n 'abc|123' 1.txt`\n\n4. grep  -v '^$' 1.txt   这样会过滤出哪些行？\n\n   A: 会过滤所有行，即打印文件内容\n\n5. '.'   '\\*' 和 '.*'   分别表示什么含义？'+'和'?'表示什么含义，这五个符号是否可以在grep中使用，是否可以在egrep、sed以及awk中使用？\n\n   A: '.'表示除换行符外的任意字符，'\\*'表示前一个字符出现0次或任意多次，'.*'表示任意字符出现任意次；这几个字符均可以在`grep`、`egrep`、`sed`和`awk`中使用。\n\n6. grep 里面用到一个 {} ，它用在什么情况下？\n\n   A：用在使用正则匹配前面的字符出现指定次数时。\n\n7. sed有一个选项，可以直接更改文本文件，是哪个选项？\n\n   A：`-i`选项，例如`sed -i s/123/112233/g 1.txt`\n\n8. `sed -i 's/.*ie//;s/[\"|&].*//' file`  这条命令表示什么操作呢？\n\n   A：表示在file中将`ie`及其前面所以字符替换为空并且将`\"`双引号和`&`号及其后面的所以字符替换为空。\n\n9. 如何删除一个文档中的所有数字或者字母？\n\n   `sed -r 's/[0-9a-zA-Z]//g' 1.txt `\n\n10. 截取日志1.log的第一段(以空格为分隔符), 按数字排序、然后去重，但是需要保留重复的数量如何做？\n\n    `awk '{print $1}' 1.log | sort -n | uniq -c`\n\n11. 使用awk过滤出1.log中第7段(空格分隔)为'200' 并且第8段为'11897'的行。\n\n    `awk '$7==200 && $8==11897' 1.log`\n\n12. 请比较这两个命令的异同： `grep -v '^[0-9]' 1.txt` 和`grep  '^[^0-9]' 1.txt`：\n\n13. awk中的$0表示什么？为什么以下两条命令的$0结果不一致呢？ `awk -F ':' '{print $0}' 1.txt  和 awk -F ':' '$7=1 {print $0}' 1.txt`\n\n14. 使用grep过滤某个关键词时，如何把包含关键词的行连同上面一行打印出来，那下面一行呢？同时上面和下面都打印出来呢？\n\n    A：打印上面一行使用`-B 1`，打印下面一行使用`A 1`，同时打印上下行使用`-C 1`。\n\n---","source":"_posts/Linux正则表达式—常用操作练习.md","raw":"---\ntitle: Linux正则表达式——常用操作练习\nauthor: Evobot\nabbrlink: 60aa0a0\ndate: 2018-05-02 22:44:31\ncategories: Centos7\ntags: [Linux, Centos]\nimage:\n---\n\n\n\n# **sed**使用练习\n\n1. 把/etc/passwd 复制到/root/test.txt，用sed打印所有行：\n\n   `sed -n '1,$'p passwd`\n\n2. 打印test.txt的3到10行：\n\n   `sed -n '3,10'p passwd`\n\n3. 打印test.txt 中包含 ‘root’ 的行：\n\n   `sed -n '/root/'p passwd`\n\n4. 删除test.txt 的15行以及以后所有行：\n\n   `sed -n '15,$'p passwd`\t\n\n5. 删除test.txt中包含 ‘bash’ 的行：\n\n   `sed -i '/bash/'d passwd`\n\n6. 替换test.txt 中 ‘root’ 为 ‘toor’：\n\n   `sed s/root/toor/g test.txt`\n\n7. 替换test.txt中 ‘/sbin/nologin’ 为 ‘/bin/login’：\n\n   `sed s#/sbin/nologin#/bin/login#g test.txt`\n\n8. 删除test.txt中5到10行中所有的数字：\n\n   `sed -r s#[0-9]##g test.txt`\n\n9. 删除test.txt 中所有特殊字符（除了数字以及大小写字母）：\n\n   `sed -r s#[^0-9a-zA-Z]##g test.txt`\n\n10. 把test.txt中第一个单词和最后一个单词调换位置：\n\n    `sed 's/\\(^[a-zA-Z][a-zA-Z]*\\)\\([^a-zA-Z].*\\)\\([^a-zA-Z]\\)\\([a-zA-Z][a-zA-Z]*$\\)/\\4\\2\\3\\1/' test.txt`\n\n11. 把test.txt中出现的第一个数字和最后一个单词替换位置:\n\n    `sed -r 's/([0-9]+)(.*$)/\\2\\1/' test.txt `\n\n12. 把test.txt 中第一个数字移动到行末尾：\n\n    `sed -r 's/([0-9]+)(.*$)/\\2\\1/' test.txt `\n\n13. 在test.txt  20行到末行最前面加 ‘aaa:’：\n\n    `sed -r 's/([0-9]+)(.*$)/\\2\\1/' test.txt `\n\n## 扩展用法\n\n### 打印文件中特定的某行到某行之间的内容\n\n- 文件test内容如下：\n\n  > ert\n  > fff\n  > **\n  > [abcfd]\n  > 123\n  > 324\n  > 444\n  > [rty]\n  > **\n  > fgfgf\n\n- 需要截取以下几行内容：\n\n  > [abcfd]\n  > 123\n  > 324\n  > 444\n  > [rty]\n\n- 使用`sed`命令，用法为`sed -nr '/\\[abcfd\\]/,/\\[rty\\]/'p test.txt`。\n\n### sed转换大小写字母\n\n在`sed`中，使用`\\u`表示大写，`\\l`表示小写。\n\n1. 将每个单词第一个小写字母转换为大写：\n\n   ```bash\n   [root@evobot ~]# head -n3 1.log | sed 's/\\b[a-z]/\\u&/g'\n   13:08:24 2018 123 45sdf Nsifud Ninfd 200 12000 Uavdfiya\n   13:08:24 2018 123 45sdf Nsifud Ninfd 200 11000 Uavdfiya\n   13:08:24 2018 123 45sdf Nsifud Ninfd 230 12000 Uavdfiya\n   ```\n\n2. 将所有小写变成大写：\n\n   ```\n   [root@evobot ~]# head -n3 1.log | sed 's/[a-z]/\\u&/g'\n   13:08:24 2018 123 45SDF NSIFUD NINFD 200 12000 UAVDFIYA\n   13:08:24 2018 123 45SDF NSIFUD NINFD 200 11000 UAVDFIYA\n   13:08:24 2018 123 45SDF NSIFUD NINFD 230 12000 UAVDFIYA\n   ```\n\n3. 大写转换为小写：\n\n   ```bash\n   [root@evobot ~]# sed 's/[A-Z]/\\l&/g' 1.log \n   13:08:24 2018 123 45sdf nsifud ninfd 200 12000 uavdfiya\n   13:08:24 2018 123 45sdf nsifud ninfd 200 11000 uavdfiya\n   13:08:24 2018 123 45sdf tvubhijn ninfd 230 12000 uavdfiya\n   13:08:24 2018 123 45sdf nsifud ninfd 200 11897 uavdfiya\n   ```\n\n### sed在文件某一行末尾添加数字\n\n```bash\n[root@evobot ~]# sed -r 's/(.*)/\\1 123/' 1.log \n13:08:24 2018 123 45sdf nsifud ninfd 200 12000 uavdfiya 123\n13:08:24 2018 123 45sdf nsifud ninfd 200 11000 uavdfiya 123\n13:08:24 2018 123 45sdf TVUBHIJN ninfd 230 12000 uavdfiya 123\n13:08:24 2018 123 45sdf nsifud ninfd 200 11897 uavdfiya 123\n\n[root@evobot ~]# sed -r 's/(^s.*)/\\1:123/' 1.txt \nzx cc vv\nsai amsomd sad:123\n```\n\n### sed删除某关键字的下一行到最后一行\n\n```bash\n[root@test200 ~]# cat test\na\nb\nc\nd\ne\nf\n\n[root@test200 ~]# sed '/c/{p;:a;N;$!ba;d}' test\na\nb\nc\n```\n\n- 定义一个标签a，匹配c，然后N把下一行加到模式空间里，匹配最后一行时，才退出标签循环，然后命令d，把这个模式空间里的内容全部清除。\n\n  if 匹配\"c\"\n  :a\n  追加下一行\n  if 不匹配\"$\"\n  goto a\n  最后退出循环，d命令删除。\n\n### sed打印指定范围包含某个字符串的行\n\n- 用法为`sed  -n '1,100{/abc/p}'  1.txt`：\n\n  ```bash\n  [root@evobot ~]# sed -n '1,3{/110/p}' 1.log \n  13:08:24 2018 123 45sdf nsifud ninfd 200 11000 uavdfiya\n  ```\n\n---\n\n# **awk**使用练习\n\n1. 用awk 打印整个test.txt （以下操作都是用awk工具实现，针对test.txt）:\n\n   `awk '{print $0}' test.txt`\n\n2. 查找所有包含 ‘bash’ 的行:\n\n   `awk '/bash/' test.txt`\n\n3. 用 ‘:’ 作为分隔符，查找第三段等于0的行:\n\n   `awk -F ':' '$3==0 {print $0}' test.txt`\n\n4. 用 ‘:’ 作为分隔符，查找第一段为 ‘root’ 的行，并把该段的 ‘root’ 换成 ‘toor’ (可以连同sed一起使用):\n\n   `awk -F ':' '$1==\"root\"' test.txt | sed s/root/toor/g`\n\n5. 用 ‘:’ 作为分隔符，打印最后一段:\n\n   `awk -F ':' '{print $NF}' test.txt`\n\n6. 打印行数大于20的所有行:\n\n   `wk '{if (NR>20) {print $0}}' test.txt`\n\n7. 用 ‘:’ 作为分隔符，打印所有第三段小于第四段的行:\n\n   `awk -F ':' '{if ($3<$4) {print $0}}' test.txt`\n\n8. 用 ‘:’ 作为分隔符，打印第一段以及最后一段，并且中间用 ‘@’ 连接 （例如，第一行应该是这样的形式 ['root@/bin/bash](mailto:'root%40/bin/bash)‘ ）:\n\n   `awk -F ':' '{OFS=\"@\"} {print $1,$NF}' test.txt`\n\n9. 用 ‘:’ 作为分隔符，把整个文档的第四段相加，求和:\n\n   `awk -F ':' '{(sum=sum+$4)}; END {print sum}' test.txt`。\n\n---\n\n# 相关练习\n\n1. 如何把 /etc/passwd 中用户uid 大于500 的行给打印出来？\n\n   `awk -F ':' '{if ($3>500) {print $0}}' /etc/passwd`\n\n2. awk中 NR，NF两个变量表示什么含义？`awk -F ':' '{print $NR}' /etc/passwd`  会打印出什么结果出来？\n\n   `NR`表示行，`NF`表示分段，`wk -F ':' '{print $NR}' /etc/passwd`表示打印和行数相等的分段，超出分段后打印为空。\n\n3. 用grep把1.txt文档中包含'abc'或者‘123’的行过滤出来，并在过滤出来的行前面加上行号.\n\n   `grep -n -e 'abc' -e '123' 1.txt`\n\n   `grep -E -n 'abc|123' 1.txt`\n\n4. grep  -v '^$' 1.txt   这样会过滤出哪些行？\n\n   A: 会过滤所有行，即打印文件内容\n\n5. '.'   '\\*' 和 '.*'   分别表示什么含义？'+'和'?'表示什么含义，这五个符号是否可以在grep中使用，是否可以在egrep、sed以及awk中使用？\n\n   A: '.'表示除换行符外的任意字符，'\\*'表示前一个字符出现0次或任意多次，'.*'表示任意字符出现任意次；这几个字符均可以在`grep`、`egrep`、`sed`和`awk`中使用。\n\n6. grep 里面用到一个 {} ，它用在什么情况下？\n\n   A：用在使用正则匹配前面的字符出现指定次数时。\n\n7. sed有一个选项，可以直接更改文本文件，是哪个选项？\n\n   A：`-i`选项，例如`sed -i s/123/112233/g 1.txt`\n\n8. `sed -i 's/.*ie//;s/[\"|&].*//' file`  这条命令表示什么操作呢？\n\n   A：表示在file中将`ie`及其前面所以字符替换为空并且将`\"`双引号和`&`号及其后面的所以字符替换为空。\n\n9. 如何删除一个文档中的所有数字或者字母？\n\n   `sed -r 's/[0-9a-zA-Z]//g' 1.txt `\n\n10. 截取日志1.log的第一段(以空格为分隔符), 按数字排序、然后去重，但是需要保留重复的数量如何做？\n\n    `awk '{print $1}' 1.log | sort -n | uniq -c`\n\n11. 使用awk过滤出1.log中第7段(空格分隔)为'200' 并且第8段为'11897'的行。\n\n    `awk '$7==200 && $8==11897' 1.log`\n\n12. 请比较这两个命令的异同： `grep -v '^[0-9]' 1.txt` 和`grep  '^[^0-9]' 1.txt`：\n\n13. awk中的$0表示什么？为什么以下两条命令的$0结果不一致呢？ `awk -F ':' '{print $0}' 1.txt  和 awk -F ':' '$7=1 {print $0}' 1.txt`\n\n14. 使用grep过滤某个关键词时，如何把包含关键词的行连同上面一行打印出来，那下面一行呢？同时上面和下面都打印出来呢？\n\n    A：打印上面一行使用`-B 1`，打印下面一行使用`A 1`，同时打印上下行使用`-C 1`。\n\n---","slug":"Linux正则表达式—常用操作练习","published":1,"updated":"2018-06-02T13:01:29.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazby002nu1jx4yyvt65y","content":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><h1 id=\"sed使用练习\"><a href=\"#sed使用练习\" class=\"headerlink\" title=\"sed使用练习\"></a><strong>sed</strong>使用练习</h1><ol><li><p>把/etc/passwd 复制到/root/test.txt，用sed打印所有行：</p><p><code>sed -n &#39;1,$&#39;p passwd</code></p></li><li><p>打印test.txt的3到10行：</p><p><code>sed -n &#39;3,10&#39;p passwd</code></p></li><li><p>打印test.txt 中包含 ‘root’ 的行：</p><p><code>sed -n &#39;/root/&#39;p passwd</code></p></li><li><p>删除test.txt 的15行以及以后所有行：</p><p><code>sed -n &#39;15,$&#39;p passwd</code></p></li><li><p>删除test.txt中包含 ‘bash’ 的行：</p><p><code>sed -i &#39;/bash/&#39;d passwd</code></p></li><li><p>替换test.txt 中 ‘root’ 为 ‘toor’：</p><p><code>sed s/root/toor/g test.txt</code></p></li><li><p>替换test.txt中 ‘/sbin/nologin’ 为 ‘/bin/login’：</p><p><code>sed s#/sbin/nologin#/bin/login#g test.txt</code></p></li><li><p>删除test.txt中5到10行中所有的数字：</p><p><code>sed -r s#[0-9]##g test.txt</code></p></li><li><p>删除test.txt 中所有特殊字符（除了数字以及大小写字母）：</p><p><code>sed -r s#[^0-9a-zA-Z]##g test.txt</code></p></li><li><p>把test.txt中第一个单词和最后一个单词调换位置：</p><p><code>sed &#39;s/\\(^[a-zA-Z][a-zA-Z]*\\)\\([^a-zA-Z].*\\)\\([^a-zA-Z]\\)\\([a-zA-Z][a-zA-Z]*$\\)/\\4\\2\\3\\1/&#39; test.txt</code></p></li><li><p>把test.txt中出现的第一个数字和最后一个单词替换位置:</p><p><code>sed -r &#39;s/([0-9]+)(.*$)/\\2\\1/&#39; test.txt</code></p></li><li><p>把test.txt 中第一个数字移动到行末尾：</p><p><code>sed -r &#39;s/([0-9]+)(.*$)/\\2\\1/&#39; test.txt</code></p></li><li><p>在test.txt 20行到末行最前面加 ‘aaa:’：</p><p><code>sed -r &#39;s/([0-9]+)(.*$)/\\2\\1/&#39; test.txt</code></p></li></ol><h2 id=\"扩展用法\"><a href=\"#扩展用法\" class=\"headerlink\" title=\"扩展用法\"></a>扩展用法</h2><h3 id=\"打印文件中特定的某行到某行之间的内容\"><a href=\"#打印文件中特定的某行到某行之间的内容\" class=\"headerlink\" title=\"打印文件中特定的某行到某行之间的内容\"></a>打印文件中特定的某行到某行之间的内容</h3><ul><li><p>文件test内容如下：</p><blockquote><p>ert<br>fff<br><strong><br>[abcfd]<br>123<br>324<br>444<br>[rty]</strong><br>fgfgf</p></blockquote></li><li><p>需要截取以下几行内容：</p><blockquote><p>[abcfd]<br>123<br>324<br>444<br>[rty]</p></blockquote></li><li><p>使用<code>sed</code>命令，用法为<code>sed -nr &#39;/\\[abcfd\\]/,/\\[rty\\]/&#39;p test.txt</code>。</p></li></ul><h3 id=\"sed转换大小写字母\"><a href=\"#sed转换大小写字母\" class=\"headerlink\" title=\"sed转换大小写字母\"></a>sed转换大小写字母</h3><p>在<code>sed</code>中，使用<code>\\u</code>表示大写，<code>\\l</code>表示小写。</p><ol><li><p>将每个单词第一个小写字母转换为大写：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n3 1.log | sed 's/\\b[a-z]/\\u&amp;/g'</span></span><br><span class=\"line\">13:08:24 2018 123 45sdf Nsifud Ninfd 200 12000 Uavdfiya</span><br><span class=\"line\">13:08:24 2018 123 45sdf Nsifud Ninfd 200 11000 Uavdfiya</span><br><span class=\"line\">13:08:24 2018 123 45sdf Nsifud Ninfd 230 12000 Uavdfiya</span><br></pre></td></tr></table></figure></li><li><p>将所有小写变成大写：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]# head -n3 1.log | sed &apos;s/[a-z]/\\u&amp;/g&apos;</span><br><span class=\"line\">13:08:24 2018 123 45SDF NSIFUD NINFD 200 12000 UAVDFIYA</span><br><span class=\"line\">13:08:24 2018 123 45SDF NSIFUD NINFD 200 11000 UAVDFIYA</span><br><span class=\"line\">13:08:24 2018 123 45SDF NSIFUD NINFD 230 12000 UAVDFIYA</span><br></pre></td></tr></table></figure></li><li><p>大写转换为小写：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed 's/[A-Z]/\\l&amp;/g' 1.log </span></span><br><span class=\"line\">13:08:24 2018 123 45sdf nsifud ninfd 200 12000 uavdfiya</span><br><span class=\"line\">13:08:24 2018 123 45sdf nsifud ninfd 200 11000 uavdfiya</span><br><span class=\"line\">13:08:24 2018 123 45sdf tvubhijn ninfd 230 12000 uavdfiya</span><br><span class=\"line\">13:08:24 2018 123 45sdf nsifud ninfd 200 11897 uavdfiya</span><br></pre></td></tr></table></figure></li></ol><h3 id=\"sed在文件某一行末尾添加数字\"><a href=\"#sed在文件某一行末尾添加数字\" class=\"headerlink\" title=\"sed在文件某一行末尾添加数字\"></a>sed在文件某一行末尾添加数字</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -r 's/(.*)/\\1 123/' 1.log </span></span><br><span class=\"line\">13:08:24 2018 123 45sdf nsifud ninfd 200 12000 uavdfiya 123</span><br><span class=\"line\">13:08:24 2018 123 45sdf nsifud ninfd 200 11000 uavdfiya 123</span><br><span class=\"line\">13:08:24 2018 123 45sdf TVUBHIJN ninfd 230 12000 uavdfiya 123</span><br><span class=\"line\">13:08:24 2018 123 45sdf nsifud ninfd 200 11897 uavdfiya 123</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -r 's/(^s.*)/\\1:123/' 1.txt </span></span><br><span class=\"line\">zx cc vv</span><br><span class=\"line\">sai amsomd sad:123</span><br></pre></td></tr></table></figure><h3 id=\"sed删除某关键字的下一行到最后一行\"><a href=\"#sed删除某关键字的下一行到最后一行\" class=\"headerlink\" title=\"sed删除某关键字的下一行到最后一行\"></a>sed删除某关键字的下一行到最后一行</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@test200 ~]<span class=\"comment\"># cat test</span></span><br><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">c</span><br><span class=\"line\">d</span><br><span class=\"line\">e</span><br><span class=\"line\">f</span><br><span class=\"line\"></span><br><span class=\"line\">[root@test200 ~]<span class=\"comment\"># sed '/c/&#123;p;:a;N;$!ba;d&#125;' test</span></span><br><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">c</span><br></pre></td></tr></table></figure><ul><li><p>定义一个标签a，匹配c，然后N把下一行加到模式空间里，匹配最后一行时，才退出标签循环，然后命令d，把这个模式空间里的内容全部清除。</p><p>if 匹配”c”<br>:a<br>追加下一行<br>if 不匹配”$”<br>goto a<br>最后退出循环，d命令删除。</p></li></ul><h3 id=\"sed打印指定范围包含某个字符串的行\"><a href=\"#sed打印指定范围包含某个字符串的行\" class=\"headerlink\" title=\"sed打印指定范围包含某个字符串的行\"></a>sed打印指定范围包含某个字符串的行</h3><ul><li><p>用法为<code>sed -n &#39;1,100{/abc/p}&#39; 1.txt</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -n '1,3&#123;/110/p&#125;' 1.log </span></span><br><span class=\"line\">13:08:24 2018 123 45sdf nsifud ninfd 200 11000 uavdfiya</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id=\"awk使用练习\"><a href=\"#awk使用练习\" class=\"headerlink\" title=\"awk使用练习\"></a><strong>awk</strong>使用练习</h1><ol><li><p>用awk 打印整个test.txt （以下操作都是用awk工具实现，针对test.txt）:</p><p><code>awk &#39;{print $0}&#39; test.txt</code></p></li><li><p>查找所有包含 ‘bash’ 的行:</p><p><code>awk &#39;/bash/&#39; test.txt</code></p></li><li><p>用 ‘:’ 作为分隔符，查找第三段等于0的行:</p><p><code>awk -F &#39;:&#39; &#39;$3==0 {print $0}&#39; test.txt</code></p></li><li><p>用 ‘:’ 作为分隔符，查找第一段为 ‘root’ 的行，并把该段的 ‘root’ 换成 ‘toor’ (可以连同sed一起使用):</p><p><code>awk -F &#39;:&#39; &#39;$1==&quot;root&quot;&#39; test.txt | sed s/root/toor/g</code></p></li><li><p>用 ‘:’ 作为分隔符，打印最后一段:</p><p><code>awk -F &#39;:&#39; &#39;{print $NF}&#39; test.txt</code></p></li><li><p>打印行数大于20的所有行:</p><p><code>wk &#39;{if (NR&gt;20) {print $0}}&#39; test.txt</code></p></li><li><p>用 ‘:’ 作为分隔符，打印所有第三段小于第四段的行:</p><p><code>awk -F &#39;:&#39; &#39;{if ($3&lt;$4) {print $0}}&#39; test.txt</code></p></li><li><p>用 ‘:’ 作为分隔符，打印第一段以及最后一段，并且中间用 ‘@’ 连接 （例如，第一行应该是这样的形式 <a href=\"mailto:&#39;root%40/bin/bash\" target=\"_blank\" rel=\"noopener\">‘root@/bin/bash</a>‘ ）:</p><p><code>awk -F &#39;:&#39; &#39;{OFS=&quot;@&quot;} {print $1,$NF}&#39; test.txt</code></p></li><li><p>用 ‘:’ 作为分隔符，把整个文档的第四段相加，求和:</p><p><code>awk -F &#39;:&#39; &#39;{(sum=sum+$4)}; END {print sum}&#39; test.txt</code>。</p></li></ol><hr><h1 id=\"相关练习\"><a href=\"#相关练习\" class=\"headerlink\" title=\"相关练习\"></a>相关练习</h1><ol><li><p>如何把 /etc/passwd 中用户uid 大于500 的行给打印出来？</p><p><code>awk -F &#39;:&#39; &#39;{if ($3&gt;500) {print $0}}&#39; /etc/passwd</code></p></li><li><p>awk中 NR，NF两个变量表示什么含义？<code>awk -F &#39;:&#39; &#39;{print $NR}&#39; /etc/passwd</code> 会打印出什么结果出来？</p><p><code>NR</code>表示行，<code>NF</code>表示分段，<code>wk -F &#39;:&#39; &#39;{print $NR}&#39; /etc/passwd</code>表示打印和行数相等的分段，超出分段后打印为空。</p></li><li><p>用grep把1.txt文档中包含’abc’或者‘123’的行过滤出来，并在过滤出来的行前面加上行号.</p><p><code>grep -n -e &#39;abc&#39; -e &#39;123&#39; 1.txt</code></p><p><code>grep -E -n &#39;abc|123&#39; 1.txt</code></p></li><li><p>grep -v ‘^$’ 1.txt 这样会过滤出哪些行？</p><p>A: 会过滤所有行，即打印文件内容</p></li><li><p>‘.’ ‘*‘ 和 ‘.*’ 分别表示什么含义？’+’和’?’表示什么含义，这五个符号是否可以在grep中使用，是否可以在egrep、sed以及awk中使用？</p><p>A: ‘.’表示除换行符外的任意字符，’*‘表示前一个字符出现0次或任意多次，’.*’表示任意字符出现任意次；这几个字符均可以在<code>grep</code>、<code>egrep</code>、<code>sed</code>和<code>awk</code>中使用。</p></li><li><p>grep 里面用到一个 {} ，它用在什么情况下？</p><p>A：用在使用正则匹配前面的字符出现指定次数时。</p></li><li><p>sed有一个选项，可以直接更改文本文件，是哪个选项？</p><p>A：<code>-i</code>选项，例如<code>sed -i s/123/112233/g 1.txt</code></p></li><li><p><code>sed -i &#39;s/.*ie//;s/[&quot;|&amp;].*//&#39; file</code> 这条命令表示什么操作呢？</p><p>A：表示在file中将<code>ie</code>及其前面所以字符替换为空并且将<code>&quot;</code>双引号和<code>&amp;</code>号及其后面的所以字符替换为空。</p></li><li><p>如何删除一个文档中的所有数字或者字母？</p><p><code>sed -r &#39;s/[0-9a-zA-Z]//g&#39; 1.txt</code></p></li><li><p>截取日志1.log的第一段(以空格为分隔符), 按数字排序、然后去重，但是需要保留重复的数量如何做？</p><p><code>awk &#39;{print $1}&#39; 1.log | sort -n | uniq -c</code></p></li><li><p>使用awk过滤出1.log中第7段(空格分隔)为’200’ 并且第8段为’11897’的行。</p><p><code>awk &#39;$7==200 &amp;&amp; $8==11897&#39; 1.log</code></p></li><li><p>请比较这两个命令的异同： <code>grep -v &#39;^[0-9]&#39; 1.txt</code> 和<code>grep &#39;^[^0-9]&#39; 1.txt</code>：</p></li><li><p>awk中的$0表示什么？为什么以下两条命令的$0结果不一致呢？ <code>awk -F &#39;:&#39; &#39;{print $0}&#39; 1.txt 和 awk -F &#39;:&#39; &#39;$7=1 {print $0}&#39; 1.txt</code></p></li><li><p>使用grep过滤某个关键词时，如何把包含关键词的行连同上面一行打印出来，那下面一行呢？同时上面和下面都打印出来呢？</p><p>A：打印上面一行使用<code>-B 1</code>，打印下面一行使用<code>A 1</code>，同时打印上下行使用<code>-C 1</code>。</p></li></ol><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><h1 id=\"sed使用练习\"><a href=\"#sed使用练习\" class=\"headerlink\" title=\"sed使用练习\"></a><strong>sed</strong>使用练习</h1><ol><li><p>把/etc/passwd 复制到/root/test.txt，用sed打印所有行：</p><p><code>sed -n &#39;1,$&#39;p passwd</code></p></li><li><p>打印test.txt的3到10行：</p><p><code>sed -n &#39;3,10&#39;p passwd</code></p></li><li><p>打印test.txt 中包含 ‘root’ 的行：</p><p><code>sed -n &#39;/root/&#39;p passwd</code></p></li><li><p>删除test.txt 的15行以及以后所有行：</p><p><code>sed -n &#39;15,$&#39;p passwd</code></p></li><li><p>删除test.txt中包含 ‘bash’ 的行：</p><p><code>sed -i &#39;/bash/&#39;d passwd</code></p></li><li><p>替换test.txt 中 ‘root’ 为 ‘toor’：</p><p><code>sed s/root/toor/g test.txt</code></p></li><li><p>替换test.txt中 ‘/sbin/nologin’ 为 ‘/bin/login’：</p><p><code>sed s#/sbin/nologin#/bin/login#g test.txt</code></p></li><li><p>删除test.txt中5到10行中所有的数字：</p><p><code>sed -r s#[0-9]##g test.txt</code></p></li><li><p>删除test.txt 中所有特殊字符（除了数字以及大小写字母）：</p><p><code>sed -r s#[^0-9a-zA-Z]##g test.txt</code></p></li><li><p>把test.txt中第一个单词和最后一个单词调换位置：</p><p><code>sed &#39;s/\\(^[a-zA-Z][a-zA-Z]*\\)\\([^a-zA-Z].*\\)\\([^a-zA-Z]\\)\\([a-zA-Z][a-zA-Z]*$\\)/\\4\\2\\3\\1/&#39; test.txt</code></p></li><li><p>把test.txt中出现的第一个数字和最后一个单词替换位置:</p><p><code>sed -r &#39;s/([0-9]+)(.*$)/\\2\\1/&#39; test.txt</code></p></li><li><p>把test.txt 中第一个数字移动到行末尾：</p><p><code>sed -r &#39;s/([0-9]+)(.*$)/\\2\\1/&#39; test.txt</code></p></li><li><p>在test.txt 20行到末行最前面加 ‘aaa:’：</p><p><code>sed -r &#39;s/([0-9]+)(.*$)/\\2\\1/&#39; test.txt</code></p></li></ol><h2 id=\"扩展用法\"><a href=\"#扩展用法\" class=\"headerlink\" title=\"扩展用法\"></a>扩展用法</h2><h3 id=\"打印文件中特定的某行到某行之间的内容\"><a href=\"#打印文件中特定的某行到某行之间的内容\" class=\"headerlink\" title=\"打印文件中特定的某行到某行之间的内容\"></a>打印文件中特定的某行到某行之间的内容</h3><ul><li><p>文件test内容如下：</p><blockquote><p>ert<br>fff<br><strong><br>[abcfd]<br>123<br>324<br>444<br>[rty]</strong><br>fgfgf</p></blockquote></li><li><p>需要截取以下几行内容：</p><blockquote><p>[abcfd]<br>123<br>324<br>444<br>[rty]</p></blockquote></li><li><p>使用<code>sed</code>命令，用法为<code>sed -nr &#39;/\\[abcfd\\]/,/\\[rty\\]/&#39;p test.txt</code>。</p></li></ul><h3 id=\"sed转换大小写字母\"><a href=\"#sed转换大小写字母\" class=\"headerlink\" title=\"sed转换大小写字母\"></a>sed转换大小写字母</h3><p>在<code>sed</code>中，使用<code>\\u</code>表示大写，<code>\\l</code>表示小写。</p><ol><li><p>将每个单词第一个小写字母转换为大写：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n3 1.log | sed 's/\\b[a-z]/\\u&amp;/g'</span></span><br><span class=\"line\">13:08:24 2018 123 45sdf Nsifud Ninfd 200 12000 Uavdfiya</span><br><span class=\"line\">13:08:24 2018 123 45sdf Nsifud Ninfd 200 11000 Uavdfiya</span><br><span class=\"line\">13:08:24 2018 123 45sdf Nsifud Ninfd 230 12000 Uavdfiya</span><br></pre></td></tr></table></figure></li><li><p>将所有小写变成大写：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]# head -n3 1.log | sed &apos;s/[a-z]/\\u&amp;/g&apos;</span><br><span class=\"line\">13:08:24 2018 123 45SDF NSIFUD NINFD 200 12000 UAVDFIYA</span><br><span class=\"line\">13:08:24 2018 123 45SDF NSIFUD NINFD 200 11000 UAVDFIYA</span><br><span class=\"line\">13:08:24 2018 123 45SDF NSIFUD NINFD 230 12000 UAVDFIYA</span><br></pre></td></tr></table></figure></li><li><p>大写转换为小写：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed 's/[A-Z]/\\l&amp;/g' 1.log </span></span><br><span class=\"line\">13:08:24 2018 123 45sdf nsifud ninfd 200 12000 uavdfiya</span><br><span class=\"line\">13:08:24 2018 123 45sdf nsifud ninfd 200 11000 uavdfiya</span><br><span class=\"line\">13:08:24 2018 123 45sdf tvubhijn ninfd 230 12000 uavdfiya</span><br><span class=\"line\">13:08:24 2018 123 45sdf nsifud ninfd 200 11897 uavdfiya</span><br></pre></td></tr></table></figure></li></ol><h3 id=\"sed在文件某一行末尾添加数字\"><a href=\"#sed在文件某一行末尾添加数字\" class=\"headerlink\" title=\"sed在文件某一行末尾添加数字\"></a>sed在文件某一行末尾添加数字</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -r 's/(.*)/\\1 123/' 1.log </span></span><br><span class=\"line\">13:08:24 2018 123 45sdf nsifud ninfd 200 12000 uavdfiya 123</span><br><span class=\"line\">13:08:24 2018 123 45sdf nsifud ninfd 200 11000 uavdfiya 123</span><br><span class=\"line\">13:08:24 2018 123 45sdf TVUBHIJN ninfd 230 12000 uavdfiya 123</span><br><span class=\"line\">13:08:24 2018 123 45sdf nsifud ninfd 200 11897 uavdfiya 123</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -r 's/(^s.*)/\\1:123/' 1.txt </span></span><br><span class=\"line\">zx cc vv</span><br><span class=\"line\">sai amsomd sad:123</span><br></pre></td></tr></table></figure><h3 id=\"sed删除某关键字的下一行到最后一行\"><a href=\"#sed删除某关键字的下一行到最后一行\" class=\"headerlink\" title=\"sed删除某关键字的下一行到最后一行\"></a>sed删除某关键字的下一行到最后一行</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@test200 ~]<span class=\"comment\"># cat test</span></span><br><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">c</span><br><span class=\"line\">d</span><br><span class=\"line\">e</span><br><span class=\"line\">f</span><br><span class=\"line\"></span><br><span class=\"line\">[root@test200 ~]<span class=\"comment\"># sed '/c/&#123;p;:a;N;$!ba;d&#125;' test</span></span><br><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">c</span><br></pre></td></tr></table></figure><ul><li><p>定义一个标签a，匹配c，然后N把下一行加到模式空间里，匹配最后一行时，才退出标签循环，然后命令d，把这个模式空间里的内容全部清除。</p><p>if 匹配”c”<br>:a<br>追加下一行<br>if 不匹配”$”<br>goto a<br>最后退出循环，d命令删除。</p></li></ul><h3 id=\"sed打印指定范围包含某个字符串的行\"><a href=\"#sed打印指定范围包含某个字符串的行\" class=\"headerlink\" title=\"sed打印指定范围包含某个字符串的行\"></a>sed打印指定范围包含某个字符串的行</h3><ul><li><p>用法为<code>sed -n &#39;1,100{/abc/p}&#39; 1.txt</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sed -n '1,3&#123;/110/p&#125;' 1.log </span></span><br><span class=\"line\">13:08:24 2018 123 45sdf nsifud ninfd 200 11000 uavdfiya</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id=\"awk使用练习\"><a href=\"#awk使用练习\" class=\"headerlink\" title=\"awk使用练习\"></a><strong>awk</strong>使用练习</h1><ol><li><p>用awk 打印整个test.txt （以下操作都是用awk工具实现，针对test.txt）:</p><p><code>awk &#39;{print $0}&#39; test.txt</code></p></li><li><p>查找所有包含 ‘bash’ 的行:</p><p><code>awk &#39;/bash/&#39; test.txt</code></p></li><li><p>用 ‘:’ 作为分隔符，查找第三段等于0的行:</p><p><code>awk -F &#39;:&#39; &#39;$3==0 {print $0}&#39; test.txt</code></p></li><li><p>用 ‘:’ 作为分隔符，查找第一段为 ‘root’ 的行，并把该段的 ‘root’ 换成 ‘toor’ (可以连同sed一起使用):</p><p><code>awk -F &#39;:&#39; &#39;$1==&quot;root&quot;&#39; test.txt | sed s/root/toor/g</code></p></li><li><p>用 ‘:’ 作为分隔符，打印最后一段:</p><p><code>awk -F &#39;:&#39; &#39;{print $NF}&#39; test.txt</code></p></li><li><p>打印行数大于20的所有行:</p><p><code>wk &#39;{if (NR&gt;20) {print $0}}&#39; test.txt</code></p></li><li><p>用 ‘:’ 作为分隔符，打印所有第三段小于第四段的行:</p><p><code>awk -F &#39;:&#39; &#39;{if ($3&lt;$4) {print $0}}&#39; test.txt</code></p></li><li><p>用 ‘:’ 作为分隔符，打印第一段以及最后一段，并且中间用 ‘@’ 连接 （例如，第一行应该是这样的形式 <a href=\"mailto:&#39;root%40/bin/bash\" target=\"_blank\" rel=\"noopener\">‘root@/bin/bash</a>‘ ）:</p><p><code>awk -F &#39;:&#39; &#39;{OFS=&quot;@&quot;} {print $1,$NF}&#39; test.txt</code></p></li><li><p>用 ‘:’ 作为分隔符，把整个文档的第四段相加，求和:</p><p><code>awk -F &#39;:&#39; &#39;{(sum=sum+$4)}; END {print sum}&#39; test.txt</code>。</p></li></ol><hr><h1 id=\"相关练习\"><a href=\"#相关练习\" class=\"headerlink\" title=\"相关练习\"></a>相关练习</h1><ol><li><p>如何把 /etc/passwd 中用户uid 大于500 的行给打印出来？</p><p><code>awk -F &#39;:&#39; &#39;{if ($3&gt;500) {print $0}}&#39; /etc/passwd</code></p></li><li><p>awk中 NR，NF两个变量表示什么含义？<code>awk -F &#39;:&#39; &#39;{print $NR}&#39; /etc/passwd</code> 会打印出什么结果出来？</p><p><code>NR</code>表示行，<code>NF</code>表示分段，<code>wk -F &#39;:&#39; &#39;{print $NR}&#39; /etc/passwd</code>表示打印和行数相等的分段，超出分段后打印为空。</p></li><li><p>用grep把1.txt文档中包含’abc’或者‘123’的行过滤出来，并在过滤出来的行前面加上行号.</p><p><code>grep -n -e &#39;abc&#39; -e &#39;123&#39; 1.txt</code></p><p><code>grep -E -n &#39;abc|123&#39; 1.txt</code></p></li><li><p>grep -v ‘^$’ 1.txt 这样会过滤出哪些行？</p><p>A: 会过滤所有行，即打印文件内容</p></li><li><p>‘.’ ‘*‘ 和 ‘.*’ 分别表示什么含义？’+’和’?’表示什么含义，这五个符号是否可以在grep中使用，是否可以在egrep、sed以及awk中使用？</p><p>A: ‘.’表示除换行符外的任意字符，’*‘表示前一个字符出现0次或任意多次，’.*’表示任意字符出现任意次；这几个字符均可以在<code>grep</code>、<code>egrep</code>、<code>sed</code>和<code>awk</code>中使用。</p></li><li><p>grep 里面用到一个 {} ，它用在什么情况下？</p><p>A：用在使用正则匹配前面的字符出现指定次数时。</p></li><li><p>sed有一个选项，可以直接更改文本文件，是哪个选项？</p><p>A：<code>-i</code>选项，例如<code>sed -i s/123/112233/g 1.txt</code></p></li><li><p><code>sed -i &#39;s/.*ie//;s/[&quot;|&amp;].*//&#39; file</code> 这条命令表示什么操作呢？</p><p>A：表示在file中将<code>ie</code>及其前面所以字符替换为空并且将<code>&quot;</code>双引号和<code>&amp;</code>号及其后面的所以字符替换为空。</p></li><li><p>如何删除一个文档中的所有数字或者字母？</p><p><code>sed -r &#39;s/[0-9a-zA-Z]//g&#39; 1.txt</code></p></li><li><p>截取日志1.log的第一段(以空格为分隔符), 按数字排序、然后去重，但是需要保留重复的数量如何做？</p><p><code>awk &#39;{print $1}&#39; 1.log | sort -n | uniq -c</code></p></li><li><p>使用awk过滤出1.log中第7段(空格分隔)为’200’ 并且第8段为’11897’的行。</p><p><code>awk &#39;$7==200 &amp;&amp; $8==11897&#39; 1.log</code></p></li><li><p>请比较这两个命令的异同： <code>grep -v &#39;^[0-9]&#39; 1.txt</code> 和<code>grep &#39;^[^0-9]&#39; 1.txt</code>：</p></li><li><p>awk中的$0表示什么？为什么以下两条命令的$0结果不一致呢？ <code>awk -F &#39;:&#39; &#39;{print $0}&#39; 1.txt 和 awk -F &#39;:&#39; &#39;$7=1 {print $0}&#39; 1.txt</code></p></li><li><p>使用grep过滤某个关键词时，如何把包含关键词的行连同上面一行打印出来，那下面一行呢？同时上面和下面都打印出来呢？</p><p>A：打印上面一行使用<code>-B 1</code>，打印下面一行使用<code>A 1</code>，同时打印上下行使用<code>-C 1</code>。</p></li></ol><hr><!-- rebuild by neat -->"},{"title":"Linux磁盘管理——LVM磁盘分区","author":"Evobot","abbrlink":"8901b9bb","date":"2018-04-11T14:12:46.000Z","image":null,"_content":"\n\n\nLVM是指逻辑卷管理，由物理磁盘、物理卷、卷组、逻辑卷组成。物理卷组在物理磁盘上创建，磁盘ID为`8e`，与分区创建相同，一个和多个物理卷组成卷组，在卷组的基础上划分逻辑卷，逻辑卷格式化之后进行挂载。\n\n![LVM](http://p5qynomrl.bkt.clouddn.com/1523456458706v7d50vlz.png?imageslim)\n\nLVM相比普通分区，优点在于可以方便的进行扩容和缩容，但是同样也带来了数据恢复困难的缺点。\n\n<!--more-->\n\n---\n\n# LVM物理卷\n\n## 创建物理分区\n\n- 创建物理分区与磁盘分区相同，但需要在`fdisk`中将分区ID设置为`8e`，`parted`中则使用`set`设置为`lvm`，然后使用`pvcreate`命令创建物理卷。\n\n### 使用fdisk分区\n\n- 使用`fdisk`分区，与之前的磁盘分区一样，只需要使用`t`将分区ID更改为`8e`即可：\n\n  ```bash\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdc：4294 MB, 4294967296 字节，8388608 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0x3f2e9a4a\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdc1            2048     4196351     2097152   83  Linux\n\n  命令(输入 m 获取帮助)：t\t# 将分区ID更改为LVM\n  已选择分区 1\n  Hex 代码(输入 L 列出所有代码)：8e\t# 可以输入L列出所以的分区类型代码\n  已将分区“Linux”的类型更改为“Linux LVM”\n\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdc：4294 MB, 4294967296 字节，8388608 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0x3f2e9a4a\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdc1            2048     4196351     2097152   8e  Linux LVM\n  ```\n\n### 使用parted分区\n\n- 使用`parted`对GPT格式的磁盘进行分区，同样也需要将分区类型设置为LVM，使用`parted`的`set`命令即可：\n\n  ```bash\n  [root@localhost ~]# parted /dev/sdb mkpart primary 1M 2G set 1 lvm\n  新状态？  [开]/on/关/off? on                                              \n  信息: You may need to update /etc/fstab.\n\n  [root@localhost ~]# fdisk -l /dev/sdb\n  WARNING: fdisk GPT support is currently new, and therefore in an experimental phase. Use at your own discretion.\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：gpt\n\n\n  #         Start          End    Size  Type            Name\n   1         2048      3905535    1.9G  Linux LVM       primary\n\n  ```\n\n## 创建物理卷\n\n- 创建物理卷使用`pvcreate`命令，这个命令在`lvm`软件包内，默认并没有安装，使用`yum install -y lvm2`安装；\n\n> 当需要使用一个命令，但命令所在的软件包没有安装，并且不知道软件包的名字的时候，可以使用`yum provides \"/*/pvcreate\"`命令查找命令所在的软件包，其中`\"/*/pvcreate\"`是命令的路径，这里使用通配的方式查找。\n\n- 使用命令`pvcreate /dev/sdXX`将分区创建为LVM物理卷：\n\n  ```bash\n  [root@localhost ~]# pvcreate /dev/sdb1\n  WARNING: ext3 signature detected on /dev/sdb1 at offset 1080. Wipe it? [y/n]: y\t# 由于分区存在文件系统，需要清除\n    Wiping ext3 signature on /dev/sdb1.\n    Physical volume \"/dev/sdb1\" successfully created.\n  ```\n\n> 有时候创建完分区后，在`/dev/`目录下新的分区`sdb1`可能并没有自动生成文件，这时可以使用命令`partprobe`来生成。\n\n- 使用`pvdisplay`命令查看物理卷，命令执行结果会列出物理卷的详细信息：\n\n  ```bash\n  [root@localhost ~]# pvdisplay \n    \"/dev/sdb2\" is a new physical volume of \"1.86 GiB\"\n    --- NEW Physical volume ---\n    PV Name               /dev/sdb2\n    VG Name               \n    PV Size               1.86 GiB\n    Allocatable           NO\n    PE Size               0   \n    Total PE              0\n    Free PE               0\n    Allocated PE          0\n    PV UUID               GxoHRk-qwFY-xIPx-fnSK-Oj9w-9A9V-3cIrei\n     \n    \"/dev/sdb1\" is a new physical volume of \"1.86 GiB\"\n    --- NEW Physical volume ---\n    PV Name               /dev/sdb1\n    VG Name               \n    PV Size               1.86 GiB\n    Allocatable           NO\n    PE Size               0   \n    Total PE              0\n    Free PE               0\n    Allocated PE          0\n    PV UUID               qGXHcS-DYtM-rV90-QChT-Sy0L-qKff-qbfWm3\n\n  ```\n\n- 使用`pvs`命令可以查看物理卷的简要信息：\n\n  ```bash\n  [root@localhost ~]# pvs\n    PV         VG Fmt  Attr PSize  PFree \n    /dev/sdb1     lvm2 ---   1.86g  1.86g\n    /dev/sdb2     lvm2 ---   1.86g  1.86g\n    /dev/sdc1     lvm2 ---   2.00g  2.00g\n    /dev/sdc2     lvm2 ---  <2.00g <2.00g\n\n  ```\n\n---\n\n# LVM卷组\n\n## 创建卷组\n\n- 创建LVM卷组，使用`vgcreate`命令，命令格式为`vgcreate (卷组名) (分区名)`，其中分区名可以是多个：\n\n  ```bash\n  [root@localhost ~]# vgcreate vg1 /dev/sdb1 /dev/sdb2\n    Volume group \"vg1\" successfully created\n\n  ```\n\n- 查看已创建的卷组，使用`vgdisplay`或`vgs`命令：\n\n  ```bash\n  [root@localhost ~]# vgdisplay \n    --- Volume group ---\n    VG Name               vg1\n    System ID             \n    Format                lvm2\n    Metadata Areas        2\n    Metadata Sequence No  1\n    VG Access             read/write\n    VG Status             resizable\n    MAX LV                0\n    Cur LV                0\n    Open LV               0\n    Max PV                0\n    Cur PV                2\n    Act PV                2\n    VG Size               <3.72 GiB\n    PE Size               4.00 MiB\n    Total PE              952\n    Alloc PE / Size       0 / 0   \n    Free  PE / Size       952 / <3.72 GiB\n    VG UUID               EBbYQ5-v6Gh-U2d4-ZEVS-KO21-FHYk-qaWPib\n\n  [root@localhost ~]# vgs\n    VG  #PV #LV #SN Attr   VSize  VFree \n    vg1   2   0   0 wz--n- <3.72g <3.72g\n\n  ```\n\n- 使用命令`vgremove`可以删除卷组：\n\n  ```bash\n  [root@localhost ~]# vgremove vg1\n    Volume group \"vg1\" successfully removed\n\n  ```\n\n## 卷组扩容\n\n- 卷组扩容使用`vgextend`命令，命令用法为`vgextend (卷组) (物理卷)`:\n\n  ```bash\n  [root@localhost ~]# pvs\n    PV         VG  Fmt  Attr PSize  PFree  \n    /dev/sdb1  vg1 lvm2 a--  <1.86g 880.00m\n    /dev/sdb2  vg1 lvm2 a--  <1.86g  <1.86g\n    /dev/sdc1      lvm2 ---   2.00g   2.00g\n    /dev/sdc2      lvm2 ---  <2.00g  <2.00g\n    \n  [root@localhost ~]# vgextend vg1 /dev/sdc1\n    Volume group \"vg1\" successfully extended\n    \n  [root@localhost ~]# vgs\n    VG  #PV #LV #SN Attr   VSize VFree\n    vg1   3   1   0 wz--n- 5.71g 4.71g\n   \n  [root@localhost ~]# pvs\n    PV         VG  Fmt  Attr PSize  PFree  \n    /dev/sdb1  vg1 lvm2 a--  <1.86g 880.00m\n    /dev/sdb2  vg1 lvm2 a--  <1.86g  <1.86g\n    /dev/sdc1  vg1 lvm2 a--  <2.00g  <2.00g\n    /dev/sdc2      lvm2 ---  <2.00g  <2.00g\n\n  ```\n\n  ​\n\n---\n\n# LVM逻辑卷\n\n## 创建逻辑卷\n\n- 创建逻辑卷使用命令`lvcreate`，命令用法为`lvcreate -L (逻辑卷大小) -n (逻辑卷名) (卷组名)`：\n\n  ```bash\n  [root@localhost ~]# lvcreate -L 500M -n lv1 vg1\n    Logical volume \"lv1\" created.\n\n  ```\n\n- 查看已创建的逻辑卷，使用`lvdisplay`或`lvs`命令：\n\n  ```bash\n  [root@localhost ~]# lvdisplay \n    --- Logical volume ---\n    LV Path                /dev/vg1/lv1\n    LV Name                lv1\n    VG Name                vg1\n    LV UUID                y325TB-keCq-Gl9C-Oh1V-7rMp-CCHe-LjHHfx\n    LV Write Access        read/write\n    LV Creation host, time localhost.localdomain, 2018-04-11 23:29:28 +0800\n    LV Status              available\n    # open                 0\n    LV Size                500.00 MiB\n    Current LE             125\n    Segments               1\n    Allocation             inherit\n    Read ahead sectors     auto\n    - currently set to     8192\n    Block device           253:0\n\n  [root@localhost ~]# lvs\n    LV   VG  Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert\n    lv1  vg1 -wi-a----- 500.00m                           \n  ```\n\n## 逻辑卷格式化\n\n- 逻辑卷的格式化与分区的格式化相同，只是LVM逻辑卷文件路径与分区文件路径不同：\n\n  ```bash\n  [root@localhost ~]# mkfs.ext4 /dev/vg1/lv1 \t# 格式化为ext4\n  mke2fs 1.42.9 (28-Dec-2013)\n  文件系统标签=\n  OS type: Linux\n  块大小=1024 (log=0)\n  分块大小=1024 (log=0)\n  Stride=0 blocks, Stripe width=0 blocks\n  128016 inodes, 512000 blocks\n  25600 blocks (5.00%) reserved for the super user\n  第一个数据块=1\n  Maximum filesystem blocks=34078720\n  63 block groups\n  8192 blocks per group, 8192 fragments per group\n  2032 inodes per group\n  Superblock backups stored on blocks: \n  \t8193, 24577, 40961, 57345, 73729, 204801, 221185, 401409\n\n  Allocating group tables: 完成                            \n  正在写入inode表: 完成                            \n  Creating journal (8192 blocks): 完成\n  Writing superblocks and filesystem accounting information: 完成 \n\n  [root@localhost ~]# mkfs.xfs -f /dev/vg1/lv1 \t#格式化为xfs\n  meta-data=/dev/vg1/lv1           isize=512    agcount=4, agsize=32000 blks\n           =                       sectsz=512   attr=2, projid32bit=1\n           =                       crc=1        finobt=0, sparse=0\n  data     =                       bsize=4096   blocks=128000, imaxpct=25\n           =                       sunit=0      swidth=0 blks\n  naming   =version 2              bsize=4096   ascii-ci=0 ftype=1\n  log      =internal log           bsize=4096   blocks=855, version=2\n           =                       sectsz=512   sunit=0 blks, lazy-count=1\n  realtime =none                   extsz=4096   blocks=0, rtextents=0\n\n  ```\n\n## 逻辑卷挂载\n\n- 挂在逻辑卷与分区挂载相同，使用`mount`命令：\n\n  ```bash\n  [root@localhost ~]# mount /dev/vg1/lv1 /mnt/\n  [root@localhost ~]# df -h\n  文件系统             容量  已用  可用 已用% 挂载点\n  /dev/sda3             28G  1.2G   27G    5% /\n  devtmpfs             487M     0  487M    0% /dev\n  tmpfs                497M     0  497M    0% /dev/shm\n  tmpfs                497M  6.6M  490M    2% /run\n  tmpfs                497M     0  497M    0% /sys/fs/cgroup\n  /dev/sda1            197M  108M   89M   55% /boot\n  tmpfs                100M     0  100M    0% /run/user/0\n  /dev/mapper/vg1-lv1  497M   26M  472M    6% /mnt\n\n  ```\n\n- 使用`df -h`查看挂载发现逻辑卷的文件路径与`mount`时指定的文件不同，实际上两个路径都是指向同一个文件：\n\n  ```bash\n  [root@localhost ~]# ls -l /dev/vg1/lv1 \n  lrwxrwxrwx. 1 root root 7 4月  11 23:33 /dev/vg1/lv1 -> ../dm-0\n  [root@localhost ~]# ls -l /dev/mapper/vg1-lv1 \n  lrwxrwxrwx. 1 root root 7 4月  11 23:33 /dev/mapper/vg1-lv1 -> ../dm-0\n\n  ```\n\n## 逻辑卷扩缩容\n\n### ext文件系统扩容\n\n- 扩容逻辑卷使用命令`lvresize`，用法为`lvresize -L (逻辑卷大小) (逻辑卷路径)`，扩容前需要现将逻辑卷取消挂载：\n\n  ```bash\n  [root@localhost ~]# umount /dev/vg1/lv1 \n  [root@localhost ~]# lvresize -L 800M /dev/vg1/lv1 \n    Size of logical volume vg1/lv1 changed from 500.00 MiB (125 extents) to 800.00 MiB (200 extents).\n    Logical volume vg1/lv1 successfully resized.\n\n  ```\n\n- 扩容后需要检查逻辑卷是否存在错误，使用`e2fsck -f (逻辑卷)`命令进行检查：\n\n  ```bash\n  [root@localhost ~]# lvresize -L 800M /dev/vg1/lv1 \n    Size of logical volume vg1/lv1 changed from 500.00 MiB (125 extents) to 800.00 MiB (200 extents).\n    Logical volume vg1/lv1 successfully resized.\n  [root@localhost ~]# e2fsck -f /dev/vg1/lv1 \n  e2fsck 1.42.9 (28-Dec-2013)\n  第一步: 检查inode,块,和大小\n  第二步: 检查目录结构\n  第3步: 检查目录连接性\n  Pass 4: Checking reference counts\n  第5步: 检查簇概要信息\n  /dev/vg1/lv1: 12/128016 files (0.0% non-contiguous), 26686/512000 blocks\n\n  ```\n\n- 然后需要更新逻辑卷的信息，使用命令`resize2fs (逻辑卷)`进行更新：\n\n  ```bash\n  root@localhost ~]# resize2fs /dev/vg1/lv1 \n  resize2fs 1.42.9 (28-Dec-2013)\n  Resizing the filesystem on /dev/vg1/lv1 to 819200 (1k) blocks.\n  The filesystem on /dev/vg1/lv1 is now 819200 blocks long.\n  ```\n\n- 然后重新挂载逻辑卷即可：\n\n  ```bash\n  [root@localhost ~]# !mount\n  mount /dev/vg1/lv1 /mnt/\n  [root@localhost ~]# cat /mnt/test.txt \n  1123456\n  ```\n\n### ext文件系统缩容\n\n- xfs文件系统不支持缩容，缩容操作需要先取消逻辑卷的挂载，然后使用`e2fsck`命令检查磁盘错误，之后更新逻辑卷的信息，最后再设置逻辑卷大小，步骤基本与扩容相反，但是在更新逻辑卷信息时，需要指定新的逻辑卷大小，使用`resize2fs (逻辑卷) (缩容后逻辑卷大小)`：\n\n  ```bash\n  [root@localhost ~]# !umount\n  umount /dev/vg1/lv1 \n\n  [root@localhost ~]# e2fsck -f /dev/vg1/lv1 \t#检查磁盘错误\n  e2fsck 1.42.9 (28-Dec-2013)\n  第一步: 检查inode,块,和大小\n  第二步: 检查目录结构\n  第3步: 检查目录连接性\n  Pass 4: Checking reference counts\n  第5步: 检查簇概要信息\n  /dev/vg1/lv1: 12/203200 files (0.0% non-contiguous), 36419/819200 blocks\n\n  [root@localhost ~]# resize2fs /dev/vg1/lv1 500M\t# 更新逻辑卷信息\n  resize2fs 1.42.9 (28-Dec-2013)\n  Resizing the filesystem on /dev/vg1/lv1 to 512000 (1k) blocks.\n  The filesystem on /dev/vg1/lv1 is now 512000 blocks long.\n\n  [root@localhost ~]# lvresize -L 500M /dev/vg1/lv1 #设置新的大小\n    WARNING: Reducing active logical volume to 500.00 MiB.\n    THIS MAY DESTROY YOUR DATA (filesystem etc.)\n  Do you really want to reduce vg1/lv1? [y/n]: y\n    Size of logical volume vg1/lv1 changed from 800.00 MiB (200 extents) to 500.00 MiB (125 extents).\n    Logical volume vg1/lv1 successfully resized.\n\n  [root@localhost ~]# lvdisplay \n    --- Logical volume ---\n    LV Path                /dev/vg1/lv1\n    LV Name                lv1\n    VG Name                vg1\n    LV UUID                dKQ2IM-hFhJ-iXN9-f5WK-HPrI-dB1a-0P7Q5i\n    LV Write Access        read/write\n    LV Creation host, time localhost.localdomain, 2018-04-11 23:51:47 +0800\n    LV Status              available\n    # open                 0\n    LV Size                500.00 MiB\n    Current LE             125\n    Segments               1\n    Allocation             inherit\n    Read ahead sectors     auto\n    - currently set to     8192\n    Block device           253:0\n     \n  [root@localhost ~]# lvs\n    LV   VG  Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert\n    lv1  vg1 -wi-a----- 500.00m                                                    \n  ```\n\n### xfs文件系统扩容\n\n- `xfs`文件系统的逻辑卷在扩容时不需要卸载，也不需要检查磁盘错误和更新磁盘信息，只需要直接使用`lvresize`命令扩容即可：\n\n  ```bash\n  [root@localhost ~]# lvresize -L 1G /dev/vg1/lv1 \n    Size of logical volume vg1/lv1 changed from 500.00 MiB (125 extents) to 1.00 GiB (256 extents).\n    Logical volume vg1/lv1 successfully resized.\n    \n  [root@localhost ~]# lvs\n    LV   VG  Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert\n    lv1  vg1 -wi-ao---- 1.00g                                                    \n  [root@localhost ~]# df -h\n  文件系统             容量  已用  可用 已用% 挂载点\n  /dev/sda3             28G  1.2G   27G    5% /\n  devtmpfs             487M     0  487M    0% /dev\n  tmpfs                497M     0  497M    0% /dev/shm\n  tmpfs                497M  6.6M  490M    2% /run\n  tmpfs                497M     0  497M    0% /sys/fs/cgroup\n  /dev/sda1            197M  108M   89M   55% /boot\n  tmpfs                100M     0  100M    0% /run/user/0\n  /dev/mapper/vg1-lv1  497M   26M  472M    6% /mnt\n\n  ```\n\n- 扩容后通过`df -h`查看挂载信息，逻辑卷的大小并没有更新，需要使用`xfs_growfs`命令进行更新，用法为`xfs_growfs (逻辑卷)`，执行这个命令时，磁盘必须已经挂载：\n\n  ```bash\n  [root@localhost ~]# xfs_growfs /dev/vg1/lv1 \n  meta-data=/dev/mapper/vg1-lv1    isize=512    agcount=4, agsize=32000 blks\n           =                       sectsz=512   attr=2, projid32bit=1\n           =                       crc=1        finobt=0 spinodes=0\n  data     =                       bsize=4096   blocks=128000, imaxpct=25\n           =                       sunit=0      swidth=0 blks\n  naming   =version 2              bsize=4096   ascii-ci=0 ftype=1\n  log      =internal               bsize=4096   blocks=855, version=2\n           =                       sectsz=512   sunit=0 blks, lazy-count=1\n  realtime =none                   extsz=4096   blocks=0, rtextents=0\n  data blocks changed from 128000 to 262144\n\n  [root@localhost ~]# df -h\n  文件系统             容量  已用  可用 已用% 挂载点\n  /dev/sda3             28G  1.2G   27G    5% /\n  devtmpfs             487M     0  487M    0% /dev\n  tmpfs                497M     0  497M    0% /dev/shm\n  tmpfs                497M  6.6M  490M    2% /run\n  tmpfs                497M     0  497M    0% /sys/fs/cgroup\n  /dev/sda1            197M  108M   89M   55% /boot\n  tmpfs                100M     0  100M    0% /run/user/0\n  /dev/mapper/vg1-lv1 1021M   26M  996M    3% /mnt\n\n  ```\n\n> 当错误配置`fstab`文件重启之后，系统启动会进入故障模式，这时候需要输入root密码进入系统，然后正确修改`fstab`文件后重启即可恢复。\n\n---\n\n","source":"_posts/Linux磁盘管理—LVM磁盘分区.md","raw":"---\ntitle: Linux磁盘管理——LVM磁盘分区\nauthor: Evobot\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\nabbrlink: 8901b9bb\ndate: 2018-04-11 22:12:46\nimage:\n---\n\n\n\nLVM是指逻辑卷管理，由物理磁盘、物理卷、卷组、逻辑卷组成。物理卷组在物理磁盘上创建，磁盘ID为`8e`，与分区创建相同，一个和多个物理卷组成卷组，在卷组的基础上划分逻辑卷，逻辑卷格式化之后进行挂载。\n\n![LVM](http://p5qynomrl.bkt.clouddn.com/1523456458706v7d50vlz.png?imageslim)\n\nLVM相比普通分区，优点在于可以方便的进行扩容和缩容，但是同样也带来了数据恢复困难的缺点。\n\n<!--more-->\n\n---\n\n# LVM物理卷\n\n## 创建物理分区\n\n- 创建物理分区与磁盘分区相同，但需要在`fdisk`中将分区ID设置为`8e`，`parted`中则使用`set`设置为`lvm`，然后使用`pvcreate`命令创建物理卷。\n\n### 使用fdisk分区\n\n- 使用`fdisk`分区，与之前的磁盘分区一样，只需要使用`t`将分区ID更改为`8e`即可：\n\n  ```bash\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdc：4294 MB, 4294967296 字节，8388608 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0x3f2e9a4a\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdc1            2048     4196351     2097152   83  Linux\n\n  命令(输入 m 获取帮助)：t\t# 将分区ID更改为LVM\n  已选择分区 1\n  Hex 代码(输入 L 列出所有代码)：8e\t# 可以输入L列出所以的分区类型代码\n  已将分区“Linux”的类型更改为“Linux LVM”\n\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdc：4294 MB, 4294967296 字节，8388608 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0x3f2e9a4a\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdc1            2048     4196351     2097152   8e  Linux LVM\n  ```\n\n### 使用parted分区\n\n- 使用`parted`对GPT格式的磁盘进行分区，同样也需要将分区类型设置为LVM，使用`parted`的`set`命令即可：\n\n  ```bash\n  [root@localhost ~]# parted /dev/sdb mkpart primary 1M 2G set 1 lvm\n  新状态？  [开]/on/关/off? on                                              \n  信息: You may need to update /etc/fstab.\n\n  [root@localhost ~]# fdisk -l /dev/sdb\n  WARNING: fdisk GPT support is currently new, and therefore in an experimental phase. Use at your own discretion.\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：gpt\n\n\n  #         Start          End    Size  Type            Name\n   1         2048      3905535    1.9G  Linux LVM       primary\n\n  ```\n\n## 创建物理卷\n\n- 创建物理卷使用`pvcreate`命令，这个命令在`lvm`软件包内，默认并没有安装，使用`yum install -y lvm2`安装；\n\n> 当需要使用一个命令，但命令所在的软件包没有安装，并且不知道软件包的名字的时候，可以使用`yum provides \"/*/pvcreate\"`命令查找命令所在的软件包，其中`\"/*/pvcreate\"`是命令的路径，这里使用通配的方式查找。\n\n- 使用命令`pvcreate /dev/sdXX`将分区创建为LVM物理卷：\n\n  ```bash\n  [root@localhost ~]# pvcreate /dev/sdb1\n  WARNING: ext3 signature detected on /dev/sdb1 at offset 1080. Wipe it? [y/n]: y\t# 由于分区存在文件系统，需要清除\n    Wiping ext3 signature on /dev/sdb1.\n    Physical volume \"/dev/sdb1\" successfully created.\n  ```\n\n> 有时候创建完分区后，在`/dev/`目录下新的分区`sdb1`可能并没有自动生成文件，这时可以使用命令`partprobe`来生成。\n\n- 使用`pvdisplay`命令查看物理卷，命令执行结果会列出物理卷的详细信息：\n\n  ```bash\n  [root@localhost ~]# pvdisplay \n    \"/dev/sdb2\" is a new physical volume of \"1.86 GiB\"\n    --- NEW Physical volume ---\n    PV Name               /dev/sdb2\n    VG Name               \n    PV Size               1.86 GiB\n    Allocatable           NO\n    PE Size               0   \n    Total PE              0\n    Free PE               0\n    Allocated PE          0\n    PV UUID               GxoHRk-qwFY-xIPx-fnSK-Oj9w-9A9V-3cIrei\n     \n    \"/dev/sdb1\" is a new physical volume of \"1.86 GiB\"\n    --- NEW Physical volume ---\n    PV Name               /dev/sdb1\n    VG Name               \n    PV Size               1.86 GiB\n    Allocatable           NO\n    PE Size               0   \n    Total PE              0\n    Free PE               0\n    Allocated PE          0\n    PV UUID               qGXHcS-DYtM-rV90-QChT-Sy0L-qKff-qbfWm3\n\n  ```\n\n- 使用`pvs`命令可以查看物理卷的简要信息：\n\n  ```bash\n  [root@localhost ~]# pvs\n    PV         VG Fmt  Attr PSize  PFree \n    /dev/sdb1     lvm2 ---   1.86g  1.86g\n    /dev/sdb2     lvm2 ---   1.86g  1.86g\n    /dev/sdc1     lvm2 ---   2.00g  2.00g\n    /dev/sdc2     lvm2 ---  <2.00g <2.00g\n\n  ```\n\n---\n\n# LVM卷组\n\n## 创建卷组\n\n- 创建LVM卷组，使用`vgcreate`命令，命令格式为`vgcreate (卷组名) (分区名)`，其中分区名可以是多个：\n\n  ```bash\n  [root@localhost ~]# vgcreate vg1 /dev/sdb1 /dev/sdb2\n    Volume group \"vg1\" successfully created\n\n  ```\n\n- 查看已创建的卷组，使用`vgdisplay`或`vgs`命令：\n\n  ```bash\n  [root@localhost ~]# vgdisplay \n    --- Volume group ---\n    VG Name               vg1\n    System ID             \n    Format                lvm2\n    Metadata Areas        2\n    Metadata Sequence No  1\n    VG Access             read/write\n    VG Status             resizable\n    MAX LV                0\n    Cur LV                0\n    Open LV               0\n    Max PV                0\n    Cur PV                2\n    Act PV                2\n    VG Size               <3.72 GiB\n    PE Size               4.00 MiB\n    Total PE              952\n    Alloc PE / Size       0 / 0   \n    Free  PE / Size       952 / <3.72 GiB\n    VG UUID               EBbYQ5-v6Gh-U2d4-ZEVS-KO21-FHYk-qaWPib\n\n  [root@localhost ~]# vgs\n    VG  #PV #LV #SN Attr   VSize  VFree \n    vg1   2   0   0 wz--n- <3.72g <3.72g\n\n  ```\n\n- 使用命令`vgremove`可以删除卷组：\n\n  ```bash\n  [root@localhost ~]# vgremove vg1\n    Volume group \"vg1\" successfully removed\n\n  ```\n\n## 卷组扩容\n\n- 卷组扩容使用`vgextend`命令，命令用法为`vgextend (卷组) (物理卷)`:\n\n  ```bash\n  [root@localhost ~]# pvs\n    PV         VG  Fmt  Attr PSize  PFree  \n    /dev/sdb1  vg1 lvm2 a--  <1.86g 880.00m\n    /dev/sdb2  vg1 lvm2 a--  <1.86g  <1.86g\n    /dev/sdc1      lvm2 ---   2.00g   2.00g\n    /dev/sdc2      lvm2 ---  <2.00g  <2.00g\n    \n  [root@localhost ~]# vgextend vg1 /dev/sdc1\n    Volume group \"vg1\" successfully extended\n    \n  [root@localhost ~]# vgs\n    VG  #PV #LV #SN Attr   VSize VFree\n    vg1   3   1   0 wz--n- 5.71g 4.71g\n   \n  [root@localhost ~]# pvs\n    PV         VG  Fmt  Attr PSize  PFree  \n    /dev/sdb1  vg1 lvm2 a--  <1.86g 880.00m\n    /dev/sdb2  vg1 lvm2 a--  <1.86g  <1.86g\n    /dev/sdc1  vg1 lvm2 a--  <2.00g  <2.00g\n    /dev/sdc2      lvm2 ---  <2.00g  <2.00g\n\n  ```\n\n  ​\n\n---\n\n# LVM逻辑卷\n\n## 创建逻辑卷\n\n- 创建逻辑卷使用命令`lvcreate`，命令用法为`lvcreate -L (逻辑卷大小) -n (逻辑卷名) (卷组名)`：\n\n  ```bash\n  [root@localhost ~]# lvcreate -L 500M -n lv1 vg1\n    Logical volume \"lv1\" created.\n\n  ```\n\n- 查看已创建的逻辑卷，使用`lvdisplay`或`lvs`命令：\n\n  ```bash\n  [root@localhost ~]# lvdisplay \n    --- Logical volume ---\n    LV Path                /dev/vg1/lv1\n    LV Name                lv1\n    VG Name                vg1\n    LV UUID                y325TB-keCq-Gl9C-Oh1V-7rMp-CCHe-LjHHfx\n    LV Write Access        read/write\n    LV Creation host, time localhost.localdomain, 2018-04-11 23:29:28 +0800\n    LV Status              available\n    # open                 0\n    LV Size                500.00 MiB\n    Current LE             125\n    Segments               1\n    Allocation             inherit\n    Read ahead sectors     auto\n    - currently set to     8192\n    Block device           253:0\n\n  [root@localhost ~]# lvs\n    LV   VG  Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert\n    lv1  vg1 -wi-a----- 500.00m                           \n  ```\n\n## 逻辑卷格式化\n\n- 逻辑卷的格式化与分区的格式化相同，只是LVM逻辑卷文件路径与分区文件路径不同：\n\n  ```bash\n  [root@localhost ~]# mkfs.ext4 /dev/vg1/lv1 \t# 格式化为ext4\n  mke2fs 1.42.9 (28-Dec-2013)\n  文件系统标签=\n  OS type: Linux\n  块大小=1024 (log=0)\n  分块大小=1024 (log=0)\n  Stride=0 blocks, Stripe width=0 blocks\n  128016 inodes, 512000 blocks\n  25600 blocks (5.00%) reserved for the super user\n  第一个数据块=1\n  Maximum filesystem blocks=34078720\n  63 block groups\n  8192 blocks per group, 8192 fragments per group\n  2032 inodes per group\n  Superblock backups stored on blocks: \n  \t8193, 24577, 40961, 57345, 73729, 204801, 221185, 401409\n\n  Allocating group tables: 完成                            \n  正在写入inode表: 完成                            \n  Creating journal (8192 blocks): 完成\n  Writing superblocks and filesystem accounting information: 完成 \n\n  [root@localhost ~]# mkfs.xfs -f /dev/vg1/lv1 \t#格式化为xfs\n  meta-data=/dev/vg1/lv1           isize=512    agcount=4, agsize=32000 blks\n           =                       sectsz=512   attr=2, projid32bit=1\n           =                       crc=1        finobt=0, sparse=0\n  data     =                       bsize=4096   blocks=128000, imaxpct=25\n           =                       sunit=0      swidth=0 blks\n  naming   =version 2              bsize=4096   ascii-ci=0 ftype=1\n  log      =internal log           bsize=4096   blocks=855, version=2\n           =                       sectsz=512   sunit=0 blks, lazy-count=1\n  realtime =none                   extsz=4096   blocks=0, rtextents=0\n\n  ```\n\n## 逻辑卷挂载\n\n- 挂在逻辑卷与分区挂载相同，使用`mount`命令：\n\n  ```bash\n  [root@localhost ~]# mount /dev/vg1/lv1 /mnt/\n  [root@localhost ~]# df -h\n  文件系统             容量  已用  可用 已用% 挂载点\n  /dev/sda3             28G  1.2G   27G    5% /\n  devtmpfs             487M     0  487M    0% /dev\n  tmpfs                497M     0  497M    0% /dev/shm\n  tmpfs                497M  6.6M  490M    2% /run\n  tmpfs                497M     0  497M    0% /sys/fs/cgroup\n  /dev/sda1            197M  108M   89M   55% /boot\n  tmpfs                100M     0  100M    0% /run/user/0\n  /dev/mapper/vg1-lv1  497M   26M  472M    6% /mnt\n\n  ```\n\n- 使用`df -h`查看挂载发现逻辑卷的文件路径与`mount`时指定的文件不同，实际上两个路径都是指向同一个文件：\n\n  ```bash\n  [root@localhost ~]# ls -l /dev/vg1/lv1 \n  lrwxrwxrwx. 1 root root 7 4月  11 23:33 /dev/vg1/lv1 -> ../dm-0\n  [root@localhost ~]# ls -l /dev/mapper/vg1-lv1 \n  lrwxrwxrwx. 1 root root 7 4月  11 23:33 /dev/mapper/vg1-lv1 -> ../dm-0\n\n  ```\n\n## 逻辑卷扩缩容\n\n### ext文件系统扩容\n\n- 扩容逻辑卷使用命令`lvresize`，用法为`lvresize -L (逻辑卷大小) (逻辑卷路径)`，扩容前需要现将逻辑卷取消挂载：\n\n  ```bash\n  [root@localhost ~]# umount /dev/vg1/lv1 \n  [root@localhost ~]# lvresize -L 800M /dev/vg1/lv1 \n    Size of logical volume vg1/lv1 changed from 500.00 MiB (125 extents) to 800.00 MiB (200 extents).\n    Logical volume vg1/lv1 successfully resized.\n\n  ```\n\n- 扩容后需要检查逻辑卷是否存在错误，使用`e2fsck -f (逻辑卷)`命令进行检查：\n\n  ```bash\n  [root@localhost ~]# lvresize -L 800M /dev/vg1/lv1 \n    Size of logical volume vg1/lv1 changed from 500.00 MiB (125 extents) to 800.00 MiB (200 extents).\n    Logical volume vg1/lv1 successfully resized.\n  [root@localhost ~]# e2fsck -f /dev/vg1/lv1 \n  e2fsck 1.42.9 (28-Dec-2013)\n  第一步: 检查inode,块,和大小\n  第二步: 检查目录结构\n  第3步: 检查目录连接性\n  Pass 4: Checking reference counts\n  第5步: 检查簇概要信息\n  /dev/vg1/lv1: 12/128016 files (0.0% non-contiguous), 26686/512000 blocks\n\n  ```\n\n- 然后需要更新逻辑卷的信息，使用命令`resize2fs (逻辑卷)`进行更新：\n\n  ```bash\n  root@localhost ~]# resize2fs /dev/vg1/lv1 \n  resize2fs 1.42.9 (28-Dec-2013)\n  Resizing the filesystem on /dev/vg1/lv1 to 819200 (1k) blocks.\n  The filesystem on /dev/vg1/lv1 is now 819200 blocks long.\n  ```\n\n- 然后重新挂载逻辑卷即可：\n\n  ```bash\n  [root@localhost ~]# !mount\n  mount /dev/vg1/lv1 /mnt/\n  [root@localhost ~]# cat /mnt/test.txt \n  1123456\n  ```\n\n### ext文件系统缩容\n\n- xfs文件系统不支持缩容，缩容操作需要先取消逻辑卷的挂载，然后使用`e2fsck`命令检查磁盘错误，之后更新逻辑卷的信息，最后再设置逻辑卷大小，步骤基本与扩容相反，但是在更新逻辑卷信息时，需要指定新的逻辑卷大小，使用`resize2fs (逻辑卷) (缩容后逻辑卷大小)`：\n\n  ```bash\n  [root@localhost ~]# !umount\n  umount /dev/vg1/lv1 \n\n  [root@localhost ~]# e2fsck -f /dev/vg1/lv1 \t#检查磁盘错误\n  e2fsck 1.42.9 (28-Dec-2013)\n  第一步: 检查inode,块,和大小\n  第二步: 检查目录结构\n  第3步: 检查目录连接性\n  Pass 4: Checking reference counts\n  第5步: 检查簇概要信息\n  /dev/vg1/lv1: 12/203200 files (0.0% non-contiguous), 36419/819200 blocks\n\n  [root@localhost ~]# resize2fs /dev/vg1/lv1 500M\t# 更新逻辑卷信息\n  resize2fs 1.42.9 (28-Dec-2013)\n  Resizing the filesystem on /dev/vg1/lv1 to 512000 (1k) blocks.\n  The filesystem on /dev/vg1/lv1 is now 512000 blocks long.\n\n  [root@localhost ~]# lvresize -L 500M /dev/vg1/lv1 #设置新的大小\n    WARNING: Reducing active logical volume to 500.00 MiB.\n    THIS MAY DESTROY YOUR DATA (filesystem etc.)\n  Do you really want to reduce vg1/lv1? [y/n]: y\n    Size of logical volume vg1/lv1 changed from 800.00 MiB (200 extents) to 500.00 MiB (125 extents).\n    Logical volume vg1/lv1 successfully resized.\n\n  [root@localhost ~]# lvdisplay \n    --- Logical volume ---\n    LV Path                /dev/vg1/lv1\n    LV Name                lv1\n    VG Name                vg1\n    LV UUID                dKQ2IM-hFhJ-iXN9-f5WK-HPrI-dB1a-0P7Q5i\n    LV Write Access        read/write\n    LV Creation host, time localhost.localdomain, 2018-04-11 23:51:47 +0800\n    LV Status              available\n    # open                 0\n    LV Size                500.00 MiB\n    Current LE             125\n    Segments               1\n    Allocation             inherit\n    Read ahead sectors     auto\n    - currently set to     8192\n    Block device           253:0\n     \n  [root@localhost ~]# lvs\n    LV   VG  Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert\n    lv1  vg1 -wi-a----- 500.00m                                                    \n  ```\n\n### xfs文件系统扩容\n\n- `xfs`文件系统的逻辑卷在扩容时不需要卸载，也不需要检查磁盘错误和更新磁盘信息，只需要直接使用`lvresize`命令扩容即可：\n\n  ```bash\n  [root@localhost ~]# lvresize -L 1G /dev/vg1/lv1 \n    Size of logical volume vg1/lv1 changed from 500.00 MiB (125 extents) to 1.00 GiB (256 extents).\n    Logical volume vg1/lv1 successfully resized.\n    \n  [root@localhost ~]# lvs\n    LV   VG  Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert\n    lv1  vg1 -wi-ao---- 1.00g                                                    \n  [root@localhost ~]# df -h\n  文件系统             容量  已用  可用 已用% 挂载点\n  /dev/sda3             28G  1.2G   27G    5% /\n  devtmpfs             487M     0  487M    0% /dev\n  tmpfs                497M     0  497M    0% /dev/shm\n  tmpfs                497M  6.6M  490M    2% /run\n  tmpfs                497M     0  497M    0% /sys/fs/cgroup\n  /dev/sda1            197M  108M   89M   55% /boot\n  tmpfs                100M     0  100M    0% /run/user/0\n  /dev/mapper/vg1-lv1  497M   26M  472M    6% /mnt\n\n  ```\n\n- 扩容后通过`df -h`查看挂载信息，逻辑卷的大小并没有更新，需要使用`xfs_growfs`命令进行更新，用法为`xfs_growfs (逻辑卷)`，执行这个命令时，磁盘必须已经挂载：\n\n  ```bash\n  [root@localhost ~]# xfs_growfs /dev/vg1/lv1 \n  meta-data=/dev/mapper/vg1-lv1    isize=512    agcount=4, agsize=32000 blks\n           =                       sectsz=512   attr=2, projid32bit=1\n           =                       crc=1        finobt=0 spinodes=0\n  data     =                       bsize=4096   blocks=128000, imaxpct=25\n           =                       sunit=0      swidth=0 blks\n  naming   =version 2              bsize=4096   ascii-ci=0 ftype=1\n  log      =internal               bsize=4096   blocks=855, version=2\n           =                       sectsz=512   sunit=0 blks, lazy-count=1\n  realtime =none                   extsz=4096   blocks=0, rtextents=0\n  data blocks changed from 128000 to 262144\n\n  [root@localhost ~]# df -h\n  文件系统             容量  已用  可用 已用% 挂载点\n  /dev/sda3             28G  1.2G   27G    5% /\n  devtmpfs             487M     0  487M    0% /dev\n  tmpfs                497M     0  497M    0% /dev/shm\n  tmpfs                497M  6.6M  490M    2% /run\n  tmpfs                497M     0  497M    0% /sys/fs/cgroup\n  /dev/sda1            197M  108M   89M   55% /boot\n  tmpfs                100M     0  100M    0% /run/user/0\n  /dev/mapper/vg1-lv1 1021M   26M  996M    3% /mnt\n\n  ```\n\n> 当错误配置`fstab`文件重启之后，系统启动会进入故障模式，这时候需要输入root密码进入系统，然后正确修改`fstab`文件后重启即可恢复。\n\n---\n\n","slug":"Linux磁盘管理—LVM磁盘分区","published":1,"updated":"2018-06-02T13:01:29.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazc5002ru1jxs3rrlrmv","content":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p>LVM是指逻辑卷管理，由物理磁盘、物理卷、卷组、逻辑卷组成。物理卷组在物理磁盘上创建，磁盘ID为<code>8e</code>，与分区创建相同，一个和多个物理卷组成卷组，在卷组的基础上划分逻辑卷，逻辑卷格式化之后进行挂载。</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1523456458706v7d50vlz.png?imageslim\" alt=\"LVM\"></p><p>LVM相比普通分区，优点在于可以方便的进行扩容和缩容，但是同样也带来了数据恢复困难的缺点。</p><a id=\"more\"></a><hr><h1 id=\"LVM物理卷\"><a href=\"#LVM物理卷\" class=\"headerlink\" title=\"LVM物理卷\"></a>LVM物理卷</h1><h2 id=\"创建物理分区\"><a href=\"#创建物理分区\" class=\"headerlink\" title=\"创建物理分区\"></a>创建物理分区</h2><ul><li>创建物理分区与磁盘分区相同，但需要在<code>fdisk</code>中将分区ID设置为<code>8e</code>，<code>parted</code>中则使用<code>set</code>设置为<code>lvm</code>，然后使用<code>pvcreate</code>命令创建物理卷。</li></ul><h3 id=\"使用fdisk分区\"><a href=\"#使用fdisk分区\" class=\"headerlink\" title=\"使用fdisk分区\"></a>使用fdisk分区</h3><ul><li><p>使用<code>fdisk</code>分区，与之前的磁盘分区一样，只需要使用<code>t</code>将分区ID更改为<code>8e</code>即可：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdc：4294 MB, 4294967296 字节，8388608 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0x3f2e9a4a</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdc1            2048     4196351     2097152   83  Linux</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：t\t<span class=\"comment\"># 将分区ID更改为LVM</span></span><br><span class=\"line\">已选择分区 1</span><br><span class=\"line\">Hex 代码(输入 L 列出所有代码)：8e\t<span class=\"comment\"># 可以输入L列出所以的分区类型代码</span></span><br><span class=\"line\">已将分区“Linux”的类型更改为“Linux LVM”</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdc：4294 MB, 4294967296 字节，8388608 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0x3f2e9a4a</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdc1            2048     4196351     2097152   8e  Linux LVM</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"使用parted分区\"><a href=\"#使用parted分区\" class=\"headerlink\" title=\"使用parted分区\"></a>使用parted分区</h3><ul><li><p>使用<code>parted</code>对GPT格式的磁盘进行分区，同样也需要将分区类型设置为LVM，使用<code>parted</code>的<code>set</code>命令即可：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># parted /dev/sdb mkpart primary 1M 2G set 1 lvm</span></span><br><span class=\"line\">新状态？  [开]/on/关/off? on                                              </span><br><span class=\"line\">信息: You may need to update /etc/fstab.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># fdisk -l /dev/sdb</span></span><br><span class=\"line\">WARNING: fdisk GPT support is currently new, and therefore <span class=\"keyword\">in</span> an experimental phase. Use at your own discretion.</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：gpt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#         Start          End    Size  Type            Name</span></span><br><span class=\"line\"> 1         2048      3905535    1.9G  Linux LVM       primary</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"创建物理卷\"><a href=\"#创建物理卷\" class=\"headerlink\" title=\"创建物理卷\"></a>创建物理卷</h2><ul><li>创建物理卷使用<code>pvcreate</code>命令，这个命令在<code>lvm</code>软件包内，默认并没有安装，使用<code>yum install -y lvm2</code>安装；</li></ul><blockquote><p>当需要使用一个命令，但命令所在的软件包没有安装，并且不知道软件包的名字的时候，可以使用<code>yum provides &quot;/*/pvcreate&quot;</code>命令查找命令所在的软件包，其中<code>&quot;/*/pvcreate&quot;</code>是命令的路径，这里使用通配的方式查找。</p></blockquote><ul><li><p>使用命令<code>pvcreate /dev/sdXX</code>将分区创建为LVM物理卷：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># pvcreate /dev/sdb1</span></span><br><span class=\"line\">WARNING: ext3 signature detected on /dev/sdb1 at offset 1080. Wipe it? [y/n]: y\t<span class=\"comment\"># 由于分区存在文件系统，需要清除</span></span><br><span class=\"line\">  Wiping ext3 signature on /dev/sdb1.</span><br><span class=\"line\">  Physical volume <span class=\"string\">\"/dev/sdb1\"</span> successfully created.</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>有时候创建完分区后，在<code>/dev/</code>目录下新的分区<code>sdb1</code>可能并没有自动生成文件，这时可以使用命令<code>partprobe</code>来生成。</p></blockquote><ul><li><p>使用<code>pvdisplay</code>命令查看物理卷，命令执行结果会列出物理卷的详细信息：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># pvdisplay </span></span><br><span class=\"line\">  <span class=\"string\">\"/dev/sdb2\"</span> is a new physical volume of <span class=\"string\">\"1.86 GiB\"</span></span><br><span class=\"line\">  --- NEW Physical volume ---</span><br><span class=\"line\">  PV Name               /dev/sdb2</span><br><span class=\"line\">  VG Name               </span><br><span class=\"line\">  PV Size               1.86 GiB</span><br><span class=\"line\">  Allocatable           NO</span><br><span class=\"line\">  PE Size               0   </span><br><span class=\"line\">  Total PE              0</span><br><span class=\"line\">  Free PE               0</span><br><span class=\"line\">  Allocated PE          0</span><br><span class=\"line\">  PV UUID               GxoHRk-qwFY-xIPx-fnSK-Oj9w-9A9V-3cIrei</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"string\">\"/dev/sdb1\"</span> is a new physical volume of <span class=\"string\">\"1.86 GiB\"</span></span><br><span class=\"line\">  --- NEW Physical volume ---</span><br><span class=\"line\">  PV Name               /dev/sdb1</span><br><span class=\"line\">  VG Name               </span><br><span class=\"line\">  PV Size               1.86 GiB</span><br><span class=\"line\">  Allocatable           NO</span><br><span class=\"line\">  PE Size               0   </span><br><span class=\"line\">  Total PE              0</span><br><span class=\"line\">  Free PE               0</span><br><span class=\"line\">  Allocated PE          0</span><br><span class=\"line\">  PV UUID               qGXHcS-DYtM-rV90-QChT-Sy0L-qKff-qbfWm3</span><br></pre></td></tr></table></figure></li><li><p>使用<code>pvs</code>命令可以查看物理卷的简要信息：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># pvs</span></span><br><span class=\"line\">  PV         VG Fmt  Attr PSize  PFree </span><br><span class=\"line\">  /dev/sdb1     lvm2 ---   1.86g  1.86g</span><br><span class=\"line\">  /dev/sdb2     lvm2 ---   1.86g  1.86g</span><br><span class=\"line\">  /dev/sdc1     lvm2 ---   2.00g  2.00g</span><br><span class=\"line\">  /dev/sdc2     lvm2 ---  &lt;2.00g &lt;2.00g</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id=\"LVM卷组\"><a href=\"#LVM卷组\" class=\"headerlink\" title=\"LVM卷组\"></a>LVM卷组</h1><h2 id=\"创建卷组\"><a href=\"#创建卷组\" class=\"headerlink\" title=\"创建卷组\"></a>创建卷组</h2><ul><li><p>创建LVM卷组，使用<code>vgcreate</code>命令，命令格式为<code>vgcreate (卷组名) (分区名)</code>，其中分区名可以是多个：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vgcreate vg1 /dev/sdb1 /dev/sdb2</span></span><br><span class=\"line\">  Volume group <span class=\"string\">\"vg1\"</span> successfully created</span><br></pre></td></tr></table></figure></li><li><p>查看已创建的卷组，使用<code>vgdisplay</code>或<code>vgs</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vgdisplay </span></span><br><span class=\"line\">  --- Volume group ---</span><br><span class=\"line\">  VG Name               vg1</span><br><span class=\"line\">  System ID             </span><br><span class=\"line\">  Format                lvm2</span><br><span class=\"line\">  Metadata Areas        2</span><br><span class=\"line\">  Metadata Sequence No  1</span><br><span class=\"line\">  VG Access             <span class=\"built_in\">read</span>/write</span><br><span class=\"line\">  VG Status             resizable</span><br><span class=\"line\">  MAX LV                0</span><br><span class=\"line\">  Cur LV                0</span><br><span class=\"line\">  Open LV               0</span><br><span class=\"line\">  Max PV                0</span><br><span class=\"line\">  Cur PV                2</span><br><span class=\"line\">  Act PV                2</span><br><span class=\"line\">  VG Size               &lt;3.72 GiB</span><br><span class=\"line\">  PE Size               4.00 MiB</span><br><span class=\"line\">  Total PE              952</span><br><span class=\"line\">  Alloc PE / Size       0 / 0   </span><br><span class=\"line\">  Free  PE / Size       952 / &lt;3.72 GiB</span><br><span class=\"line\">  VG UUID               EBbYQ5-v6Gh-U2d4-ZEVS-KO21-FHYk-qaWPib</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vgs</span></span><br><span class=\"line\">  VG  <span class=\"comment\">#PV #LV #SN Attr   VSize  VFree </span></span><br><span class=\"line\">  vg1   2   0   0 wz--n- &lt;3.72g &lt;3.72g</span><br></pre></td></tr></table></figure></li><li><p>使用命令<code>vgremove</code>可以删除卷组：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vgremove vg1</span></span><br><span class=\"line\">  Volume group <span class=\"string\">\"vg1\"</span> successfully removed</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"卷组扩容\"><a href=\"#卷组扩容\" class=\"headerlink\" title=\"卷组扩容\"></a>卷组扩容</h2><ul><li><p>卷组扩容使用<code>vgextend</code>命令，命令用法为<code>vgextend (卷组) (物理卷)</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># pvs</span></span><br><span class=\"line\">  PV         VG  Fmt  Attr PSize  PFree  </span><br><span class=\"line\">  /dev/sdb1  vg1 lvm2 a--  &lt;1.86g 880.00m</span><br><span class=\"line\">  /dev/sdb2  vg1 lvm2 a--  &lt;1.86g  &lt;1.86g</span><br><span class=\"line\">  /dev/sdc1      lvm2 ---   2.00g   2.00g</span><br><span class=\"line\">  /dev/sdc2      lvm2 ---  &lt;2.00g  &lt;2.00g</span><br><span class=\"line\">  </span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vgextend vg1 /dev/sdc1</span></span><br><span class=\"line\">  Volume group <span class=\"string\">\"vg1\"</span> successfully extended</span><br><span class=\"line\">  </span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vgs</span></span><br><span class=\"line\">  VG  <span class=\"comment\">#PV #LV #SN Attr   VSize VFree</span></span><br><span class=\"line\">  vg1   3   1   0 wz--n- 5.71g 4.71g</span><br><span class=\"line\"> </span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># pvs</span></span><br><span class=\"line\">  PV         VG  Fmt  Attr PSize  PFree  </span><br><span class=\"line\">  /dev/sdb1  vg1 lvm2 a--  &lt;1.86g 880.00m</span><br><span class=\"line\">  /dev/sdb2  vg1 lvm2 a--  &lt;1.86g  &lt;1.86g</span><br><span class=\"line\">  /dev/sdc1  vg1 lvm2 a--  &lt;2.00g  &lt;2.00g</span><br><span class=\"line\">  /dev/sdc2      lvm2 ---  &lt;2.00g  &lt;2.00g</span><br></pre></td></tr></table></figure><p>​</p></li></ul><hr><h1 id=\"LVM逻辑卷\"><a href=\"#LVM逻辑卷\" class=\"headerlink\" title=\"LVM逻辑卷\"></a>LVM逻辑卷</h1><h2 id=\"创建逻辑卷\"><a href=\"#创建逻辑卷\" class=\"headerlink\" title=\"创建逻辑卷\"></a>创建逻辑卷</h2><ul><li><p>创建逻辑卷使用命令<code>lvcreate</code>，命令用法为<code>lvcreate -L (逻辑卷大小) -n (逻辑卷名) (卷组名)</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lvcreate -L 500M -n lv1 vg1</span></span><br><span class=\"line\">  Logical volume <span class=\"string\">\"lv1\"</span> created.</span><br></pre></td></tr></table></figure></li><li><p>查看已创建的逻辑卷，使用<code>lvdisplay</code>或<code>lvs</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lvdisplay </span></span><br><span class=\"line\">  --- Logical volume ---</span><br><span class=\"line\">  LV Path                /dev/vg1/lv1</span><br><span class=\"line\">  LV Name                lv1</span><br><span class=\"line\">  VG Name                vg1</span><br><span class=\"line\">  LV UUID                y325TB-keCq-Gl9C-Oh1V-7rMp-CCHe-LjHHfx</span><br><span class=\"line\">  LV Write Access        <span class=\"built_in\">read</span>/write</span><br><span class=\"line\">  LV Creation host, time localhost.localdomain, 2018-04-11 23:29:28 +0800</span><br><span class=\"line\">  LV Status              available</span><br><span class=\"line\">  <span class=\"comment\"># open                 0</span></span><br><span class=\"line\">  LV Size                500.00 MiB</span><br><span class=\"line\">  Current LE             125</span><br><span class=\"line\">  Segments               1</span><br><span class=\"line\">  Allocation             inherit</span><br><span class=\"line\">  Read ahead sectors     auto</span><br><span class=\"line\">  - currently <span class=\"built_in\">set</span> to     8192</span><br><span class=\"line\">  Block device           253:0</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lvs</span></span><br><span class=\"line\">  LV   VG  Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class=\"line\">  lv1  vg1 -wi<span class=\"_\">-a</span>----- 500.00m</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"逻辑卷格式化\"><a href=\"#逻辑卷格式化\" class=\"headerlink\" title=\"逻辑卷格式化\"></a>逻辑卷格式化</h2><ul><li><p>逻辑卷的格式化与分区的格式化相同，只是LVM逻辑卷文件路径与分区文件路径不同：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkfs.ext4 /dev/vg1/lv1 \t# 格式化为ext4</span></span><br><span class=\"line\">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">文件系统标签=</span><br><span class=\"line\">OS <span class=\"built_in\">type</span>: Linux</span><br><span class=\"line\">块大小=1024 (<span class=\"built_in\">log</span>=0)</span><br><span class=\"line\">分块大小=1024 (<span class=\"built_in\">log</span>=0)</span><br><span class=\"line\">Stride=0 blocks, Stripe width=0 blocks</span><br><span class=\"line\">128016 inodes, 512000 blocks</span><br><span class=\"line\">25600 blocks (5.00%) reserved <span class=\"keyword\">for</span> the super user</span><br><span class=\"line\">第一个数据块=1</span><br><span class=\"line\">Maximum filesystem blocks=34078720</span><br><span class=\"line\">63 block groups</span><br><span class=\"line\">8192 blocks per group, 8192 fragments per group</span><br><span class=\"line\">2032 inodes per group</span><br><span class=\"line\">Superblock backups stored on blocks: </span><br><span class=\"line\">\t8193, 24577, 40961, 57345, 73729, 204801, 221185, 401409</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: 完成                            </span><br><span class=\"line\">正在写入inode表: 完成                            </span><br><span class=\"line\">Creating journal (8192 blocks): 完成</span><br><span class=\"line\">Writing superblocks and filesystem accounting information: 完成 </span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkfs.xfs -f /dev/vg1/lv1 \t#格式化为xfs</span></span><br><span class=\"line\">meta-data=/dev/vg1/lv1           isize=512    agcount=4, agsize=32000 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=0, sparse=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=128000, imaxpct=25</span><br><span class=\"line\">         =                       sunit=0      swidth=0 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=4096   blocks=855, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"逻辑卷挂载\"><a href=\"#逻辑卷挂载\" class=\"headerlink\" title=\"逻辑卷挂载\"></a>逻辑卷挂载</h2><ul><li><p>挂在逻辑卷与分区挂载相同，使用<code>mount</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mount /dev/vg1/lv1 /mnt/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># df -h</span></span><br><span class=\"line\">文件系统             容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">/dev/sda3             28G  1.2G   27G    5% /</span><br><span class=\"line\">devtmpfs             487M     0  487M    0% /dev</span><br><span class=\"line\">tmpfs                497M     0  497M    0% /dev/shm</span><br><span class=\"line\">tmpfs                497M  6.6M  490M    2% /run</span><br><span class=\"line\">tmpfs                497M     0  497M    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/sda1            197M  108M   89M   55% /boot</span><br><span class=\"line\">tmpfs                100M     0  100M    0% /run/user/0</span><br><span class=\"line\">/dev/mapper/vg1-lv1  497M   26M  472M    6% /mnt</span><br></pre></td></tr></table></figure></li><li><p>使用<code>df -h</code>查看挂载发现逻辑卷的文件路径与<code>mount</code>时指定的文件不同，实际上两个路径都是指向同一个文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -l /dev/vg1/lv1 </span></span><br><span class=\"line\">lrwxrwxrwx. 1 root root 7 4月  11 23:33 /dev/vg1/lv1 -&gt; ../dm-0</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -l /dev/mapper/vg1-lv1 </span></span><br><span class=\"line\">lrwxrwxrwx. 1 root root 7 4月  11 23:33 /dev/mapper/vg1-lv1 -&gt; ../dm-0</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"逻辑卷扩缩容\"><a href=\"#逻辑卷扩缩容\" class=\"headerlink\" title=\"逻辑卷扩缩容\"></a>逻辑卷扩缩容</h2><h3 id=\"ext文件系统扩容\"><a href=\"#ext文件系统扩容\" class=\"headerlink\" title=\"ext文件系统扩容\"></a>ext文件系统扩容</h3><ul><li><p>扩容逻辑卷使用命令<code>lvresize</code>，用法为<code>lvresize -L (逻辑卷大小) (逻辑卷路径)</code>，扩容前需要现将逻辑卷取消挂载：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># umount /dev/vg1/lv1 </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lvresize -L 800M /dev/vg1/lv1 </span></span><br><span class=\"line\">  Size of logical volume vg1/lv1 changed from 500.00 MiB (125 extents) to 800.00 MiB (200 extents).</span><br><span class=\"line\">  Logical volume vg1/lv1 successfully resized.</span><br></pre></td></tr></table></figure></li><li><p>扩容后需要检查逻辑卷是否存在错误，使用<code>e2fsck -f (逻辑卷)</code>命令进行检查：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lvresize -L 800M /dev/vg1/lv1 </span></span><br><span class=\"line\">  Size of logical volume vg1/lv1 changed from 500.00 MiB (125 extents) to 800.00 MiB (200 extents).</span><br><span class=\"line\">  Logical volume vg1/lv1 successfully resized.</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># e2fsck -f /dev/vg1/lv1 </span></span><br><span class=\"line\">e2fsck 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">第一步: 检查inode,块,和大小</span><br><span class=\"line\">第二步: 检查目录结构</span><br><span class=\"line\">第3步: 检查目录连接性</span><br><span class=\"line\">Pass 4: Checking reference counts</span><br><span class=\"line\">第5步: 检查簇概要信息</span><br><span class=\"line\">/dev/vg1/lv1: 12/128016 files (0.0% non-contiguous), 26686/512000 blocks</span><br></pre></td></tr></table></figure></li><li><p>然后需要更新逻辑卷的信息，使用命令<code>resize2fs (逻辑卷)</code>进行更新：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@localhost ~]<span class=\"comment\"># resize2fs /dev/vg1/lv1 </span></span><br><span class=\"line\">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">Resizing the filesystem on /dev/vg1/lv1 to 819200 (1k) blocks.</span><br><span class=\"line\">The filesystem on /dev/vg1/lv1 is now 819200 blocks long.</span><br></pre></td></tr></table></figure></li><li><p>然后重新挂载逻辑卷即可：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># !mount</span></span><br><span class=\"line\">mount /dev/vg1/lv1 /mnt/</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cat /mnt/test.txt </span></span><br><span class=\"line\">1123456</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"ext文件系统缩容\"><a href=\"#ext文件系统缩容\" class=\"headerlink\" title=\"ext文件系统缩容\"></a>ext文件系统缩容</h3><ul><li><p>xfs文件系统不支持缩容，缩容操作需要先取消逻辑卷的挂载，然后使用<code>e2fsck</code>命令检查磁盘错误，之后更新逻辑卷的信息，最后再设置逻辑卷大小，步骤基本与扩容相反，但是在更新逻辑卷信息时，需要指定新的逻辑卷大小，使用<code>resize2fs (逻辑卷) (缩容后逻辑卷大小)</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># !umount</span></span><br><span class=\"line\">umount /dev/vg1/lv1 </span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># e2fsck -f /dev/vg1/lv1 \t#检查磁盘错误</span></span><br><span class=\"line\">e2fsck 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">第一步: 检查inode,块,和大小</span><br><span class=\"line\">第二步: 检查目录结构</span><br><span class=\"line\">第3步: 检查目录连接性</span><br><span class=\"line\">Pass 4: Checking reference counts</span><br><span class=\"line\">第5步: 检查簇概要信息</span><br><span class=\"line\">/dev/vg1/lv1: 12/203200 files (0.0% non-contiguous), 36419/819200 blocks</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># resize2fs /dev/vg1/lv1 500M\t# 更新逻辑卷信息</span></span><br><span class=\"line\">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">Resizing the filesystem on /dev/vg1/lv1 to 512000 (1k) blocks.</span><br><span class=\"line\">The filesystem on /dev/vg1/lv1 is now 512000 blocks long.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lvresize -L 500M /dev/vg1/lv1 #设置新的大小</span></span><br><span class=\"line\">  WARNING: Reducing active logical volume to 500.00 MiB.</span><br><span class=\"line\">  THIS MAY DESTROY YOUR DATA (filesystem etc.)</span><br><span class=\"line\">Do you really want to reduce vg1/lv1? [y/n]: y</span><br><span class=\"line\">  Size of logical volume vg1/lv1 changed from 800.00 MiB (200 extents) to 500.00 MiB (125 extents).</span><br><span class=\"line\">  Logical volume vg1/lv1 successfully resized.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lvdisplay </span></span><br><span class=\"line\">  --- Logical volume ---</span><br><span class=\"line\">  LV Path                /dev/vg1/lv1</span><br><span class=\"line\">  LV Name                lv1</span><br><span class=\"line\">  VG Name                vg1</span><br><span class=\"line\">  LV UUID                dKQ2IM-hFhJ-iXN9-f5WK-HPrI-dB1a-0P7Q5i</span><br><span class=\"line\">  LV Write Access        <span class=\"built_in\">read</span>/write</span><br><span class=\"line\">  LV Creation host, time localhost.localdomain, 2018-04-11 23:51:47 +0800</span><br><span class=\"line\">  LV Status              available</span><br><span class=\"line\">  <span class=\"comment\"># open                 0</span></span><br><span class=\"line\">  LV Size                500.00 MiB</span><br><span class=\"line\">  Current LE             125</span><br><span class=\"line\">  Segments               1</span><br><span class=\"line\">  Allocation             inherit</span><br><span class=\"line\">  Read ahead sectors     auto</span><br><span class=\"line\">  - currently <span class=\"built_in\">set</span> to     8192</span><br><span class=\"line\">  Block device           253:0</span><br><span class=\"line\">   </span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lvs</span></span><br><span class=\"line\">  LV   VG  Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class=\"line\">  lv1  vg1 -wi<span class=\"_\">-a</span>----- 500.00m</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"xfs文件系统扩容\"><a href=\"#xfs文件系统扩容\" class=\"headerlink\" title=\"xfs文件系统扩容\"></a>xfs文件系统扩容</h3><ul><li><p><code>xfs</code>文件系统的逻辑卷在扩容时不需要卸载，也不需要检查磁盘错误和更新磁盘信息，只需要直接使用<code>lvresize</code>命令扩容即可：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lvresize -L 1G /dev/vg1/lv1 </span></span><br><span class=\"line\">  Size of logical volume vg1/lv1 changed from 500.00 MiB (125 extents) to 1.00 GiB (256 extents).</span><br><span class=\"line\">  Logical volume vg1/lv1 successfully resized.</span><br><span class=\"line\">  </span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lvs</span></span><br><span class=\"line\">  LV   VG  Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class=\"line\">  lv1  vg1 -wi-ao---- 1.00g                                                    </span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># df -h</span></span><br><span class=\"line\">文件系统             容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">/dev/sda3             28G  1.2G   27G    5% /</span><br><span class=\"line\">devtmpfs             487M     0  487M    0% /dev</span><br><span class=\"line\">tmpfs                497M     0  497M    0% /dev/shm</span><br><span class=\"line\">tmpfs                497M  6.6M  490M    2% /run</span><br><span class=\"line\">tmpfs                497M     0  497M    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/sda1            197M  108M   89M   55% /boot</span><br><span class=\"line\">tmpfs                100M     0  100M    0% /run/user/0</span><br><span class=\"line\">/dev/mapper/vg1-lv1  497M   26M  472M    6% /mnt</span><br></pre></td></tr></table></figure></li><li><p>扩容后通过<code>df -h</code>查看挂载信息，逻辑卷的大小并没有更新，需要使用<code>xfs_growfs</code>命令进行更新，用法为<code>xfs_growfs (逻辑卷)</code>，执行这个命令时，磁盘必须已经挂载：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># xfs_growfs /dev/vg1/lv1 </span></span><br><span class=\"line\">meta-data=/dev/mapper/vg1-lv1    isize=512    agcount=4, agsize=32000 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=0 spinodes=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=128000, imaxpct=25</span><br><span class=\"line\">         =                       sunit=0      swidth=0 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal               bsize=4096   blocks=855, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class=\"line\">data blocks changed from 128000 to 262144</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># df -h</span></span><br><span class=\"line\">文件系统             容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">/dev/sda3             28G  1.2G   27G    5% /</span><br><span class=\"line\">devtmpfs             487M     0  487M    0% /dev</span><br><span class=\"line\">tmpfs                497M     0  497M    0% /dev/shm</span><br><span class=\"line\">tmpfs                497M  6.6M  490M    2% /run</span><br><span class=\"line\">tmpfs                497M     0  497M    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/sda1            197M  108M   89M   55% /boot</span><br><span class=\"line\">tmpfs                100M     0  100M    0% /run/user/0</span><br><span class=\"line\">/dev/mapper/vg1-lv1 1021M   26M  996M    3% /mnt</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>当错误配置<code>fstab</code>文件重启之后，系统启动会进入故障模式，这时候需要输入root密码进入系统，然后正确修改<code>fstab</code>文件后重启即可恢复。</p></blockquote><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p>LVM是指逻辑卷管理，由物理磁盘、物理卷、卷组、逻辑卷组成。物理卷组在物理磁盘上创建，磁盘ID为<code>8e</code>，与分区创建相同，一个和多个物理卷组成卷组，在卷组的基础上划分逻辑卷，逻辑卷格式化之后进行挂载。</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1523456458706v7d50vlz.png?imageslim\" alt=\"LVM\"></p><p>LVM相比普通分区，优点在于可以方便的进行扩容和缩容，但是同样也带来了数据恢复困难的缺点。</p>","more":"<hr><h1 id=\"LVM物理卷\"><a href=\"#LVM物理卷\" class=\"headerlink\" title=\"LVM物理卷\"></a>LVM物理卷</h1><h2 id=\"创建物理分区\"><a href=\"#创建物理分区\" class=\"headerlink\" title=\"创建物理分区\"></a>创建物理分区</h2><ul><li>创建物理分区与磁盘分区相同，但需要在<code>fdisk</code>中将分区ID设置为<code>8e</code>，<code>parted</code>中则使用<code>set</code>设置为<code>lvm</code>，然后使用<code>pvcreate</code>命令创建物理卷。</li></ul><h3 id=\"使用fdisk分区\"><a href=\"#使用fdisk分区\" class=\"headerlink\" title=\"使用fdisk分区\"></a>使用fdisk分区</h3><ul><li><p>使用<code>fdisk</code>分区，与之前的磁盘分区一样，只需要使用<code>t</code>将分区ID更改为<code>8e</code>即可：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdc：4294 MB, 4294967296 字节，8388608 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0x3f2e9a4a</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdc1            2048     4196351     2097152   83  Linux</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：t\t<span class=\"comment\"># 将分区ID更改为LVM</span></span><br><span class=\"line\">已选择分区 1</span><br><span class=\"line\">Hex 代码(输入 L 列出所有代码)：8e\t<span class=\"comment\"># 可以输入L列出所以的分区类型代码</span></span><br><span class=\"line\">已将分区“Linux”的类型更改为“Linux LVM”</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdc：4294 MB, 4294967296 字节，8388608 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0x3f2e9a4a</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdc1            2048     4196351     2097152   8e  Linux LVM</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"使用parted分区\"><a href=\"#使用parted分区\" class=\"headerlink\" title=\"使用parted分区\"></a>使用parted分区</h3><ul><li><p>使用<code>parted</code>对GPT格式的磁盘进行分区，同样也需要将分区类型设置为LVM，使用<code>parted</code>的<code>set</code>命令即可：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># parted /dev/sdb mkpart primary 1M 2G set 1 lvm</span></span><br><span class=\"line\">新状态？  [开]/on/关/off? on                                              </span><br><span class=\"line\">信息: You may need to update /etc/fstab.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># fdisk -l /dev/sdb</span></span><br><span class=\"line\">WARNING: fdisk GPT support is currently new, and therefore <span class=\"keyword\">in</span> an experimental phase. Use at your own discretion.</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：gpt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#         Start          End    Size  Type            Name</span></span><br><span class=\"line\"> 1         2048      3905535    1.9G  Linux LVM       primary</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"创建物理卷\"><a href=\"#创建物理卷\" class=\"headerlink\" title=\"创建物理卷\"></a>创建物理卷</h2><ul><li>创建物理卷使用<code>pvcreate</code>命令，这个命令在<code>lvm</code>软件包内，默认并没有安装，使用<code>yum install -y lvm2</code>安装；</li></ul><blockquote><p>当需要使用一个命令，但命令所在的软件包没有安装，并且不知道软件包的名字的时候，可以使用<code>yum provides &quot;/*/pvcreate&quot;</code>命令查找命令所在的软件包，其中<code>&quot;/*/pvcreate&quot;</code>是命令的路径，这里使用通配的方式查找。</p></blockquote><ul><li><p>使用命令<code>pvcreate /dev/sdXX</code>将分区创建为LVM物理卷：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># pvcreate /dev/sdb1</span></span><br><span class=\"line\">WARNING: ext3 signature detected on /dev/sdb1 at offset 1080. Wipe it? [y/n]: y\t<span class=\"comment\"># 由于分区存在文件系统，需要清除</span></span><br><span class=\"line\">  Wiping ext3 signature on /dev/sdb1.</span><br><span class=\"line\">  Physical volume <span class=\"string\">\"/dev/sdb1\"</span> successfully created.</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>有时候创建完分区后，在<code>/dev/</code>目录下新的分区<code>sdb1</code>可能并没有自动生成文件，这时可以使用命令<code>partprobe</code>来生成。</p></blockquote><ul><li><p>使用<code>pvdisplay</code>命令查看物理卷，命令执行结果会列出物理卷的详细信息：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># pvdisplay </span></span><br><span class=\"line\">  <span class=\"string\">\"/dev/sdb2\"</span> is a new physical volume of <span class=\"string\">\"1.86 GiB\"</span></span><br><span class=\"line\">  --- NEW Physical volume ---</span><br><span class=\"line\">  PV Name               /dev/sdb2</span><br><span class=\"line\">  VG Name               </span><br><span class=\"line\">  PV Size               1.86 GiB</span><br><span class=\"line\">  Allocatable           NO</span><br><span class=\"line\">  PE Size               0   </span><br><span class=\"line\">  Total PE              0</span><br><span class=\"line\">  Free PE               0</span><br><span class=\"line\">  Allocated PE          0</span><br><span class=\"line\">  PV UUID               GxoHRk-qwFY-xIPx-fnSK-Oj9w-9A9V-3cIrei</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"string\">\"/dev/sdb1\"</span> is a new physical volume of <span class=\"string\">\"1.86 GiB\"</span></span><br><span class=\"line\">  --- NEW Physical volume ---</span><br><span class=\"line\">  PV Name               /dev/sdb1</span><br><span class=\"line\">  VG Name               </span><br><span class=\"line\">  PV Size               1.86 GiB</span><br><span class=\"line\">  Allocatable           NO</span><br><span class=\"line\">  PE Size               0   </span><br><span class=\"line\">  Total PE              0</span><br><span class=\"line\">  Free PE               0</span><br><span class=\"line\">  Allocated PE          0</span><br><span class=\"line\">  PV UUID               qGXHcS-DYtM-rV90-QChT-Sy0L-qKff-qbfWm3</span><br></pre></td></tr></table></figure></li><li><p>使用<code>pvs</code>命令可以查看物理卷的简要信息：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># pvs</span></span><br><span class=\"line\">  PV         VG Fmt  Attr PSize  PFree </span><br><span class=\"line\">  /dev/sdb1     lvm2 ---   1.86g  1.86g</span><br><span class=\"line\">  /dev/sdb2     lvm2 ---   1.86g  1.86g</span><br><span class=\"line\">  /dev/sdc1     lvm2 ---   2.00g  2.00g</span><br><span class=\"line\">  /dev/sdc2     lvm2 ---  &lt;2.00g &lt;2.00g</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id=\"LVM卷组\"><a href=\"#LVM卷组\" class=\"headerlink\" title=\"LVM卷组\"></a>LVM卷组</h1><h2 id=\"创建卷组\"><a href=\"#创建卷组\" class=\"headerlink\" title=\"创建卷组\"></a>创建卷组</h2><ul><li><p>创建LVM卷组，使用<code>vgcreate</code>命令，命令格式为<code>vgcreate (卷组名) (分区名)</code>，其中分区名可以是多个：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vgcreate vg1 /dev/sdb1 /dev/sdb2</span></span><br><span class=\"line\">  Volume group <span class=\"string\">\"vg1\"</span> successfully created</span><br></pre></td></tr></table></figure></li><li><p>查看已创建的卷组，使用<code>vgdisplay</code>或<code>vgs</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vgdisplay </span></span><br><span class=\"line\">  --- Volume group ---</span><br><span class=\"line\">  VG Name               vg1</span><br><span class=\"line\">  System ID             </span><br><span class=\"line\">  Format                lvm2</span><br><span class=\"line\">  Metadata Areas        2</span><br><span class=\"line\">  Metadata Sequence No  1</span><br><span class=\"line\">  VG Access             <span class=\"built_in\">read</span>/write</span><br><span class=\"line\">  VG Status             resizable</span><br><span class=\"line\">  MAX LV                0</span><br><span class=\"line\">  Cur LV                0</span><br><span class=\"line\">  Open LV               0</span><br><span class=\"line\">  Max PV                0</span><br><span class=\"line\">  Cur PV                2</span><br><span class=\"line\">  Act PV                2</span><br><span class=\"line\">  VG Size               &lt;3.72 GiB</span><br><span class=\"line\">  PE Size               4.00 MiB</span><br><span class=\"line\">  Total PE              952</span><br><span class=\"line\">  Alloc PE / Size       0 / 0   </span><br><span class=\"line\">  Free  PE / Size       952 / &lt;3.72 GiB</span><br><span class=\"line\">  VG UUID               EBbYQ5-v6Gh-U2d4-ZEVS-KO21-FHYk-qaWPib</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vgs</span></span><br><span class=\"line\">  VG  <span class=\"comment\">#PV #LV #SN Attr   VSize  VFree </span></span><br><span class=\"line\">  vg1   2   0   0 wz--n- &lt;3.72g &lt;3.72g</span><br></pre></td></tr></table></figure></li><li><p>使用命令<code>vgremove</code>可以删除卷组：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vgremove vg1</span></span><br><span class=\"line\">  Volume group <span class=\"string\">\"vg1\"</span> successfully removed</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"卷组扩容\"><a href=\"#卷组扩容\" class=\"headerlink\" title=\"卷组扩容\"></a>卷组扩容</h2><ul><li><p>卷组扩容使用<code>vgextend</code>命令，命令用法为<code>vgextend (卷组) (物理卷)</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># pvs</span></span><br><span class=\"line\">  PV         VG  Fmt  Attr PSize  PFree  </span><br><span class=\"line\">  /dev/sdb1  vg1 lvm2 a--  &lt;1.86g 880.00m</span><br><span class=\"line\">  /dev/sdb2  vg1 lvm2 a--  &lt;1.86g  &lt;1.86g</span><br><span class=\"line\">  /dev/sdc1      lvm2 ---   2.00g   2.00g</span><br><span class=\"line\">  /dev/sdc2      lvm2 ---  &lt;2.00g  &lt;2.00g</span><br><span class=\"line\">  </span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vgextend vg1 /dev/sdc1</span></span><br><span class=\"line\">  Volume group <span class=\"string\">\"vg1\"</span> successfully extended</span><br><span class=\"line\">  </span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vgs</span></span><br><span class=\"line\">  VG  <span class=\"comment\">#PV #LV #SN Attr   VSize VFree</span></span><br><span class=\"line\">  vg1   3   1   0 wz--n- 5.71g 4.71g</span><br><span class=\"line\"> </span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># pvs</span></span><br><span class=\"line\">  PV         VG  Fmt  Attr PSize  PFree  </span><br><span class=\"line\">  /dev/sdb1  vg1 lvm2 a--  &lt;1.86g 880.00m</span><br><span class=\"line\">  /dev/sdb2  vg1 lvm2 a--  &lt;1.86g  &lt;1.86g</span><br><span class=\"line\">  /dev/sdc1  vg1 lvm2 a--  &lt;2.00g  &lt;2.00g</span><br><span class=\"line\">  /dev/sdc2      lvm2 ---  &lt;2.00g  &lt;2.00g</span><br></pre></td></tr></table></figure><p>​</p></li></ul><hr><h1 id=\"LVM逻辑卷\"><a href=\"#LVM逻辑卷\" class=\"headerlink\" title=\"LVM逻辑卷\"></a>LVM逻辑卷</h1><h2 id=\"创建逻辑卷\"><a href=\"#创建逻辑卷\" class=\"headerlink\" title=\"创建逻辑卷\"></a>创建逻辑卷</h2><ul><li><p>创建逻辑卷使用命令<code>lvcreate</code>，命令用法为<code>lvcreate -L (逻辑卷大小) -n (逻辑卷名) (卷组名)</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lvcreate -L 500M -n lv1 vg1</span></span><br><span class=\"line\">  Logical volume <span class=\"string\">\"lv1\"</span> created.</span><br></pre></td></tr></table></figure></li><li><p>查看已创建的逻辑卷，使用<code>lvdisplay</code>或<code>lvs</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lvdisplay </span></span><br><span class=\"line\">  --- Logical volume ---</span><br><span class=\"line\">  LV Path                /dev/vg1/lv1</span><br><span class=\"line\">  LV Name                lv1</span><br><span class=\"line\">  VG Name                vg1</span><br><span class=\"line\">  LV UUID                y325TB-keCq-Gl9C-Oh1V-7rMp-CCHe-LjHHfx</span><br><span class=\"line\">  LV Write Access        <span class=\"built_in\">read</span>/write</span><br><span class=\"line\">  LV Creation host, time localhost.localdomain, 2018-04-11 23:29:28 +0800</span><br><span class=\"line\">  LV Status              available</span><br><span class=\"line\">  <span class=\"comment\"># open                 0</span></span><br><span class=\"line\">  LV Size                500.00 MiB</span><br><span class=\"line\">  Current LE             125</span><br><span class=\"line\">  Segments               1</span><br><span class=\"line\">  Allocation             inherit</span><br><span class=\"line\">  Read ahead sectors     auto</span><br><span class=\"line\">  - currently <span class=\"built_in\">set</span> to     8192</span><br><span class=\"line\">  Block device           253:0</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lvs</span></span><br><span class=\"line\">  LV   VG  Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class=\"line\">  lv1  vg1 -wi<span class=\"_\">-a</span>----- 500.00m</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"逻辑卷格式化\"><a href=\"#逻辑卷格式化\" class=\"headerlink\" title=\"逻辑卷格式化\"></a>逻辑卷格式化</h2><ul><li><p>逻辑卷的格式化与分区的格式化相同，只是LVM逻辑卷文件路径与分区文件路径不同：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkfs.ext4 /dev/vg1/lv1 \t# 格式化为ext4</span></span><br><span class=\"line\">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">文件系统标签=</span><br><span class=\"line\">OS <span class=\"built_in\">type</span>: Linux</span><br><span class=\"line\">块大小=1024 (<span class=\"built_in\">log</span>=0)</span><br><span class=\"line\">分块大小=1024 (<span class=\"built_in\">log</span>=0)</span><br><span class=\"line\">Stride=0 blocks, Stripe width=0 blocks</span><br><span class=\"line\">128016 inodes, 512000 blocks</span><br><span class=\"line\">25600 blocks (5.00%) reserved <span class=\"keyword\">for</span> the super user</span><br><span class=\"line\">第一个数据块=1</span><br><span class=\"line\">Maximum filesystem blocks=34078720</span><br><span class=\"line\">63 block groups</span><br><span class=\"line\">8192 blocks per group, 8192 fragments per group</span><br><span class=\"line\">2032 inodes per group</span><br><span class=\"line\">Superblock backups stored on blocks: </span><br><span class=\"line\">\t8193, 24577, 40961, 57345, 73729, 204801, 221185, 401409</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: 完成                            </span><br><span class=\"line\">正在写入inode表: 完成                            </span><br><span class=\"line\">Creating journal (8192 blocks): 完成</span><br><span class=\"line\">Writing superblocks and filesystem accounting information: 完成 </span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkfs.xfs -f /dev/vg1/lv1 \t#格式化为xfs</span></span><br><span class=\"line\">meta-data=/dev/vg1/lv1           isize=512    agcount=4, agsize=32000 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=0, sparse=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=128000, imaxpct=25</span><br><span class=\"line\">         =                       sunit=0      swidth=0 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=4096   blocks=855, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"逻辑卷挂载\"><a href=\"#逻辑卷挂载\" class=\"headerlink\" title=\"逻辑卷挂载\"></a>逻辑卷挂载</h2><ul><li><p>挂在逻辑卷与分区挂载相同，使用<code>mount</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mount /dev/vg1/lv1 /mnt/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># df -h</span></span><br><span class=\"line\">文件系统             容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">/dev/sda3             28G  1.2G   27G    5% /</span><br><span class=\"line\">devtmpfs             487M     0  487M    0% /dev</span><br><span class=\"line\">tmpfs                497M     0  497M    0% /dev/shm</span><br><span class=\"line\">tmpfs                497M  6.6M  490M    2% /run</span><br><span class=\"line\">tmpfs                497M     0  497M    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/sda1            197M  108M   89M   55% /boot</span><br><span class=\"line\">tmpfs                100M     0  100M    0% /run/user/0</span><br><span class=\"line\">/dev/mapper/vg1-lv1  497M   26M  472M    6% /mnt</span><br></pre></td></tr></table></figure></li><li><p>使用<code>df -h</code>查看挂载发现逻辑卷的文件路径与<code>mount</code>时指定的文件不同，实际上两个路径都是指向同一个文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -l /dev/vg1/lv1 </span></span><br><span class=\"line\">lrwxrwxrwx. 1 root root 7 4月  11 23:33 /dev/vg1/lv1 -&gt; ../dm-0</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls -l /dev/mapper/vg1-lv1 </span></span><br><span class=\"line\">lrwxrwxrwx. 1 root root 7 4月  11 23:33 /dev/mapper/vg1-lv1 -&gt; ../dm-0</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"逻辑卷扩缩容\"><a href=\"#逻辑卷扩缩容\" class=\"headerlink\" title=\"逻辑卷扩缩容\"></a>逻辑卷扩缩容</h2><h3 id=\"ext文件系统扩容\"><a href=\"#ext文件系统扩容\" class=\"headerlink\" title=\"ext文件系统扩容\"></a>ext文件系统扩容</h3><ul><li><p>扩容逻辑卷使用命令<code>lvresize</code>，用法为<code>lvresize -L (逻辑卷大小) (逻辑卷路径)</code>，扩容前需要现将逻辑卷取消挂载：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># umount /dev/vg1/lv1 </span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lvresize -L 800M /dev/vg1/lv1 </span></span><br><span class=\"line\">  Size of logical volume vg1/lv1 changed from 500.00 MiB (125 extents) to 800.00 MiB (200 extents).</span><br><span class=\"line\">  Logical volume vg1/lv1 successfully resized.</span><br></pre></td></tr></table></figure></li><li><p>扩容后需要检查逻辑卷是否存在错误，使用<code>e2fsck -f (逻辑卷)</code>命令进行检查：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lvresize -L 800M /dev/vg1/lv1 </span></span><br><span class=\"line\">  Size of logical volume vg1/lv1 changed from 500.00 MiB (125 extents) to 800.00 MiB (200 extents).</span><br><span class=\"line\">  Logical volume vg1/lv1 successfully resized.</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># e2fsck -f /dev/vg1/lv1 </span></span><br><span class=\"line\">e2fsck 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">第一步: 检查inode,块,和大小</span><br><span class=\"line\">第二步: 检查目录结构</span><br><span class=\"line\">第3步: 检查目录连接性</span><br><span class=\"line\">Pass 4: Checking reference counts</span><br><span class=\"line\">第5步: 检查簇概要信息</span><br><span class=\"line\">/dev/vg1/lv1: 12/128016 files (0.0% non-contiguous), 26686/512000 blocks</span><br></pre></td></tr></table></figure></li><li><p>然后需要更新逻辑卷的信息，使用命令<code>resize2fs (逻辑卷)</code>进行更新：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@localhost ~]<span class=\"comment\"># resize2fs /dev/vg1/lv1 </span></span><br><span class=\"line\">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">Resizing the filesystem on /dev/vg1/lv1 to 819200 (1k) blocks.</span><br><span class=\"line\">The filesystem on /dev/vg1/lv1 is now 819200 blocks long.</span><br></pre></td></tr></table></figure></li><li><p>然后重新挂载逻辑卷即可：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># !mount</span></span><br><span class=\"line\">mount /dev/vg1/lv1 /mnt/</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cat /mnt/test.txt </span></span><br><span class=\"line\">1123456</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"ext文件系统缩容\"><a href=\"#ext文件系统缩容\" class=\"headerlink\" title=\"ext文件系统缩容\"></a>ext文件系统缩容</h3><ul><li><p>xfs文件系统不支持缩容，缩容操作需要先取消逻辑卷的挂载，然后使用<code>e2fsck</code>命令检查磁盘错误，之后更新逻辑卷的信息，最后再设置逻辑卷大小，步骤基本与扩容相反，但是在更新逻辑卷信息时，需要指定新的逻辑卷大小，使用<code>resize2fs (逻辑卷) (缩容后逻辑卷大小)</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># !umount</span></span><br><span class=\"line\">umount /dev/vg1/lv1 </span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># e2fsck -f /dev/vg1/lv1 \t#检查磁盘错误</span></span><br><span class=\"line\">e2fsck 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">第一步: 检查inode,块,和大小</span><br><span class=\"line\">第二步: 检查目录结构</span><br><span class=\"line\">第3步: 检查目录连接性</span><br><span class=\"line\">Pass 4: Checking reference counts</span><br><span class=\"line\">第5步: 检查簇概要信息</span><br><span class=\"line\">/dev/vg1/lv1: 12/203200 files (0.0% non-contiguous), 36419/819200 blocks</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># resize2fs /dev/vg1/lv1 500M\t# 更新逻辑卷信息</span></span><br><span class=\"line\">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">Resizing the filesystem on /dev/vg1/lv1 to 512000 (1k) blocks.</span><br><span class=\"line\">The filesystem on /dev/vg1/lv1 is now 512000 blocks long.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lvresize -L 500M /dev/vg1/lv1 #设置新的大小</span></span><br><span class=\"line\">  WARNING: Reducing active logical volume to 500.00 MiB.</span><br><span class=\"line\">  THIS MAY DESTROY YOUR DATA (filesystem etc.)</span><br><span class=\"line\">Do you really want to reduce vg1/lv1? [y/n]: y</span><br><span class=\"line\">  Size of logical volume vg1/lv1 changed from 800.00 MiB (200 extents) to 500.00 MiB (125 extents).</span><br><span class=\"line\">  Logical volume vg1/lv1 successfully resized.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lvdisplay </span></span><br><span class=\"line\">  --- Logical volume ---</span><br><span class=\"line\">  LV Path                /dev/vg1/lv1</span><br><span class=\"line\">  LV Name                lv1</span><br><span class=\"line\">  VG Name                vg1</span><br><span class=\"line\">  LV UUID                dKQ2IM-hFhJ-iXN9-f5WK-HPrI-dB1a-0P7Q5i</span><br><span class=\"line\">  LV Write Access        <span class=\"built_in\">read</span>/write</span><br><span class=\"line\">  LV Creation host, time localhost.localdomain, 2018-04-11 23:51:47 +0800</span><br><span class=\"line\">  LV Status              available</span><br><span class=\"line\">  <span class=\"comment\"># open                 0</span></span><br><span class=\"line\">  LV Size                500.00 MiB</span><br><span class=\"line\">  Current LE             125</span><br><span class=\"line\">  Segments               1</span><br><span class=\"line\">  Allocation             inherit</span><br><span class=\"line\">  Read ahead sectors     auto</span><br><span class=\"line\">  - currently <span class=\"built_in\">set</span> to     8192</span><br><span class=\"line\">  Block device           253:0</span><br><span class=\"line\">   </span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lvs</span></span><br><span class=\"line\">  LV   VG  Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class=\"line\">  lv1  vg1 -wi<span class=\"_\">-a</span>----- 500.00m</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"xfs文件系统扩容\"><a href=\"#xfs文件系统扩容\" class=\"headerlink\" title=\"xfs文件系统扩容\"></a>xfs文件系统扩容</h3><ul><li><p><code>xfs</code>文件系统的逻辑卷在扩容时不需要卸载，也不需要检查磁盘错误和更新磁盘信息，只需要直接使用<code>lvresize</code>命令扩容即可：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lvresize -L 1G /dev/vg1/lv1 </span></span><br><span class=\"line\">  Size of logical volume vg1/lv1 changed from 500.00 MiB (125 extents) to 1.00 GiB (256 extents).</span><br><span class=\"line\">  Logical volume vg1/lv1 successfully resized.</span><br><span class=\"line\">  </span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># lvs</span></span><br><span class=\"line\">  LV   VG  Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class=\"line\">  lv1  vg1 -wi-ao---- 1.00g                                                    </span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># df -h</span></span><br><span class=\"line\">文件系统             容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">/dev/sda3             28G  1.2G   27G    5% /</span><br><span class=\"line\">devtmpfs             487M     0  487M    0% /dev</span><br><span class=\"line\">tmpfs                497M     0  497M    0% /dev/shm</span><br><span class=\"line\">tmpfs                497M  6.6M  490M    2% /run</span><br><span class=\"line\">tmpfs                497M     0  497M    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/sda1            197M  108M   89M   55% /boot</span><br><span class=\"line\">tmpfs                100M     0  100M    0% /run/user/0</span><br><span class=\"line\">/dev/mapper/vg1-lv1  497M   26M  472M    6% /mnt</span><br></pre></td></tr></table></figure></li><li><p>扩容后通过<code>df -h</code>查看挂载信息，逻辑卷的大小并没有更新，需要使用<code>xfs_growfs</code>命令进行更新，用法为<code>xfs_growfs (逻辑卷)</code>，执行这个命令时，磁盘必须已经挂载：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># xfs_growfs /dev/vg1/lv1 </span></span><br><span class=\"line\">meta-data=/dev/mapper/vg1-lv1    isize=512    agcount=4, agsize=32000 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=0 spinodes=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=128000, imaxpct=25</span><br><span class=\"line\">         =                       sunit=0      swidth=0 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal               bsize=4096   blocks=855, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class=\"line\">data blocks changed from 128000 to 262144</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># df -h</span></span><br><span class=\"line\">文件系统             容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">/dev/sda3             28G  1.2G   27G    5% /</span><br><span class=\"line\">devtmpfs             487M     0  487M    0% /dev</span><br><span class=\"line\">tmpfs                497M     0  497M    0% /dev/shm</span><br><span class=\"line\">tmpfs                497M  6.6M  490M    2% /run</span><br><span class=\"line\">tmpfs                497M     0  497M    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/sda1            197M  108M   89M   55% /boot</span><br><span class=\"line\">tmpfs                100M     0  100M    0% /run/user/0</span><br><span class=\"line\">/dev/mapper/vg1-lv1 1021M   26M  996M    3% /mnt</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>当错误配置<code>fstab</code>文件重启之后，系统启动会进入故障模式，这时候需要输入root密码进入系统，然后正确修改<code>fstab</code>文件后重启即可恢复。</p></blockquote><hr><!-- rebuild by neat -->"},{"title":"Linux磁盘管理——df & du命令及磁盘分区","author":"Evobot","abbrlink":"43eb8ab5","date":"2018-04-09T12:30:03.000Z","image":null,"_content":"![磁盘分区](http://p5qynomrl.bkt.clouddn.com/1523288634264cki496jp.png?imageslim)\n主要介绍Linux系统中磁盘管理命令`df`和`du`命令的用法，以及使用`fdisk`和`parted`命令行工具对磁盘的分区操作。\n\n<!--more-->\n\n# 磁盘管理\n\n## df命令\n\n- `df`命令是用来查看文件系统磁盘使用情况的命令，直接执行`df`命令得到如下结果：\n\n  ```bash\n  [root@evobot ~]# df\n  文件系统          1K-块    已用     可用 已用% 挂载点\n  /dev/vda1      51474024 2633324 46534624    6% /\n  devtmpfs         932260       0   932260    0% /dev\n  tmpfs            941768      24   941744    1% /dev/shm\n  tmpfs            941768     356   941412    1% /run\n  tmpfs            941768       0   941768    0% /sys/fs/cgroup\n  tmpfs            188356       0   188356    0% /run/user/0\n  tmpfs            188356       0   188356    0% /run/user/1001\n  ```\n\n- 命令执行的结果中，第一列表示文件系统，也就是磁盘分区的名字；第二列为磁盘总大小，单位为KB；第三列为分区已使用大小；第四列为磁盘剩余空间大小；第五列为磁盘已使用空间大小百分比；最后一列为磁盘挂载点，即系统内的目录。\n\n- `df`命令常用选项`-h`可以人性化显示，如磁盘空间大小单位：\n\n  ```bash\n  [root@evobot ~]# df -h\n  文件系统        容量  已用  可用 已用% 挂载点\n  /dev/vda1        50G  2.6G   45G    6% /\n  devtmpfs        911M     0  911M    0% /dev\n  tmpfs           920M   24K  920M    1% /dev/shm\n  tmpfs           920M  356K  920M    1% /run\n  tmpfs           920M     0  920M    0% /sys/fs/cgroup\n  tmpfs           184M     0  184M    0% /run/user/0\n  tmpfs           184M     0  184M    0% /run/user/1001\n\n  ```\n\n- 在第一列的文件系统中，`tmpfs`代表临时文件系统，相应挂载点内的文件会在重启后消失，而挂载点的`/dev/shm`则是内存，大小为实际内存大小的一半；\n\n- 而分区时指定的`swap`分区并不会在`df`命令中列出来，使用`free`命令可以查看`swap`分区大小:\n\n  ```bash\n  [root@evobot ~]# free\n                total        used        free      shared  buff/cache   available\n  Mem:        1883540       87236      575564         380     1220740     1598584\n  Swap:             0           0           0\n\n  ```\n\n- `df`的另一个常用选项为`-i`，用来查看分区的`inode`使用情况，`inode`的多少与磁盘分区大小有关，并且是在分区格式化时就分配的：\n\n  ```bash\n  [root@evobot ~]# df -i\n  文件系统         Inode 已用(I) 可用(I) 已用(I)% 挂载点\n  /dev/vda1      3276800   81696 3195104       3% /\n  devtmpfs        233065     320  232745       1% /dev\n  tmpfs           235442       7  235435       1% /dev/shm\n  tmpfs           235442     376  235066       1% /run\n  tmpfs           235442      16  235426       1% /sys/fs/cgroup\n  tmpfs           235442       1  235441       1% /run/user/0\n  tmpfs           235442       1  235441       1% /run/user/1001\n\n  ```\n\n## du命令\n\n- du命令用来查看一个文件或者目录的大小，一般常用用法为`du -sh (文件或目录)`：\n\n  ```bash\n  [root@evobot ~]# du -sh source/\n  260K\tsource/\n\n  [root@evobot ~]# du -sh /etc/passwd\n  4.0K\t/etc/passwd\n  [root@evobot ~]# ls -lh /etc/passwd\n  -rw-r--r-- 1 root root 1.4K 4月   3 23:31 /etc/passwd\n\n  ```\n\n- 上面的命令结果中，同一个文件，使用`du`命令和`ls`命令查看但文件大小却不相同，这是因为磁盘分区时是由一个个4K大小的块组成的，当文件小于4K时，也会占用磁盘分区上一个块，所以使用`du`命令查看时，会显示为4K；\n\n- `du`命令在不加选项时，默认不显示单位，并且会将目录下的所有文件都列出来；\n\n---\n\n# 磁盘分区\n\n- 在实际使用中，经常需要给服务器磁盘进行扩容，增加磁盘，在虚拟机上，我们直接为系统增加一块硬盘，由于虚拟机并不支持自动识别新硬盘，所以需要重启之后才能查看到新添加的磁盘。\n\n\n\n## **fdisk**命令\n\n- `fdisk `命令可以用来查看系统中的磁盘，也可以对磁盘进行分区操作，其中查看磁盘的选项为`fdisk -l`：\n\n  ```bash\n  [root@localhost ~]# fdisk -l\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n\n\n\n  磁盘 /dev/sda：32.2 GB, 32212254720 字节，62914560 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0x00022876\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sda1   *        2048      411647      204800   83  Linux\n  /dev/sda2          411648     4605951     2097152   82  Linux swap / Solaris\n  /dev/sda3         4605952    62914559    29154304   83  Linux\n\n  ```\n\n- 上面的`/dev/sdb`就是新增加的磁盘，使用`fdisk (磁盘名)`进行磁盘管理，进入`fdisk`的命令行界面后，可以输入`m`回车查看帮助信息：\n\n  ```bash\n  [root@localhost ~]# fdisk /dev/sdb\n  欢迎使用 fdisk (util-linux 2.23.2)。\n\n  更改将停留在内存中，直到您决定将更改写入磁盘。\n  使用写入命令前请三思。\n\n  Device does not contain a recognized partition table\n  使用磁盘标识符 0x216a8918 创建新的 DOS 磁盘标签。\n\n  命令(输入 m 获取帮助)：m\n  命令操作\n     a   toggle a bootable flag\n     b   edit bsd disklabel\n     c   toggle the dos compatibility flag\n     d   delete a partition\n     g   create a new empty GPT partition table\n     G   create an IRIX (SGI) partition table\n     l   list known partition types\n     m   print this menu\n     n   add a new partition\n     o   create a new empty DOS partition table\n     p   print the partition table\n     q   quit without saving changes\n     s   create a new empty Sun disklabel\n     t   change a partition's system id\n     u   change display/entry units\n     v   verify the partition table\n     w   write table to disk and exit\n     x   extra functionality (experts only)\n\n  命令(输入 m 获取帮助)：\n\n  ```\n\n- 常用的操作为`n`增加新分区，`p`打印分区信息，`w`保存分区信息并退出、`d`删除分区。\n\n## 使用fdisk对磁盘分区\n\n- 使用`ｐ`命令查看当前磁盘分区情况：\n\n  ```bash\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0x216a8918\n\n     设备 Boot      Start         End      Blocks   Id  System\n\n  ```\n\n- 当前磁盘没有分区，使用`n`命令增加一个分区：\n\n  ```bash\n  命令(输入 m 获取帮助)：n\n  Partition type:\n     p   primary (0 primary, 0 extended, 4 free)\n     e   extended\n  Select (default p):\n  ```\n\n- 由于`fdisk`只能对2T以下大小的`mbr`分区格式的磁盘进行分区，而`mbr`格式的磁盘主分区及扩展分区总数不能超过4个，所以`n`命令之后给出的选项，`p`为主分区，`e`为扩展分区：\n\n  ```bash\n  Select (default p): p\n  分区号 (1-4，默认 1)：1\n  起始 扇区 (2048-20971519，默认为 2048)：\n  将使用默认值 2048\n  Last 扇区, +扇区 or +size{K,M,G} (2048-20971519，默认为 20971519)：+2G\n  分区 1 已设置为 Linux 类型，大小设为 2 GiB\n\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0x216a8918\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     4196351     2097152   83  Linux\n  ```\n\n- 上面的步骤创建了一个主分区，指定了分区号为1，大小使用`+2G`的形式指定磁盘大小为2G，使用`p`命令可以查看新创建的分区；\n\n- 主分区一旦达到4个，磁盘将不能够再继续分区，可以使用`d`命令删除分区后，划分一个扩展分区：\n\n  ```bash\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0xea193fb2\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     4196351     2097152   83  Linux\n  /dev/sdb2         4196352    10487807     3145728   83  Linux\n  /dev/sdb3        10487808    16779263     3145728   83  Linux\n  /dev/sdb4        16779264    20971519     2096128   83  Linux\n\n  命令(输入 m 获取帮助)：n\n  If you want to create more than four partitions, you must replace a\n  primary partition with an extended partition first.\n  # 划分4个主分区后，再新增分区会有相应的提示\n\n  命令(输入 m 获取帮助)：d\n  分区号 (1-3，默认 3)：3\n  分区 3 已删除\n\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0xea193fb2\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     4196351     2097152   83  Linux\n  /dev/sdb2         4196352    10487807     3145728   83  Linux\n  # 已经将3,4两个分区删除\n\n  命令(输入 m 获取帮助)：n\n  Partition type:\n     p   primary (2 primary, 0 extended, 2 free)\n     e   extended\n  Select (default p): e\n  分区号 (3,4，默认 3)：\n  起始 扇区 (10487808-20971519，默认为 10487808)：\n  将使用默认值 10487808\n  Last 扇区, +扇区 or +size{K,M,G} (10487808-20971519，默认为 20971519)：+3G\n  分区 3 已设置为 Extended 类型，大小设为 3 GiB\n\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0xea193fb2\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     4196351     2097152   83  Linux\n  /dev/sdb2         4196352    10487807     3145728   83  Linux\n  /dev/sdb3        10487808    16779263     3145728    5  Extended\n\n  命令(输入 m 获取帮助)：n\n  Partition type:\n     p   primary (2 primary, 1 extended, 1 free)\n     l   logical (numbered from 5)\n  Select (default p): \n\n  ```\n\n- 从上面的命令结果可以看到新创建的扩展分区的`id`为5，而主分区的类型`id`则为83，并且由于主分区加扩展分区未达到4个，再次增加分区时，可以继续增加主分区，也可以选择在扩展分区内添加逻辑分区，使用`l`命令增加逻辑分区：\n\n  ```bash\n  命令(输入 m 获取帮助)：n\n  Partition type:\n     p   primary (2 primary, 1 extended, 1 free)\n     l   logical (numbered from 5)\n  Select (default p): p\n  已选择分区 4\n  起始 扇区 (16779264-20971519，默认为 16779264)：\n  将使用默认值 16779264\n  Last 扇区, +扇区 or +size{K,M,G} (16779264-20971519，默认为 20971519)：\n  将使用默认值 20971519\n  分区 4 已设置为 Linux 类型，大小设为 2 GiB\n\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0xea193fb2\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     4196351     2097152   83  Linux\n  /dev/sdb2         4196352    10487807     3145728   83  Linux\n  /dev/sdb3        10487808    16779263     3145728    5  Extended\n  /dev/sdb4        16779264    20971519     2096128   83  Linux\n\n  命令(输入 m 获取帮助)：n\t#当主分区和逻辑分区达到4个时，再增加分区只会增加逻辑分区\n  All primary partitions are in use\n  添加逻辑分区 5\n  起始 扇区 (10489856-16779263，默认为 10489856)：\n  将使用默认值 10489856\n  Last 扇区, +扇区 or +size{K,M,G} (10489856-16779263，默认为 16779263)：+1G\n  分区 5 已设置为 Linux 类型，大小设为 1 GiB\n\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0xea193fb2\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     4196351     2097152   83  Linux\n  /dev/sdb2         4196352    10487807     3145728   83  Linux\n  /dev/sdb3        10487808    16779263     3145728    5  Extended\n  /dev/sdb4        16779264    20971519     2096128   83  Linux\n  /dev/sdb5        10489856    12587007     1048576   83  Linux\n  # 新增的分区 5 就是逻辑分区\n  ```\n\n- 逻辑分区的分区号在删除后会重新排序，并不会留空：\n\n  ```bash\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0xea193fb2\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     4196351     2097152   83  Linux\n  /dev/sdb2         4196352    10487807     3145728   83  Linux\n  /dev/sdb3        10487808    16779263     3145728    5  Extended\n  /dev/sdb4        16779264    20971519     2096128   83  Linux\n  /dev/sdb5        10489856    12587007     1048576   83  Linux\n  /dev/sdb6        12589056    16779263     2095104   83  Linux\n\n  命令(输入 m 获取帮助)：d\n  分区号 (1-6，默认 6)：5\n  分区 5 已删除\n\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0xea193fb2\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     4196351     2097152   83  Linux\n  /dev/sdb2         4196352    10487807     3145728   83  Linux\n  /dev/sdb3        10487808    16779263     3145728    5  Extended\n  /dev/sdb4        16779264    20971519     2096128   83  Linux\n  /dev/sdb5        12589056    16779263     2095104   83  Linux\n  # 可以看到原来的6号分区变成了5号分区\n  ```\n\n- `fdisk`中使用`q`命令可以放弃对分区的更改并退出；\n\n- 当划分扩展分区时，逻辑分区的分区号一定是从5开始的，前4个分区号是留给主分区或扩展分区的：\n\n  ```bash\n  命令(输入 m 获取帮助)：n\n  Partition type:\n     p   primary (0 primary, 0 extended, 4 free)\n     e   extended\n  Select (default p): e\t#先创建一个逻辑分区\n  分区号 (1-4，默认 1)：\n  起始 扇区 (2048-20971519，默认为 2048)： \n  将使用默认值 2048\n  Last 扇区, +扇区 or +size{K,M,G} (2048-20971519，默认为 20971519)：+3G\n  分区 1 已设置为 Extended 类型，大小设为 3 GiB\n\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0xab7f9d31\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     6293503     3145728    5  Extended\n\n  命令(输入 m 获取帮助)：n\t# 再创建一个分区号为3的主分区\n  Partition type:\n     p   primary (0 primary, 1 extended, 3 free)\n     l   logical (numbered from 5)\n  Select (default p): p\n  分区号 (2-4，默认 2)：3\n  起始 扇区 (6293504-20971519，默认为 6293504)：\n  将使用默认值 6293504\n  Last 扇区, +扇区 or +size{K,M,G} (6293504-20971519，默认为 20971519)：+2G\n  分区 3 已设置为 Linux 类型，大小设为 2 GiB\n\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0xab7f9d31\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     6293503     3145728    5  Extended\n  /dev/sdb3         6293504    10487807     2097152   83  Linux\n\n  命令(输入 m 获取帮助)：n\t# 创建一个逻辑分区\n  Partition type:\n     p   primary (1 primary, 1 extended, 2 free)\n     l   logical (numbered from 5)\n  Select (default p): l\n  添加逻辑分区 5\n  起始 扇区 (4096-6293503，默认为 4096)：\n  将使用默认值 4096\n  Last 扇区, +扇区 or +size{K,M,G} (4096-6293503，默认为 6293503)：+1G\n  分区 5 已设置为 Linux 类型，大小设为 1 GiB\n\n  命令(输入 m 获取帮助)：p\t# 可以看到逻辑分区的分区号从5开始\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0xab7f9d31\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     6293503     3145728    5  Extended\n  /dev/sdb3         6293504    10487807     2097152   83  Linux\n  /dev/sdb5            4096     2101247     1048576   83  Linux\n  ```\n\n## parted命令\n\n- 由于mbr分区格式磁盘大小不能超过2T，所以GPT格式逐渐成为主流，GPT格式没有主分区、逻辑分区、扩展分区之分，在一块GPT格式的磁盘上，最多可以划分128个分区；\n- 而`parted`则是支持对MBR和GPT格式磁盘进行分区的命令行工具，常用的功能如下：\n\n<style>\ntable th:first-of-type {\n\n    width: 100px;\n}\ntable th {\n    text-align: center;\n}\n</style>\n\n| 常用功能命令     | 作用                                       |\n| :----------: | ---------------------------------------- |\n| `check`    | 检查文件系统，建议使用`fsck`命令检查                    |\n| `mklabel`  | 创建分区表，即使用MBR还是GPT或其他分区表格式                |\n| `mkfs`     | 创建文件系统，由于该命令不支持ext3，所以建议分区完成后使用其他命令创建文件系统 |\n| `mkpart`   | 创建新分区，格式为`mkpart (part-type) (fs-type) start end`，`part-type`主要有`primary(主分区)`、`extended(扩展分区)`、`logical(逻辑分区)`，扩展和逻辑分区只对MBR格式有效，`fs-type`则是文件系统类型，如ext3、ext4，`start`&`end`则是分区起始和结束位置 |\n| `mkpartfs` | 建立分区及其文件系统，与mkfs类似，不建议使用                 |\n| `print`    | 输出分区信息，该命令有`free`显示该磁盘所以信息，并显示磁盘剩余空间；`number`显示指定分区信息；`all`显示所以磁盘信息三个选项 |\n| `resize`   | 调整指定的分区大小                                |\n| `rescue`   | 恢复被`parted`的`rm`命令删除的分区，需要给出分区的起始和结束位置，当查找到被删除的分区时，会提示恢复 |\n| `rm`       | 删除分区，格式为`rm (分区编号)`                      |\n| `select`   | 选择设备，存在多块磁盘时，需要选择操作的磁盘，格式为`select /dev/sdb` |\n| `set`      | 更改指定分区编号的标志，标志有boot引导分区，hidden隐藏分区，raid软raid，lvm等，命令格式为`set 3 boot on`，即为设置3号分区为启动分区 |\n\n## 使用parted对磁盘分区\n\n- 使用`parted (磁盘分区路径)`对指定的磁盘进行操作，并使用`mklabel`命令将磁盘分区表改为GPT格式：\n\n  ```bash\n  [root@localhost ~]# parted /dev/sdb\n  GNU Parted 3.1\n  使用 /dev/sdb\n  Welcome to GNU Parted! Type 'help' to view a list of commands.\n  (parted) print                                                            \n  Model: ATA VBOX HARDDISK (scsi)\n  Disk /dev/sdb: 10.7GB\n  Sector size (logical/physical): 512B/512B\n  Partition Table: msdos\n  Disk Flags: \n\n  Number  Start  End  Size  Type  File system  标志\n\n  (parted) mklabel gpt    # 更改为GPT格式分区表                                                  \n  警告: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want\n  to continue?\n  是/Yes/否/No? y                                                           \n  (parted) print                                                            \n  Model: ATA VBOX HARDDISK (scsi)\n  Disk /dev/sdb: 10.7GB\n  Sector size (logical/physical): 512B/512B\n  Partition Table: gpt\t# 磁盘分区表格式已经修改成功\n  Disk Flags: \n\n  Number  Start  End  Size  File system  Name  标志\n\n  ```\n\n- 新增分区使用`mkpart`命令，并指定为`primary`主分区：\n\n  ```bash\n  (parted) mkpart primary 1M 2G\t#创建一个2G大小的主分区\n  (parted) print                                                            \n  Model: ATA VBOX HARDDISK (scsi)\n  Disk /dev/sdb: 10.7GB\n  Sector size (logical/physical): 512B/512B\n  Partition Table: gpt\n  Disk Flags: \n\n  Number  Start   End     Size    File system  Name     标志\n   1      1049kB  2000MB  1999MB               primary\n\n  ```\n\n- `parted`创建的分区不需要保存即可生效，使用`q`命令退出`parted`交互模式，再用`fdisk -l`查看已经新增的分区：\n\n  ```bash\n  [root@localhost ~]# fdisk -l                                              \n  WARNING: fdisk GPT support is currently new, and therefore in an experimental phase. Use at your own discretion.\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：gpt\n\n\n  #         Start          End    Size  Type            Name\n   1         2048      3905535    1.9G  Microsoft basic primary\n\n  磁盘 /dev/sda：32.2 GB, 32212254720 字节，62914560 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0x00022876\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sda1   *        2048      411647      204800   83  Linux\n  /dev/sda2          411648     4605951     2097152   82  Linux swap / Solaris\n  /dev/sda3         4605952    62914559    29154304   83  Linux\n\n  ```\n\n- 将分区格式化为ext4格式，使用`mkfs.ext4`命令：\n\n  ```bash\n  [root@localhost ~]# mkfs.ext4 /dev/sdb1\n  mke2fs 1.42.9 (28-Dec-2013)\n  文件系统标签=\n  OS type: Linux\n  块大小=4096 (log=2)\n  分块大小=4096 (log=2)\n  Stride=0 blocks, Stripe width=0 blocks\n  122160 inodes, 487936 blocks\n  24396 blocks (5.00%) reserved for the super user\n  第一个数据块=0\n  Maximum filesystem blocks=501219328\n  15 block groups\n  32768 blocks per group, 32768 fragments per group\n  8144 inodes per group\n  Superblock backups stored on blocks: \n  \t32768, 98304, 163840, 229376, 294912\n\n  Allocating group tables: 完成                            \n  正在写入inode表: 完成                            \n  Creating journal (8192 blocks): 完成\n  Writing superblocks and filesystem accounting information: 完成 \n\n  [root@localhost ~]# parted /dev/sdb\n  GNU Parted 3.1\n  使用 /dev/sdb\n  Welcome to GNU Parted! Type 'help' to view a list of commands.\n  (parted) print                                                            \n  Model: ATA VBOX HARDDISK (scsi)\n  Disk /dev/sdb: 10.7GB\n  Sector size (logical/physical): 512B/512B\n  Partition Table: gpt\n  Disk Flags: \n\n  Number  Start   End     Size    File system     Name     标志\n   1      1049kB  2000MB  1999MB  ext4            primary\n  ```\n\n\n- `parted`也可以不进入交互模式而对磁盘进行分区操作，比如创建一个新的swap分区：\n\n  ```bash\n  [root@localhost ~]# parted /dev/sdb mkpart swap 2G 3G\t# 创建一个1G大小的swap分区\n  信息: You may need to update /etc/fstab.\n\n  [root@localhost ~]# fdisk -l                                              \n  WARNING: fdisk GPT support is currently new, and therefore in an experimental phase. Use at your own discretion.\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：gpt\n\n\n  #         Start          End    Size  Type            Name\n   1         2048      3905535    1.9G  Microsoft basic primary\n   2      3905536      5859327    954M  Microsoft basic swap\n\n  ```\n\n- 激活swap分区需要使用`mkswap`命令将分区格式化，然后使用`swapon`命令激活分区：\n\n  ```bash\n  [root@localhost ~]# mkswap /dev/sdb2\n  正在设置交换空间版本 1，大小 = 976892 KiB\n  无标签，UUID=596ad292-a0c4-4282-a1b6-340e4f88a83d\n  [root@localhost ~]# swapon /dev/sdb2\n  [root@localhost ~]# free\n                total        used        free      shared  buff/cache   available\n  Mem:        1016476       99792      750940        6720      165744      751612\n  Swap:       3074040           0     3074040\n  ```\n\n- 由于`parted`命令是直接操作磁盘，所以当不小心删除分区时，使用`rescue`进行恢复：\n\n  ```bash\n  [root@localhost ~]# parted /dev/sdb rm 1\t# 删除分区\n  信息: You may need to update /etc/fstab.\n\n  [root@localhost ~]# fdisk -l /dev/sdb\n  WARNING: fdisk GPT support is currently new, and therefore in an experimental phase. Use at your own discretion.\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：gpt\n\n\n  #         Start          End    Size  Type            Name\n   2      3905536      5859327    954M  Microsoft basic swap\n\n\n  [root@localhost ~]# parted /dev/sdb rescue 1M 2G\t# 恢复删除的分区\n  正在搜索文件系统... 3%  (剩余时间 00:35)信息: A ext4 primary partition was found at 1049kB -> 2000MB.  Do you want to add it to the partition table?\n  是/Yes/否/No/放弃/Cancel? yes                                             \n  信息: You may need to update /etc/fstab.\n\n  [root@localhost ~]# fdisk -l /dev/sdb                          \n  WARNING: fdisk GPT support is currently new, and therefore in an experimental phase. Use at your own discretion.\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：gpt\n\n\n  #         Start          End    Size  Type            Name\n   1         2048      3905535    1.9G  Microsoft basic \n   2      3905536      5859327    954M  Microsoft basic swap\n\n  ```\n\n---\n\n","source":"_posts/Linux磁盘管理—df-du命令及磁盘分区.md","raw":"---\ntitle: Linux磁盘管理——df & du命令及磁盘分区\nauthor: Evobot\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\nabbrlink: 43eb8ab5\ndate: 2018-04-09 20:30:03\nimage:\n---\n![磁盘分区](http://p5qynomrl.bkt.clouddn.com/1523288634264cki496jp.png?imageslim)\n主要介绍Linux系统中磁盘管理命令`df`和`du`命令的用法，以及使用`fdisk`和`parted`命令行工具对磁盘的分区操作。\n\n<!--more-->\n\n# 磁盘管理\n\n## df命令\n\n- `df`命令是用来查看文件系统磁盘使用情况的命令，直接执行`df`命令得到如下结果：\n\n  ```bash\n  [root@evobot ~]# df\n  文件系统          1K-块    已用     可用 已用% 挂载点\n  /dev/vda1      51474024 2633324 46534624    6% /\n  devtmpfs         932260       0   932260    0% /dev\n  tmpfs            941768      24   941744    1% /dev/shm\n  tmpfs            941768     356   941412    1% /run\n  tmpfs            941768       0   941768    0% /sys/fs/cgroup\n  tmpfs            188356       0   188356    0% /run/user/0\n  tmpfs            188356       0   188356    0% /run/user/1001\n  ```\n\n- 命令执行的结果中，第一列表示文件系统，也就是磁盘分区的名字；第二列为磁盘总大小，单位为KB；第三列为分区已使用大小；第四列为磁盘剩余空间大小；第五列为磁盘已使用空间大小百分比；最后一列为磁盘挂载点，即系统内的目录。\n\n- `df`命令常用选项`-h`可以人性化显示，如磁盘空间大小单位：\n\n  ```bash\n  [root@evobot ~]# df -h\n  文件系统        容量  已用  可用 已用% 挂载点\n  /dev/vda1        50G  2.6G   45G    6% /\n  devtmpfs        911M     0  911M    0% /dev\n  tmpfs           920M   24K  920M    1% /dev/shm\n  tmpfs           920M  356K  920M    1% /run\n  tmpfs           920M     0  920M    0% /sys/fs/cgroup\n  tmpfs           184M     0  184M    0% /run/user/0\n  tmpfs           184M     0  184M    0% /run/user/1001\n\n  ```\n\n- 在第一列的文件系统中，`tmpfs`代表临时文件系统，相应挂载点内的文件会在重启后消失，而挂载点的`/dev/shm`则是内存，大小为实际内存大小的一半；\n\n- 而分区时指定的`swap`分区并不会在`df`命令中列出来，使用`free`命令可以查看`swap`分区大小:\n\n  ```bash\n  [root@evobot ~]# free\n                total        used        free      shared  buff/cache   available\n  Mem:        1883540       87236      575564         380     1220740     1598584\n  Swap:             0           0           0\n\n  ```\n\n- `df`的另一个常用选项为`-i`，用来查看分区的`inode`使用情况，`inode`的多少与磁盘分区大小有关，并且是在分区格式化时就分配的：\n\n  ```bash\n  [root@evobot ~]# df -i\n  文件系统         Inode 已用(I) 可用(I) 已用(I)% 挂载点\n  /dev/vda1      3276800   81696 3195104       3% /\n  devtmpfs        233065     320  232745       1% /dev\n  tmpfs           235442       7  235435       1% /dev/shm\n  tmpfs           235442     376  235066       1% /run\n  tmpfs           235442      16  235426       1% /sys/fs/cgroup\n  tmpfs           235442       1  235441       1% /run/user/0\n  tmpfs           235442       1  235441       1% /run/user/1001\n\n  ```\n\n## du命令\n\n- du命令用来查看一个文件或者目录的大小，一般常用用法为`du -sh (文件或目录)`：\n\n  ```bash\n  [root@evobot ~]# du -sh source/\n  260K\tsource/\n\n  [root@evobot ~]# du -sh /etc/passwd\n  4.0K\t/etc/passwd\n  [root@evobot ~]# ls -lh /etc/passwd\n  -rw-r--r-- 1 root root 1.4K 4月   3 23:31 /etc/passwd\n\n  ```\n\n- 上面的命令结果中，同一个文件，使用`du`命令和`ls`命令查看但文件大小却不相同，这是因为磁盘分区时是由一个个4K大小的块组成的，当文件小于4K时，也会占用磁盘分区上一个块，所以使用`du`命令查看时，会显示为4K；\n\n- `du`命令在不加选项时，默认不显示单位，并且会将目录下的所有文件都列出来；\n\n---\n\n# 磁盘分区\n\n- 在实际使用中，经常需要给服务器磁盘进行扩容，增加磁盘，在虚拟机上，我们直接为系统增加一块硬盘，由于虚拟机并不支持自动识别新硬盘，所以需要重启之后才能查看到新添加的磁盘。\n\n\n\n## **fdisk**命令\n\n- `fdisk `命令可以用来查看系统中的磁盘，也可以对磁盘进行分区操作，其中查看磁盘的选项为`fdisk -l`：\n\n  ```bash\n  [root@localhost ~]# fdisk -l\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n\n\n\n  磁盘 /dev/sda：32.2 GB, 32212254720 字节，62914560 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0x00022876\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sda1   *        2048      411647      204800   83  Linux\n  /dev/sda2          411648     4605951     2097152   82  Linux swap / Solaris\n  /dev/sda3         4605952    62914559    29154304   83  Linux\n\n  ```\n\n- 上面的`/dev/sdb`就是新增加的磁盘，使用`fdisk (磁盘名)`进行磁盘管理，进入`fdisk`的命令行界面后，可以输入`m`回车查看帮助信息：\n\n  ```bash\n  [root@localhost ~]# fdisk /dev/sdb\n  欢迎使用 fdisk (util-linux 2.23.2)。\n\n  更改将停留在内存中，直到您决定将更改写入磁盘。\n  使用写入命令前请三思。\n\n  Device does not contain a recognized partition table\n  使用磁盘标识符 0x216a8918 创建新的 DOS 磁盘标签。\n\n  命令(输入 m 获取帮助)：m\n  命令操作\n     a   toggle a bootable flag\n     b   edit bsd disklabel\n     c   toggle the dos compatibility flag\n     d   delete a partition\n     g   create a new empty GPT partition table\n     G   create an IRIX (SGI) partition table\n     l   list known partition types\n     m   print this menu\n     n   add a new partition\n     o   create a new empty DOS partition table\n     p   print the partition table\n     q   quit without saving changes\n     s   create a new empty Sun disklabel\n     t   change a partition's system id\n     u   change display/entry units\n     v   verify the partition table\n     w   write table to disk and exit\n     x   extra functionality (experts only)\n\n  命令(输入 m 获取帮助)：\n\n  ```\n\n- 常用的操作为`n`增加新分区，`p`打印分区信息，`w`保存分区信息并退出、`d`删除分区。\n\n## 使用fdisk对磁盘分区\n\n- 使用`ｐ`命令查看当前磁盘分区情况：\n\n  ```bash\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0x216a8918\n\n     设备 Boot      Start         End      Blocks   Id  System\n\n  ```\n\n- 当前磁盘没有分区，使用`n`命令增加一个分区：\n\n  ```bash\n  命令(输入 m 获取帮助)：n\n  Partition type:\n     p   primary (0 primary, 0 extended, 4 free)\n     e   extended\n  Select (default p):\n  ```\n\n- 由于`fdisk`只能对2T以下大小的`mbr`分区格式的磁盘进行分区，而`mbr`格式的磁盘主分区及扩展分区总数不能超过4个，所以`n`命令之后给出的选项，`p`为主分区，`e`为扩展分区：\n\n  ```bash\n  Select (default p): p\n  分区号 (1-4，默认 1)：1\n  起始 扇区 (2048-20971519，默认为 2048)：\n  将使用默认值 2048\n  Last 扇区, +扇区 or +size{K,M,G} (2048-20971519，默认为 20971519)：+2G\n  分区 1 已设置为 Linux 类型，大小设为 2 GiB\n\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0x216a8918\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     4196351     2097152   83  Linux\n  ```\n\n- 上面的步骤创建了一个主分区，指定了分区号为1，大小使用`+2G`的形式指定磁盘大小为2G，使用`p`命令可以查看新创建的分区；\n\n- 主分区一旦达到4个，磁盘将不能够再继续分区，可以使用`d`命令删除分区后，划分一个扩展分区：\n\n  ```bash\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0xea193fb2\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     4196351     2097152   83  Linux\n  /dev/sdb2         4196352    10487807     3145728   83  Linux\n  /dev/sdb3        10487808    16779263     3145728   83  Linux\n  /dev/sdb4        16779264    20971519     2096128   83  Linux\n\n  命令(输入 m 获取帮助)：n\n  If you want to create more than four partitions, you must replace a\n  primary partition with an extended partition first.\n  # 划分4个主分区后，再新增分区会有相应的提示\n\n  命令(输入 m 获取帮助)：d\n  分区号 (1-3，默认 3)：3\n  分区 3 已删除\n\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0xea193fb2\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     4196351     2097152   83  Linux\n  /dev/sdb2         4196352    10487807     3145728   83  Linux\n  # 已经将3,4两个分区删除\n\n  命令(输入 m 获取帮助)：n\n  Partition type:\n     p   primary (2 primary, 0 extended, 2 free)\n     e   extended\n  Select (default p): e\n  分区号 (3,4，默认 3)：\n  起始 扇区 (10487808-20971519，默认为 10487808)：\n  将使用默认值 10487808\n  Last 扇区, +扇区 or +size{K,M,G} (10487808-20971519，默认为 20971519)：+3G\n  分区 3 已设置为 Extended 类型，大小设为 3 GiB\n\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0xea193fb2\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     4196351     2097152   83  Linux\n  /dev/sdb2         4196352    10487807     3145728   83  Linux\n  /dev/sdb3        10487808    16779263     3145728    5  Extended\n\n  命令(输入 m 获取帮助)：n\n  Partition type:\n     p   primary (2 primary, 1 extended, 1 free)\n     l   logical (numbered from 5)\n  Select (default p): \n\n  ```\n\n- 从上面的命令结果可以看到新创建的扩展分区的`id`为5，而主分区的类型`id`则为83，并且由于主分区加扩展分区未达到4个，再次增加分区时，可以继续增加主分区，也可以选择在扩展分区内添加逻辑分区，使用`l`命令增加逻辑分区：\n\n  ```bash\n  命令(输入 m 获取帮助)：n\n  Partition type:\n     p   primary (2 primary, 1 extended, 1 free)\n     l   logical (numbered from 5)\n  Select (default p): p\n  已选择分区 4\n  起始 扇区 (16779264-20971519，默认为 16779264)：\n  将使用默认值 16779264\n  Last 扇区, +扇区 or +size{K,M,G} (16779264-20971519，默认为 20971519)：\n  将使用默认值 20971519\n  分区 4 已设置为 Linux 类型，大小设为 2 GiB\n\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0xea193fb2\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     4196351     2097152   83  Linux\n  /dev/sdb2         4196352    10487807     3145728   83  Linux\n  /dev/sdb3        10487808    16779263     3145728    5  Extended\n  /dev/sdb4        16779264    20971519     2096128   83  Linux\n\n  命令(输入 m 获取帮助)：n\t#当主分区和逻辑分区达到4个时，再增加分区只会增加逻辑分区\n  All primary partitions are in use\n  添加逻辑分区 5\n  起始 扇区 (10489856-16779263，默认为 10489856)：\n  将使用默认值 10489856\n  Last 扇区, +扇区 or +size{K,M,G} (10489856-16779263，默认为 16779263)：+1G\n  分区 5 已设置为 Linux 类型，大小设为 1 GiB\n\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0xea193fb2\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     4196351     2097152   83  Linux\n  /dev/sdb2         4196352    10487807     3145728   83  Linux\n  /dev/sdb3        10487808    16779263     3145728    5  Extended\n  /dev/sdb4        16779264    20971519     2096128   83  Linux\n  /dev/sdb5        10489856    12587007     1048576   83  Linux\n  # 新增的分区 5 就是逻辑分区\n  ```\n\n- 逻辑分区的分区号在删除后会重新排序，并不会留空：\n\n  ```bash\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0xea193fb2\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     4196351     2097152   83  Linux\n  /dev/sdb2         4196352    10487807     3145728   83  Linux\n  /dev/sdb3        10487808    16779263     3145728    5  Extended\n  /dev/sdb4        16779264    20971519     2096128   83  Linux\n  /dev/sdb5        10489856    12587007     1048576   83  Linux\n  /dev/sdb6        12589056    16779263     2095104   83  Linux\n\n  命令(输入 m 获取帮助)：d\n  分区号 (1-6，默认 6)：5\n  分区 5 已删除\n\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0xea193fb2\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     4196351     2097152   83  Linux\n  /dev/sdb2         4196352    10487807     3145728   83  Linux\n  /dev/sdb3        10487808    16779263     3145728    5  Extended\n  /dev/sdb4        16779264    20971519     2096128   83  Linux\n  /dev/sdb5        12589056    16779263     2095104   83  Linux\n  # 可以看到原来的6号分区变成了5号分区\n  ```\n\n- `fdisk`中使用`q`命令可以放弃对分区的更改并退出；\n\n- 当划分扩展分区时，逻辑分区的分区号一定是从5开始的，前4个分区号是留给主分区或扩展分区的：\n\n  ```bash\n  命令(输入 m 获取帮助)：n\n  Partition type:\n     p   primary (0 primary, 0 extended, 4 free)\n     e   extended\n  Select (default p): e\t#先创建一个逻辑分区\n  分区号 (1-4，默认 1)：\n  起始 扇区 (2048-20971519，默认为 2048)： \n  将使用默认值 2048\n  Last 扇区, +扇区 or +size{K,M,G} (2048-20971519，默认为 20971519)：+3G\n  分区 1 已设置为 Extended 类型，大小设为 3 GiB\n\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0xab7f9d31\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     6293503     3145728    5  Extended\n\n  命令(输入 m 获取帮助)：n\t# 再创建一个分区号为3的主分区\n  Partition type:\n     p   primary (0 primary, 1 extended, 3 free)\n     l   logical (numbered from 5)\n  Select (default p): p\n  分区号 (2-4，默认 2)：3\n  起始 扇区 (6293504-20971519，默认为 6293504)：\n  将使用默认值 6293504\n  Last 扇区, +扇区 or +size{K,M,G} (6293504-20971519，默认为 20971519)：+2G\n  分区 3 已设置为 Linux 类型，大小设为 2 GiB\n\n  命令(输入 m 获取帮助)：p\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0xab7f9d31\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     6293503     3145728    5  Extended\n  /dev/sdb3         6293504    10487807     2097152   83  Linux\n\n  命令(输入 m 获取帮助)：n\t# 创建一个逻辑分区\n  Partition type:\n     p   primary (1 primary, 1 extended, 2 free)\n     l   logical (numbered from 5)\n  Select (default p): l\n  添加逻辑分区 5\n  起始 扇区 (4096-6293503，默认为 4096)：\n  将使用默认值 4096\n  Last 扇区, +扇区 or +size{K,M,G} (4096-6293503，默认为 6293503)：+1G\n  分区 5 已设置为 Linux 类型，大小设为 1 GiB\n\n  命令(输入 m 获取帮助)：p\t# 可以看到逻辑分区的分区号从5开始\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0xab7f9d31\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sdb1            2048     6293503     3145728    5  Extended\n  /dev/sdb3         6293504    10487807     2097152   83  Linux\n  /dev/sdb5            4096     2101247     1048576   83  Linux\n  ```\n\n## parted命令\n\n- 由于mbr分区格式磁盘大小不能超过2T，所以GPT格式逐渐成为主流，GPT格式没有主分区、逻辑分区、扩展分区之分，在一块GPT格式的磁盘上，最多可以划分128个分区；\n- 而`parted`则是支持对MBR和GPT格式磁盘进行分区的命令行工具，常用的功能如下：\n\n<style>\ntable th:first-of-type {\n\n    width: 100px;\n}\ntable th {\n    text-align: center;\n}\n</style>\n\n| 常用功能命令     | 作用                                       |\n| :----------: | ---------------------------------------- |\n| `check`    | 检查文件系统，建议使用`fsck`命令检查                    |\n| `mklabel`  | 创建分区表，即使用MBR还是GPT或其他分区表格式                |\n| `mkfs`     | 创建文件系统，由于该命令不支持ext3，所以建议分区完成后使用其他命令创建文件系统 |\n| `mkpart`   | 创建新分区，格式为`mkpart (part-type) (fs-type) start end`，`part-type`主要有`primary(主分区)`、`extended(扩展分区)`、`logical(逻辑分区)`，扩展和逻辑分区只对MBR格式有效，`fs-type`则是文件系统类型，如ext3、ext4，`start`&`end`则是分区起始和结束位置 |\n| `mkpartfs` | 建立分区及其文件系统，与mkfs类似，不建议使用                 |\n| `print`    | 输出分区信息，该命令有`free`显示该磁盘所以信息，并显示磁盘剩余空间；`number`显示指定分区信息；`all`显示所以磁盘信息三个选项 |\n| `resize`   | 调整指定的分区大小                                |\n| `rescue`   | 恢复被`parted`的`rm`命令删除的分区，需要给出分区的起始和结束位置，当查找到被删除的分区时，会提示恢复 |\n| `rm`       | 删除分区，格式为`rm (分区编号)`                      |\n| `select`   | 选择设备，存在多块磁盘时，需要选择操作的磁盘，格式为`select /dev/sdb` |\n| `set`      | 更改指定分区编号的标志，标志有boot引导分区，hidden隐藏分区，raid软raid，lvm等，命令格式为`set 3 boot on`，即为设置3号分区为启动分区 |\n\n## 使用parted对磁盘分区\n\n- 使用`parted (磁盘分区路径)`对指定的磁盘进行操作，并使用`mklabel`命令将磁盘分区表改为GPT格式：\n\n  ```bash\n  [root@localhost ~]# parted /dev/sdb\n  GNU Parted 3.1\n  使用 /dev/sdb\n  Welcome to GNU Parted! Type 'help' to view a list of commands.\n  (parted) print                                                            \n  Model: ATA VBOX HARDDISK (scsi)\n  Disk /dev/sdb: 10.7GB\n  Sector size (logical/physical): 512B/512B\n  Partition Table: msdos\n  Disk Flags: \n\n  Number  Start  End  Size  Type  File system  标志\n\n  (parted) mklabel gpt    # 更改为GPT格式分区表                                                  \n  警告: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want\n  to continue?\n  是/Yes/否/No? y                                                           \n  (parted) print                                                            \n  Model: ATA VBOX HARDDISK (scsi)\n  Disk /dev/sdb: 10.7GB\n  Sector size (logical/physical): 512B/512B\n  Partition Table: gpt\t# 磁盘分区表格式已经修改成功\n  Disk Flags: \n\n  Number  Start  End  Size  File system  Name  标志\n\n  ```\n\n- 新增分区使用`mkpart`命令，并指定为`primary`主分区：\n\n  ```bash\n  (parted) mkpart primary 1M 2G\t#创建一个2G大小的主分区\n  (parted) print                                                            \n  Model: ATA VBOX HARDDISK (scsi)\n  Disk /dev/sdb: 10.7GB\n  Sector size (logical/physical): 512B/512B\n  Partition Table: gpt\n  Disk Flags: \n\n  Number  Start   End     Size    File system  Name     标志\n   1      1049kB  2000MB  1999MB               primary\n\n  ```\n\n- `parted`创建的分区不需要保存即可生效，使用`q`命令退出`parted`交互模式，再用`fdisk -l`查看已经新增的分区：\n\n  ```bash\n  [root@localhost ~]# fdisk -l                                              \n  WARNING: fdisk GPT support is currently new, and therefore in an experimental phase. Use at your own discretion.\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：gpt\n\n\n  #         Start          End    Size  Type            Name\n   1         2048      3905535    1.9G  Microsoft basic primary\n\n  磁盘 /dev/sda：32.2 GB, 32212254720 字节，62914560 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：dos\n  磁盘标识符：0x00022876\n\n     设备 Boot      Start         End      Blocks   Id  System\n  /dev/sda1   *        2048      411647      204800   83  Linux\n  /dev/sda2          411648     4605951     2097152   82  Linux swap / Solaris\n  /dev/sda3         4605952    62914559    29154304   83  Linux\n\n  ```\n\n- 将分区格式化为ext4格式，使用`mkfs.ext4`命令：\n\n  ```bash\n  [root@localhost ~]# mkfs.ext4 /dev/sdb1\n  mke2fs 1.42.9 (28-Dec-2013)\n  文件系统标签=\n  OS type: Linux\n  块大小=4096 (log=2)\n  分块大小=4096 (log=2)\n  Stride=0 blocks, Stripe width=0 blocks\n  122160 inodes, 487936 blocks\n  24396 blocks (5.00%) reserved for the super user\n  第一个数据块=0\n  Maximum filesystem blocks=501219328\n  15 block groups\n  32768 blocks per group, 32768 fragments per group\n  8144 inodes per group\n  Superblock backups stored on blocks: \n  \t32768, 98304, 163840, 229376, 294912\n\n  Allocating group tables: 完成                            \n  正在写入inode表: 完成                            \n  Creating journal (8192 blocks): 完成\n  Writing superblocks and filesystem accounting information: 完成 \n\n  [root@localhost ~]# parted /dev/sdb\n  GNU Parted 3.1\n  使用 /dev/sdb\n  Welcome to GNU Parted! Type 'help' to view a list of commands.\n  (parted) print                                                            \n  Model: ATA VBOX HARDDISK (scsi)\n  Disk /dev/sdb: 10.7GB\n  Sector size (logical/physical): 512B/512B\n  Partition Table: gpt\n  Disk Flags: \n\n  Number  Start   End     Size    File system     Name     标志\n   1      1049kB  2000MB  1999MB  ext4            primary\n  ```\n\n\n- `parted`也可以不进入交互模式而对磁盘进行分区操作，比如创建一个新的swap分区：\n\n  ```bash\n  [root@localhost ~]# parted /dev/sdb mkpart swap 2G 3G\t# 创建一个1G大小的swap分区\n  信息: You may need to update /etc/fstab.\n\n  [root@localhost ~]# fdisk -l                                              \n  WARNING: fdisk GPT support is currently new, and therefore in an experimental phase. Use at your own discretion.\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：gpt\n\n\n  #         Start          End    Size  Type            Name\n   1         2048      3905535    1.9G  Microsoft basic primary\n   2      3905536      5859327    954M  Microsoft basic swap\n\n  ```\n\n- 激活swap分区需要使用`mkswap`命令将分区格式化，然后使用`swapon`命令激活分区：\n\n  ```bash\n  [root@localhost ~]# mkswap /dev/sdb2\n  正在设置交换空间版本 1，大小 = 976892 KiB\n  无标签，UUID=596ad292-a0c4-4282-a1b6-340e4f88a83d\n  [root@localhost ~]# swapon /dev/sdb2\n  [root@localhost ~]# free\n                total        used        free      shared  buff/cache   available\n  Mem:        1016476       99792      750940        6720      165744      751612\n  Swap:       3074040           0     3074040\n  ```\n\n- 由于`parted`命令是直接操作磁盘，所以当不小心删除分区时，使用`rescue`进行恢复：\n\n  ```bash\n  [root@localhost ~]# parted /dev/sdb rm 1\t# 删除分区\n  信息: You may need to update /etc/fstab.\n\n  [root@localhost ~]# fdisk -l /dev/sdb\n  WARNING: fdisk GPT support is currently new, and therefore in an experimental phase. Use at your own discretion.\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：gpt\n\n\n  #         Start          End    Size  Type            Name\n   2      3905536      5859327    954M  Microsoft basic swap\n\n\n  [root@localhost ~]# parted /dev/sdb rescue 1M 2G\t# 恢复删除的分区\n  正在搜索文件系统... 3%  (剩余时间 00:35)信息: A ext4 primary partition was found at 1049kB -> 2000MB.  Do you want to add it to the partition table?\n  是/Yes/否/No/放弃/Cancel? yes                                             \n  信息: You may need to update /etc/fstab.\n\n  [root@localhost ~]# fdisk -l /dev/sdb                          \n  WARNING: fdisk GPT support is currently new, and therefore in an experimental phase. Use at your own discretion.\n\n  磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区\n  Units = 扇区 of 1 * 512 = 512 bytes\n  扇区大小(逻辑/物理)：512 字节 / 512 字节\n  I/O 大小(最小/最佳)：512 字节 / 512 字节\n  磁盘标签类型：gpt\n\n\n  #         Start          End    Size  Type            Name\n   1         2048      3905535    1.9G  Microsoft basic \n   2      3905536      5859327    954M  Microsoft basic swap\n\n  ```\n\n---\n\n","slug":"Linux磁盘管理—df-du命令及磁盘分区","published":1,"updated":"2018-06-02T13:01:29.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazcb002uu1jxjk958jkr","content":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1523288634264cki496jp.png?imageslim\" alt=\"磁盘分区\"><br>主要介绍Linux系统中磁盘管理命令<code>df</code>和<code>du</code>命令的用法，以及使用<code>fdisk</code>和<code>parted</code>命令行工具对磁盘的分区操作。</p><a id=\"more\"></a><h1 id=\"磁盘管理\"><a href=\"#磁盘管理\" class=\"headerlink\" title=\"磁盘管理\"></a>磁盘管理</h1><h2 id=\"df命令\"><a href=\"#df命令\" class=\"headerlink\" title=\"df命令\"></a>df命令</h2><ul><li><p><code>df</code>命令是用来查看文件系统磁盘使用情况的命令，直接执行<code>df</code>命令得到如下结果：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># df</span></span><br><span class=\"line\">文件系统          1K-块    已用     可用 已用% 挂载点</span><br><span class=\"line\">/dev/vda1      51474024 2633324 46534624    6% /</span><br><span class=\"line\">devtmpfs         932260       0   932260    0% /dev</span><br><span class=\"line\">tmpfs            941768      24   941744    1% /dev/shm</span><br><span class=\"line\">tmpfs            941768     356   941412    1% /run</span><br><span class=\"line\">tmpfs            941768       0   941768    0% /sys/fs/cgroup</span><br><span class=\"line\">tmpfs            188356       0   188356    0% /run/user/0</span><br><span class=\"line\">tmpfs            188356       0   188356    0% /run/user/1001</span><br></pre></td></tr></table></figure></li><li><p>命令执行的结果中，第一列表示文件系统，也就是磁盘分区的名字；第二列为磁盘总大小，单位为KB；第三列为分区已使用大小；第四列为磁盘剩余空间大小；第五列为磁盘已使用空间大小百分比；最后一列为磁盘挂载点，即系统内的目录。</p></li><li><p><code>df</code>命令常用选项<code>-h</code>可以人性化显示，如磁盘空间大小单位：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># df -h</span></span><br><span class=\"line\">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">/dev/vda1        50G  2.6G   45G    6% /</span><br><span class=\"line\">devtmpfs        911M     0  911M    0% /dev</span><br><span class=\"line\">tmpfs           920M   24K  920M    1% /dev/shm</span><br><span class=\"line\">tmpfs           920M  356K  920M    1% /run</span><br><span class=\"line\">tmpfs           920M     0  920M    0% /sys/fs/cgroup</span><br><span class=\"line\">tmpfs           184M     0  184M    0% /run/user/0</span><br><span class=\"line\">tmpfs           184M     0  184M    0% /run/user/1001</span><br></pre></td></tr></table></figure></li><li><p>在第一列的文件系统中，<code>tmpfs</code>代表临时文件系统，相应挂载点内的文件会在重启后消失，而挂载点的<code>/dev/shm</code>则是内存，大小为实际内存大小的一半；</p></li><li><p>而分区时指定的<code>swap</code>分区并不会在<code>df</code>命令中列出来，使用<code>free</code>命令可以查看<code>swap</code>分区大小:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># free</span></span><br><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\">Mem:        1883540       87236      575564         380     1220740     1598584</span><br><span class=\"line\">Swap:             0           0           0</span><br></pre></td></tr></table></figure></li><li><p><code>df</code>的另一个常用选项为<code>-i</code>，用来查看分区的<code>inode</code>使用情况，<code>inode</code>的多少与磁盘分区大小有关，并且是在分区格式化时就分配的：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># df -i</span></span><br><span class=\"line\">文件系统         Inode 已用(I) 可用(I) 已用(I)% 挂载点</span><br><span class=\"line\">/dev/vda1      3276800   81696 3195104       3% /</span><br><span class=\"line\">devtmpfs        233065     320  232745       1% /dev</span><br><span class=\"line\">tmpfs           235442       7  235435       1% /dev/shm</span><br><span class=\"line\">tmpfs           235442     376  235066       1% /run</span><br><span class=\"line\">tmpfs           235442      16  235426       1% /sys/fs/cgroup</span><br><span class=\"line\">tmpfs           235442       1  235441       1% /run/user/0</span><br><span class=\"line\">tmpfs           235442       1  235441       1% /run/user/1001</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"du命令\"><a href=\"#du命令\" class=\"headerlink\" title=\"du命令\"></a>du命令</h2><ul><li><p>du命令用来查看一个文件或者目录的大小，一般常用用法为<code>du -sh (文件或目录)</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># du -sh source/</span></span><br><span class=\"line\">260K\t<span class=\"built_in\">source</span>/</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># du -sh /etc/passwd</span></span><br><span class=\"line\">4.0K\t/etc/passwd</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -lh /etc/passwd</span></span><br><span class=\"line\">-rw-r--r-- 1 root root 1.4K 4月   3 23:31 /etc/passwd</span><br></pre></td></tr></table></figure></li><li><p>上面的命令结果中，同一个文件，使用<code>du</code>命令和<code>ls</code>命令查看但文件大小却不相同，这是因为磁盘分区时是由一个个4K大小的块组成的，当文件小于4K时，也会占用磁盘分区上一个块，所以使用<code>du</code>命令查看时，会显示为4K；</p></li><li><p><code>du</code>命令在不加选项时，默认不显示单位，并且会将目录下的所有文件都列出来；</p></li></ul><hr><h1 id=\"磁盘分区\"><a href=\"#磁盘分区\" class=\"headerlink\" title=\"磁盘分区\"></a>磁盘分区</h1><ul><li>在实际使用中，经常需要给服务器磁盘进行扩容，增加磁盘，在虚拟机上，我们直接为系统增加一块硬盘，由于虚拟机并不支持自动识别新硬盘，所以需要重启之后才能查看到新添加的磁盘。</li></ul><h2 id=\"fdisk命令\"><a href=\"#fdisk命令\" class=\"headerlink\" title=\"fdisk命令\"></a><strong>fdisk</strong>命令</h2><ul><li><p><code>fdisk</code>命令可以用来查看系统中的磁盘，也可以对磁盘进行分区操作，其中查看磁盘的选项为<code>fdisk -l</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># fdisk -l</span></span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sda：32.2 GB, 32212254720 字节，62914560 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0x00022876</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sda1   *        2048      411647      204800   83  Linux</span><br><span class=\"line\">/dev/sda2          411648     4605951     2097152   82  Linux swap / Solaris</span><br><span class=\"line\">/dev/sda3         4605952    62914559    29154304   83  Linux</span><br></pre></td></tr></table></figure></li><li><p>上面的<code>/dev/sdb</code>就是新增加的磁盘，使用<code>fdisk (磁盘名)</code>进行磁盘管理，进入<code>fdisk</code>的命令行界面后，可以输入<code>m</code>回车查看帮助信息：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># fdisk /dev/sdb</span></span><br><span class=\"line\">欢迎使用 fdisk (util-linux 2.23.2)。</span><br><span class=\"line\"></span><br><span class=\"line\">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class=\"line\">使用写入命令前请三思。</span><br><span class=\"line\"></span><br><span class=\"line\">Device does not contain a recognized partition table</span><br><span class=\"line\">使用磁盘标识符 0x216a8918 创建新的 DOS 磁盘标签。</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：m</span><br><span class=\"line\">命令操作</span><br><span class=\"line\">   a   toggle a bootable flag</span><br><span class=\"line\">   b   edit bsd disklabel</span><br><span class=\"line\">   c   toggle the dos compatibility flag</span><br><span class=\"line\">   d   delete a partition</span><br><span class=\"line\">   g   create a new empty GPT partition table</span><br><span class=\"line\">   G   create an IRIX (SGI) partition table</span><br><span class=\"line\">   l   list known partition types</span><br><span class=\"line\">   m   <span class=\"built_in\">print</span> this menu</span><br><span class=\"line\">   n   add a new partition</span><br><span class=\"line\">   o   create a new empty DOS partition table</span><br><span class=\"line\">   p   <span class=\"built_in\">print</span> the partition table</span><br><span class=\"line\">   q   quit without saving changes</span><br><span class=\"line\">   s   create a new empty Sun disklabel</span><br><span class=\"line\">   t   change a partition<span class=\"string\">'s system id</span></span><br><span class=\"line\"><span class=\"string\">   u   change display/entry units</span></span><br><span class=\"line\"><span class=\"string\">   v   verify the partition table</span></span><br><span class=\"line\"><span class=\"string\">   w   write table to disk and exit</span></span><br><span class=\"line\"><span class=\"string\">   x   extra functionality (experts only)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">命令(输入 m 获取帮助)：</span></span><br></pre></td></tr></table></figure></li><li><p>常用的操作为<code>n</code>增加新分区，<code>p</code>打印分区信息，<code>w</code>保存分区信息并退出、<code>d</code>删除分区。</p></li></ul><h2 id=\"使用fdisk对磁盘分区\"><a href=\"#使用fdisk对磁盘分区\" class=\"headerlink\" title=\"使用fdisk对磁盘分区\"></a>使用fdisk对磁盘分区</h2><ul><li><p>使用<code>ｐ</code>命令查看当前磁盘分区情况：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0x216a8918</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br></pre></td></tr></table></figure></li><li><p>当前磁盘没有分区，使用<code>n</code>命令增加一个分区：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令(输入 m 获取帮助)：n</span><br><span class=\"line\">Partition <span class=\"built_in\">type</span>:</span><br><span class=\"line\">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class=\"line\">   e   extended</span><br><span class=\"line\">Select (default p):</span><br></pre></td></tr></table></figure></li><li><p>由于<code>fdisk</code>只能对2T以下大小的<code>mbr</code>分区格式的磁盘进行分区，而<code>mbr</code>格式的磁盘主分区及扩展分区总数不能超过4个，所以<code>n</code>命令之后给出的选项，<code>p</code>为主分区，<code>e</code>为扩展分区：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select (default p): p</span><br><span class=\"line\">分区号 (1-4，默认 1)：1</span><br><span class=\"line\">起始 扇区 (2048-20971519，默认为 2048)：</span><br><span class=\"line\">将使用默认值 2048</span><br><span class=\"line\">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (2048-20971519，默认为 20971519)：+2G</span><br><span class=\"line\">分区 1 已设置为 Linux 类型，大小设为 2 GiB</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0x216a8918</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     4196351     2097152   83  Linux</span><br></pre></td></tr></table></figure></li><li><p>上面的步骤创建了一个主分区，指定了分区号为1，大小使用<code>+2G</code>的形式指定磁盘大小为2G，使用<code>p</code>命令可以查看新创建的分区；</p></li><li><p>主分区一旦达到4个，磁盘将不能够再继续分区，可以使用<code>d</code>命令删除分区后，划分一个扩展分区：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0xea193fb2</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     4196351     2097152   83  Linux</span><br><span class=\"line\">/dev/sdb2         4196352    10487807     3145728   83  Linux</span><br><span class=\"line\">/dev/sdb3        10487808    16779263     3145728   83  Linux</span><br><span class=\"line\">/dev/sdb4        16779264    20971519     2096128   83  Linux</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：n</span><br><span class=\"line\">If you want to create more than four partitions, you must replace a</span><br><span class=\"line\">primary partition with an extended partition first.</span><br><span class=\"line\"><span class=\"comment\"># 划分4个主分区后，再新增分区会有相应的提示</span></span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：d</span><br><span class=\"line\">分区号 (1-3，默认 3)：3</span><br><span class=\"line\">分区 3 已删除</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0xea193fb2</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     4196351     2097152   83  Linux</span><br><span class=\"line\">/dev/sdb2         4196352    10487807     3145728   83  Linux</span><br><span class=\"line\"><span class=\"comment\"># 已经将3,4两个分区删除</span></span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：n</span><br><span class=\"line\">Partition <span class=\"built_in\">type</span>:</span><br><span class=\"line\">   p   primary (2 primary, 0 extended, 2 free)</span><br><span class=\"line\">   e   extended</span><br><span class=\"line\">Select (default p): e</span><br><span class=\"line\">分区号 (3,4，默认 3)：</span><br><span class=\"line\">起始 扇区 (10487808-20971519，默认为 10487808)：</span><br><span class=\"line\">将使用默认值 10487808</span><br><span class=\"line\">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (10487808-20971519，默认为 20971519)：+3G</span><br><span class=\"line\">分区 3 已设置为 Extended 类型，大小设为 3 GiB</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0xea193fb2</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     4196351     2097152   83  Linux</span><br><span class=\"line\">/dev/sdb2         4196352    10487807     3145728   83  Linux</span><br><span class=\"line\">/dev/sdb3        10487808    16779263     3145728    5  Extended</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：n</span><br><span class=\"line\">Partition <span class=\"built_in\">type</span>:</span><br><span class=\"line\">   p   primary (2 primary, 1 extended, 1 free)</span><br><span class=\"line\">   l   logical (numbered from 5)</span><br><span class=\"line\">Select (default p):</span><br></pre></td></tr></table></figure></li><li><p>从上面的命令结果可以看到新创建的扩展分区的<code>id</code>为5，而主分区的类型<code>id</code>则为83，并且由于主分区加扩展分区未达到4个，再次增加分区时，可以继续增加主分区，也可以选择在扩展分区内添加逻辑分区，使用<code>l</code>命令增加逻辑分区：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令(输入 m 获取帮助)：n</span><br><span class=\"line\">Partition <span class=\"built_in\">type</span>:</span><br><span class=\"line\">   p   primary (2 primary, 1 extended, 1 free)</span><br><span class=\"line\">   l   logical (numbered from 5)</span><br><span class=\"line\">Select (default p): p</span><br><span class=\"line\">已选择分区 4</span><br><span class=\"line\">起始 扇区 (16779264-20971519，默认为 16779264)：</span><br><span class=\"line\">将使用默认值 16779264</span><br><span class=\"line\">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (16779264-20971519，默认为 20971519)：</span><br><span class=\"line\">将使用默认值 20971519</span><br><span class=\"line\">分区 4 已设置为 Linux 类型，大小设为 2 GiB</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0xea193fb2</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     4196351     2097152   83  Linux</span><br><span class=\"line\">/dev/sdb2         4196352    10487807     3145728   83  Linux</span><br><span class=\"line\">/dev/sdb3        10487808    16779263     3145728    5  Extended</span><br><span class=\"line\">/dev/sdb4        16779264    20971519     2096128   83  Linux</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：n\t<span class=\"comment\">#当主分区和逻辑分区达到4个时，再增加分区只会增加逻辑分区</span></span><br><span class=\"line\">All primary partitions are <span class=\"keyword\">in</span> use</span><br><span class=\"line\">添加逻辑分区 5</span><br><span class=\"line\">起始 扇区 (10489856-16779263，默认为 10489856)：</span><br><span class=\"line\">将使用默认值 10489856</span><br><span class=\"line\">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (10489856-16779263，默认为 16779263)：+1G</span><br><span class=\"line\">分区 5 已设置为 Linux 类型，大小设为 1 GiB</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0xea193fb2</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     4196351     2097152   83  Linux</span><br><span class=\"line\">/dev/sdb2         4196352    10487807     3145728   83  Linux</span><br><span class=\"line\">/dev/sdb3        10487808    16779263     3145728    5  Extended</span><br><span class=\"line\">/dev/sdb4        16779264    20971519     2096128   83  Linux</span><br><span class=\"line\">/dev/sdb5        10489856    12587007     1048576   83  Linux</span><br><span class=\"line\"><span class=\"comment\"># 新增的分区 5 就是逻辑分区</span></span><br></pre></td></tr></table></figure></li><li><p>逻辑分区的分区号在删除后会重新排序，并不会留空：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0xea193fb2</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     4196351     2097152   83  Linux</span><br><span class=\"line\">/dev/sdb2         4196352    10487807     3145728   83  Linux</span><br><span class=\"line\">/dev/sdb3        10487808    16779263     3145728    5  Extended</span><br><span class=\"line\">/dev/sdb4        16779264    20971519     2096128   83  Linux</span><br><span class=\"line\">/dev/sdb5        10489856    12587007     1048576   83  Linux</span><br><span class=\"line\">/dev/sdb6        12589056    16779263     2095104   83  Linux</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：d</span><br><span class=\"line\">分区号 (1-6，默认 6)：5</span><br><span class=\"line\">分区 5 已删除</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0xea193fb2</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     4196351     2097152   83  Linux</span><br><span class=\"line\">/dev/sdb2         4196352    10487807     3145728   83  Linux</span><br><span class=\"line\">/dev/sdb3        10487808    16779263     3145728    5  Extended</span><br><span class=\"line\">/dev/sdb4        16779264    20971519     2096128   83  Linux</span><br><span class=\"line\">/dev/sdb5        12589056    16779263     2095104   83  Linux</span><br><span class=\"line\"><span class=\"comment\"># 可以看到原来的6号分区变成了5号分区</span></span><br></pre></td></tr></table></figure></li><li><p><code>fdisk</code>中使用<code>q</code>命令可以放弃对分区的更改并退出；</p></li><li><p>当划分扩展分区时，逻辑分区的分区号一定是从5开始的，前4个分区号是留给主分区或扩展分区的：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令(输入 m 获取帮助)：n</span><br><span class=\"line\">Partition <span class=\"built_in\">type</span>:</span><br><span class=\"line\">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class=\"line\">   e   extended</span><br><span class=\"line\">Select (default p): e\t<span class=\"comment\">#先创建一个逻辑分区</span></span><br><span class=\"line\">分区号 (1-4，默认 1)：</span><br><span class=\"line\">起始 扇区 (2048-20971519，默认为 2048)： </span><br><span class=\"line\">将使用默认值 2048</span><br><span class=\"line\">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (2048-20971519，默认为 20971519)：+3G</span><br><span class=\"line\">分区 1 已设置为 Extended 类型，大小设为 3 GiB</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0xab7f9d31</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     6293503     3145728    5  Extended</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：n\t<span class=\"comment\"># 再创建一个分区号为3的主分区</span></span><br><span class=\"line\">Partition <span class=\"built_in\">type</span>:</span><br><span class=\"line\">   p   primary (0 primary, 1 extended, 3 free)</span><br><span class=\"line\">   l   logical (numbered from 5)</span><br><span class=\"line\">Select (default p): p</span><br><span class=\"line\">分区号 (2-4，默认 2)：3</span><br><span class=\"line\">起始 扇区 (6293504-20971519，默认为 6293504)：</span><br><span class=\"line\">将使用默认值 6293504</span><br><span class=\"line\">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (6293504-20971519，默认为 20971519)：+2G</span><br><span class=\"line\">分区 3 已设置为 Linux 类型，大小设为 2 GiB</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0xab7f9d31</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     6293503     3145728    5  Extended</span><br><span class=\"line\">/dev/sdb3         6293504    10487807     2097152   83  Linux</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：n\t<span class=\"comment\"># 创建一个逻辑分区</span></span><br><span class=\"line\">Partition <span class=\"built_in\">type</span>:</span><br><span class=\"line\">   p   primary (1 primary, 1 extended, 2 free)</span><br><span class=\"line\">   l   logical (numbered from 5)</span><br><span class=\"line\">Select (default p): l</span><br><span class=\"line\">添加逻辑分区 5</span><br><span class=\"line\">起始 扇区 (4096-6293503，默认为 4096)：</span><br><span class=\"line\">将使用默认值 4096</span><br><span class=\"line\">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (4096-6293503，默认为 6293503)：+1G</span><br><span class=\"line\">分区 5 已设置为 Linux 类型，大小设为 1 GiB</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p\t<span class=\"comment\"># 可以看到逻辑分区的分区号从5开始</span></span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0xab7f9d31</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     6293503     3145728    5  Extended</span><br><span class=\"line\">/dev/sdb3         6293504    10487807     2097152   83  Linux</span><br><span class=\"line\">/dev/sdb5            4096     2101247     1048576   83  Linux</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"parted命令\"><a href=\"#parted命令\" class=\"headerlink\" title=\"parted命令\"></a>parted命令</h2><ul><li>由于mbr分区格式磁盘大小不能超过2T，所以GPT格式逐渐成为主流，GPT格式没有主分区、逻辑分区、扩展分区之分，在一块GPT格式的磁盘上，最多可以划分128个分区；</li><li>而<code>parted</code>则是支持对MBR和GPT格式磁盘进行分区的命令行工具，常用的功能如下：</li></ul><style>table th:first-of-type{width:100px}table th{text-align:center}</style><table><thead><tr><th style=\"text-align:center\">常用功能命令</th><th>作用</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>check</code></td><td>检查文件系统，建议使用<code>fsck</code>命令检查</td></tr><tr><td style=\"text-align:center\"><code>mklabel</code></td><td>创建分区表，即使用MBR还是GPT或其他分区表格式</td></tr><tr><td style=\"text-align:center\"><code>mkfs</code></td><td>创建文件系统，由于该命令不支持ext3，所以建议分区完成后使用其他命令创建文件系统</td></tr><tr><td style=\"text-align:center\"><code>mkpart</code></td><td>创建新分区，格式为<code>mkpart (part-type) (fs-type) start end</code>，<code>part-type</code>主要有<code>primary(主分区)</code>、<code>extended(扩展分区)</code>、<code>logical(逻辑分区)</code>，扩展和逻辑分区只对MBR格式有效，<code>fs-type</code>则是文件系统类型，如ext3、ext4，<code>start</code>&amp;<code>end</code>则是分区起始和结束位置</td></tr><tr><td style=\"text-align:center\"><code>mkpartfs</code></td><td>建立分区及其文件系统，与mkfs类似，不建议使用</td></tr><tr><td style=\"text-align:center\"><code>print</code></td><td>输出分区信息，该命令有<code>free</code>显示该磁盘所以信息，并显示磁盘剩余空间；<code>number</code>显示指定分区信息；<code>all</code>显示所以磁盘信息三个选项</td></tr><tr><td style=\"text-align:center\"><code>resize</code></td><td>调整指定的分区大小</td></tr><tr><td style=\"text-align:center\"><code>rescue</code></td><td>恢复被<code>parted</code>的<code>rm</code>命令删除的分区，需要给出分区的起始和结束位置，当查找到被删除的分区时，会提示恢复</td></tr><tr><td style=\"text-align:center\"><code>rm</code></td><td>删除分区，格式为<code>rm (分区编号)</code></td></tr><tr><td style=\"text-align:center\"><code>select</code></td><td>选择设备，存在多块磁盘时，需要选择操作的磁盘，格式为<code>select /dev/sdb</code></td></tr><tr><td style=\"text-align:center\"><code>set</code></td><td>更改指定分区编号的标志，标志有boot引导分区，hidden隐藏分区，raid软raid，lvm等，命令格式为<code>set 3 boot on</code>，即为设置3号分区为启动分区</td></tr></tbody></table><h2 id=\"使用parted对磁盘分区\"><a href=\"#使用parted对磁盘分区\" class=\"headerlink\" title=\"使用parted对磁盘分区\"></a>使用parted对磁盘分区</h2><ul><li><p>使用<code>parted (磁盘分区路径)</code>对指定的磁盘进行操作，并使用<code>mklabel</code>命令将磁盘分区表改为GPT格式：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># parted /dev/sdb</span></span><br><span class=\"line\">GNU Parted 3.1</span><br><span class=\"line\">使用 /dev/sdb</span><br><span class=\"line\">Welcome to GNU Parted! Type <span class=\"string\">'help'</span> to view a list of commands.</span><br><span class=\"line\">(parted) <span class=\"built_in\">print</span>                                                            </span><br><span class=\"line\">Model: ATA VBOX HARDDISK (scsi)</span><br><span class=\"line\">Disk /dev/sdb: 10.7GB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: msdos</span><br><span class=\"line\">Disk Flags: </span><br><span class=\"line\"></span><br><span class=\"line\">Number  Start  End  Size  Type  File system  标志</span><br><span class=\"line\"></span><br><span class=\"line\">(parted) mklabel gpt    <span class=\"comment\"># 更改为GPT格式分区表                                                  </span></span><br><span class=\"line\">警告: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want</span><br><span class=\"line\">to <span class=\"built_in\">continue</span>?</span><br><span class=\"line\">是/Yes/否/No? y                                                           </span><br><span class=\"line\">(parted) <span class=\"built_in\">print</span>                                                            </span><br><span class=\"line\">Model: ATA VBOX HARDDISK (scsi)</span><br><span class=\"line\">Disk /dev/sdb: 10.7GB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: gpt\t<span class=\"comment\"># 磁盘分区表格式已经修改成功</span></span><br><span class=\"line\">Disk Flags: </span><br><span class=\"line\"></span><br><span class=\"line\">Number  Start  End  Size  File system  Name  标志</span><br></pre></td></tr></table></figure></li><li><p>新增分区使用<code>mkpart</code>命令，并指定为<code>primary</code>主分区：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(parted) mkpart primary 1M 2G\t<span class=\"comment\">#创建一个2G大小的主分区</span></span><br><span class=\"line\">(parted) <span class=\"built_in\">print</span>                                                            </span><br><span class=\"line\">Model: ATA VBOX HARDDISK (scsi)</span><br><span class=\"line\">Disk /dev/sdb: 10.7GB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: gpt</span><br><span class=\"line\">Disk Flags: </span><br><span class=\"line\"></span><br><span class=\"line\">Number  Start   End     Size    File system  Name     标志</span><br><span class=\"line\"> 1      1049kB  2000MB  1999MB               primary</span><br></pre></td></tr></table></figure></li><li><p><code>parted</code>创建的分区不需要保存即可生效，使用<code>q</code>命令退出<code>parted</code>交互模式，再用<code>fdisk -l</code>查看已经新增的分区：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># fdisk -l                                              </span></span><br><span class=\"line\">WARNING: fdisk GPT support is currently new, and therefore <span class=\"keyword\">in</span> an experimental phase. Use at your own discretion.</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：gpt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#         Start          End    Size  Type            Name</span></span><br><span class=\"line\"> 1         2048      3905535    1.9G  Microsoft basic primary</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sda：32.2 GB, 32212254720 字节，62914560 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0x00022876</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sda1   *        2048      411647      204800   83  Linux</span><br><span class=\"line\">/dev/sda2          411648     4605951     2097152   82  Linux swap / Solaris</span><br><span class=\"line\">/dev/sda3         4605952    62914559    29154304   83  Linux</span><br></pre></td></tr></table></figure></li><li><p>将分区格式化为ext4格式，使用<code>mkfs.ext4</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkfs.ext4 /dev/sdb1</span></span><br><span class=\"line\">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">文件系统标签=</span><br><span class=\"line\">OS <span class=\"built_in\">type</span>: Linux</span><br><span class=\"line\">块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">分块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">Stride=0 blocks, Stripe width=0 blocks</span><br><span class=\"line\">122160 inodes, 487936 blocks</span><br><span class=\"line\">24396 blocks (5.00%) reserved <span class=\"keyword\">for</span> the super user</span><br><span class=\"line\">第一个数据块=0</span><br><span class=\"line\">Maximum filesystem blocks=501219328</span><br><span class=\"line\">15 block groups</span><br><span class=\"line\">32768 blocks per group, 32768 fragments per group</span><br><span class=\"line\">8144 inodes per group</span><br><span class=\"line\">Superblock backups stored on blocks: </span><br><span class=\"line\">\t32768, 98304, 163840, 229376, 294912</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: 完成                            </span><br><span class=\"line\">正在写入inode表: 完成                            </span><br><span class=\"line\">Creating journal (8192 blocks): 完成</span><br><span class=\"line\">Writing superblocks and filesystem accounting information: 完成 </span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># parted /dev/sdb</span></span><br><span class=\"line\">GNU Parted 3.1</span><br><span class=\"line\">使用 /dev/sdb</span><br><span class=\"line\">Welcome to GNU Parted! Type <span class=\"string\">'help'</span> to view a list of commands.</span><br><span class=\"line\">(parted) <span class=\"built_in\">print</span>                                                            </span><br><span class=\"line\">Model: ATA VBOX HARDDISK (scsi)</span><br><span class=\"line\">Disk /dev/sdb: 10.7GB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: gpt</span><br><span class=\"line\">Disk Flags: </span><br><span class=\"line\"></span><br><span class=\"line\">Number  Start   End     Size    File system     Name     标志</span><br><span class=\"line\"> 1      1049kB  2000MB  1999MB  ext4            primary</span><br></pre></td></tr></table></figure></li><li><p><code>parted</code>也可以不进入交互模式而对磁盘进行分区操作，比如创建一个新的swap分区：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># parted /dev/sdb mkpart swap 2G 3G\t# 创建一个1G大小的swap分区</span></span><br><span class=\"line\">信息: You may need to update /etc/fstab.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># fdisk -l                                              </span></span><br><span class=\"line\">WARNING: fdisk GPT support is currently new, and therefore <span class=\"keyword\">in</span> an experimental phase. Use at your own discretion.</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：gpt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#         Start          End    Size  Type            Name</span></span><br><span class=\"line\"> 1         2048      3905535    1.9G  Microsoft basic primary</span><br><span class=\"line\"> 2      3905536      5859327    954M  Microsoft basic swap</span><br></pre></td></tr></table></figure></li><li><p>激活swap分区需要使用<code>mkswap</code>命令将分区格式化，然后使用<code>swapon</code>命令激活分区：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkswap /dev/sdb2</span></span><br><span class=\"line\">正在设置交换空间版本 1，大小 = 976892 KiB</span><br><span class=\"line\">无标签，UUID=596ad292-a0c4-4282-a1b6-340e4f88a83d</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># swapon /dev/sdb2</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># free</span></span><br><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\">Mem:        1016476       99792      750940        6720      165744      751612</span><br><span class=\"line\">Swap:       3074040           0     3074040</span><br></pre></td></tr></table></figure></li><li><p>由于<code>parted</code>命令是直接操作磁盘，所以当不小心删除分区时，使用<code>rescue</code>进行恢复：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># parted /dev/sdb rm 1\t# 删除分区</span></span><br><span class=\"line\">信息: You may need to update /etc/fstab.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># fdisk -l /dev/sdb</span></span><br><span class=\"line\">WARNING: fdisk GPT support is currently new, and therefore <span class=\"keyword\">in</span> an experimental phase. Use at your own discretion.</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：gpt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#         Start          End    Size  Type            Name</span></span><br><span class=\"line\"> 2      3905536      5859327    954M  Microsoft basic swap</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># parted /dev/sdb rescue 1M 2G\t# 恢复删除的分区</span></span><br><span class=\"line\">正在搜索文件系统... 3%  (剩余时间 00:35)信息: A ext4 primary partition was found at 1049kB -&gt; 2000MB.  Do you want to add it to the partition table?</span><br><span class=\"line\">是/Yes/否/No/放弃/Cancel? yes                                             </span><br><span class=\"line\">信息: You may need to update /etc/fstab.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># fdisk -l /dev/sdb                          </span></span><br><span class=\"line\">WARNING: fdisk GPT support is currently new, and therefore <span class=\"keyword\">in</span> an experimental phase. Use at your own discretion.</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：gpt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#         Start          End    Size  Type            Name</span></span><br><span class=\"line\"> 1         2048      3905535    1.9G  Microsoft basic </span><br><span class=\"line\"> 2      3905536      5859327    954M  Microsoft basic swap</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1523288634264cki496jp.png?imageslim\" alt=\"磁盘分区\"><br>主要介绍Linux系统中磁盘管理命令<code>df</code>和<code>du</code>命令的用法，以及使用<code>fdisk</code>和<code>parted</code>命令行工具对磁盘的分区操作。</p>","more":"<h1 id=\"磁盘管理\"><a href=\"#磁盘管理\" class=\"headerlink\" title=\"磁盘管理\"></a>磁盘管理</h1><h2 id=\"df命令\"><a href=\"#df命令\" class=\"headerlink\" title=\"df命令\"></a>df命令</h2><ul><li><p><code>df</code>命令是用来查看文件系统磁盘使用情况的命令，直接执行<code>df</code>命令得到如下结果：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># df</span></span><br><span class=\"line\">文件系统          1K-块    已用     可用 已用% 挂载点</span><br><span class=\"line\">/dev/vda1      51474024 2633324 46534624    6% /</span><br><span class=\"line\">devtmpfs         932260       0   932260    0% /dev</span><br><span class=\"line\">tmpfs            941768      24   941744    1% /dev/shm</span><br><span class=\"line\">tmpfs            941768     356   941412    1% /run</span><br><span class=\"line\">tmpfs            941768       0   941768    0% /sys/fs/cgroup</span><br><span class=\"line\">tmpfs            188356       0   188356    0% /run/user/0</span><br><span class=\"line\">tmpfs            188356       0   188356    0% /run/user/1001</span><br></pre></td></tr></table></figure></li><li><p>命令执行的结果中，第一列表示文件系统，也就是磁盘分区的名字；第二列为磁盘总大小，单位为KB；第三列为分区已使用大小；第四列为磁盘剩余空间大小；第五列为磁盘已使用空间大小百分比；最后一列为磁盘挂载点，即系统内的目录。</p></li><li><p><code>df</code>命令常用选项<code>-h</code>可以人性化显示，如磁盘空间大小单位：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># df -h</span></span><br><span class=\"line\">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">/dev/vda1        50G  2.6G   45G    6% /</span><br><span class=\"line\">devtmpfs        911M     0  911M    0% /dev</span><br><span class=\"line\">tmpfs           920M   24K  920M    1% /dev/shm</span><br><span class=\"line\">tmpfs           920M  356K  920M    1% /run</span><br><span class=\"line\">tmpfs           920M     0  920M    0% /sys/fs/cgroup</span><br><span class=\"line\">tmpfs           184M     0  184M    0% /run/user/0</span><br><span class=\"line\">tmpfs           184M     0  184M    0% /run/user/1001</span><br></pre></td></tr></table></figure></li><li><p>在第一列的文件系统中，<code>tmpfs</code>代表临时文件系统，相应挂载点内的文件会在重启后消失，而挂载点的<code>/dev/shm</code>则是内存，大小为实际内存大小的一半；</p></li><li><p>而分区时指定的<code>swap</code>分区并不会在<code>df</code>命令中列出来，使用<code>free</code>命令可以查看<code>swap</code>分区大小:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># free</span></span><br><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\">Mem:        1883540       87236      575564         380     1220740     1598584</span><br><span class=\"line\">Swap:             0           0           0</span><br></pre></td></tr></table></figure></li><li><p><code>df</code>的另一个常用选项为<code>-i</code>，用来查看分区的<code>inode</code>使用情况，<code>inode</code>的多少与磁盘分区大小有关，并且是在分区格式化时就分配的：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># df -i</span></span><br><span class=\"line\">文件系统         Inode 已用(I) 可用(I) 已用(I)% 挂载点</span><br><span class=\"line\">/dev/vda1      3276800   81696 3195104       3% /</span><br><span class=\"line\">devtmpfs        233065     320  232745       1% /dev</span><br><span class=\"line\">tmpfs           235442       7  235435       1% /dev/shm</span><br><span class=\"line\">tmpfs           235442     376  235066       1% /run</span><br><span class=\"line\">tmpfs           235442      16  235426       1% /sys/fs/cgroup</span><br><span class=\"line\">tmpfs           235442       1  235441       1% /run/user/0</span><br><span class=\"line\">tmpfs           235442       1  235441       1% /run/user/1001</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"du命令\"><a href=\"#du命令\" class=\"headerlink\" title=\"du命令\"></a>du命令</h2><ul><li><p>du命令用来查看一个文件或者目录的大小，一般常用用法为<code>du -sh (文件或目录)</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># du -sh source/</span></span><br><span class=\"line\">260K\t<span class=\"built_in\">source</span>/</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># du -sh /etc/passwd</span></span><br><span class=\"line\">4.0K\t/etc/passwd</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -lh /etc/passwd</span></span><br><span class=\"line\">-rw-r--r-- 1 root root 1.4K 4月   3 23:31 /etc/passwd</span><br></pre></td></tr></table></figure></li><li><p>上面的命令结果中，同一个文件，使用<code>du</code>命令和<code>ls</code>命令查看但文件大小却不相同，这是因为磁盘分区时是由一个个4K大小的块组成的，当文件小于4K时，也会占用磁盘分区上一个块，所以使用<code>du</code>命令查看时，会显示为4K；</p></li><li><p><code>du</code>命令在不加选项时，默认不显示单位，并且会将目录下的所有文件都列出来；</p></li></ul><hr><h1 id=\"磁盘分区\"><a href=\"#磁盘分区\" class=\"headerlink\" title=\"磁盘分区\"></a>磁盘分区</h1><ul><li>在实际使用中，经常需要给服务器磁盘进行扩容，增加磁盘，在虚拟机上，我们直接为系统增加一块硬盘，由于虚拟机并不支持自动识别新硬盘，所以需要重启之后才能查看到新添加的磁盘。</li></ul><h2 id=\"fdisk命令\"><a href=\"#fdisk命令\" class=\"headerlink\" title=\"fdisk命令\"></a><strong>fdisk</strong>命令</h2><ul><li><p><code>fdisk</code>命令可以用来查看系统中的磁盘，也可以对磁盘进行分区操作，其中查看磁盘的选项为<code>fdisk -l</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># fdisk -l</span></span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sda：32.2 GB, 32212254720 字节，62914560 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0x00022876</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sda1   *        2048      411647      204800   83  Linux</span><br><span class=\"line\">/dev/sda2          411648     4605951     2097152   82  Linux swap / Solaris</span><br><span class=\"line\">/dev/sda3         4605952    62914559    29154304   83  Linux</span><br></pre></td></tr></table></figure></li><li><p>上面的<code>/dev/sdb</code>就是新增加的磁盘，使用<code>fdisk (磁盘名)</code>进行磁盘管理，进入<code>fdisk</code>的命令行界面后，可以输入<code>m</code>回车查看帮助信息：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># fdisk /dev/sdb</span></span><br><span class=\"line\">欢迎使用 fdisk (util-linux 2.23.2)。</span><br><span class=\"line\"></span><br><span class=\"line\">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class=\"line\">使用写入命令前请三思。</span><br><span class=\"line\"></span><br><span class=\"line\">Device does not contain a recognized partition table</span><br><span class=\"line\">使用磁盘标识符 0x216a8918 创建新的 DOS 磁盘标签。</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：m</span><br><span class=\"line\">命令操作</span><br><span class=\"line\">   a   toggle a bootable flag</span><br><span class=\"line\">   b   edit bsd disklabel</span><br><span class=\"line\">   c   toggle the dos compatibility flag</span><br><span class=\"line\">   d   delete a partition</span><br><span class=\"line\">   g   create a new empty GPT partition table</span><br><span class=\"line\">   G   create an IRIX (SGI) partition table</span><br><span class=\"line\">   l   list known partition types</span><br><span class=\"line\">   m   <span class=\"built_in\">print</span> this menu</span><br><span class=\"line\">   n   add a new partition</span><br><span class=\"line\">   o   create a new empty DOS partition table</span><br><span class=\"line\">   p   <span class=\"built_in\">print</span> the partition table</span><br><span class=\"line\">   q   quit without saving changes</span><br><span class=\"line\">   s   create a new empty Sun disklabel</span><br><span class=\"line\">   t   change a partition<span class=\"string\">'s system id</span></span><br><span class=\"line\"><span class=\"string\">   u   change display/entry units</span></span><br><span class=\"line\"><span class=\"string\">   v   verify the partition table</span></span><br><span class=\"line\"><span class=\"string\">   w   write table to disk and exit</span></span><br><span class=\"line\"><span class=\"string\">   x   extra functionality (experts only)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">命令(输入 m 获取帮助)：</span></span><br></pre></td></tr></table></figure></li><li><p>常用的操作为<code>n</code>增加新分区，<code>p</code>打印分区信息，<code>w</code>保存分区信息并退出、<code>d</code>删除分区。</p></li></ul><h2 id=\"使用fdisk对磁盘分区\"><a href=\"#使用fdisk对磁盘分区\" class=\"headerlink\" title=\"使用fdisk对磁盘分区\"></a>使用fdisk对磁盘分区</h2><ul><li><p>使用<code>ｐ</code>命令查看当前磁盘分区情况：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0x216a8918</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br></pre></td></tr></table></figure></li><li><p>当前磁盘没有分区，使用<code>n</code>命令增加一个分区：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令(输入 m 获取帮助)：n</span><br><span class=\"line\">Partition <span class=\"built_in\">type</span>:</span><br><span class=\"line\">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class=\"line\">   e   extended</span><br><span class=\"line\">Select (default p):</span><br></pre></td></tr></table></figure></li><li><p>由于<code>fdisk</code>只能对2T以下大小的<code>mbr</code>分区格式的磁盘进行分区，而<code>mbr</code>格式的磁盘主分区及扩展分区总数不能超过4个，所以<code>n</code>命令之后给出的选项，<code>p</code>为主分区，<code>e</code>为扩展分区：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select (default p): p</span><br><span class=\"line\">分区号 (1-4，默认 1)：1</span><br><span class=\"line\">起始 扇区 (2048-20971519，默认为 2048)：</span><br><span class=\"line\">将使用默认值 2048</span><br><span class=\"line\">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (2048-20971519，默认为 20971519)：+2G</span><br><span class=\"line\">分区 1 已设置为 Linux 类型，大小设为 2 GiB</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0x216a8918</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     4196351     2097152   83  Linux</span><br></pre></td></tr></table></figure></li><li><p>上面的步骤创建了一个主分区，指定了分区号为1，大小使用<code>+2G</code>的形式指定磁盘大小为2G，使用<code>p</code>命令可以查看新创建的分区；</p></li><li><p>主分区一旦达到4个，磁盘将不能够再继续分区，可以使用<code>d</code>命令删除分区后，划分一个扩展分区：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0xea193fb2</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     4196351     2097152   83  Linux</span><br><span class=\"line\">/dev/sdb2         4196352    10487807     3145728   83  Linux</span><br><span class=\"line\">/dev/sdb3        10487808    16779263     3145728   83  Linux</span><br><span class=\"line\">/dev/sdb4        16779264    20971519     2096128   83  Linux</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：n</span><br><span class=\"line\">If you want to create more than four partitions, you must replace a</span><br><span class=\"line\">primary partition with an extended partition first.</span><br><span class=\"line\"><span class=\"comment\"># 划分4个主分区后，再新增分区会有相应的提示</span></span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：d</span><br><span class=\"line\">分区号 (1-3，默认 3)：3</span><br><span class=\"line\">分区 3 已删除</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0xea193fb2</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     4196351     2097152   83  Linux</span><br><span class=\"line\">/dev/sdb2         4196352    10487807     3145728   83  Linux</span><br><span class=\"line\"><span class=\"comment\"># 已经将3,4两个分区删除</span></span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：n</span><br><span class=\"line\">Partition <span class=\"built_in\">type</span>:</span><br><span class=\"line\">   p   primary (2 primary, 0 extended, 2 free)</span><br><span class=\"line\">   e   extended</span><br><span class=\"line\">Select (default p): e</span><br><span class=\"line\">分区号 (3,4，默认 3)：</span><br><span class=\"line\">起始 扇区 (10487808-20971519，默认为 10487808)：</span><br><span class=\"line\">将使用默认值 10487808</span><br><span class=\"line\">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (10487808-20971519，默认为 20971519)：+3G</span><br><span class=\"line\">分区 3 已设置为 Extended 类型，大小设为 3 GiB</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0xea193fb2</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     4196351     2097152   83  Linux</span><br><span class=\"line\">/dev/sdb2         4196352    10487807     3145728   83  Linux</span><br><span class=\"line\">/dev/sdb3        10487808    16779263     3145728    5  Extended</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：n</span><br><span class=\"line\">Partition <span class=\"built_in\">type</span>:</span><br><span class=\"line\">   p   primary (2 primary, 1 extended, 1 free)</span><br><span class=\"line\">   l   logical (numbered from 5)</span><br><span class=\"line\">Select (default p):</span><br></pre></td></tr></table></figure></li><li><p>从上面的命令结果可以看到新创建的扩展分区的<code>id</code>为5，而主分区的类型<code>id</code>则为83，并且由于主分区加扩展分区未达到4个，再次增加分区时，可以继续增加主分区，也可以选择在扩展分区内添加逻辑分区，使用<code>l</code>命令增加逻辑分区：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令(输入 m 获取帮助)：n</span><br><span class=\"line\">Partition <span class=\"built_in\">type</span>:</span><br><span class=\"line\">   p   primary (2 primary, 1 extended, 1 free)</span><br><span class=\"line\">   l   logical (numbered from 5)</span><br><span class=\"line\">Select (default p): p</span><br><span class=\"line\">已选择分区 4</span><br><span class=\"line\">起始 扇区 (16779264-20971519，默认为 16779264)：</span><br><span class=\"line\">将使用默认值 16779264</span><br><span class=\"line\">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (16779264-20971519，默认为 20971519)：</span><br><span class=\"line\">将使用默认值 20971519</span><br><span class=\"line\">分区 4 已设置为 Linux 类型，大小设为 2 GiB</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0xea193fb2</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     4196351     2097152   83  Linux</span><br><span class=\"line\">/dev/sdb2         4196352    10487807     3145728   83  Linux</span><br><span class=\"line\">/dev/sdb3        10487808    16779263     3145728    5  Extended</span><br><span class=\"line\">/dev/sdb4        16779264    20971519     2096128   83  Linux</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：n\t<span class=\"comment\">#当主分区和逻辑分区达到4个时，再增加分区只会增加逻辑分区</span></span><br><span class=\"line\">All primary partitions are <span class=\"keyword\">in</span> use</span><br><span class=\"line\">添加逻辑分区 5</span><br><span class=\"line\">起始 扇区 (10489856-16779263，默认为 10489856)：</span><br><span class=\"line\">将使用默认值 10489856</span><br><span class=\"line\">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (10489856-16779263，默认为 16779263)：+1G</span><br><span class=\"line\">分区 5 已设置为 Linux 类型，大小设为 1 GiB</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0xea193fb2</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     4196351     2097152   83  Linux</span><br><span class=\"line\">/dev/sdb2         4196352    10487807     3145728   83  Linux</span><br><span class=\"line\">/dev/sdb3        10487808    16779263     3145728    5  Extended</span><br><span class=\"line\">/dev/sdb4        16779264    20971519     2096128   83  Linux</span><br><span class=\"line\">/dev/sdb5        10489856    12587007     1048576   83  Linux</span><br><span class=\"line\"><span class=\"comment\"># 新增的分区 5 就是逻辑分区</span></span><br></pre></td></tr></table></figure></li><li><p>逻辑分区的分区号在删除后会重新排序，并不会留空：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0xea193fb2</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     4196351     2097152   83  Linux</span><br><span class=\"line\">/dev/sdb2         4196352    10487807     3145728   83  Linux</span><br><span class=\"line\">/dev/sdb3        10487808    16779263     3145728    5  Extended</span><br><span class=\"line\">/dev/sdb4        16779264    20971519     2096128   83  Linux</span><br><span class=\"line\">/dev/sdb5        10489856    12587007     1048576   83  Linux</span><br><span class=\"line\">/dev/sdb6        12589056    16779263     2095104   83  Linux</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：d</span><br><span class=\"line\">分区号 (1-6，默认 6)：5</span><br><span class=\"line\">分区 5 已删除</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0xea193fb2</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     4196351     2097152   83  Linux</span><br><span class=\"line\">/dev/sdb2         4196352    10487807     3145728   83  Linux</span><br><span class=\"line\">/dev/sdb3        10487808    16779263     3145728    5  Extended</span><br><span class=\"line\">/dev/sdb4        16779264    20971519     2096128   83  Linux</span><br><span class=\"line\">/dev/sdb5        12589056    16779263     2095104   83  Linux</span><br><span class=\"line\"><span class=\"comment\"># 可以看到原来的6号分区变成了5号分区</span></span><br></pre></td></tr></table></figure></li><li><p><code>fdisk</code>中使用<code>q</code>命令可以放弃对分区的更改并退出；</p></li><li><p>当划分扩展分区时，逻辑分区的分区号一定是从5开始的，前4个分区号是留给主分区或扩展分区的：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令(输入 m 获取帮助)：n</span><br><span class=\"line\">Partition <span class=\"built_in\">type</span>:</span><br><span class=\"line\">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class=\"line\">   e   extended</span><br><span class=\"line\">Select (default p): e\t<span class=\"comment\">#先创建一个逻辑分区</span></span><br><span class=\"line\">分区号 (1-4，默认 1)：</span><br><span class=\"line\">起始 扇区 (2048-20971519，默认为 2048)： </span><br><span class=\"line\">将使用默认值 2048</span><br><span class=\"line\">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (2048-20971519，默认为 20971519)：+3G</span><br><span class=\"line\">分区 1 已设置为 Extended 类型，大小设为 3 GiB</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0xab7f9d31</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     6293503     3145728    5  Extended</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：n\t<span class=\"comment\"># 再创建一个分区号为3的主分区</span></span><br><span class=\"line\">Partition <span class=\"built_in\">type</span>:</span><br><span class=\"line\">   p   primary (0 primary, 1 extended, 3 free)</span><br><span class=\"line\">   l   logical (numbered from 5)</span><br><span class=\"line\">Select (default p): p</span><br><span class=\"line\">分区号 (2-4，默认 2)：3</span><br><span class=\"line\">起始 扇区 (6293504-20971519，默认为 6293504)：</span><br><span class=\"line\">将使用默认值 6293504</span><br><span class=\"line\">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (6293504-20971519，默认为 20971519)：+2G</span><br><span class=\"line\">分区 3 已设置为 Linux 类型，大小设为 2 GiB</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0xab7f9d31</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     6293503     3145728    5  Extended</span><br><span class=\"line\">/dev/sdb3         6293504    10487807     2097152   83  Linux</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：n\t<span class=\"comment\"># 创建一个逻辑分区</span></span><br><span class=\"line\">Partition <span class=\"built_in\">type</span>:</span><br><span class=\"line\">   p   primary (1 primary, 1 extended, 2 free)</span><br><span class=\"line\">   l   logical (numbered from 5)</span><br><span class=\"line\">Select (default p): l</span><br><span class=\"line\">添加逻辑分区 5</span><br><span class=\"line\">起始 扇区 (4096-6293503，默认为 4096)：</span><br><span class=\"line\">将使用默认值 4096</span><br><span class=\"line\">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (4096-6293503，默认为 6293503)：+1G</span><br><span class=\"line\">分区 5 已设置为 Linux 类型，大小设为 1 GiB</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p\t<span class=\"comment\"># 可以看到逻辑分区的分区号从5开始</span></span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0xab7f9d31</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048     6293503     3145728    5  Extended</span><br><span class=\"line\">/dev/sdb3         6293504    10487807     2097152   83  Linux</span><br><span class=\"line\">/dev/sdb5            4096     2101247     1048576   83  Linux</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"parted命令\"><a href=\"#parted命令\" class=\"headerlink\" title=\"parted命令\"></a>parted命令</h2><ul><li>由于mbr分区格式磁盘大小不能超过2T，所以GPT格式逐渐成为主流，GPT格式没有主分区、逻辑分区、扩展分区之分，在一块GPT格式的磁盘上，最多可以划分128个分区；</li><li>而<code>parted</code>则是支持对MBR和GPT格式磁盘进行分区的命令行工具，常用的功能如下：</li></ul><style>table th:first-of-type{width:100px}table th{text-align:center}</style><table><thead><tr><th style=\"text-align:center\">常用功能命令</th><th>作用</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>check</code></td><td>检查文件系统，建议使用<code>fsck</code>命令检查</td></tr><tr><td style=\"text-align:center\"><code>mklabel</code></td><td>创建分区表，即使用MBR还是GPT或其他分区表格式</td></tr><tr><td style=\"text-align:center\"><code>mkfs</code></td><td>创建文件系统，由于该命令不支持ext3，所以建议分区完成后使用其他命令创建文件系统</td></tr><tr><td style=\"text-align:center\"><code>mkpart</code></td><td>创建新分区，格式为<code>mkpart (part-type) (fs-type) start end</code>，<code>part-type</code>主要有<code>primary(主分区)</code>、<code>extended(扩展分区)</code>、<code>logical(逻辑分区)</code>，扩展和逻辑分区只对MBR格式有效，<code>fs-type</code>则是文件系统类型，如ext3、ext4，<code>start</code>&amp;<code>end</code>则是分区起始和结束位置</td></tr><tr><td style=\"text-align:center\"><code>mkpartfs</code></td><td>建立分区及其文件系统，与mkfs类似，不建议使用</td></tr><tr><td style=\"text-align:center\"><code>print</code></td><td>输出分区信息，该命令有<code>free</code>显示该磁盘所以信息，并显示磁盘剩余空间；<code>number</code>显示指定分区信息；<code>all</code>显示所以磁盘信息三个选项</td></tr><tr><td style=\"text-align:center\"><code>resize</code></td><td>调整指定的分区大小</td></tr><tr><td style=\"text-align:center\"><code>rescue</code></td><td>恢复被<code>parted</code>的<code>rm</code>命令删除的分区，需要给出分区的起始和结束位置，当查找到被删除的分区时，会提示恢复</td></tr><tr><td style=\"text-align:center\"><code>rm</code></td><td>删除分区，格式为<code>rm (分区编号)</code></td></tr><tr><td style=\"text-align:center\"><code>select</code></td><td>选择设备，存在多块磁盘时，需要选择操作的磁盘，格式为<code>select /dev/sdb</code></td></tr><tr><td style=\"text-align:center\"><code>set</code></td><td>更改指定分区编号的标志，标志有boot引导分区，hidden隐藏分区，raid软raid，lvm等，命令格式为<code>set 3 boot on</code>，即为设置3号分区为启动分区</td></tr></tbody></table><h2 id=\"使用parted对磁盘分区\"><a href=\"#使用parted对磁盘分区\" class=\"headerlink\" title=\"使用parted对磁盘分区\"></a>使用parted对磁盘分区</h2><ul><li><p>使用<code>parted (磁盘分区路径)</code>对指定的磁盘进行操作，并使用<code>mklabel</code>命令将磁盘分区表改为GPT格式：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># parted /dev/sdb</span></span><br><span class=\"line\">GNU Parted 3.1</span><br><span class=\"line\">使用 /dev/sdb</span><br><span class=\"line\">Welcome to GNU Parted! Type <span class=\"string\">'help'</span> to view a list of commands.</span><br><span class=\"line\">(parted) <span class=\"built_in\">print</span>                                                            </span><br><span class=\"line\">Model: ATA VBOX HARDDISK (scsi)</span><br><span class=\"line\">Disk /dev/sdb: 10.7GB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: msdos</span><br><span class=\"line\">Disk Flags: </span><br><span class=\"line\"></span><br><span class=\"line\">Number  Start  End  Size  Type  File system  标志</span><br><span class=\"line\"></span><br><span class=\"line\">(parted) mklabel gpt    <span class=\"comment\"># 更改为GPT格式分区表                                                  </span></span><br><span class=\"line\">警告: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want</span><br><span class=\"line\">to <span class=\"built_in\">continue</span>?</span><br><span class=\"line\">是/Yes/否/No? y                                                           </span><br><span class=\"line\">(parted) <span class=\"built_in\">print</span>                                                            </span><br><span class=\"line\">Model: ATA VBOX HARDDISK (scsi)</span><br><span class=\"line\">Disk /dev/sdb: 10.7GB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: gpt\t<span class=\"comment\"># 磁盘分区表格式已经修改成功</span></span><br><span class=\"line\">Disk Flags: </span><br><span class=\"line\"></span><br><span class=\"line\">Number  Start  End  Size  File system  Name  标志</span><br></pre></td></tr></table></figure></li><li><p>新增分区使用<code>mkpart</code>命令，并指定为<code>primary</code>主分区：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(parted) mkpart primary 1M 2G\t<span class=\"comment\">#创建一个2G大小的主分区</span></span><br><span class=\"line\">(parted) <span class=\"built_in\">print</span>                                                            </span><br><span class=\"line\">Model: ATA VBOX HARDDISK (scsi)</span><br><span class=\"line\">Disk /dev/sdb: 10.7GB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: gpt</span><br><span class=\"line\">Disk Flags: </span><br><span class=\"line\"></span><br><span class=\"line\">Number  Start   End     Size    File system  Name     标志</span><br><span class=\"line\"> 1      1049kB  2000MB  1999MB               primary</span><br></pre></td></tr></table></figure></li><li><p><code>parted</code>创建的分区不需要保存即可生效，使用<code>q</code>命令退出<code>parted</code>交互模式，再用<code>fdisk -l</code>查看已经新增的分区：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># fdisk -l                                              </span></span><br><span class=\"line\">WARNING: fdisk GPT support is currently new, and therefore <span class=\"keyword\">in</span> an experimental phase. Use at your own discretion.</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：gpt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#         Start          End    Size  Type            Name</span></span><br><span class=\"line\"> 1         2048      3905535    1.9G  Microsoft basic primary</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sda：32.2 GB, 32212254720 字节，62914560 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0x00022876</span><br><span class=\"line\"></span><br><span class=\"line\">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sda1   *        2048      411647      204800   83  Linux</span><br><span class=\"line\">/dev/sda2          411648     4605951     2097152   82  Linux swap / Solaris</span><br><span class=\"line\">/dev/sda3         4605952    62914559    29154304   83  Linux</span><br></pre></td></tr></table></figure></li><li><p>将分区格式化为ext4格式，使用<code>mkfs.ext4</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkfs.ext4 /dev/sdb1</span></span><br><span class=\"line\">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">文件系统标签=</span><br><span class=\"line\">OS <span class=\"built_in\">type</span>: Linux</span><br><span class=\"line\">块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">分块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">Stride=0 blocks, Stripe width=0 blocks</span><br><span class=\"line\">122160 inodes, 487936 blocks</span><br><span class=\"line\">24396 blocks (5.00%) reserved <span class=\"keyword\">for</span> the super user</span><br><span class=\"line\">第一个数据块=0</span><br><span class=\"line\">Maximum filesystem blocks=501219328</span><br><span class=\"line\">15 block groups</span><br><span class=\"line\">32768 blocks per group, 32768 fragments per group</span><br><span class=\"line\">8144 inodes per group</span><br><span class=\"line\">Superblock backups stored on blocks: </span><br><span class=\"line\">\t32768, 98304, 163840, 229376, 294912</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: 完成                            </span><br><span class=\"line\">正在写入inode表: 完成                            </span><br><span class=\"line\">Creating journal (8192 blocks): 完成</span><br><span class=\"line\">Writing superblocks and filesystem accounting information: 完成 </span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># parted /dev/sdb</span></span><br><span class=\"line\">GNU Parted 3.1</span><br><span class=\"line\">使用 /dev/sdb</span><br><span class=\"line\">Welcome to GNU Parted! Type <span class=\"string\">'help'</span> to view a list of commands.</span><br><span class=\"line\">(parted) <span class=\"built_in\">print</span>                                                            </span><br><span class=\"line\">Model: ATA VBOX HARDDISK (scsi)</span><br><span class=\"line\">Disk /dev/sdb: 10.7GB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: gpt</span><br><span class=\"line\">Disk Flags: </span><br><span class=\"line\"></span><br><span class=\"line\">Number  Start   End     Size    File system     Name     标志</span><br><span class=\"line\"> 1      1049kB  2000MB  1999MB  ext4            primary</span><br></pre></td></tr></table></figure></li><li><p><code>parted</code>也可以不进入交互模式而对磁盘进行分区操作，比如创建一个新的swap分区：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># parted /dev/sdb mkpart swap 2G 3G\t# 创建一个1G大小的swap分区</span></span><br><span class=\"line\">信息: You may need to update /etc/fstab.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># fdisk -l                                              </span></span><br><span class=\"line\">WARNING: fdisk GPT support is currently new, and therefore <span class=\"keyword\">in</span> an experimental phase. Use at your own discretion.</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：gpt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#         Start          End    Size  Type            Name</span></span><br><span class=\"line\"> 1         2048      3905535    1.9G  Microsoft basic primary</span><br><span class=\"line\"> 2      3905536      5859327    954M  Microsoft basic swap</span><br></pre></td></tr></table></figure></li><li><p>激活swap分区需要使用<code>mkswap</code>命令将分区格式化，然后使用<code>swapon</code>命令激活分区：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkswap /dev/sdb2</span></span><br><span class=\"line\">正在设置交换空间版本 1，大小 = 976892 KiB</span><br><span class=\"line\">无标签，UUID=596ad292-a0c4-4282-a1b6-340e4f88a83d</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># swapon /dev/sdb2</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># free</span></span><br><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\">Mem:        1016476       99792      750940        6720      165744      751612</span><br><span class=\"line\">Swap:       3074040           0     3074040</span><br></pre></td></tr></table></figure></li><li><p>由于<code>parted</code>命令是直接操作磁盘，所以当不小心删除分区时，使用<code>rescue</code>进行恢复：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># parted /dev/sdb rm 1\t# 删除分区</span></span><br><span class=\"line\">信息: You may need to update /etc/fstab.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># fdisk -l /dev/sdb</span></span><br><span class=\"line\">WARNING: fdisk GPT support is currently new, and therefore <span class=\"keyword\">in</span> an experimental phase. Use at your own discretion.</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：gpt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#         Start          End    Size  Type            Name</span></span><br><span class=\"line\"> 2      3905536      5859327    954M  Microsoft basic swap</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># parted /dev/sdb rescue 1M 2G\t# 恢复删除的分区</span></span><br><span class=\"line\">正在搜索文件系统... 3%  (剩余时间 00:35)信息: A ext4 primary partition was found at 1049kB -&gt; 2000MB.  Do you want to add it to the partition table?</span><br><span class=\"line\">是/Yes/否/No/放弃/Cancel? yes                                             </span><br><span class=\"line\">信息: You may need to update /etc/fstab.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># fdisk -l /dev/sdb                          </span></span><br><span class=\"line\">WARNING: fdisk GPT support is currently new, and therefore <span class=\"keyword\">in</span> an experimental phase. Use at your own discretion.</span><br><span class=\"line\"></span><br><span class=\"line\">磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span><br><span class=\"line\">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：gpt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#         Start          End    Size  Type            Name</span></span><br><span class=\"line\"> 1         2048      3905535    1.9G  Microsoft basic </span><br><span class=\"line\"> 2      3905536      5859327    954M  Microsoft basic swap</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->"},{"title":"PHP扩展模块安装","author":"Evobot","abbrlink":"63e0f53d","date":"2018-06-04T12:33:47.000Z","image":null,"_content":"\n\n\n本文主要介绍如何为php安装扩展模块，以及php错误日志级别、php短标签、php.ini的详细介绍。\n\n<!--more-->\n\n---\n\n# PHP安装扩展模块\n\n- 当PHP已经编译安装完成，但是由于实际需求需要增加新的模块，那么就需要使用PHP动态扩展模块的安装方式进行安装；\n\n- 例如安装redis模块，首先需要下载redis模块的源码包，然后重命名并解压缩：\n\n  ```bash\n  wget https://codeload.github.com/phpredis/phpredis/zip/develop\n  mv develop phpredis-develop.zip\n  unzip phpredis-develop.zip\n  ```\n\n- 然后进行的操作与普通的编译安装不同，由于源码包为php的扩展模块，所以需要进入源码包目录，使用`phpize`来生成configure文件：\n\n  ```bash\n  [root@evobot phpredis-develop]# /usr/local/php7/bin/phpize \n  Configuring for:\n  PHP Api Version:         20160303\n  Zend Module Api No:      20160303\n  Zend Extension Api No:   320160303\n  ```\n\n  > 提示缺少autoconf，只需要yum安装即可。\n\n- 执行了上面的命令后，目录内会生成一个configure文件：\n\n  ```bash\n  [root@evobot phpredis-develop]# ls -l configure\n  -rwxr-xr-x 1 root root 451757 6月   4 22:01 configure\n  ```\n\n- 然后与普通源码包一样进行编译，一般需要使用`--with-php-config=/usr/local/php7/bin/php-config`选项即可：\n\n  ```bash\n  ./configure --with-php-config=/usr/local/php7/bin/php-config\n  make && make install\n  ```\n\n- 执行了`make install`之后，会输出以下信息：\n\n  ```bash\n  [root@evobot phpredis-develop]# make install\n  Installing shared extensions:     /usr/local/php7/lib/php/extensions/no-debug-zts-20160303/\n  ```\n\n- 编译完成的so文件就会放入上面的php扩展模块目录，但是执行` /usr/local/php7/bin/php -m | grep redis`并没有加载这个模块，需要编辑配置文件增加模块；\n\n- 首先使用命令`/usr/local/php7/bin/php -i | grep -i  extension_dir`查看模块所在目录：\n\n  ```bash\n  [root@evobot phpredis-develop]# /usr/local/php7/bin/php -i | grep -i extension_dir\n  extension_dir => /usr/local/php7/lib/php/extensions/no-debug-zts-20160303 => /usr/local/php7/lib/php/extensions/no-debug-zts-20160303\n  sqlite3.extension_dir => no value => no value\n  [root@evobot phpredis-develop]# ls /usr/local/php7/lib/php/extensions/no-debug-zts-20160303/\n  opcache.so  redis.so\n  ```\n\n- 然后编辑php.ini文件，将`extension=redis.so`写入配置文件的extension配置后面即可生效：\n\n  ```bash\n  ;extension=php_xmlrpc.dll\n  ;extension=php_xsl.dll\n  extension=redis.so\n  ```\n\n  ```bash\n  [root@evobot phpredis-develop]# /usr/local/php7/bin/php -m | grep redis\n  redis\n  ```\n\n---\n\n# php扩展配置\n\n## PHP错误日志级别\n\n- php的错误日志级别`error_reporting`一共有下面这些级别：\n\n  - `E_ALL`：所有错误和警告（除E_STRICT外）；\n  - `E_ERROR`：致命的错误，脚本的执行被暂停；\n  - `E_RECOVERABLE_ERROR`：大多数的致命错误；\n  - `E_WARNING`：非致命的运行时的错误，只警告，脚本执行不会停止；\n  - `E_PARSE`：编译时解析错误，解析错误应该只由分析器生成；\n  - `E_NOTICE`：脚本运行时产生的提醒（往往是脚本里的一些bug，如变量没有定义，此错误不会导致任务中断；\n  - `E_STRICT`：脚本运行时产生的提醒信息，会包含php抛出的如何修改的建议信息；\n  - `E_CORE_ERROR`：在php启动后发生的致命性错误；\n  - `E_CORE_WARNING`：在php启动后发生的非致命性错误，即警告信息；\n  - `E_COMPILE_ERROR`：php编译时产生的致命性错误；\n  - `E_COMPILE_WARNING`：php编译时产生的警告信息；\n  - `E_USER_ERROR`：用户生成的错误；\n  - `E_USER_WARNING`：用户生成的告警；\n  - `E_USER_NOTICE`：用户生成的提醒。\n\n- 在指定日志级别时，可以使用多个上面的日志级别，连接符有`&`与、`~`非、`|`或三种，比如：\n\n  ```bash\n  errot_reporting=E_ALL & ~E_NOTICE\n  ```\n\n  > 表示错误级别为E_ALL且排除E_NOTICE。\n\n## php开启短标签\n\n- php.ini中有`short_open_tag`配置项，这是针对php语法的配置，如将选项设置为`Off`，那么php必须以下面的形式才能解析：\n\n  ```php\n  <?php\n      phpinfo();\n  ?>\n  ```\n\n- 如果配置为`short_open_tag=On`，那么php将能够解析下面形式的代码：\n\n  ```php\n  <?\n      phpinfo();\n  ?>\n  ```\n\n- 如果需要针对虚拟主机分别开启php短标签，则需要在虚拟主机的配置文件中增加如下形式的配置：\n\n  ```bash\n  php_admin_flag short_open_tag on\n  ```\n  \n- php.ini配置文件的详细介绍，可以参考链接：[http://blog.51cto.com/legolas/493917](http://blog.51cto.com/legolas/493917)。\n\n","source":"_posts/PHP扩展模块安装.md","raw":"---\ntitle: PHP扩展模块安装\nauthor: Evobot\ncategories: LAMP\ntags:\n  - Linux\n  - Centos\n  - PHP\nabbrlink: 63e0f53d\ndate: 2018-06-04 20:33:47\nimage:\n---\n\n\n\n本文主要介绍如何为php安装扩展模块，以及php错误日志级别、php短标签、php.ini的详细介绍。\n\n<!--more-->\n\n---\n\n# PHP安装扩展模块\n\n- 当PHP已经编译安装完成，但是由于实际需求需要增加新的模块，那么就需要使用PHP动态扩展模块的安装方式进行安装；\n\n- 例如安装redis模块，首先需要下载redis模块的源码包，然后重命名并解压缩：\n\n  ```bash\n  wget https://codeload.github.com/phpredis/phpredis/zip/develop\n  mv develop phpredis-develop.zip\n  unzip phpredis-develop.zip\n  ```\n\n- 然后进行的操作与普通的编译安装不同，由于源码包为php的扩展模块，所以需要进入源码包目录，使用`phpize`来生成configure文件：\n\n  ```bash\n  [root@evobot phpredis-develop]# /usr/local/php7/bin/phpize \n  Configuring for:\n  PHP Api Version:         20160303\n  Zend Module Api No:      20160303\n  Zend Extension Api No:   320160303\n  ```\n\n  > 提示缺少autoconf，只需要yum安装即可。\n\n- 执行了上面的命令后，目录内会生成一个configure文件：\n\n  ```bash\n  [root@evobot phpredis-develop]# ls -l configure\n  -rwxr-xr-x 1 root root 451757 6月   4 22:01 configure\n  ```\n\n- 然后与普通源码包一样进行编译，一般需要使用`--with-php-config=/usr/local/php7/bin/php-config`选项即可：\n\n  ```bash\n  ./configure --with-php-config=/usr/local/php7/bin/php-config\n  make && make install\n  ```\n\n- 执行了`make install`之后，会输出以下信息：\n\n  ```bash\n  [root@evobot phpredis-develop]# make install\n  Installing shared extensions:     /usr/local/php7/lib/php/extensions/no-debug-zts-20160303/\n  ```\n\n- 编译完成的so文件就会放入上面的php扩展模块目录，但是执行` /usr/local/php7/bin/php -m | grep redis`并没有加载这个模块，需要编辑配置文件增加模块；\n\n- 首先使用命令`/usr/local/php7/bin/php -i | grep -i  extension_dir`查看模块所在目录：\n\n  ```bash\n  [root@evobot phpredis-develop]# /usr/local/php7/bin/php -i | grep -i extension_dir\n  extension_dir => /usr/local/php7/lib/php/extensions/no-debug-zts-20160303 => /usr/local/php7/lib/php/extensions/no-debug-zts-20160303\n  sqlite3.extension_dir => no value => no value\n  [root@evobot phpredis-develop]# ls /usr/local/php7/lib/php/extensions/no-debug-zts-20160303/\n  opcache.so  redis.so\n  ```\n\n- 然后编辑php.ini文件，将`extension=redis.so`写入配置文件的extension配置后面即可生效：\n\n  ```bash\n  ;extension=php_xmlrpc.dll\n  ;extension=php_xsl.dll\n  extension=redis.so\n  ```\n\n  ```bash\n  [root@evobot phpredis-develop]# /usr/local/php7/bin/php -m | grep redis\n  redis\n  ```\n\n---\n\n# php扩展配置\n\n## PHP错误日志级别\n\n- php的错误日志级别`error_reporting`一共有下面这些级别：\n\n  - `E_ALL`：所有错误和警告（除E_STRICT外）；\n  - `E_ERROR`：致命的错误，脚本的执行被暂停；\n  - `E_RECOVERABLE_ERROR`：大多数的致命错误；\n  - `E_WARNING`：非致命的运行时的错误，只警告，脚本执行不会停止；\n  - `E_PARSE`：编译时解析错误，解析错误应该只由分析器生成；\n  - `E_NOTICE`：脚本运行时产生的提醒（往往是脚本里的一些bug，如变量没有定义，此错误不会导致任务中断；\n  - `E_STRICT`：脚本运行时产生的提醒信息，会包含php抛出的如何修改的建议信息；\n  - `E_CORE_ERROR`：在php启动后发生的致命性错误；\n  - `E_CORE_WARNING`：在php启动后发生的非致命性错误，即警告信息；\n  - `E_COMPILE_ERROR`：php编译时产生的致命性错误；\n  - `E_COMPILE_WARNING`：php编译时产生的警告信息；\n  - `E_USER_ERROR`：用户生成的错误；\n  - `E_USER_WARNING`：用户生成的告警；\n  - `E_USER_NOTICE`：用户生成的提醒。\n\n- 在指定日志级别时，可以使用多个上面的日志级别，连接符有`&`与、`~`非、`|`或三种，比如：\n\n  ```bash\n  errot_reporting=E_ALL & ~E_NOTICE\n  ```\n\n  > 表示错误级别为E_ALL且排除E_NOTICE。\n\n## php开启短标签\n\n- php.ini中有`short_open_tag`配置项，这是针对php语法的配置，如将选项设置为`Off`，那么php必须以下面的形式才能解析：\n\n  ```php\n  <?php\n      phpinfo();\n  ?>\n  ```\n\n- 如果配置为`short_open_tag=On`，那么php将能够解析下面形式的代码：\n\n  ```php\n  <?\n      phpinfo();\n  ?>\n  ```\n\n- 如果需要针对虚拟主机分别开启php短标签，则需要在虚拟主机的配置文件中增加如下形式的配置：\n\n  ```bash\n  php_admin_flag short_open_tag on\n  ```\n  \n- php.ini配置文件的详细介绍，可以参考链接：[http://blog.51cto.com/legolas/493917](http://blog.51cto.com/legolas/493917)。\n\n","slug":"PHP扩展模块安装","published":1,"updated":"2018-06-05T07:26:02.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazci002yu1jxiaz19oi8","content":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p>本文主要介绍如何为php安装扩展模块，以及php错误日志级别、php短标签、php.ini的详细介绍。</p><a id=\"more\"></a><hr><h1 id=\"PHP安装扩展模块\"><a href=\"#PHP安装扩展模块\" class=\"headerlink\" title=\"PHP安装扩展模块\"></a>PHP安装扩展模块</h1><ul><li><p>当PHP已经编译安装完成，但是由于实际需求需要增加新的模块，那么就需要使用PHP动态扩展模块的安装方式进行安装；</p></li><li><p>例如安装redis模块，首先需要下载redis模块的源码包，然后重命名并解压缩：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://codeload.github.com/phpredis/phpredis/zip/develop</span><br><span class=\"line\">mv develop phpredis-develop.zip</span><br><span class=\"line\">unzip phpredis-develop.zip</span><br></pre></td></tr></table></figure></li><li><p>然后进行的操作与普通的编译安装不同，由于源码包为php的扩展模块，所以需要进入源码包目录，使用<code>phpize</code>来生成configure文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot phpredis-develop]<span class=\"comment\"># /usr/local/php7/bin/phpize </span></span><br><span class=\"line\">Configuring <span class=\"keyword\">for</span>:</span><br><span class=\"line\">PHP Api Version:         20160303</span><br><span class=\"line\">Zend Module Api No:      20160303</span><br><span class=\"line\">Zend Extension Api No:   320160303</span><br></pre></td></tr></table></figure><blockquote><p>提示缺少autoconf，只需要yum安装即可。</p></blockquote></li><li><p>执行了上面的命令后，目录内会生成一个configure文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot phpredis-develop]<span class=\"comment\"># ls -l configure</span></span><br><span class=\"line\">-rwxr-xr-x 1 root root 451757 6月   4 22:01 configure</span><br></pre></td></tr></table></figure></li><li><p>然后与普通源码包一样进行编译，一般需要使用<code>--with-php-config=/usr/local/php7/bin/php-config</code>选项即可：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --with-php-config=/usr/<span class=\"built_in\">local</span>/php7/bin/php-config</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>执行了<code>make install</code>之后，会输出以下信息：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot phpredis-develop]<span class=\"comment\"># make install</span></span><br><span class=\"line\">Installing shared extensions:     /usr/<span class=\"built_in\">local</span>/php7/lib/php/extensions/no-debug-zts-20160303/</span><br></pre></td></tr></table></figure></li><li><p>编译完成的so文件就会放入上面的php扩展模块目录，但是执行<code>/usr/local/php7/bin/php -m | grep redis</code>并没有加载这个模块，需要编辑配置文件增加模块；</p></li><li><p>首先使用命令<code>/usr/local/php7/bin/php -i | grep -i extension_dir</code>查看模块所在目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot phpredis-develop]<span class=\"comment\"># /usr/local/php7/bin/php -i | grep -i extension_dir</span></span><br><span class=\"line\">extension_dir =&gt; /usr/<span class=\"built_in\">local</span>/php7/lib/php/extensions/no-debug-zts-20160303 =&gt; /usr/<span class=\"built_in\">local</span>/php7/lib/php/extensions/no-debug-zts-20160303</span><br><span class=\"line\">sqlite3.extension_dir =&gt; no value =&gt; no value</span><br><span class=\"line\">[root@evobot phpredis-develop]<span class=\"comment\"># ls /usr/local/php7/lib/php/extensions/no-debug-zts-20160303/</span></span><br><span class=\"line\">opcache.so  redis.so</span><br></pre></td></tr></table></figure></li><li><p>然后编辑php.ini文件，将<code>extension=redis.so</code>写入配置文件的extension配置后面即可生效：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;extension=php_xmlrpc.dll</span><br><span class=\"line\">;extension=php_xsl.dll</span><br><span class=\"line\">extension=redis.so</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot phpredis-develop]<span class=\"comment\"># /usr/local/php7/bin/php -m | grep redis</span></span><br><span class=\"line\">redis</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id=\"php扩展配置\"><a href=\"#php扩展配置\" class=\"headerlink\" title=\"php扩展配置\"></a>php扩展配置</h1><h2 id=\"PHP错误日志级别\"><a href=\"#PHP错误日志级别\" class=\"headerlink\" title=\"PHP错误日志级别\"></a>PHP错误日志级别</h2><ul><li><p>php的错误日志级别<code>error_reporting</code>一共有下面这些级别：</p><ul><li><code>E_ALL</code>：所有错误和警告（除E_STRICT外）；</li><li><code>E_ERROR</code>：致命的错误，脚本的执行被暂停；</li><li><code>E_RECOVERABLE_ERROR</code>：大多数的致命错误；</li><li><code>E_WARNING</code>：非致命的运行时的错误，只警告，脚本执行不会停止；</li><li><code>E_PARSE</code>：编译时解析错误，解析错误应该只由分析器生成；</li><li><code>E_NOTICE</code>：脚本运行时产生的提醒（往往是脚本里的一些bug，如变量没有定义，此错误不会导致任务中断；</li><li><code>E_STRICT</code>：脚本运行时产生的提醒信息，会包含php抛出的如何修改的建议信息；</li><li><code>E_CORE_ERROR</code>：在php启动后发生的致命性错误；</li><li><code>E_CORE_WARNING</code>：在php启动后发生的非致命性错误，即警告信息；</li><li><code>E_COMPILE_ERROR</code>：php编译时产生的致命性错误；</li><li><code>E_COMPILE_WARNING</code>：php编译时产生的警告信息；</li><li><code>E_USER_ERROR</code>：用户生成的错误；</li><li><code>E_USER_WARNING</code>：用户生成的告警；</li><li><code>E_USER_NOTICE</code>：用户生成的提醒。</li></ul></li><li><p>在指定日志级别时，可以使用多个上面的日志级别，连接符有<code>&amp;</code>与、<code>~</code>非、<code>|</code>或三种，比如：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">errot_reporting=E_ALL &amp; ~E_NOTICE</span><br></pre></td></tr></table></figure><blockquote><p>表示错误级别为E_ALL且排除E_NOTICE。</p></blockquote></li></ul><h2 id=\"php开启短标签\"><a href=\"#php开启短标签\" class=\"headerlink\" title=\"php开启短标签\"></a>php开启短标签</h2><ul><li><p>php.ini中有<code>short_open_tag</code>配置项，这是针对php语法的配置，如将选项设置为<code>Off</code>，那么php必须以下面的形式才能解析：</p><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    phpinfo();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>如果配置为<code>short_open_tag=On</code>，那么php将能够解析下面形式的代码：</p><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?</span></span><br><span class=\"line\">    phpinfo();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>如果需要针对虚拟主机分别开启php短标签，则需要在虚拟主机的配置文件中增加如下形式的配置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php_admin_flag short_open_tag on</span><br></pre></td></tr></table></figure></li></ul><ul><li>php.ini配置文件的详细介绍，可以参考链接：<a href=\"http://blog.51cto.com/legolas/493917\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://blog.51cto.com/legolas/493917</a>。</li></ul><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p>本文主要介绍如何为php安装扩展模块，以及php错误日志级别、php短标签、php.ini的详细介绍。</p>","more":"<hr><h1 id=\"PHP安装扩展模块\"><a href=\"#PHP安装扩展模块\" class=\"headerlink\" title=\"PHP安装扩展模块\"></a>PHP安装扩展模块</h1><ul><li><p>当PHP已经编译安装完成，但是由于实际需求需要增加新的模块，那么就需要使用PHP动态扩展模块的安装方式进行安装；</p></li><li><p>例如安装redis模块，首先需要下载redis模块的源码包，然后重命名并解压缩：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://codeload.github.com/phpredis/phpredis/zip/develop</span><br><span class=\"line\">mv develop phpredis-develop.zip</span><br><span class=\"line\">unzip phpredis-develop.zip</span><br></pre></td></tr></table></figure></li><li><p>然后进行的操作与普通的编译安装不同，由于源码包为php的扩展模块，所以需要进入源码包目录，使用<code>phpize</code>来生成configure文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot phpredis-develop]<span class=\"comment\"># /usr/local/php7/bin/phpize </span></span><br><span class=\"line\">Configuring <span class=\"keyword\">for</span>:</span><br><span class=\"line\">PHP Api Version:         20160303</span><br><span class=\"line\">Zend Module Api No:      20160303</span><br><span class=\"line\">Zend Extension Api No:   320160303</span><br></pre></td></tr></table></figure><blockquote><p>提示缺少autoconf，只需要yum安装即可。</p></blockquote></li><li><p>执行了上面的命令后，目录内会生成一个configure文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot phpredis-develop]<span class=\"comment\"># ls -l configure</span></span><br><span class=\"line\">-rwxr-xr-x 1 root root 451757 6月   4 22:01 configure</span><br></pre></td></tr></table></figure></li><li><p>然后与普通源码包一样进行编译，一般需要使用<code>--with-php-config=/usr/local/php7/bin/php-config</code>选项即可：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --with-php-config=/usr/<span class=\"built_in\">local</span>/php7/bin/php-config</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>执行了<code>make install</code>之后，会输出以下信息：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot phpredis-develop]<span class=\"comment\"># make install</span></span><br><span class=\"line\">Installing shared extensions:     /usr/<span class=\"built_in\">local</span>/php7/lib/php/extensions/no-debug-zts-20160303/</span><br></pre></td></tr></table></figure></li><li><p>编译完成的so文件就会放入上面的php扩展模块目录，但是执行<code>/usr/local/php7/bin/php -m | grep redis</code>并没有加载这个模块，需要编辑配置文件增加模块；</p></li><li><p>首先使用命令<code>/usr/local/php7/bin/php -i | grep -i extension_dir</code>查看模块所在目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot phpredis-develop]<span class=\"comment\"># /usr/local/php7/bin/php -i | grep -i extension_dir</span></span><br><span class=\"line\">extension_dir =&gt; /usr/<span class=\"built_in\">local</span>/php7/lib/php/extensions/no-debug-zts-20160303 =&gt; /usr/<span class=\"built_in\">local</span>/php7/lib/php/extensions/no-debug-zts-20160303</span><br><span class=\"line\">sqlite3.extension_dir =&gt; no value =&gt; no value</span><br><span class=\"line\">[root@evobot phpredis-develop]<span class=\"comment\"># ls /usr/local/php7/lib/php/extensions/no-debug-zts-20160303/</span></span><br><span class=\"line\">opcache.so  redis.so</span><br></pre></td></tr></table></figure></li><li><p>然后编辑php.ini文件，将<code>extension=redis.so</code>写入配置文件的extension配置后面即可生效：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;extension=php_xmlrpc.dll</span><br><span class=\"line\">;extension=php_xsl.dll</span><br><span class=\"line\">extension=redis.so</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot phpredis-develop]<span class=\"comment\"># /usr/local/php7/bin/php -m | grep redis</span></span><br><span class=\"line\">redis</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id=\"php扩展配置\"><a href=\"#php扩展配置\" class=\"headerlink\" title=\"php扩展配置\"></a>php扩展配置</h1><h2 id=\"PHP错误日志级别\"><a href=\"#PHP错误日志级别\" class=\"headerlink\" title=\"PHP错误日志级别\"></a>PHP错误日志级别</h2><ul><li><p>php的错误日志级别<code>error_reporting</code>一共有下面这些级别：</p><ul><li><code>E_ALL</code>：所有错误和警告（除E_STRICT外）；</li><li><code>E_ERROR</code>：致命的错误，脚本的执行被暂停；</li><li><code>E_RECOVERABLE_ERROR</code>：大多数的致命错误；</li><li><code>E_WARNING</code>：非致命的运行时的错误，只警告，脚本执行不会停止；</li><li><code>E_PARSE</code>：编译时解析错误，解析错误应该只由分析器生成；</li><li><code>E_NOTICE</code>：脚本运行时产生的提醒（往往是脚本里的一些bug，如变量没有定义，此错误不会导致任务中断；</li><li><code>E_STRICT</code>：脚本运行时产生的提醒信息，会包含php抛出的如何修改的建议信息；</li><li><code>E_CORE_ERROR</code>：在php启动后发生的致命性错误；</li><li><code>E_CORE_WARNING</code>：在php启动后发生的非致命性错误，即警告信息；</li><li><code>E_COMPILE_ERROR</code>：php编译时产生的致命性错误；</li><li><code>E_COMPILE_WARNING</code>：php编译时产生的警告信息；</li><li><code>E_USER_ERROR</code>：用户生成的错误；</li><li><code>E_USER_WARNING</code>：用户生成的告警；</li><li><code>E_USER_NOTICE</code>：用户生成的提醒。</li></ul></li><li><p>在指定日志级别时，可以使用多个上面的日志级别，连接符有<code>&amp;</code>与、<code>~</code>非、<code>|</code>或三种，比如：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">errot_reporting=E_ALL &amp; ~E_NOTICE</span><br></pre></td></tr></table></figure><blockquote><p>表示错误级别为E_ALL且排除E_NOTICE。</p></blockquote></li></ul><h2 id=\"php开启短标签\"><a href=\"#php开启短标签\" class=\"headerlink\" title=\"php开启短标签\"></a>php开启短标签</h2><ul><li><p>php.ini中有<code>short_open_tag</code>配置项，这是针对php语法的配置，如将选项设置为<code>Off</code>，那么php必须以下面的形式才能解析：</p><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    phpinfo();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>如果配置为<code>short_open_tag=On</code>，那么php将能够解析下面形式的代码：</p><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?</span></span><br><span class=\"line\">    phpinfo();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>如果需要针对虚拟主机分别开启php短标签，则需要在虚拟主机的配置文件中增加如下形式的配置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php_admin_flag short_open_tag on</span><br></pre></td></tr></table></figure></li></ul><ul><li>php.ini配置文件的详细介绍，可以参考链接：<a href=\"http://blog.51cto.com/legolas/493917\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://blog.51cto.com/legolas/493917</a>。</li></ul><!-- rebuild by neat -->"},{"title":"安装PHP5及PHP7","author":"Evobot","abbrlink":"75d64810","date":"2018-05-28T01:23:45.000Z","image":null,"_content":"\n\n\n目前主流的PHP版本为5.6和7.1，LAMP中，PHP是作为httpd的一个模块进行加载的，这里主要介绍如何安装5.6和7.1的PHP。\n\n<!--more-->\n\n---\n\n# 安装PHP5.6\n\n## 编译安装\n\n- 下载压缩包并解压：\n\n  ```bash\n   wget http://cn2.php.net/distributions/php-5.6.32.tar.bz2\n   tar jxvf php-5.6.32.tar.bz2\n  ```\n\n- 编译安装：\n\n  ```bash\n  cd php-5.6.32/\n  \n  ./configure --prefix=/usr/local/php \\\n  --with-apxs2=/usr/local/apache2.4/bin/apxs \\\n  --with-config-file-path=/usr/local/php/etc \\\n  --with-mysql=/usr/local/mysql \\\n  --with-pdo-mysql=/usr/local/mysql \\\n  --with-mysqli=/usr/local/mysql/bin/mysql_config \\\n  --with-libxml-dir \\\n  --with-gd \\\n  --with-jpeg-dir \\\n  --with-png-dir \\\n  --with-freetype-dir \\\n  --with-iconv-dir \\\n  --with-zlib-dir \\\n  --with-bz2 \\\n  --with-openssl \\\n  --with-mcrypt \\\n  --enable-soap \\\n  --enable-gd-native-ttf \\\n  --enable-mbstring \\\n  --enable-sockets \\\n  --enable-exif\n  \n  make && make intstal\n  ```\n\n  - 编译参数中，`--with-apxs2`是apache的工具，能够自动配置模块加载，这也是将php放在最后安装的原因，让apache自动加载php模块，`--with-config-file-path`指定php的配置文件路径，php的配置文件为php.ini，`--with-mysql`为指定MySQL的路径，`--with-pdo-mysql`、`--with-mysqli`为mysql不同的驱动或库，因为需要让php能够读写mysql，要编译php支持mysql的函数，在php7中，不再需要`--with-mysql`。\n\n## 报错处理\n\n- 编译时报错如下，则需要安装`libxml2-devel`软件包：\n\n  ```bash\n  checking for xml2-config path...\n  configure: error: xml2-config not found. Please check your libxml2 installation.\n  ```\n\n- 报错如下，需要安装`bzip2-devel`软件包：\n\n  ```bash\n  checking for BZip2 in default path... not found\n  configure: error: Please reinstall the BZip2 distribution\n  ```\n\n- 报错如下，需要安装`libjpeg-devel`软件包：\n\n  ```bash\n  configure: error: jpeglib.h not found.\n  ```\n\n- 报错如下，需要安装`libpng-devel`软件包：\n\n  ```bash\n  configure: error: png.h not found.\n  ```\n\n- 报错如下，需要安装`freetype-devel`软件包：\n\n  ```bash\n  configure: error: freetype-config not found.\n  ```\n\n- 报错如下，需要安装`libmcrypt-devel`软件包：\n\n  ```bash\n  configure: error: mcrypt.h not found. Please reinstall libmcrypt.\n  ```\n\n## PHP相关文件\n\n- php核心二进制文件为`/usr/local/php/bin/php`；\n\n- 而在apache中的php模块则为`/usr/local/apache2.4/modules/libphp5.so`；\n\n- 在apache中生成了php模块后，即使删除php的安装目录，也不会影响使用：\n\n  ```bash\n  [root@evobot php]# /usr/local/apache2.4/bin/apachectl -M\n   alias_module (shared)\n   php5_module (shared)\n  ```\n\n- php也可以查看加载的模块，并且这些模块均为静态加载：\n\n  ```bash\n  [root@evobot php]# bin/php -m\n  [PHP Modules]\n  bz2\n  Core\n  ctype\n  date\n  dom\n  ereg\n  exif\n  fileinfo\n  filter\n  gd\n  hash\n  iconv\n  json\n  libxml\n  mbstring\n  mcrypt\n  mysql\n  mysqli\n  openssl\n  pcre\n  PDO\n  pdo_mysql\n  pdo_sqlite\n  Phar\n  posix\n  Reflection\n  session\n  SimpleXML\n  soap\n  sockets\n  SPL\n  sqlite3\n  standard\n  tokenizer\n  xml\n  xmlreader\n  xmlwriter\n  \n  [Zend Modules]\n  ```\n\n- 查看apache的配置文件`/usr/local/apache2.4/conf/httpd.conf`，会有如下内容：\n\n  ```bash\n  #LoadModule actions_module modules/mod_actions.so\n  #LoadModule speling_module modules/mod_speling.so\n  #LoadModule userdir_module modules/mod_userdir.so\n  LoadModule alias_module modules/mod_alias.so\n  #LoadModule rewrite_module modules/mod_rewrite.so\n  LoadModule php5_module        modules/libphp5.so\n  ```\n\n  - 这里注释的是不需要加载的模块，没有注释的就是使用时需要加载的模块以及模块路径。\n\n- 最后，使用` /usr/local/php/bin/php -i | less`可以查看php的相关信息，如编译参数、配置文件路径，这里可以看到配置文件路径为`none`：\n\n  ```bash\n  System => Linux evobot 3.10.0-693.21.1.el7.x86_64 #1 SMP Wed Mar 7 19:03:37 UTC 2018 x86_64\n  Build Date => May 28 2018 11:08:35\n  Configure Command =>  './configure'  '--prefix=/usr/local/php' '--with-apxs2=/usr/local/apache2.4/bin/apxs' '--with-config-file-path=/usr/local/php/etc' '--with-mysql=/usr/local/mysql' '--with-pdo-mysql=/usr/local/mysql' '--with-mysqli=/usr/local/mysql/bin/mysql_config' '--with-libxml-dir' '--with-gd' '--with-jpeg-dir' '--with-png-dir' '--with-freetype-dir' '--with-icony-dir' '--with-zliv-dir' '--with-bz2' '--with-openssl' '--with-mcrypt' '--enable-soap' '--enable--gd-native-ttf' '--enable-mbstring' '--enable-sockets' '--enable-exif'\n  Server API => Command Line Interface\n  Virtual Directory Support => enabled\n  Configuration File (php.ini) Path => /usr/local/php/etc\n  Loaded Configuration File => (none)\t#没有配置文件\n  Scan this dir for additional .ini files => (none)\n  Additional .ini files parsed => (none)\n  PHP API => 20131106\n  PHP Extension => 20131226\n  Zend Extension => 220131226\n  Zend Extension Build => API220131226,TS\n  PHP Extension Build => API20131226,TS\n  Debug Build => no\n  \n  ```\n\n- 可以将源码包内的php的配置文件模板复制到配置文件路径，php.ini-production适合在生产环境使用，而development适合在开发环境使用：\n\n  ```bash\n  [root@evobot php-5.6.32] cp php.ini-production /usr/local/php/etc/php.ini\n  ```\n\n  \n\n# 安装PHP7\n\n## 编译安装\n\n- [下载php-7.1.6源码包](http://cn2.php.net/distributions/php-7.1.6.tar.bz2)\n\n- 解压缩后编译参数如下：\n\n  ```bash\n  ./configure --prefix=/usr/local/php7 \\\n  --with-apxs2=/usr/local/apache2.4/bin/apxs \\\n  --with-config-file-path=/usr/local/php7/etc \\\n  --with-pdo-mysql=/usr/local/mysql \\\n  --with-mysqli=/usr/local/mysql/bin/mysql_config \\\n  --with-libxml-dir \\\n  --with-gd \\\n  --with-jpeg-dir \\\n  --with-png-dir \\\n  --with-freetype-dir \\\n  --with-iconv-dir \\\n  --with-zlib-dir \\\n  --with-bz2 \\\n  --with-openssl \\\n  --with-mcrypt \\\n  --enable-soap \\\n  --enable-gd-native-ttf \\\n  --enable-mbstring \\\n  --enable-sockets \\\n  --enable-exif\n  ```\n\n  ```bash\n  make && make install\n  ```\n\n## 相关文件\n\n- 安装完成后，在`/usr/local/apache2.4/modules/`会生成php7的模块，如果安装了多个php，在apache调用时，需要在apache的配置文件中将不需要使用的php注释掉。\n\n\n","source":"_posts/PHP的安装.md","raw":"---\ntitle: 安装PHP5及PHP7\nauthor: Evobot\ncategories: LAMP\ntags:\n  - Linux\n  - Centos\n  - PHP\nabbrlink: 75d64810\ndate: 2018-05-28 09:23:45\nimage:\n---\n\n\n\n目前主流的PHP版本为5.6和7.1，LAMP中，PHP是作为httpd的一个模块进行加载的，这里主要介绍如何安装5.6和7.1的PHP。\n\n<!--more-->\n\n---\n\n# 安装PHP5.6\n\n## 编译安装\n\n- 下载压缩包并解压：\n\n  ```bash\n   wget http://cn2.php.net/distributions/php-5.6.32.tar.bz2\n   tar jxvf php-5.6.32.tar.bz2\n  ```\n\n- 编译安装：\n\n  ```bash\n  cd php-5.6.32/\n  \n  ./configure --prefix=/usr/local/php \\\n  --with-apxs2=/usr/local/apache2.4/bin/apxs \\\n  --with-config-file-path=/usr/local/php/etc \\\n  --with-mysql=/usr/local/mysql \\\n  --with-pdo-mysql=/usr/local/mysql \\\n  --with-mysqli=/usr/local/mysql/bin/mysql_config \\\n  --with-libxml-dir \\\n  --with-gd \\\n  --with-jpeg-dir \\\n  --with-png-dir \\\n  --with-freetype-dir \\\n  --with-iconv-dir \\\n  --with-zlib-dir \\\n  --with-bz2 \\\n  --with-openssl \\\n  --with-mcrypt \\\n  --enable-soap \\\n  --enable-gd-native-ttf \\\n  --enable-mbstring \\\n  --enable-sockets \\\n  --enable-exif\n  \n  make && make intstal\n  ```\n\n  - 编译参数中，`--with-apxs2`是apache的工具，能够自动配置模块加载，这也是将php放在最后安装的原因，让apache自动加载php模块，`--with-config-file-path`指定php的配置文件路径，php的配置文件为php.ini，`--with-mysql`为指定MySQL的路径，`--with-pdo-mysql`、`--with-mysqli`为mysql不同的驱动或库，因为需要让php能够读写mysql，要编译php支持mysql的函数，在php7中，不再需要`--with-mysql`。\n\n## 报错处理\n\n- 编译时报错如下，则需要安装`libxml2-devel`软件包：\n\n  ```bash\n  checking for xml2-config path...\n  configure: error: xml2-config not found. Please check your libxml2 installation.\n  ```\n\n- 报错如下，需要安装`bzip2-devel`软件包：\n\n  ```bash\n  checking for BZip2 in default path... not found\n  configure: error: Please reinstall the BZip2 distribution\n  ```\n\n- 报错如下，需要安装`libjpeg-devel`软件包：\n\n  ```bash\n  configure: error: jpeglib.h not found.\n  ```\n\n- 报错如下，需要安装`libpng-devel`软件包：\n\n  ```bash\n  configure: error: png.h not found.\n  ```\n\n- 报错如下，需要安装`freetype-devel`软件包：\n\n  ```bash\n  configure: error: freetype-config not found.\n  ```\n\n- 报错如下，需要安装`libmcrypt-devel`软件包：\n\n  ```bash\n  configure: error: mcrypt.h not found. Please reinstall libmcrypt.\n  ```\n\n## PHP相关文件\n\n- php核心二进制文件为`/usr/local/php/bin/php`；\n\n- 而在apache中的php模块则为`/usr/local/apache2.4/modules/libphp5.so`；\n\n- 在apache中生成了php模块后，即使删除php的安装目录，也不会影响使用：\n\n  ```bash\n  [root@evobot php]# /usr/local/apache2.4/bin/apachectl -M\n   alias_module (shared)\n   php5_module (shared)\n  ```\n\n- php也可以查看加载的模块，并且这些模块均为静态加载：\n\n  ```bash\n  [root@evobot php]# bin/php -m\n  [PHP Modules]\n  bz2\n  Core\n  ctype\n  date\n  dom\n  ereg\n  exif\n  fileinfo\n  filter\n  gd\n  hash\n  iconv\n  json\n  libxml\n  mbstring\n  mcrypt\n  mysql\n  mysqli\n  openssl\n  pcre\n  PDO\n  pdo_mysql\n  pdo_sqlite\n  Phar\n  posix\n  Reflection\n  session\n  SimpleXML\n  soap\n  sockets\n  SPL\n  sqlite3\n  standard\n  tokenizer\n  xml\n  xmlreader\n  xmlwriter\n  \n  [Zend Modules]\n  ```\n\n- 查看apache的配置文件`/usr/local/apache2.4/conf/httpd.conf`，会有如下内容：\n\n  ```bash\n  #LoadModule actions_module modules/mod_actions.so\n  #LoadModule speling_module modules/mod_speling.so\n  #LoadModule userdir_module modules/mod_userdir.so\n  LoadModule alias_module modules/mod_alias.so\n  #LoadModule rewrite_module modules/mod_rewrite.so\n  LoadModule php5_module        modules/libphp5.so\n  ```\n\n  - 这里注释的是不需要加载的模块，没有注释的就是使用时需要加载的模块以及模块路径。\n\n- 最后，使用` /usr/local/php/bin/php -i | less`可以查看php的相关信息，如编译参数、配置文件路径，这里可以看到配置文件路径为`none`：\n\n  ```bash\n  System => Linux evobot 3.10.0-693.21.1.el7.x86_64 #1 SMP Wed Mar 7 19:03:37 UTC 2018 x86_64\n  Build Date => May 28 2018 11:08:35\n  Configure Command =>  './configure'  '--prefix=/usr/local/php' '--with-apxs2=/usr/local/apache2.4/bin/apxs' '--with-config-file-path=/usr/local/php/etc' '--with-mysql=/usr/local/mysql' '--with-pdo-mysql=/usr/local/mysql' '--with-mysqli=/usr/local/mysql/bin/mysql_config' '--with-libxml-dir' '--with-gd' '--with-jpeg-dir' '--with-png-dir' '--with-freetype-dir' '--with-icony-dir' '--with-zliv-dir' '--with-bz2' '--with-openssl' '--with-mcrypt' '--enable-soap' '--enable--gd-native-ttf' '--enable-mbstring' '--enable-sockets' '--enable-exif'\n  Server API => Command Line Interface\n  Virtual Directory Support => enabled\n  Configuration File (php.ini) Path => /usr/local/php/etc\n  Loaded Configuration File => (none)\t#没有配置文件\n  Scan this dir for additional .ini files => (none)\n  Additional .ini files parsed => (none)\n  PHP API => 20131106\n  PHP Extension => 20131226\n  Zend Extension => 220131226\n  Zend Extension Build => API220131226,TS\n  PHP Extension Build => API20131226,TS\n  Debug Build => no\n  \n  ```\n\n- 可以将源码包内的php的配置文件模板复制到配置文件路径，php.ini-production适合在生产环境使用，而development适合在开发环境使用：\n\n  ```bash\n  [root@evobot php-5.6.32] cp php.ini-production /usr/local/php/etc/php.ini\n  ```\n\n  \n\n# 安装PHP7\n\n## 编译安装\n\n- [下载php-7.1.6源码包](http://cn2.php.net/distributions/php-7.1.6.tar.bz2)\n\n- 解压缩后编译参数如下：\n\n  ```bash\n  ./configure --prefix=/usr/local/php7 \\\n  --with-apxs2=/usr/local/apache2.4/bin/apxs \\\n  --with-config-file-path=/usr/local/php7/etc \\\n  --with-pdo-mysql=/usr/local/mysql \\\n  --with-mysqli=/usr/local/mysql/bin/mysql_config \\\n  --with-libxml-dir \\\n  --with-gd \\\n  --with-jpeg-dir \\\n  --with-png-dir \\\n  --with-freetype-dir \\\n  --with-iconv-dir \\\n  --with-zlib-dir \\\n  --with-bz2 \\\n  --with-openssl \\\n  --with-mcrypt \\\n  --enable-soap \\\n  --enable-gd-native-ttf \\\n  --enable-mbstring \\\n  --enable-sockets \\\n  --enable-exif\n  ```\n\n  ```bash\n  make && make install\n  ```\n\n## 相关文件\n\n- 安装完成后，在`/usr/local/apache2.4/modules/`会生成php7的模块，如果安装了多个php，在apache调用时，需要在apache的配置文件中将不需要使用的php注释掉。\n\n\n","slug":"PHP的安装","published":1,"updated":"2018-06-05T06:51:19.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazcp0031u1jx5emeqep8","content":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p>目前主流的PHP版本为5.6和7.1，LAMP中，PHP是作为httpd的一个模块进行加载的，这里主要介绍如何安装5.6和7.1的PHP。</p><a id=\"more\"></a><hr><h1 id=\"安装PHP5-6\"><a href=\"#安装PHP5-6\" class=\"headerlink\" title=\"安装PHP5.6\"></a>安装PHP5.6</h1><h2 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h2><ul><li><p>下载压缩包并解压：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://cn2.php.net/distributions/php-5.6.32.tar.bz2</span><br><span class=\"line\">tar jxvf php-5.6.32.tar.bz2</span><br></pre></td></tr></table></figure></li><li><p>编译安装：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> php-5.6.32/</span><br><span class=\"line\"></span><br><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/php \\</span><br><span class=\"line\">--with-apxs2=/usr/<span class=\"built_in\">local</span>/apache2.4/bin/apxs \\</span><br><span class=\"line\">--with-config-file-path=/usr/<span class=\"built_in\">local</span>/php/etc \\</span><br><span class=\"line\">--with-mysql=/usr/<span class=\"built_in\">local</span>/mysql \\</span><br><span class=\"line\">--with-pdo-mysql=/usr/<span class=\"built_in\">local</span>/mysql \\</span><br><span class=\"line\">--with-mysqli=/usr/<span class=\"built_in\">local</span>/mysql/bin/mysql_config \\</span><br><span class=\"line\">--with-libxml-dir \\</span><br><span class=\"line\">--with-gd \\</span><br><span class=\"line\">--with-jpeg-dir \\</span><br><span class=\"line\">--with-png-dir \\</span><br><span class=\"line\">--with-freetype-dir \\</span><br><span class=\"line\">--with-iconv-dir \\</span><br><span class=\"line\">--with-zlib-dir \\</span><br><span class=\"line\">--with-bz2 \\</span><br><span class=\"line\">--with-openssl \\</span><br><span class=\"line\">--with-mcrypt \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-soap \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-gd-native-ttf \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-mbstring \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-sockets \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-exif</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make intstal</span><br></pre></td></tr></table></figure><ul><li>编译参数中，<code>--with-apxs2</code>是apache的工具，能够自动配置模块加载，这也是将php放在最后安装的原因，让apache自动加载php模块，<code>--with-config-file-path</code>指定php的配置文件路径，php的配置文件为php.ini，<code>--with-mysql</code>为指定MySQL的路径，<code>--with-pdo-mysql</code>、<code>--with-mysqli</code>为mysql不同的驱动或库，因为需要让php能够读写mysql，要编译php支持mysql的函数，在php7中，不再需要<code>--with-mysql</code>。</li></ul></li></ul><h2 id=\"报错处理\"><a href=\"#报错处理\" class=\"headerlink\" title=\"报错处理\"></a>报错处理</h2><ul><li><p>编译时报错如下，则需要安装<code>libxml2-devel</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checking <span class=\"keyword\">for</span> xml2-config path...</span><br><span class=\"line\">configure: error: xml2-config not found. Please check your libxml2 installation.</span><br></pre></td></tr></table></figure></li><li><p>报错如下，需要安装<code>bzip2-devel</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checking <span class=\"keyword\">for</span> BZip2 <span class=\"keyword\">in</span> default path... not found</span><br><span class=\"line\">configure: error: Please reinstall the BZip2 distribution</span><br></pre></td></tr></table></figure></li><li><p>报错如下，需要安装<code>libjpeg-devel</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error: jpeglib.h not found.</span><br></pre></td></tr></table></figure></li><li><p>报错如下，需要安装<code>libpng-devel</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error: png.h not found.</span><br></pre></td></tr></table></figure></li><li><p>报错如下，需要安装<code>freetype-devel</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error: freetype-config not found.</span><br></pre></td></tr></table></figure></li><li><p>报错如下，需要安装<code>libmcrypt-devel</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error: mcrypt.h not found. Please reinstall libmcrypt.</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"PHP相关文件\"><a href=\"#PHP相关文件\" class=\"headerlink\" title=\"PHP相关文件\"></a>PHP相关文件</h2><ul><li><p>php核心二进制文件为<code>/usr/local/php/bin/php</code>；</p></li><li><p>而在apache中的php模块则为<code>/usr/local/apache2.4/modules/libphp5.so</code>；</p></li><li><p>在apache中生成了php模块后，即使删除php的安装目录，也不会影响使用：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot php]<span class=\"comment\"># /usr/local/apache2.4/bin/apachectl -M</span></span><br><span class=\"line\"> alias_module (shared)</span><br><span class=\"line\"> php5_module (shared)</span><br></pre></td></tr></table></figure></li><li><p>php也可以查看加载的模块，并且这些模块均为静态加载：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot php]<span class=\"comment\"># bin/php -m</span></span><br><span class=\"line\">[PHP Modules]</span><br><span class=\"line\">bz2</span><br><span class=\"line\">Core</span><br><span class=\"line\">ctype</span><br><span class=\"line\">date</span><br><span class=\"line\">dom</span><br><span class=\"line\">ereg</span><br><span class=\"line\">exif</span><br><span class=\"line\">fileinfo</span><br><span class=\"line\">filter</span><br><span class=\"line\">gd</span><br><span class=\"line\"><span class=\"built_in\">hash</span></span><br><span class=\"line\">iconv</span><br><span class=\"line\">json</span><br><span class=\"line\">libxml</span><br><span class=\"line\">mbstring</span><br><span class=\"line\">mcrypt</span><br><span class=\"line\">mysql</span><br><span class=\"line\">mysqli</span><br><span class=\"line\">openssl</span><br><span class=\"line\">pcre</span><br><span class=\"line\">PDO</span><br><span class=\"line\">pdo_mysql</span><br><span class=\"line\">pdo_sqlite</span><br><span class=\"line\">Phar</span><br><span class=\"line\">posix</span><br><span class=\"line\">Reflection</span><br><span class=\"line\">session</span><br><span class=\"line\">SimpleXML</span><br><span class=\"line\">soap</span><br><span class=\"line\">sockets</span><br><span class=\"line\">SPL</span><br><span class=\"line\">sqlite3</span><br><span class=\"line\">standard</span><br><span class=\"line\">tokenizer</span><br><span class=\"line\">xml</span><br><span class=\"line\">xmlreader</span><br><span class=\"line\">xmlwriter</span><br><span class=\"line\"></span><br><span class=\"line\">[Zend Modules]</span><br></pre></td></tr></table></figure></li><li><p>查看apache的配置文件<code>/usr/local/apache2.4/conf/httpd.conf</code>，会有如下内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#LoadModule actions_module modules/mod_actions.so</span></span><br><span class=\"line\"><span class=\"comment\">#LoadModule speling_module modules/mod_speling.so</span></span><br><span class=\"line\"><span class=\"comment\">#LoadModule userdir_module modules/mod_userdir.so</span></span><br><span class=\"line\">LoadModule alias_module modules/mod_alias.so</span><br><span class=\"line\"><span class=\"comment\">#LoadModule rewrite_module modules/mod_rewrite.so</span></span><br><span class=\"line\">LoadModule php5_module        modules/libphp5.so</span><br></pre></td></tr></table></figure><ul><li>这里注释的是不需要加载的模块，没有注释的就是使用时需要加载的模块以及模块路径。</li></ul></li><li><p>最后，使用<code>/usr/local/php/bin/php -i | less</code>可以查看php的相关信息，如编译参数、配置文件路径，这里可以看到配置文件路径为<code>none</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System =&gt; Linux evobot 3.10.0-693.21.1.el7.x86_64 <span class=\"comment\">#1 SMP Wed Mar 7 19:03:37 UTC 2018 x86_64</span></span><br><span class=\"line\">Build Date =&gt; May 28 2018 11:08:35</span><br><span class=\"line\">Configure Command =&gt;  <span class=\"string\">'./configure'</span>  <span class=\"string\">'--prefix=/usr/local/php'</span> <span class=\"string\">'--with-apxs2=/usr/local/apache2.4/bin/apxs'</span> <span class=\"string\">'--with-config-file-path=/usr/local/php/etc'</span> <span class=\"string\">'--with-mysql=/usr/local/mysql'</span> <span class=\"string\">'--with-pdo-mysql=/usr/local/mysql'</span> <span class=\"string\">'--with-mysqli=/usr/local/mysql/bin/mysql_config'</span> <span class=\"string\">'--with-libxml-dir'</span> <span class=\"string\">'--with-gd'</span> <span class=\"string\">'--with-jpeg-dir'</span> <span class=\"string\">'--with-png-dir'</span> <span class=\"string\">'--with-freetype-dir'</span> <span class=\"string\">'--with-icony-dir'</span> <span class=\"string\">'--with-zliv-dir'</span> <span class=\"string\">'--with-bz2'</span> <span class=\"string\">'--with-openssl'</span> <span class=\"string\">'--with-mcrypt'</span> <span class=\"string\">'--enable-soap'</span> <span class=\"string\">'--enable--gd-native-ttf'</span> <span class=\"string\">'--enable-mbstring'</span> <span class=\"string\">'--enable-sockets'</span> <span class=\"string\">'--enable-exif'</span></span><br><span class=\"line\">Server API =&gt; Command Line Interface</span><br><span class=\"line\">Virtual Directory Support =&gt; enabled</span><br><span class=\"line\">Configuration File (php.ini) Path =&gt; /usr/<span class=\"built_in\">local</span>/php/etc</span><br><span class=\"line\">Loaded Configuration File =&gt; (none)\t<span class=\"comment\">#没有配置文件</span></span><br><span class=\"line\">Scan this dir <span class=\"keyword\">for</span> additional .ini files =&gt; (none)</span><br><span class=\"line\">Additional .ini files parsed =&gt; (none)</span><br><span class=\"line\">PHP API =&gt; 20131106</span><br><span class=\"line\">PHP Extension =&gt; 20131226</span><br><span class=\"line\">Zend Extension =&gt; 220131226</span><br><span class=\"line\">Zend Extension Build =&gt; API220131226,TS</span><br><span class=\"line\">PHP Extension Build =&gt; API20131226,TS</span><br><span class=\"line\">Debug Build =&gt; no</span><br></pre></td></tr></table></figure></li><li><p>可以将源码包内的php的配置文件模板复制到配置文件路径，php.ini-production适合在生产环境使用，而development适合在开发环境使用：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot php-5.6.32] cp php.ini-production /usr/<span class=\"built_in\">local</span>/php/etc/php.ini</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"安装PHP7\"><a href=\"#安装PHP7\" class=\"headerlink\" title=\"安装PHP7\"></a>安装PHP7</h1><h2 id=\"编译安装-1\"><a href=\"#编译安装-1\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h2><ul><li><p><a href=\"http://cn2.php.net/distributions/php-7.1.6.tar.bz2\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">下载php-7.1.6源码包</a></p></li><li><p>解压缩后编译参数如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/php7 \\</span><br><span class=\"line\">--with-apxs2=/usr/<span class=\"built_in\">local</span>/apache2.4/bin/apxs \\</span><br><span class=\"line\">--with-config-file-path=/usr/<span class=\"built_in\">local</span>/php7/etc \\</span><br><span class=\"line\">--with-pdo-mysql=/usr/<span class=\"built_in\">local</span>/mysql \\</span><br><span class=\"line\">--with-mysqli=/usr/<span class=\"built_in\">local</span>/mysql/bin/mysql_config \\</span><br><span class=\"line\">--with-libxml-dir \\</span><br><span class=\"line\">--with-gd \\</span><br><span class=\"line\">--with-jpeg-dir \\</span><br><span class=\"line\">--with-png-dir \\</span><br><span class=\"line\">--with-freetype-dir \\</span><br><span class=\"line\">--with-iconv-dir \\</span><br><span class=\"line\">--with-zlib-dir \\</span><br><span class=\"line\">--with-bz2 \\</span><br><span class=\"line\">--with-openssl \\</span><br><span class=\"line\">--with-mcrypt \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-soap \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-gd-native-ttf \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-mbstring \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-sockets \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-exif</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"相关文件\"><a href=\"#相关文件\" class=\"headerlink\" title=\"相关文件\"></a>相关文件</h2><ul><li>安装完成后，在<code>/usr/local/apache2.4/modules/</code>会生成php7的模块，如果安装了多个php，在apache调用时，需要在apache的配置文件中将不需要使用的php注释掉。</li></ul><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p>目前主流的PHP版本为5.6和7.1，LAMP中，PHP是作为httpd的一个模块进行加载的，这里主要介绍如何安装5.6和7.1的PHP。</p>","more":"<hr><h1 id=\"安装PHP5-6\"><a href=\"#安装PHP5-6\" class=\"headerlink\" title=\"安装PHP5.6\"></a>安装PHP5.6</h1><h2 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h2><ul><li><p>下载压缩包并解压：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://cn2.php.net/distributions/php-5.6.32.tar.bz2</span><br><span class=\"line\">tar jxvf php-5.6.32.tar.bz2</span><br></pre></td></tr></table></figure></li><li><p>编译安装：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> php-5.6.32/</span><br><span class=\"line\"></span><br><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/php \\</span><br><span class=\"line\">--with-apxs2=/usr/<span class=\"built_in\">local</span>/apache2.4/bin/apxs \\</span><br><span class=\"line\">--with-config-file-path=/usr/<span class=\"built_in\">local</span>/php/etc \\</span><br><span class=\"line\">--with-mysql=/usr/<span class=\"built_in\">local</span>/mysql \\</span><br><span class=\"line\">--with-pdo-mysql=/usr/<span class=\"built_in\">local</span>/mysql \\</span><br><span class=\"line\">--with-mysqli=/usr/<span class=\"built_in\">local</span>/mysql/bin/mysql_config \\</span><br><span class=\"line\">--with-libxml-dir \\</span><br><span class=\"line\">--with-gd \\</span><br><span class=\"line\">--with-jpeg-dir \\</span><br><span class=\"line\">--with-png-dir \\</span><br><span class=\"line\">--with-freetype-dir \\</span><br><span class=\"line\">--with-iconv-dir \\</span><br><span class=\"line\">--with-zlib-dir \\</span><br><span class=\"line\">--with-bz2 \\</span><br><span class=\"line\">--with-openssl \\</span><br><span class=\"line\">--with-mcrypt \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-soap \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-gd-native-ttf \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-mbstring \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-sockets \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-exif</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make intstal</span><br></pre></td></tr></table></figure><ul><li>编译参数中，<code>--with-apxs2</code>是apache的工具，能够自动配置模块加载，这也是将php放在最后安装的原因，让apache自动加载php模块，<code>--with-config-file-path</code>指定php的配置文件路径，php的配置文件为php.ini，<code>--with-mysql</code>为指定MySQL的路径，<code>--with-pdo-mysql</code>、<code>--with-mysqli</code>为mysql不同的驱动或库，因为需要让php能够读写mysql，要编译php支持mysql的函数，在php7中，不再需要<code>--with-mysql</code>。</li></ul></li></ul><h2 id=\"报错处理\"><a href=\"#报错处理\" class=\"headerlink\" title=\"报错处理\"></a>报错处理</h2><ul><li><p>编译时报错如下，则需要安装<code>libxml2-devel</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checking <span class=\"keyword\">for</span> xml2-config path...</span><br><span class=\"line\">configure: error: xml2-config not found. Please check your libxml2 installation.</span><br></pre></td></tr></table></figure></li><li><p>报错如下，需要安装<code>bzip2-devel</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checking <span class=\"keyword\">for</span> BZip2 <span class=\"keyword\">in</span> default path... not found</span><br><span class=\"line\">configure: error: Please reinstall the BZip2 distribution</span><br></pre></td></tr></table></figure></li><li><p>报错如下，需要安装<code>libjpeg-devel</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error: jpeglib.h not found.</span><br></pre></td></tr></table></figure></li><li><p>报错如下，需要安装<code>libpng-devel</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error: png.h not found.</span><br></pre></td></tr></table></figure></li><li><p>报错如下，需要安装<code>freetype-devel</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error: freetype-config not found.</span><br></pre></td></tr></table></figure></li><li><p>报错如下，需要安装<code>libmcrypt-devel</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error: mcrypt.h not found. Please reinstall libmcrypt.</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"PHP相关文件\"><a href=\"#PHP相关文件\" class=\"headerlink\" title=\"PHP相关文件\"></a>PHP相关文件</h2><ul><li><p>php核心二进制文件为<code>/usr/local/php/bin/php</code>；</p></li><li><p>而在apache中的php模块则为<code>/usr/local/apache2.4/modules/libphp5.so</code>；</p></li><li><p>在apache中生成了php模块后，即使删除php的安装目录，也不会影响使用：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot php]<span class=\"comment\"># /usr/local/apache2.4/bin/apachectl -M</span></span><br><span class=\"line\"> alias_module (shared)</span><br><span class=\"line\"> php5_module (shared)</span><br></pre></td></tr></table></figure></li><li><p>php也可以查看加载的模块，并且这些模块均为静态加载：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot php]<span class=\"comment\"># bin/php -m</span></span><br><span class=\"line\">[PHP Modules]</span><br><span class=\"line\">bz2</span><br><span class=\"line\">Core</span><br><span class=\"line\">ctype</span><br><span class=\"line\">date</span><br><span class=\"line\">dom</span><br><span class=\"line\">ereg</span><br><span class=\"line\">exif</span><br><span class=\"line\">fileinfo</span><br><span class=\"line\">filter</span><br><span class=\"line\">gd</span><br><span class=\"line\"><span class=\"built_in\">hash</span></span><br><span class=\"line\">iconv</span><br><span class=\"line\">json</span><br><span class=\"line\">libxml</span><br><span class=\"line\">mbstring</span><br><span class=\"line\">mcrypt</span><br><span class=\"line\">mysql</span><br><span class=\"line\">mysqli</span><br><span class=\"line\">openssl</span><br><span class=\"line\">pcre</span><br><span class=\"line\">PDO</span><br><span class=\"line\">pdo_mysql</span><br><span class=\"line\">pdo_sqlite</span><br><span class=\"line\">Phar</span><br><span class=\"line\">posix</span><br><span class=\"line\">Reflection</span><br><span class=\"line\">session</span><br><span class=\"line\">SimpleXML</span><br><span class=\"line\">soap</span><br><span class=\"line\">sockets</span><br><span class=\"line\">SPL</span><br><span class=\"line\">sqlite3</span><br><span class=\"line\">standard</span><br><span class=\"line\">tokenizer</span><br><span class=\"line\">xml</span><br><span class=\"line\">xmlreader</span><br><span class=\"line\">xmlwriter</span><br><span class=\"line\"></span><br><span class=\"line\">[Zend Modules]</span><br></pre></td></tr></table></figure></li><li><p>查看apache的配置文件<code>/usr/local/apache2.4/conf/httpd.conf</code>，会有如下内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#LoadModule actions_module modules/mod_actions.so</span></span><br><span class=\"line\"><span class=\"comment\">#LoadModule speling_module modules/mod_speling.so</span></span><br><span class=\"line\"><span class=\"comment\">#LoadModule userdir_module modules/mod_userdir.so</span></span><br><span class=\"line\">LoadModule alias_module modules/mod_alias.so</span><br><span class=\"line\"><span class=\"comment\">#LoadModule rewrite_module modules/mod_rewrite.so</span></span><br><span class=\"line\">LoadModule php5_module        modules/libphp5.so</span><br></pre></td></tr></table></figure><ul><li>这里注释的是不需要加载的模块，没有注释的就是使用时需要加载的模块以及模块路径。</li></ul></li><li><p>最后，使用<code>/usr/local/php/bin/php -i | less</code>可以查看php的相关信息，如编译参数、配置文件路径，这里可以看到配置文件路径为<code>none</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System =&gt; Linux evobot 3.10.0-693.21.1.el7.x86_64 <span class=\"comment\">#1 SMP Wed Mar 7 19:03:37 UTC 2018 x86_64</span></span><br><span class=\"line\">Build Date =&gt; May 28 2018 11:08:35</span><br><span class=\"line\">Configure Command =&gt;  <span class=\"string\">'./configure'</span>  <span class=\"string\">'--prefix=/usr/local/php'</span> <span class=\"string\">'--with-apxs2=/usr/local/apache2.4/bin/apxs'</span> <span class=\"string\">'--with-config-file-path=/usr/local/php/etc'</span> <span class=\"string\">'--with-mysql=/usr/local/mysql'</span> <span class=\"string\">'--with-pdo-mysql=/usr/local/mysql'</span> <span class=\"string\">'--with-mysqli=/usr/local/mysql/bin/mysql_config'</span> <span class=\"string\">'--with-libxml-dir'</span> <span class=\"string\">'--with-gd'</span> <span class=\"string\">'--with-jpeg-dir'</span> <span class=\"string\">'--with-png-dir'</span> <span class=\"string\">'--with-freetype-dir'</span> <span class=\"string\">'--with-icony-dir'</span> <span class=\"string\">'--with-zliv-dir'</span> <span class=\"string\">'--with-bz2'</span> <span class=\"string\">'--with-openssl'</span> <span class=\"string\">'--with-mcrypt'</span> <span class=\"string\">'--enable-soap'</span> <span class=\"string\">'--enable--gd-native-ttf'</span> <span class=\"string\">'--enable-mbstring'</span> <span class=\"string\">'--enable-sockets'</span> <span class=\"string\">'--enable-exif'</span></span><br><span class=\"line\">Server API =&gt; Command Line Interface</span><br><span class=\"line\">Virtual Directory Support =&gt; enabled</span><br><span class=\"line\">Configuration File (php.ini) Path =&gt; /usr/<span class=\"built_in\">local</span>/php/etc</span><br><span class=\"line\">Loaded Configuration File =&gt; (none)\t<span class=\"comment\">#没有配置文件</span></span><br><span class=\"line\">Scan this dir <span class=\"keyword\">for</span> additional .ini files =&gt; (none)</span><br><span class=\"line\">Additional .ini files parsed =&gt; (none)</span><br><span class=\"line\">PHP API =&gt; 20131106</span><br><span class=\"line\">PHP Extension =&gt; 20131226</span><br><span class=\"line\">Zend Extension =&gt; 220131226</span><br><span class=\"line\">Zend Extension Build =&gt; API220131226,TS</span><br><span class=\"line\">PHP Extension Build =&gt; API20131226,TS</span><br><span class=\"line\">Debug Build =&gt; no</span><br></pre></td></tr></table></figure></li><li><p>可以将源码包内的php的配置文件模板复制到配置文件路径，php.ini-production适合在生产环境使用，而development适合在开发环境使用：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot php-5.6.32] cp php.ini-production /usr/<span class=\"built_in\">local</span>/php/etc/php.ini</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"安装PHP7\"><a href=\"#安装PHP7\" class=\"headerlink\" title=\"安装PHP7\"></a>安装PHP7</h1><h2 id=\"编译安装-1\"><a href=\"#编译安装-1\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h2><ul><li><p><a href=\"http://cn2.php.net/distributions/php-7.1.6.tar.bz2\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">下载php-7.1.6源码包</a></p></li><li><p>解压缩后编译参数如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/php7 \\</span><br><span class=\"line\">--with-apxs2=/usr/<span class=\"built_in\">local</span>/apache2.4/bin/apxs \\</span><br><span class=\"line\">--with-config-file-path=/usr/<span class=\"built_in\">local</span>/php7/etc \\</span><br><span class=\"line\">--with-pdo-mysql=/usr/<span class=\"built_in\">local</span>/mysql \\</span><br><span class=\"line\">--with-mysqli=/usr/<span class=\"built_in\">local</span>/mysql/bin/mysql_config \\</span><br><span class=\"line\">--with-libxml-dir \\</span><br><span class=\"line\">--with-gd \\</span><br><span class=\"line\">--with-jpeg-dir \\</span><br><span class=\"line\">--with-png-dir \\</span><br><span class=\"line\">--with-freetype-dir \\</span><br><span class=\"line\">--with-iconv-dir \\</span><br><span class=\"line\">--with-zlib-dir \\</span><br><span class=\"line\">--with-bz2 \\</span><br><span class=\"line\">--with-openssl \\</span><br><span class=\"line\">--with-mcrypt \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-soap \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-gd-native-ttf \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-mbstring \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-sockets \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-exif</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"相关文件\"><a href=\"#相关文件\" class=\"headerlink\" title=\"相关文件\"></a>相关文件</h2><ul><li>安装完成后，在<code>/usr/local/apache2.4/modules/</code>会生成php7的模块，如果安装了多个php，在apache调用时，需要在apache的配置文件中将不需要使用的php注释掉。</li></ul><!-- rebuild by neat -->"},{"title":"Shell基础(一)","author":"Evobot","abbrlink":"e6d37612","date":"2018-04-20T15:05:06.000Z","image":null,"_content":"\n\n\n本文将介绍shell的功能和一些操作用法，介绍shell的命令历史，命令补全以及命令别名，并使用通配符提高shell操作效率，另外还将介绍shell中如何将输入和输入重定向，如将本应输出到屏幕的命令输出到文件中。\n\n<!--more-->\n\n---\n\n# Shell基础(一)\n\n## Shell介绍\n\n- shell是一个命令解释器，提供用户和机器之间的交互；\n- 并且shell支持特定的语法，如逻辑判断、循环等等；\n- 每个用户可以有自己特定的shell，在Centos7中，默认shell为bash，除了bash以外，还有zsh，ksh等等，需要自己安装体验。\n\n## 命令历史\n\n### 查看命令历史\n\n- 在shell中可以使用上下方向键找回之前执行过的命令，实际上这些命令是存储在`~/.bash_history`文件中；\n- 使用命令`history`命令可以查看到历史执行过的命令，默认情况下，在`.bash_history`文件中会存储1000条命令；\n- 历史命令的条数是在系统环境变量`$HISTSIZE`中定义的，使用`history -c`可以清空内存中的历史命令，但不能清空文件中记录的历史命令；\n- 用户执行过的命令，在退出登录前都是存储在内存中，退出登录后才会写入到`.bash_history`文件中去；\n\n### 配置命令历史\n\n- 修改历史命令记录的大小，可以修改`/etc/profile`文件：\n\n```bash\nHOSTNAME=`/usr/bin/hostname 2>/dev/null`\nHISTSIZE=1000\t# 修改这里的数字即可改变历史命令记录的条数\nif [ \"$HISTCONTROL\" = \"ignorespace\" ] ; then\n    export HISTCONTROL=ignoreboth\nelse\n    export HISTCONTROL=ignoredups\nfi\n```\n\n- 修改完`/etc/profile`之后，在下次登录时生效，如果想要立即生效，可以执行`source /etc/profile`命令；\n- 默认配置记录的命令历史并没有命令执行的时间，可以定义`$HISTTIMEFORMAT`变量定义命令历史格式，如修改为年/月/日 时:分:秒：\n\n```bash\n[root@localhost etc]# echo $HISTTIMEFORMAT\n\n[root@localhost etc]# HISTTIMEFORMAT=\"%Y/%m/%d %H:%M:%S\"\n[root@localhost etc]# echo $HISTTIMEFORMAT\n%Y/%m/%d %H:%M:%S\n\n[root@localhost etc]# history \n    1  2018/04/20 22:54:45ip addr\n    2  2018/04/20 22:54:45dhclient\n    3  2018/04/20 22:54:45ip addr\n    4  2018/04/20 22:54:45ping www.baidu.com\n    5  2018/04/20 22:54:45init 6\n    6  2018/04/20 22:54:45ip a\n    7  2018/04/20 22:54:45init 0\n    8  2018/04/20 22:54:45fdisk -l\n    9  2018/04/20 22:54:45fdisk /dev/sdb\n```\n\n- 配置命令历史格式为默认格式，只需要将`HISTTIMEFORMAT`变量写入`/etc/profile`中：\n\n```bash\nHOSTNAME=`/usr/bin/hostname 2>/dev/null`\nHISTSIZE=1000\nHISTTIMEFORMAT=\"%Y/%m/%d %H:%M:%S\"\t# 增加变量\nif [ \"$HISTCONTROL\" = \"ignorespace\" ] ; then\n    export HISTCONTROL=ignoreboth\nelse\n    export HISTCONTROL=ignoredups\nfi\n```\n\n- 记录命令历史的`.bash_history`文件，可以追溯之前所以执行过的命令，所以可以将其设置为永久保存，给`.bash_history`增加隐藏权限`a`，执行命令`chattr +a ~/.bash_history`增加权限；\n- 在shell中使用`!!`可以重新执行上一条命令，重复运行指定的命令，使用`!n`其中`n`是命令历史的编号，`!word`其中word是之前执行过的命令的开头单词，这样可以重复执行匹配到的最近一条同样word开头的命令：\n\n```bash\n[root@localhost etc]# !!\npwd\n/etc\n\n[root@localhost etc]# history | head\n    1  2018/04/20 22:54:45ip addr\n    2  2018/04/20 22:54:45dhclient\n    3  2018/04/20 22:54:45ip addr\n    4  2018/04/20 22:54:45ping www.baidu.com\n    5  2018/04/20 22:54:45init 6\n    6  2018/04/20 22:54:45ip a\n    7  2018/04/20 22:54:45init 0\n    8  2018/04/20 22:54:45fdisk -l\n    9  2018/04/20 22:54:45fdisk /dev/sdb\n   10  2018/04/20 22:54:45fg\n   \n[root@localhost etc]# !3\nip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: enp0s3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000\n    link/ether 08:00:27:4e:b0:a6 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.199.224/24 brd 192.168.199.255 scope global enp0s3\n       valid_lft forever preferred_lft forever\n    inet6 fe80::7056:ab3e:1b19:7d4a/64 scope link \n       valid_lft forever preferred_lft forever\n       \n[root@localhost etc]# !echo\necho \"hello world\"\nhello world\n```\n\n## 命令补全\n\n- 使用tab键可以在shell中补全命令或文件路径，当补全的命令或文件存在2个或多个时，需要敲两次tab，只有一个时，敲一次tab即可补全；\n- 增强bash命令补全功能，可以安装`bash-completion`软件包，安装完成后重启，即可在bash内补全命令的参数；\n\n## 命令别名\n\n- 命令别名使用`alias`命令，用户自己的别名设置，在`~/.bashrc`文件内；\n- 在`/etc/profile.d/`目录下，存在多个shell脚本文件，这是系统定义的命令别名文件；\n- 使用`unalias [别名]`就可以取消设置的命令别名。\n\n## 通配符\n\n- 通配符是指能够指示一类文件的符号，使用通配符匹配文件，能够更快对需要的同一类文件进行处理；\n- 常用的通配符如下表：\n\n|              通配符              |       命令形式       |      作用      |\n| :---------------------------: | :--------------: | :----------: |\n|              `*`              |    `ls *.txt`    |  匹配0个或多个字符   |\n|              `?`              |    `ls ?.txt`    |   匹配一个任意字符   |\n| `[0-9]` `[a-z]` `[0-9a-zA-Z]` |  `ls [0-3].txt`  | 匹配指定范围内的一个字符 |\n|            `{1,2}`            | `ls {1.2.3.a}.txt` |  匹配括号内的一个字符  |\n\n## 输入输出重定向\n\n- 输入输出重定向，可以将命令的输入和输出指向别的命令或文件；\n- 常见的重定向符号如下：\n\n|      重定向符号      |                 命令形式                  |             作用             |\n| :-------------: | :-----------------------------------: | :------------------------: |\n|       `>`       |          `cat 1.txt > 2.txt`          | 将符号左边命令的**正确输出**覆盖写入到符号右边  |\n|      `>>`       |         `cat 1.txt >> 2.txt`          | 将符号左边命令的**正确输出**追加到符号右边文件  |\n|      `2>`       |          `ls aaa.txt 2> err`          | 将符号左边命令的**错误执行**信息，覆盖写入到符号 |\n|      `2>>`      |       `ls test.txt 2>> err.txt`       | 将符号左边命令的**错误执行**信息，追加写入到符号 |\n|      `&>`       |    `ls [12].txt aa.txt &> err.txt`    | 将**正确和错误**的执行信息，都覆盖输出到符号右边 |\n|      `&>>`      |   `ls [12].txt aa.txt &>> err.txt`    |  将**正确和错误**的执行信息，都输出到符号右边  |\n| `cmd > x 2 > y` |   `ls 1.txt a.txt > true 2> false`    |    将命令执行正确的输出到x，错误的输出到y    |\n| `cmd > X 2>&1`  | `ls /etc/hosts /etc/xzfa > true 2>&1` |  将命令执行的结果不论正确与否，都输出到X文件中   |\n|       `<`       |            `wc -l < 1.txt`            | 输入重定向。将符号右边的内容输入到左边的**命令** |\n\n---\n\n","source":"_posts/Shell基础(一).md","raw":"---\ntitle: Shell基础(一)\nauthor: Evobot\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\nabbrlink: e6d37612\ndate: 2018-04-20 23:05:06\nimage:\n---\n\n\n\n本文将介绍shell的功能和一些操作用法，介绍shell的命令历史，命令补全以及命令别名，并使用通配符提高shell操作效率，另外还将介绍shell中如何将输入和输入重定向，如将本应输出到屏幕的命令输出到文件中。\n\n<!--more-->\n\n---\n\n# Shell基础(一)\n\n## Shell介绍\n\n- shell是一个命令解释器，提供用户和机器之间的交互；\n- 并且shell支持特定的语法，如逻辑判断、循环等等；\n- 每个用户可以有自己特定的shell，在Centos7中，默认shell为bash，除了bash以外，还有zsh，ksh等等，需要自己安装体验。\n\n## 命令历史\n\n### 查看命令历史\n\n- 在shell中可以使用上下方向键找回之前执行过的命令，实际上这些命令是存储在`~/.bash_history`文件中；\n- 使用命令`history`命令可以查看到历史执行过的命令，默认情况下，在`.bash_history`文件中会存储1000条命令；\n- 历史命令的条数是在系统环境变量`$HISTSIZE`中定义的，使用`history -c`可以清空内存中的历史命令，但不能清空文件中记录的历史命令；\n- 用户执行过的命令，在退出登录前都是存储在内存中，退出登录后才会写入到`.bash_history`文件中去；\n\n### 配置命令历史\n\n- 修改历史命令记录的大小，可以修改`/etc/profile`文件：\n\n```bash\nHOSTNAME=`/usr/bin/hostname 2>/dev/null`\nHISTSIZE=1000\t# 修改这里的数字即可改变历史命令记录的条数\nif [ \"$HISTCONTROL\" = \"ignorespace\" ] ; then\n    export HISTCONTROL=ignoreboth\nelse\n    export HISTCONTROL=ignoredups\nfi\n```\n\n- 修改完`/etc/profile`之后，在下次登录时生效，如果想要立即生效，可以执行`source /etc/profile`命令；\n- 默认配置记录的命令历史并没有命令执行的时间，可以定义`$HISTTIMEFORMAT`变量定义命令历史格式，如修改为年/月/日 时:分:秒：\n\n```bash\n[root@localhost etc]# echo $HISTTIMEFORMAT\n\n[root@localhost etc]# HISTTIMEFORMAT=\"%Y/%m/%d %H:%M:%S\"\n[root@localhost etc]# echo $HISTTIMEFORMAT\n%Y/%m/%d %H:%M:%S\n\n[root@localhost etc]# history \n    1  2018/04/20 22:54:45ip addr\n    2  2018/04/20 22:54:45dhclient\n    3  2018/04/20 22:54:45ip addr\n    4  2018/04/20 22:54:45ping www.baidu.com\n    5  2018/04/20 22:54:45init 6\n    6  2018/04/20 22:54:45ip a\n    7  2018/04/20 22:54:45init 0\n    8  2018/04/20 22:54:45fdisk -l\n    9  2018/04/20 22:54:45fdisk /dev/sdb\n```\n\n- 配置命令历史格式为默认格式，只需要将`HISTTIMEFORMAT`变量写入`/etc/profile`中：\n\n```bash\nHOSTNAME=`/usr/bin/hostname 2>/dev/null`\nHISTSIZE=1000\nHISTTIMEFORMAT=\"%Y/%m/%d %H:%M:%S\"\t# 增加变量\nif [ \"$HISTCONTROL\" = \"ignorespace\" ] ; then\n    export HISTCONTROL=ignoreboth\nelse\n    export HISTCONTROL=ignoredups\nfi\n```\n\n- 记录命令历史的`.bash_history`文件，可以追溯之前所以执行过的命令，所以可以将其设置为永久保存，给`.bash_history`增加隐藏权限`a`，执行命令`chattr +a ~/.bash_history`增加权限；\n- 在shell中使用`!!`可以重新执行上一条命令，重复运行指定的命令，使用`!n`其中`n`是命令历史的编号，`!word`其中word是之前执行过的命令的开头单词，这样可以重复执行匹配到的最近一条同样word开头的命令：\n\n```bash\n[root@localhost etc]# !!\npwd\n/etc\n\n[root@localhost etc]# history | head\n    1  2018/04/20 22:54:45ip addr\n    2  2018/04/20 22:54:45dhclient\n    3  2018/04/20 22:54:45ip addr\n    4  2018/04/20 22:54:45ping www.baidu.com\n    5  2018/04/20 22:54:45init 6\n    6  2018/04/20 22:54:45ip a\n    7  2018/04/20 22:54:45init 0\n    8  2018/04/20 22:54:45fdisk -l\n    9  2018/04/20 22:54:45fdisk /dev/sdb\n   10  2018/04/20 22:54:45fg\n   \n[root@localhost etc]# !3\nip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: enp0s3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000\n    link/ether 08:00:27:4e:b0:a6 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.199.224/24 brd 192.168.199.255 scope global enp0s3\n       valid_lft forever preferred_lft forever\n    inet6 fe80::7056:ab3e:1b19:7d4a/64 scope link \n       valid_lft forever preferred_lft forever\n       \n[root@localhost etc]# !echo\necho \"hello world\"\nhello world\n```\n\n## 命令补全\n\n- 使用tab键可以在shell中补全命令或文件路径，当补全的命令或文件存在2个或多个时，需要敲两次tab，只有一个时，敲一次tab即可补全；\n- 增强bash命令补全功能，可以安装`bash-completion`软件包，安装完成后重启，即可在bash内补全命令的参数；\n\n## 命令别名\n\n- 命令别名使用`alias`命令，用户自己的别名设置，在`~/.bashrc`文件内；\n- 在`/etc/profile.d/`目录下，存在多个shell脚本文件，这是系统定义的命令别名文件；\n- 使用`unalias [别名]`就可以取消设置的命令别名。\n\n## 通配符\n\n- 通配符是指能够指示一类文件的符号，使用通配符匹配文件，能够更快对需要的同一类文件进行处理；\n- 常用的通配符如下表：\n\n|              通配符              |       命令形式       |      作用      |\n| :---------------------------: | :--------------: | :----------: |\n|              `*`              |    `ls *.txt`    |  匹配0个或多个字符   |\n|              `?`              |    `ls ?.txt`    |   匹配一个任意字符   |\n| `[0-9]` `[a-z]` `[0-9a-zA-Z]` |  `ls [0-3].txt`  | 匹配指定范围内的一个字符 |\n|            `{1,2}`            | `ls {1.2.3.a}.txt` |  匹配括号内的一个字符  |\n\n## 输入输出重定向\n\n- 输入输出重定向，可以将命令的输入和输出指向别的命令或文件；\n- 常见的重定向符号如下：\n\n|      重定向符号      |                 命令形式                  |             作用             |\n| :-------------: | :-----------------------------------: | :------------------------: |\n|       `>`       |          `cat 1.txt > 2.txt`          | 将符号左边命令的**正确输出**覆盖写入到符号右边  |\n|      `>>`       |         `cat 1.txt >> 2.txt`          | 将符号左边命令的**正确输出**追加到符号右边文件  |\n|      `2>`       |          `ls aaa.txt 2> err`          | 将符号左边命令的**错误执行**信息，覆盖写入到符号 |\n|      `2>>`      |       `ls test.txt 2>> err.txt`       | 将符号左边命令的**错误执行**信息，追加写入到符号 |\n|      `&>`       |    `ls [12].txt aa.txt &> err.txt`    | 将**正确和错误**的执行信息，都覆盖输出到符号右边 |\n|      `&>>`      |   `ls [12].txt aa.txt &>> err.txt`    |  将**正确和错误**的执行信息，都输出到符号右边  |\n| `cmd > x 2 > y` |   `ls 1.txt a.txt > true 2> false`    |    将命令执行正确的输出到x，错误的输出到y    |\n| `cmd > X 2>&1`  | `ls /etc/hosts /etc/xzfa > true 2>&1` |  将命令执行的结果不论正确与否，都输出到X文件中   |\n|       `<`       |            `wc -l < 1.txt`            | 输入重定向。将符号右边的内容输入到左边的**命令** |\n\n---\n\n","slug":"Shell基础(一)","published":1,"updated":"2018-06-02T13:01:29.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazcv0034u1jxsy6xrqq3","content":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p>本文将介绍shell的功能和一些操作用法，介绍shell的命令历史，命令补全以及命令别名，并使用通配符提高shell操作效率，另外还将介绍shell中如何将输入和输入重定向，如将本应输出到屏幕的命令输出到文件中。</p><a id=\"more\"></a><hr><h1 id=\"Shell基础-一\"><a href=\"#Shell基础-一\" class=\"headerlink\" title=\"Shell基础(一)\"></a>Shell基础(一)</h1><h2 id=\"Shell介绍\"><a href=\"#Shell介绍\" class=\"headerlink\" title=\"Shell介绍\"></a>Shell介绍</h2><ul><li>shell是一个命令解释器，提供用户和机器之间的交互；</li><li>并且shell支持特定的语法，如逻辑判断、循环等等；</li><li>每个用户可以有自己特定的shell，在Centos7中，默认shell为bash，除了bash以外，还有zsh，ksh等等，需要自己安装体验。</li></ul><h2 id=\"命令历史\"><a href=\"#命令历史\" class=\"headerlink\" title=\"命令历史\"></a>命令历史</h2><h3 id=\"查看命令历史\"><a href=\"#查看命令历史\" class=\"headerlink\" title=\"查看命令历史\"></a>查看命令历史</h3><ul><li>在shell中可以使用上下方向键找回之前执行过的命令，实际上这些命令是存储在<code>~/.bash_history</code>文件中；</li><li>使用命令<code>history</code>命令可以查看到历史执行过的命令，默认情况下，在<code>.bash_history</code>文件中会存储1000条命令；</li><li>历史命令的条数是在系统环境变量<code>$HISTSIZE</code>中定义的，使用<code>history -c</code>可以清空内存中的历史命令，但不能清空文件中记录的历史命令；</li><li>用户执行过的命令，在退出登录前都是存储在内存中，退出登录后才会写入到<code>.bash_history</code>文件中去；</li></ul><h3 id=\"配置命令历史\"><a href=\"#配置命令历史\" class=\"headerlink\" title=\"配置命令历史\"></a>配置命令历史</h3><ul><li>修改历史命令记录的大小，可以修改<code>/etc/profile</code>文件：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HOSTNAME=`/usr/bin/hostname 2&gt;/dev/null`</span><br><span class=\"line\">HISTSIZE=1000\t<span class=\"comment\"># 修改这里的数字即可改变历史命令记录的条数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$HISTCONTROL</span>\"</span> = <span class=\"string\">\"ignorespace\"</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">export</span> HISTCONTROL=ignoreboth</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">export</span> HISTCONTROL=ignoredups</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure><ul><li>修改完<code>/etc/profile</code>之后，在下次登录时生效，如果想要立即生效，可以执行<code>source /etc/profile</code>命令；</li><li>默认配置记录的命令历史并没有命令执行的时间，可以定义<code>$HISTTIMEFORMAT</code>变量定义命令历史格式，如修改为年/月/日 时:分:秒：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost etc]<span class=\"comment\"># echo $HISTTIMEFORMAT</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost etc]<span class=\"comment\"># HISTTIMEFORMAT=\"%Y/%m/%d %H:%M:%S\"</span></span><br><span class=\"line\">[root@localhost etc]<span class=\"comment\"># echo $HISTTIMEFORMAT</span></span><br><span class=\"line\">%Y/%m/%d %H:%M:%S</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost etc]<span class=\"comment\"># history </span></span><br><span class=\"line\">    1  2018/04/20 22:54:45ip addr</span><br><span class=\"line\">    2  2018/04/20 22:54:45dhclient</span><br><span class=\"line\">    3  2018/04/20 22:54:45ip addr</span><br><span class=\"line\">    4  2018/04/20 22:54:45ping www.baidu.com</span><br><span class=\"line\">    5  2018/04/20 22:54:45init 6</span><br><span class=\"line\">    6  2018/04/20 22:54:45ip a</span><br><span class=\"line\">    7  2018/04/20 22:54:45init 0</span><br><span class=\"line\">    8  2018/04/20 22:54:45fdisk -l</span><br><span class=\"line\">    9  2018/04/20 22:54:45fdisk /dev/sdb</span><br></pre></td></tr></table></figure><ul><li>配置命令历史格式为默认格式，只需要将<code>HISTTIMEFORMAT</code>变量写入<code>/etc/profile</code>中：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HOSTNAME=`/usr/bin/hostname 2&gt;/dev/null`</span><br><span class=\"line\">HISTSIZE=1000</span><br><span class=\"line\">HISTTIMEFORMAT=<span class=\"string\">\"%Y/%m/%d %H:%M:%S\"</span>\t<span class=\"comment\"># 增加变量</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$HISTCONTROL</span>\"</span> = <span class=\"string\">\"ignorespace\"</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">export</span> HISTCONTROL=ignoreboth</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">export</span> HISTCONTROL=ignoredups</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure><ul><li>记录命令历史的<code>.bash_history</code>文件，可以追溯之前所以执行过的命令，所以可以将其设置为永久保存，给<code>.bash_history</code>增加隐藏权限<code>a</code>，执行命令<code>chattr +a ~/.bash_history</code>增加权限；</li><li>在shell中使用<code>!!</code>可以重新执行上一条命令，重复运行指定的命令，使用<code>!n</code>其中<code>n</code>是命令历史的编号，<code>!word</code>其中word是之前执行过的命令的开头单词，这样可以重复执行匹配到的最近一条同样word开头的命令：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost etc]<span class=\"comment\"># !!</span></span><br><span class=\"line\"><span class=\"built_in\">pwd</span></span><br><span class=\"line\">/etc</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost etc]<span class=\"comment\"># history | head</span></span><br><span class=\"line\">    1  2018/04/20 22:54:45ip addr</span><br><span class=\"line\">    2  2018/04/20 22:54:45dhclient</span><br><span class=\"line\">    3  2018/04/20 22:54:45ip addr</span><br><span class=\"line\">    4  2018/04/20 22:54:45ping www.baidu.com</span><br><span class=\"line\">    5  2018/04/20 22:54:45init 6</span><br><span class=\"line\">    6  2018/04/20 22:54:45ip a</span><br><span class=\"line\">    7  2018/04/20 22:54:45init 0</span><br><span class=\"line\">    8  2018/04/20 22:54:45fdisk -l</span><br><span class=\"line\">    9  2018/04/20 22:54:45fdisk /dev/sdb</span><br><span class=\"line\">   10  2018/04/20 22:54:45fg</span><br><span class=\"line\">   </span><br><span class=\"line\">[root@localhost etc]<span class=\"comment\"># !3</span></span><br><span class=\"line\">ip addr</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class=\"line\">    link/ether 08:00:27:4e:b0:a6 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.199.224/24 brd 192.168.199.255 scope global enp0s3</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::7056:ab3e:1b19:7d4a/64 scope link </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">       </span><br><span class=\"line\">[root@localhost etc]<span class=\"comment\"># !echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure><h2 id=\"命令补全\"><a href=\"#命令补全\" class=\"headerlink\" title=\"命令补全\"></a>命令补全</h2><ul><li>使用tab键可以在shell中补全命令或文件路径，当补全的命令或文件存在2个或多个时，需要敲两次tab，只有一个时，敲一次tab即可补全；</li><li>增强bash命令补全功能，可以安装<code>bash-completion</code>软件包，安装完成后重启，即可在bash内补全命令的参数；</li></ul><h2 id=\"命令别名\"><a href=\"#命令别名\" class=\"headerlink\" title=\"命令别名\"></a>命令别名</h2><ul><li>命令别名使用<code>alias</code>命令，用户自己的别名设置，在<code>~/.bashrc</code>文件内；</li><li>在<code>/etc/profile.d/</code>目录下，存在多个shell脚本文件，这是系统定义的命令别名文件；</li><li>使用<code>unalias [别名]</code>就可以取消设置的命令别名。</li></ul><h2 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h2><ul><li>通配符是指能够指示一类文件的符号，使用通配符匹配文件，能够更快对需要的同一类文件进行处理；</li><li>常用的通配符如下表：</li></ul><table><thead><tr><th style=\"text-align:center\">通配符</th><th style=\"text-align:center\">命令形式</th><th style=\"text-align:center\">作用</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>*</code></td><td style=\"text-align:center\"><code>ls *.txt</code></td><td style=\"text-align:center\">匹配0个或多个字符</td></tr><tr><td style=\"text-align:center\"><code>?</code></td><td style=\"text-align:center\"><code>ls ?.txt</code></td><td style=\"text-align:center\">匹配一个任意字符</td></tr><tr><td style=\"text-align:center\"><code>[0-9]</code> <code>[a-z]</code> <code>[0-9a-zA-Z]</code></td><td style=\"text-align:center\"><code>ls [0-3].txt</code></td><td style=\"text-align:center\">匹配指定范围内的一个字符</td></tr><tr><td style=\"text-align:center\"><code>{1,2}</code></td><td style=\"text-align:center\"><code>ls {1.2.3.a}.txt</code></td><td style=\"text-align:center\">匹配括号内的一个字符</td></tr></tbody></table><h2 id=\"输入输出重定向\"><a href=\"#输入输出重定向\" class=\"headerlink\" title=\"输入输出重定向\"></a>输入输出重定向</h2><ul><li>输入输出重定向，可以将命令的输入和输出指向别的命令或文件；</li><li>常见的重定向符号如下：</li></ul><table><thead><tr><th style=\"text-align:center\">重定向符号</th><th style=\"text-align:center\">命令形式</th><th style=\"text-align:center\">作用</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>&gt;</code></td><td style=\"text-align:center\"><code>cat 1.txt &gt; 2.txt</code></td><td style=\"text-align:center\">将符号左边命令的<strong>正确输出</strong>覆盖写入到符号右边</td></tr><tr><td style=\"text-align:center\"><code>&gt;&gt;</code></td><td style=\"text-align:center\"><code>cat 1.txt &gt;&gt; 2.txt</code></td><td style=\"text-align:center\">将符号左边命令的<strong>正确输出</strong>追加到符号右边文件</td></tr><tr><td style=\"text-align:center\"><code>2&gt;</code></td><td style=\"text-align:center\"><code>ls aaa.txt 2&gt; err</code></td><td style=\"text-align:center\">将符号左边命令的<strong>错误执行</strong>信息，覆盖写入到符号</td></tr><tr><td style=\"text-align:center\"><code>2&gt;&gt;</code></td><td style=\"text-align:center\"><code>ls test.txt 2&gt;&gt; err.txt</code></td><td style=\"text-align:center\">将符号左边命令的<strong>错误执行</strong>信息，追加写入到符号</td></tr><tr><td style=\"text-align:center\"><code>&amp;&gt;</code></td><td style=\"text-align:center\"><code>ls [12].txt aa.txt &amp;&gt; err.txt</code></td><td style=\"text-align:center\">将<strong>正确和错误</strong>的执行信息，都覆盖输出到符号右边</td></tr><tr><td style=\"text-align:center\"><code>&amp;&gt;&gt;</code></td><td style=\"text-align:center\"><code>ls [12].txt aa.txt &amp;&gt;&gt; err.txt</code></td><td style=\"text-align:center\">将<strong>正确和错误</strong>的执行信息，都输出到符号右边</td></tr><tr><td style=\"text-align:center\"><code>cmd &gt; x 2 &gt; y</code></td><td style=\"text-align:center\"><code>ls 1.txt a.txt &gt; true 2&gt; false</code></td><td style=\"text-align:center\">将命令执行正确的输出到x，错误的输出到y</td></tr><tr><td style=\"text-align:center\"><code>cmd &gt; X 2&gt;&amp;1</code></td><td style=\"text-align:center\"><code>ls /etc/hosts /etc/xzfa &gt; true 2&gt;&amp;1</code></td><td style=\"text-align:center\">将命令执行的结果不论正确与否，都输出到X文件中</td></tr><tr><td style=\"text-align:center\"><code>&lt;</code></td><td style=\"text-align:center\"><code>wc -l &lt; 1.txt</code></td><td style=\"text-align:center\">输入重定向。将符号右边的内容输入到左边的<strong>命令</strong></td></tr></tbody></table><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p>本文将介绍shell的功能和一些操作用法，介绍shell的命令历史，命令补全以及命令别名，并使用通配符提高shell操作效率，另外还将介绍shell中如何将输入和输入重定向，如将本应输出到屏幕的命令输出到文件中。</p>","more":"<hr><h1 id=\"Shell基础-一\"><a href=\"#Shell基础-一\" class=\"headerlink\" title=\"Shell基础(一)\"></a>Shell基础(一)</h1><h2 id=\"Shell介绍\"><a href=\"#Shell介绍\" class=\"headerlink\" title=\"Shell介绍\"></a>Shell介绍</h2><ul><li>shell是一个命令解释器，提供用户和机器之间的交互；</li><li>并且shell支持特定的语法，如逻辑判断、循环等等；</li><li>每个用户可以有自己特定的shell，在Centos7中，默认shell为bash，除了bash以外，还有zsh，ksh等等，需要自己安装体验。</li></ul><h2 id=\"命令历史\"><a href=\"#命令历史\" class=\"headerlink\" title=\"命令历史\"></a>命令历史</h2><h3 id=\"查看命令历史\"><a href=\"#查看命令历史\" class=\"headerlink\" title=\"查看命令历史\"></a>查看命令历史</h3><ul><li>在shell中可以使用上下方向键找回之前执行过的命令，实际上这些命令是存储在<code>~/.bash_history</code>文件中；</li><li>使用命令<code>history</code>命令可以查看到历史执行过的命令，默认情况下，在<code>.bash_history</code>文件中会存储1000条命令；</li><li>历史命令的条数是在系统环境变量<code>$HISTSIZE</code>中定义的，使用<code>history -c</code>可以清空内存中的历史命令，但不能清空文件中记录的历史命令；</li><li>用户执行过的命令，在退出登录前都是存储在内存中，退出登录后才会写入到<code>.bash_history</code>文件中去；</li></ul><h3 id=\"配置命令历史\"><a href=\"#配置命令历史\" class=\"headerlink\" title=\"配置命令历史\"></a>配置命令历史</h3><ul><li>修改历史命令记录的大小，可以修改<code>/etc/profile</code>文件：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HOSTNAME=`/usr/bin/hostname 2&gt;/dev/null`</span><br><span class=\"line\">HISTSIZE=1000\t<span class=\"comment\"># 修改这里的数字即可改变历史命令记录的条数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$HISTCONTROL</span>\"</span> = <span class=\"string\">\"ignorespace\"</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">export</span> HISTCONTROL=ignoreboth</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">export</span> HISTCONTROL=ignoredups</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure><ul><li>修改完<code>/etc/profile</code>之后，在下次登录时生效，如果想要立即生效，可以执行<code>source /etc/profile</code>命令；</li><li>默认配置记录的命令历史并没有命令执行的时间，可以定义<code>$HISTTIMEFORMAT</code>变量定义命令历史格式，如修改为年/月/日 时:分:秒：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost etc]<span class=\"comment\"># echo $HISTTIMEFORMAT</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost etc]<span class=\"comment\"># HISTTIMEFORMAT=\"%Y/%m/%d %H:%M:%S\"</span></span><br><span class=\"line\">[root@localhost etc]<span class=\"comment\"># echo $HISTTIMEFORMAT</span></span><br><span class=\"line\">%Y/%m/%d %H:%M:%S</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost etc]<span class=\"comment\"># history </span></span><br><span class=\"line\">    1  2018/04/20 22:54:45ip addr</span><br><span class=\"line\">    2  2018/04/20 22:54:45dhclient</span><br><span class=\"line\">    3  2018/04/20 22:54:45ip addr</span><br><span class=\"line\">    4  2018/04/20 22:54:45ping www.baidu.com</span><br><span class=\"line\">    5  2018/04/20 22:54:45init 6</span><br><span class=\"line\">    6  2018/04/20 22:54:45ip a</span><br><span class=\"line\">    7  2018/04/20 22:54:45init 0</span><br><span class=\"line\">    8  2018/04/20 22:54:45fdisk -l</span><br><span class=\"line\">    9  2018/04/20 22:54:45fdisk /dev/sdb</span><br></pre></td></tr></table></figure><ul><li>配置命令历史格式为默认格式，只需要将<code>HISTTIMEFORMAT</code>变量写入<code>/etc/profile</code>中：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HOSTNAME=`/usr/bin/hostname 2&gt;/dev/null`</span><br><span class=\"line\">HISTSIZE=1000</span><br><span class=\"line\">HISTTIMEFORMAT=<span class=\"string\">\"%Y/%m/%d %H:%M:%S\"</span>\t<span class=\"comment\"># 增加变量</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$HISTCONTROL</span>\"</span> = <span class=\"string\">\"ignorespace\"</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">export</span> HISTCONTROL=ignoreboth</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">export</span> HISTCONTROL=ignoredups</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure><ul><li>记录命令历史的<code>.bash_history</code>文件，可以追溯之前所以执行过的命令，所以可以将其设置为永久保存，给<code>.bash_history</code>增加隐藏权限<code>a</code>，执行命令<code>chattr +a ~/.bash_history</code>增加权限；</li><li>在shell中使用<code>!!</code>可以重新执行上一条命令，重复运行指定的命令，使用<code>!n</code>其中<code>n</code>是命令历史的编号，<code>!word</code>其中word是之前执行过的命令的开头单词，这样可以重复执行匹配到的最近一条同样word开头的命令：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost etc]<span class=\"comment\"># !!</span></span><br><span class=\"line\"><span class=\"built_in\">pwd</span></span><br><span class=\"line\">/etc</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost etc]<span class=\"comment\"># history | head</span></span><br><span class=\"line\">    1  2018/04/20 22:54:45ip addr</span><br><span class=\"line\">    2  2018/04/20 22:54:45dhclient</span><br><span class=\"line\">    3  2018/04/20 22:54:45ip addr</span><br><span class=\"line\">    4  2018/04/20 22:54:45ping www.baidu.com</span><br><span class=\"line\">    5  2018/04/20 22:54:45init 6</span><br><span class=\"line\">    6  2018/04/20 22:54:45ip a</span><br><span class=\"line\">    7  2018/04/20 22:54:45init 0</span><br><span class=\"line\">    8  2018/04/20 22:54:45fdisk -l</span><br><span class=\"line\">    9  2018/04/20 22:54:45fdisk /dev/sdb</span><br><span class=\"line\">   10  2018/04/20 22:54:45fg</span><br><span class=\"line\">   </span><br><span class=\"line\">[root@localhost etc]<span class=\"comment\"># !3</span></span><br><span class=\"line\">ip addr</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class=\"line\">    link/ether 08:00:27:4e:b0:a6 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.199.224/24 brd 192.168.199.255 scope global enp0s3</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::7056:ab3e:1b19:7d4a/64 scope link </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">       </span><br><span class=\"line\">[root@localhost etc]<span class=\"comment\"># !echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure><h2 id=\"命令补全\"><a href=\"#命令补全\" class=\"headerlink\" title=\"命令补全\"></a>命令补全</h2><ul><li>使用tab键可以在shell中补全命令或文件路径，当补全的命令或文件存在2个或多个时，需要敲两次tab，只有一个时，敲一次tab即可补全；</li><li>增强bash命令补全功能，可以安装<code>bash-completion</code>软件包，安装完成后重启，即可在bash内补全命令的参数；</li></ul><h2 id=\"命令别名\"><a href=\"#命令别名\" class=\"headerlink\" title=\"命令别名\"></a>命令别名</h2><ul><li>命令别名使用<code>alias</code>命令，用户自己的别名设置，在<code>~/.bashrc</code>文件内；</li><li>在<code>/etc/profile.d/</code>目录下，存在多个shell脚本文件，这是系统定义的命令别名文件；</li><li>使用<code>unalias [别名]</code>就可以取消设置的命令别名。</li></ul><h2 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h2><ul><li>通配符是指能够指示一类文件的符号，使用通配符匹配文件，能够更快对需要的同一类文件进行处理；</li><li>常用的通配符如下表：</li></ul><table><thead><tr><th style=\"text-align:center\">通配符</th><th style=\"text-align:center\">命令形式</th><th style=\"text-align:center\">作用</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>*</code></td><td style=\"text-align:center\"><code>ls *.txt</code></td><td style=\"text-align:center\">匹配0个或多个字符</td></tr><tr><td style=\"text-align:center\"><code>?</code></td><td style=\"text-align:center\"><code>ls ?.txt</code></td><td style=\"text-align:center\">匹配一个任意字符</td></tr><tr><td style=\"text-align:center\"><code>[0-9]</code> <code>[a-z]</code> <code>[0-9a-zA-Z]</code></td><td style=\"text-align:center\"><code>ls [0-3].txt</code></td><td style=\"text-align:center\">匹配指定范围内的一个字符</td></tr><tr><td style=\"text-align:center\"><code>{1,2}</code></td><td style=\"text-align:center\"><code>ls {1.2.3.a}.txt</code></td><td style=\"text-align:center\">匹配括号内的一个字符</td></tr></tbody></table><h2 id=\"输入输出重定向\"><a href=\"#输入输出重定向\" class=\"headerlink\" title=\"输入输出重定向\"></a>输入输出重定向</h2><ul><li>输入输出重定向，可以将命令的输入和输出指向别的命令或文件；</li><li>常见的重定向符号如下：</li></ul><table><thead><tr><th style=\"text-align:center\">重定向符号</th><th style=\"text-align:center\">命令形式</th><th style=\"text-align:center\">作用</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>&gt;</code></td><td style=\"text-align:center\"><code>cat 1.txt &gt; 2.txt</code></td><td style=\"text-align:center\">将符号左边命令的<strong>正确输出</strong>覆盖写入到符号右边</td></tr><tr><td style=\"text-align:center\"><code>&gt;&gt;</code></td><td style=\"text-align:center\"><code>cat 1.txt &gt;&gt; 2.txt</code></td><td style=\"text-align:center\">将符号左边命令的<strong>正确输出</strong>追加到符号右边文件</td></tr><tr><td style=\"text-align:center\"><code>2&gt;</code></td><td style=\"text-align:center\"><code>ls aaa.txt 2&gt; err</code></td><td style=\"text-align:center\">将符号左边命令的<strong>错误执行</strong>信息，覆盖写入到符号</td></tr><tr><td style=\"text-align:center\"><code>2&gt;&gt;</code></td><td style=\"text-align:center\"><code>ls test.txt 2&gt;&gt; err.txt</code></td><td style=\"text-align:center\">将符号左边命令的<strong>错误执行</strong>信息，追加写入到符号</td></tr><tr><td style=\"text-align:center\"><code>&amp;&gt;</code></td><td style=\"text-align:center\"><code>ls [12].txt aa.txt &amp;&gt; err.txt</code></td><td style=\"text-align:center\">将<strong>正确和错误</strong>的执行信息，都覆盖输出到符号右边</td></tr><tr><td style=\"text-align:center\"><code>&amp;&gt;&gt;</code></td><td style=\"text-align:center\"><code>ls [12].txt aa.txt &amp;&gt;&gt; err.txt</code></td><td style=\"text-align:center\">将<strong>正确和错误</strong>的执行信息，都输出到符号右边</td></tr><tr><td style=\"text-align:center\"><code>cmd &gt; x 2 &gt; y</code></td><td style=\"text-align:center\"><code>ls 1.txt a.txt &gt; true 2&gt; false</code></td><td style=\"text-align:center\">将命令执行正确的输出到x，错误的输出到y</td></tr><tr><td style=\"text-align:center\"><code>cmd &gt; X 2&gt;&amp;1</code></td><td style=\"text-align:center\"><code>ls /etc/hosts /etc/xzfa &gt; true 2&gt;&amp;1</code></td><td style=\"text-align:center\">将命令执行的结果不论正确与否，都输出到X文件中</td></tr><tr><td style=\"text-align:center\"><code>&lt;</code></td><td style=\"text-align:center\"><code>wc -l &lt; 1.txt</code></td><td style=\"text-align:center\">输入重定向。将符号右边的内容输入到左边的<strong>命令</strong></td></tr></tbody></table><hr><!-- rebuild by neat -->"},{"title":"Shell基础(三)","author":"Evobot","abbrlink":"3711cd5b","date":"2018-04-23T15:31:37.000Z","image":null,"_content":"\n\n\n本文继续介绍Linux Shell相关基础知识，主要介绍Shell的特殊符号，介绍几个常用的shell命令，如**cut**、**sort**、**wc**、**uniq**几个对文件内容进行操作和排序统计的命令，以及**tee**、**tr**、**split**命令等。\n\n<!--more-->\n\n---\n\n# Shell基础(三)\n\n## Shell的特殊符号\n\n- shell中有一些特殊符号，常用的有以下几种：\n   {% note success %}\n   **\\*** ： 代表零个或多个任意字符；\n\n   **?** ： 代表任意一个字符；\n\n   **#** ：表示注释字符，以#号开头的命令或代码都是不生效的；\n\n   **\\\\** ： 表示脱义 ，将一些特殊符号的表达为普通字符或符号；\n\n   **|** ： 管道符，将符号左边的内容传递给符号右边；\n\n   **$** ： 变量前缀，`!$`组合正则中表示行尾；\n\n   **;** ： 多条命令写到一行执行，使用`;`分隔；\n\n   **&** ： 放在命令结尾，表示后台执行；\n\n   **||**和**&&** ： 用于多个命令之间，`&&`表示前一条执行正确再执行下一条，否则不执行后一条，`||`表示前一条执行不成功再执行下一条命令；\n\n   {% endnote %}\n\n## 文档内容处理命令\n\n###  **cut**命令\n\n- `cut`命令可以截取文件内容中的字符串，提取自己需要的内容；\n\n- `cut`命令在使用时，需要指定截取内容的分隔符，使用`-d`选项指定分隔符将内容分段，然后使用`-f`选项指定需要的字符串段数，如截取1,2段，则命令为`-f 1,2`，也可以指定范围`-f 1-4`：\n\n  ```bash\n  [root@evobot lux]# cat /etc/passwd | head -n 2\n  root:x:0:0:root:/root:/bin/bash\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  [root@evobot lux]# cat /etc/passwd | head -n 2 | cut -d ':' -f 1,2\n  root:x\n  bin:x\n  [root@evobot lux]# cat /etc/passwd | head -n 2 | cut -d ':' -f 1-4\n  root:x:0:0\n  bin:x:1:1\n  ```\n\n- `cut`命令的`-c`选项可以指定截取第几个字符，并且使用`-c`选项时，不能使用`-d`和`-f`指定分隔符和范围：\n\n  ```bash\n  [root@evobot lux]# cat /etc/passwd | head -n 2 | cut -c 1\n  r\n  b\n  [root@evobot lux]# cat /etc/passwd | head -n 2 | cut -c 2\n  o\n  i\n  ```\n\n### **sort**命令\n\n- `sort`命令用来对文件内容进行排序，可以以数字排序，或者反序排列，并且也可以指定分隔符；\n\n- `sort`命令常与`uniq`命令一起使用，默认直接使用`sort`对文件内容排序，是以内容的首字符的`ASCII`码排序：\n\n  ```bash\n  [root@evobot lux]# cat /etc/passwd | head -n 5 | sort\n  adm:x:3:4:adm:/var/adm:/sbin/nologin\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n  root:x:0:0:root:/root:/bin/bash\n  ```\n\n- `sort`的`-n`选项可以以数字进行排序，当使用`-n`选项时，字母和特殊符号会被`sort`当做0进行处理，所以字母和符号会排在数字前面：\n\n  ```bash\n  [root@evobot ~]# cat test.txt \n  1111\n  1211\n  root:x:0:0:root:/root:/bin/bash\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  @#$%^&\n  [root@evobot ~]# sort -n test.txt \n  @#$%^&\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  root:x:0:0:root:/root:/bin/bash\n  1111\n  1211\n  ```\n\n- `-r`选项是反序排列：\n\n  ```bash\n  [root@evobot ~]# sort -n -r test.txt \n  1211\n  1111\n  root:x:0:0:root:/root:/bin/bash\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  @#$%^&\n  [root@evobot ~]# sort -r test.txt \n  root:x:0:0:root:/root:/bin/bash\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  1211\n  1111\n  @#$%^&\n  ```\n\n- 同样的，`sort`命令也可以指定分隔符，选项为`-t [分隔符]`，然后使用`-k`选项指定以分隔出的第几段进行排序，格式为`-k n`或`-k n1,n2`：\n\n  ```bash\n  [root@evobot ~]# head -n 5 /etc/passwd | sort -t ':' -k 1\n  adm:x:3:4:adm:/var/adm:/sbin/nologin\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n  root:x:0:0:root:/root:/bin/bash\n\n  [root@evobot ~]# head -n 5 /etc/passwd | sort -t ':' -k 3,4\n  root:x:0:0:root:/root:/bin/bash\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  adm:x:3:4:adm:/var/adm:/sbin/nologin\n  lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n  ```\n\n- 一般`sort`命令将结果输出到终端，将结果写入文件可以使用重定向的方式，但是如果将结果写入原文件，使用重定向的方式会导致原文件被清空，所以这时需要使用`sort -o`参数：\n\n  ```bash\n  [root@evobot ~]# cat test.txt \n  123\n  223\n  333\n  124\n  234\n\n  [root@evobot ~]# sort -n test.txt \n  123\n  124\n  223\n  234\n  333\n\n  [root@evobot ~]# sort -n test.txt > test.txt \n  [root@evobot ~]# cat test.txt \n  [root@evobot ~]# sort -n test.txt -o test.txt \n  [root@evobot ~]# cat test.txt \n  123\n  124\n  223\n  234\n  333\n  ```\n\n\n\n### **wc**命令\n\n- `wc`命令用来对文件内容的行数或字数，常用选项为`wc -l [filename]`统计行数和`wc -m [filename]` 统计字数：\n\n  ```bash\n  [root@evobot ~]# cat -n test.txt \n       1\t1111\n       2\t1211\n       3\troot:x:0:0:root:/root:/bin/bash\n       4\tbin:x:1:1:bin:/bin:/sbin/nologin\n       5\tdaemon:x:2:2:daemon:/sbin:/sbin/nologin\n       6\t@#$%^&\n\n  [root@evobot ~]# wc -l test.txt \n  6 test.txt\n  [root@evobot ~]# wc -m test.txt \n  122 test.txt\n  ```\n\n- `wc -m`选项统计的字数不仅包括字符串，还包括内容里的**换行符**和空格；\n\n- 另外`wc -w [filename]`可以统计文件内容的单词数，统计时以空格区分字符：\n\n  ```bash\n  [root@evobot ~]# cat test2.txt \n  this is test file for wc command,\n  这个文件用来测试wc命令.\n  [root@evobot ~]# wc -w test2.txt \n  8 test2.txt\n  [root@evobot ~]# wc -m test2.txt \n  48 test2.txt\n  ```\n\n  {% note danger %} 这里可以看出，中文连在一起时，不论多少，统计时都只算一个单词。{% endnote %}\n\n### **uniq**命令\n\n- `uniq`命令用来对文件内容去重复，但是只能对连续多行重复的内容去重复：\n\n  ```bash\n  [root@evobot ~]# cat test2.txt \n  123\n  2\n  123\n  2\n  [root@evobot ~]# uniq test2.txt \n  123\n  2\n  123\n  2\n  [root@evobot ~]# vi test2.txt \n  [root@evobot ~]# !cat\n  cat test2.txt \n  2\n  123\n  123\n  2\n  [root@evobot ~]# !uniq\n  uniq test2.txt \n  2\n  123\n  2\n  ```\n\n- 所以一般在使用`uniq`命令时，需要先进行排序，再去重，与`sort`命令一起使用；\n\n  ```bash\n  [root@evobot ~]# sort test2.txt \n  123\n  123\n  2\n  2\n  [root@evobot ~]# sort test2.txt | uniq\n  123\n  2\n  ```\n\n- `uniq -c`选项可以在去重时统计重复内容的重复次数：\n\n  ```bash\n  [root@evobot ~]# sort test2.txt | uniq -c\n        2 123\n        2 2\n  ```\n\n\n### **tee**命令\n\n- 之前使用的命令，都不会对文件内容进行更改，要么将处理后的内容输出的屏幕，要么使用重定向将内容输出到指定的文件，但输出到文件时，又看不到具体输出了什么内容，所以`tee`命令就是解决这样的问题，它既可以将处理后的内容输出到屏幕，同时也会将内容输出到文件中去；\n\n- `tee`命令的用法就是`tee [filename]`，后面的文件名是要输出内容的保存文件：\n\n  ```bash\n  [root@evobot ~]# sort test2.txt | uniq -c | tee result.txt\n        2 123\n        2 2\n  [root@evobot ~]# cat result.txt \n        2 123\n        2 2\n  ```\n\n  > 可以看到，内容即输出到屏幕上也写入到了文件里。\n\n- `tee -a`选项的作用是将内容追加到文件中：\n\n  ```bash\n  [root@evobot ~]# sort test2.txt | uniq -c | tee -a result.txt \n        2 123\n        2 2\n  [root@evobot ~]# cat result.txt \n        2 123\n        2 2\n        2 123\n        2 2\n  ```\n\n### **tr**命令\n\n- `tr`命令是针对字符进行替换操作的命令，如将小写替换为大写，并且支持使用通配符：\n\n  ```bash\n  [root@evobot ~]# echo 'evobot blog' | tr 'e' 'E'\n  Evobot blog\n  [root@evobot ~]# echo 'evobot blog' | tr '[eb]' '[EB]'\n  EvoBot Blog\n  [root@evobot ~]# echo 'evobot blog' | tr '[a-z]' '[A-Z]'\n  EVOBOT BLOG\n  ```\n\n- 在使用`tr`命令时，如果要将多个字符替换为同一个字符，替换的字符不能使用`[]`指定，需要使用`tr '[a-z]' 'x'` 的形式：\n\n  ```bash\n  [root@evobot ~]# echo 'evobot blog' | tr '[a-z]' '[x]'\n  ]]]]]] ]]]]\n  [root@evobot ~]# echo 'evobot blog' | tr '[a-z]' 'x'\n  xxxxxx xxxx\n  [root@evobot ~]# echo 'evobot blog' | tr '[a-z]' '1'\n  111111 1111\n  ```\n\n### **split**命令\n\n- `split`命令用来对文件内容进行切割，比如将一个大文件切割为小文件，`split`常用选项为`-b`按大小进行分割，默认按字节进行分割，可以指定分割大小的单位，如`M`、`k`，另一个选项则为`-l`按行进行分割：\n\n  ```bash\n  [root@evobot ~]# ls -lh secure.log \n  -rw------- 1 root root 19M 4月  24 23:07 secure.log\n\n  [root@evobot ~]# split -b 6M secure.log\n  [root@evobot ~]# ls -lh\n  总用量 38M\n  -rw------- 1 root root  19M 4月  24 23:07 secure.log\n  -rw-r--r-- 1 root root 6.0M 4月  24 23:10 xaa\n  -rw-r--r-- 1 root root 6.0M 4月  24 23:10 xab\n  -rw-r--r-- 1 root root 6.0M 4月  24 23:10 xac\n  -rw-r--r-- 1 root root 621K 4月  24 23:10 xad\n  # xa开头的文件就是split分割出来的文件\n  ```\n\n- `split`分割时可以指定分割出的文件名的前缀，格式为`split -b 1M [filename] [前缀]`:\n\n  ```bash\n  [root@evobot ~]# split -b 6M secure.log secure.\n  [root@evobot ~]# ls -lh\n  总用量 38M\n  -rw-r--r-- 1 root root 6.0M 4月  24 23:17 secure.aa\n  -rw-r--r-- 1 root root 6.0M 4月  24 23:17 secure.ab\n  -rw-r--r-- 1 root root 6.0M 4月  24 23:17 secure.ac\n  -rw-r--r-- 1 root root 621K 4月  24 23:17 secure.ad\n  -rw------- 1 root root  19M 4月  24 23:07 secure.log\n  ```\n\n- 按行切割的`-l`选项的用法如下：\n\n  ```bash\n  [root@evobot ~]# wc -l secure.log \n  180663 secure.log\n  [root@evobot ~]# split -l 30000 secure.log secure.\n  [root@evobot ~]# wc -l *\n     30000 secure.aa\n     30000 secure.ab\n     30000 secure.ac\n     30000 secure.ad\n     30000 secure.ae\n     30000 secure.af\n       663 secure.ag\n    180663 secure.log\n    361326 总用量\n  ```\n\n## shell脚本调用的三种方法\n\n- 在shell脚本中调用另一个shell脚本，可以使用`fork`、`exec`、`source`三种方法，三种方法对环境变量以及后续命令执行的影响各不相同，具体的使用异同如下：\n\n  - **`fork`** ：用法为`fork [/path/to/script.sh]`，这种方式在运行时会开启一个`sub-shell(子shell)`，然后在sub-shell中执行调用的脚本，sub-shell执行时，父shell(parent-shell)依然存在，sub-shell执行时从parent-shell继承环境变量，执行完毕后返回到parent-shell执行父级的后续命令，sub-shell中的环境变量不会带回parent-shell中；\n  - **`exec`**： 用法为`exec [/path/to/script.sh]`，这种方式不会新开一个sub-shell执行被调用的脚本，而是直接与父脚本在同一个shell中执行，但是被调用的脚本执行完以后，父脚本`exec`行之后的内容就不会再继续执行；\n  - **`source`**： 用法为`source [/path/to/script.sh]`，source与exec唯一的不同点在于被调用的脚本执行完之后会继续执行父脚本的后续命令，同时子脚本的环境变量会影响父级环境变量。\n\n  ​\n\n- 可以通过下面两个脚本体会三种调用之间的不同：\n\n  {% codeblock 1.sh lang:bash%}\n  #!/bin/bash\n\n  A=B\n  echo \"PID for 1.sh before exec/source/fork:$$\"\n  export A\n  echo \"1.sh:\\$A is $A\"\n  case $1 in\n      exec)\n          echo \"using exec...\"\n          exec ./2.sh ;;\n      source)\n          echo \"using source...\"\n          . ./2.sh ;;\n      *)\n          echo \"using fork by default...\"\n          ./2.sh ;;\n  esac\n  echo \"PID for 1.sh after exec/source/fork;$$\"\n  echo \"1.sh: \\$A is $A\"\n  {% endcodeblock %}\n\n  {% codeblock 2.sh lang:bash%}\n  #!/bin/bash\n\n  echo \"PID for 2.sh: $$\"\n  echo \"2.sh get \\$A=$A from 1.sh\"\n  A=C\n  export A\n  echo \"2.sh: \\$A is $A\"\n  {% endcodeblock %}\n\n- 执行结果如下：\n\n  ```bash\n  [root@evobot ~]# ./1.sh \n  PID for 1.sh before exec/source/fork:8286\n  1.sh:$A is B\n  using fork by default...\n  PID for 2.sh: 8287\n  2.sh get $A=B from 1.sh\n  2.sh: $A is C\n  PID for 1.sh after exec/source/fork;8286\n  1.sh: $A is B\t# 子shell的环境变量不影响父shell\n\n  [root@evobot ~]# ./1.sh exec\n  PID for 1.sh before exec/source/fork:8363\n  1.sh:$A is B\n  using exec...\n  PID for 2.sh: 8363\n  2.sh get $A=B from 1.sh\n  2.sh: $A is C\t# 父脚本后面的命令没有执行\n\n  [root@evobot ~]# ./1.sh source\n  PID for 1.sh before exec/source/fork:8393\n  1.sh:$A is B\n  using source...\n  PID for 2.sh: 8393\n  2.sh get $A=B from 1.sh\n  2.sh: $A is C\n  PID for 1.sh after exec/source/fork;8393\n  1.sh: $A is C\t# 父脚本命令继续执行，环境变量受子shell影响\n  ```\n---\n\n","source":"_posts/Shell基础(三).md","raw":"---\ntitle: Shell基础(三)\nauthor: Evobot\nabbrlink: 3711cd5b\ndate: 2018-04-23 23:31:37\ncategories: Centos7\ntags: [Linux, Centos]\nimage:\n---\n\n\n\n本文继续介绍Linux Shell相关基础知识，主要介绍Shell的特殊符号，介绍几个常用的shell命令，如**cut**、**sort**、**wc**、**uniq**几个对文件内容进行操作和排序统计的命令，以及**tee**、**tr**、**split**命令等。\n\n<!--more-->\n\n---\n\n# Shell基础(三)\n\n## Shell的特殊符号\n\n- shell中有一些特殊符号，常用的有以下几种：\n   {% note success %}\n   **\\*** ： 代表零个或多个任意字符；\n\n   **?** ： 代表任意一个字符；\n\n   **#** ：表示注释字符，以#号开头的命令或代码都是不生效的；\n\n   **\\\\** ： 表示脱义 ，将一些特殊符号的表达为普通字符或符号；\n\n   **|** ： 管道符，将符号左边的内容传递给符号右边；\n\n   **$** ： 变量前缀，`!$`组合正则中表示行尾；\n\n   **;** ： 多条命令写到一行执行，使用`;`分隔；\n\n   **&** ： 放在命令结尾，表示后台执行；\n\n   **||**和**&&** ： 用于多个命令之间，`&&`表示前一条执行正确再执行下一条，否则不执行后一条，`||`表示前一条执行不成功再执行下一条命令；\n\n   {% endnote %}\n\n## 文档内容处理命令\n\n###  **cut**命令\n\n- `cut`命令可以截取文件内容中的字符串，提取自己需要的内容；\n\n- `cut`命令在使用时，需要指定截取内容的分隔符，使用`-d`选项指定分隔符将内容分段，然后使用`-f`选项指定需要的字符串段数，如截取1,2段，则命令为`-f 1,2`，也可以指定范围`-f 1-4`：\n\n  ```bash\n  [root@evobot lux]# cat /etc/passwd | head -n 2\n  root:x:0:0:root:/root:/bin/bash\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  [root@evobot lux]# cat /etc/passwd | head -n 2 | cut -d ':' -f 1,2\n  root:x\n  bin:x\n  [root@evobot lux]# cat /etc/passwd | head -n 2 | cut -d ':' -f 1-4\n  root:x:0:0\n  bin:x:1:1\n  ```\n\n- `cut`命令的`-c`选项可以指定截取第几个字符，并且使用`-c`选项时，不能使用`-d`和`-f`指定分隔符和范围：\n\n  ```bash\n  [root@evobot lux]# cat /etc/passwd | head -n 2 | cut -c 1\n  r\n  b\n  [root@evobot lux]# cat /etc/passwd | head -n 2 | cut -c 2\n  o\n  i\n  ```\n\n### **sort**命令\n\n- `sort`命令用来对文件内容进行排序，可以以数字排序，或者反序排列，并且也可以指定分隔符；\n\n- `sort`命令常与`uniq`命令一起使用，默认直接使用`sort`对文件内容排序，是以内容的首字符的`ASCII`码排序：\n\n  ```bash\n  [root@evobot lux]# cat /etc/passwd | head -n 5 | sort\n  adm:x:3:4:adm:/var/adm:/sbin/nologin\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n  root:x:0:0:root:/root:/bin/bash\n  ```\n\n- `sort`的`-n`选项可以以数字进行排序，当使用`-n`选项时，字母和特殊符号会被`sort`当做0进行处理，所以字母和符号会排在数字前面：\n\n  ```bash\n  [root@evobot ~]# cat test.txt \n  1111\n  1211\n  root:x:0:0:root:/root:/bin/bash\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  @#$%^&\n  [root@evobot ~]# sort -n test.txt \n  @#$%^&\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  root:x:0:0:root:/root:/bin/bash\n  1111\n  1211\n  ```\n\n- `-r`选项是反序排列：\n\n  ```bash\n  [root@evobot ~]# sort -n -r test.txt \n  1211\n  1111\n  root:x:0:0:root:/root:/bin/bash\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  @#$%^&\n  [root@evobot ~]# sort -r test.txt \n  root:x:0:0:root:/root:/bin/bash\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  1211\n  1111\n  @#$%^&\n  ```\n\n- 同样的，`sort`命令也可以指定分隔符，选项为`-t [分隔符]`，然后使用`-k`选项指定以分隔出的第几段进行排序，格式为`-k n`或`-k n1,n2`：\n\n  ```bash\n  [root@evobot ~]# head -n 5 /etc/passwd | sort -t ':' -k 1\n  adm:x:3:4:adm:/var/adm:/sbin/nologin\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n  root:x:0:0:root:/root:/bin/bash\n\n  [root@evobot ~]# head -n 5 /etc/passwd | sort -t ':' -k 3,4\n  root:x:0:0:root:/root:/bin/bash\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  adm:x:3:4:adm:/var/adm:/sbin/nologin\n  lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n  ```\n\n- 一般`sort`命令将结果输出到终端，将结果写入文件可以使用重定向的方式，但是如果将结果写入原文件，使用重定向的方式会导致原文件被清空，所以这时需要使用`sort -o`参数：\n\n  ```bash\n  [root@evobot ~]# cat test.txt \n  123\n  223\n  333\n  124\n  234\n\n  [root@evobot ~]# sort -n test.txt \n  123\n  124\n  223\n  234\n  333\n\n  [root@evobot ~]# sort -n test.txt > test.txt \n  [root@evobot ~]# cat test.txt \n  [root@evobot ~]# sort -n test.txt -o test.txt \n  [root@evobot ~]# cat test.txt \n  123\n  124\n  223\n  234\n  333\n  ```\n\n\n\n### **wc**命令\n\n- `wc`命令用来对文件内容的行数或字数，常用选项为`wc -l [filename]`统计行数和`wc -m [filename]` 统计字数：\n\n  ```bash\n  [root@evobot ~]# cat -n test.txt \n       1\t1111\n       2\t1211\n       3\troot:x:0:0:root:/root:/bin/bash\n       4\tbin:x:1:1:bin:/bin:/sbin/nologin\n       5\tdaemon:x:2:2:daemon:/sbin:/sbin/nologin\n       6\t@#$%^&\n\n  [root@evobot ~]# wc -l test.txt \n  6 test.txt\n  [root@evobot ~]# wc -m test.txt \n  122 test.txt\n  ```\n\n- `wc -m`选项统计的字数不仅包括字符串，还包括内容里的**换行符**和空格；\n\n- 另外`wc -w [filename]`可以统计文件内容的单词数，统计时以空格区分字符：\n\n  ```bash\n  [root@evobot ~]# cat test2.txt \n  this is test file for wc command,\n  这个文件用来测试wc命令.\n  [root@evobot ~]# wc -w test2.txt \n  8 test2.txt\n  [root@evobot ~]# wc -m test2.txt \n  48 test2.txt\n  ```\n\n  {% note danger %} 这里可以看出，中文连在一起时，不论多少，统计时都只算一个单词。{% endnote %}\n\n### **uniq**命令\n\n- `uniq`命令用来对文件内容去重复，但是只能对连续多行重复的内容去重复：\n\n  ```bash\n  [root@evobot ~]# cat test2.txt \n  123\n  2\n  123\n  2\n  [root@evobot ~]# uniq test2.txt \n  123\n  2\n  123\n  2\n  [root@evobot ~]# vi test2.txt \n  [root@evobot ~]# !cat\n  cat test2.txt \n  2\n  123\n  123\n  2\n  [root@evobot ~]# !uniq\n  uniq test2.txt \n  2\n  123\n  2\n  ```\n\n- 所以一般在使用`uniq`命令时，需要先进行排序，再去重，与`sort`命令一起使用；\n\n  ```bash\n  [root@evobot ~]# sort test2.txt \n  123\n  123\n  2\n  2\n  [root@evobot ~]# sort test2.txt | uniq\n  123\n  2\n  ```\n\n- `uniq -c`选项可以在去重时统计重复内容的重复次数：\n\n  ```bash\n  [root@evobot ~]# sort test2.txt | uniq -c\n        2 123\n        2 2\n  ```\n\n\n### **tee**命令\n\n- 之前使用的命令，都不会对文件内容进行更改，要么将处理后的内容输出的屏幕，要么使用重定向将内容输出到指定的文件，但输出到文件时，又看不到具体输出了什么内容，所以`tee`命令就是解决这样的问题，它既可以将处理后的内容输出到屏幕，同时也会将内容输出到文件中去；\n\n- `tee`命令的用法就是`tee [filename]`，后面的文件名是要输出内容的保存文件：\n\n  ```bash\n  [root@evobot ~]# sort test2.txt | uniq -c | tee result.txt\n        2 123\n        2 2\n  [root@evobot ~]# cat result.txt \n        2 123\n        2 2\n  ```\n\n  > 可以看到，内容即输出到屏幕上也写入到了文件里。\n\n- `tee -a`选项的作用是将内容追加到文件中：\n\n  ```bash\n  [root@evobot ~]# sort test2.txt | uniq -c | tee -a result.txt \n        2 123\n        2 2\n  [root@evobot ~]# cat result.txt \n        2 123\n        2 2\n        2 123\n        2 2\n  ```\n\n### **tr**命令\n\n- `tr`命令是针对字符进行替换操作的命令，如将小写替换为大写，并且支持使用通配符：\n\n  ```bash\n  [root@evobot ~]# echo 'evobot blog' | tr 'e' 'E'\n  Evobot blog\n  [root@evobot ~]# echo 'evobot blog' | tr '[eb]' '[EB]'\n  EvoBot Blog\n  [root@evobot ~]# echo 'evobot blog' | tr '[a-z]' '[A-Z]'\n  EVOBOT BLOG\n  ```\n\n- 在使用`tr`命令时，如果要将多个字符替换为同一个字符，替换的字符不能使用`[]`指定，需要使用`tr '[a-z]' 'x'` 的形式：\n\n  ```bash\n  [root@evobot ~]# echo 'evobot blog' | tr '[a-z]' '[x]'\n  ]]]]]] ]]]]\n  [root@evobot ~]# echo 'evobot blog' | tr '[a-z]' 'x'\n  xxxxxx xxxx\n  [root@evobot ~]# echo 'evobot blog' | tr '[a-z]' '1'\n  111111 1111\n  ```\n\n### **split**命令\n\n- `split`命令用来对文件内容进行切割，比如将一个大文件切割为小文件，`split`常用选项为`-b`按大小进行分割，默认按字节进行分割，可以指定分割大小的单位，如`M`、`k`，另一个选项则为`-l`按行进行分割：\n\n  ```bash\n  [root@evobot ~]# ls -lh secure.log \n  -rw------- 1 root root 19M 4月  24 23:07 secure.log\n\n  [root@evobot ~]# split -b 6M secure.log\n  [root@evobot ~]# ls -lh\n  总用量 38M\n  -rw------- 1 root root  19M 4月  24 23:07 secure.log\n  -rw-r--r-- 1 root root 6.0M 4月  24 23:10 xaa\n  -rw-r--r-- 1 root root 6.0M 4月  24 23:10 xab\n  -rw-r--r-- 1 root root 6.0M 4月  24 23:10 xac\n  -rw-r--r-- 1 root root 621K 4月  24 23:10 xad\n  # xa开头的文件就是split分割出来的文件\n  ```\n\n- `split`分割时可以指定分割出的文件名的前缀，格式为`split -b 1M [filename] [前缀]`:\n\n  ```bash\n  [root@evobot ~]# split -b 6M secure.log secure.\n  [root@evobot ~]# ls -lh\n  总用量 38M\n  -rw-r--r-- 1 root root 6.0M 4月  24 23:17 secure.aa\n  -rw-r--r-- 1 root root 6.0M 4月  24 23:17 secure.ab\n  -rw-r--r-- 1 root root 6.0M 4月  24 23:17 secure.ac\n  -rw-r--r-- 1 root root 621K 4月  24 23:17 secure.ad\n  -rw------- 1 root root  19M 4月  24 23:07 secure.log\n  ```\n\n- 按行切割的`-l`选项的用法如下：\n\n  ```bash\n  [root@evobot ~]# wc -l secure.log \n  180663 secure.log\n  [root@evobot ~]# split -l 30000 secure.log secure.\n  [root@evobot ~]# wc -l *\n     30000 secure.aa\n     30000 secure.ab\n     30000 secure.ac\n     30000 secure.ad\n     30000 secure.ae\n     30000 secure.af\n       663 secure.ag\n    180663 secure.log\n    361326 总用量\n  ```\n\n## shell脚本调用的三种方法\n\n- 在shell脚本中调用另一个shell脚本，可以使用`fork`、`exec`、`source`三种方法，三种方法对环境变量以及后续命令执行的影响各不相同，具体的使用异同如下：\n\n  - **`fork`** ：用法为`fork [/path/to/script.sh]`，这种方式在运行时会开启一个`sub-shell(子shell)`，然后在sub-shell中执行调用的脚本，sub-shell执行时，父shell(parent-shell)依然存在，sub-shell执行时从parent-shell继承环境变量，执行完毕后返回到parent-shell执行父级的后续命令，sub-shell中的环境变量不会带回parent-shell中；\n  - **`exec`**： 用法为`exec [/path/to/script.sh]`，这种方式不会新开一个sub-shell执行被调用的脚本，而是直接与父脚本在同一个shell中执行，但是被调用的脚本执行完以后，父脚本`exec`行之后的内容就不会再继续执行；\n  - **`source`**： 用法为`source [/path/to/script.sh]`，source与exec唯一的不同点在于被调用的脚本执行完之后会继续执行父脚本的后续命令，同时子脚本的环境变量会影响父级环境变量。\n\n  ​\n\n- 可以通过下面两个脚本体会三种调用之间的不同：\n\n  {% codeblock 1.sh lang:bash%}\n  #!/bin/bash\n\n  A=B\n  echo \"PID for 1.sh before exec/source/fork:$$\"\n  export A\n  echo \"1.sh:\\$A is $A\"\n  case $1 in\n      exec)\n          echo \"using exec...\"\n          exec ./2.sh ;;\n      source)\n          echo \"using source...\"\n          . ./2.sh ;;\n      *)\n          echo \"using fork by default...\"\n          ./2.sh ;;\n  esac\n  echo \"PID for 1.sh after exec/source/fork;$$\"\n  echo \"1.sh: \\$A is $A\"\n  {% endcodeblock %}\n\n  {% codeblock 2.sh lang:bash%}\n  #!/bin/bash\n\n  echo \"PID for 2.sh: $$\"\n  echo \"2.sh get \\$A=$A from 1.sh\"\n  A=C\n  export A\n  echo \"2.sh: \\$A is $A\"\n  {% endcodeblock %}\n\n- 执行结果如下：\n\n  ```bash\n  [root@evobot ~]# ./1.sh \n  PID for 1.sh before exec/source/fork:8286\n  1.sh:$A is B\n  using fork by default...\n  PID for 2.sh: 8287\n  2.sh get $A=B from 1.sh\n  2.sh: $A is C\n  PID for 1.sh after exec/source/fork;8286\n  1.sh: $A is B\t# 子shell的环境变量不影响父shell\n\n  [root@evobot ~]# ./1.sh exec\n  PID for 1.sh before exec/source/fork:8363\n  1.sh:$A is B\n  using exec...\n  PID for 2.sh: 8363\n  2.sh get $A=B from 1.sh\n  2.sh: $A is C\t# 父脚本后面的命令没有执行\n\n  [root@evobot ~]# ./1.sh source\n  PID for 1.sh before exec/source/fork:8393\n  1.sh:$A is B\n  using source...\n  PID for 2.sh: 8393\n  2.sh get $A=B from 1.sh\n  2.sh: $A is C\n  PID for 1.sh after exec/source/fork;8393\n  1.sh: $A is C\t# 父脚本命令继续执行，环境变量受子shell影响\n  ```\n---\n\n","slug":"Shell基础(三)","published":1,"updated":"2018-06-02T13:01:29.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazd10037u1jxdj6t7475","content":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p>本文继续介绍Linux Shell相关基础知识，主要介绍Shell的特殊符号，介绍几个常用的shell命令，如<strong>cut</strong>、<strong>sort</strong>、<strong>wc</strong>、<strong>uniq</strong>几个对文件内容进行操作和排序统计的命令，以及<strong>tee</strong>、<strong>tr</strong>、<strong>split</strong>命令等。</p><a id=\"more\"></a><hr><h1 id=\"Shell基础-三\"><a href=\"#Shell基础-三\" class=\"headerlink\" title=\"Shell基础(三)\"></a>Shell基础(三)</h1><h2 id=\"Shell的特殊符号\"><a href=\"#Shell的特殊符号\" class=\"headerlink\" title=\"Shell的特殊符号\"></a>Shell的特殊符号</h2><ul><li>shell中有一些特殊符号，常用的有以下几种：<div class=\"note success\"><p><strong>*</strong> ： 代表零个或多个任意字符；</p><p><strong>?</strong> ： 代表任意一个字符；</p><p><strong>#</strong> ：表示注释字符，以#号开头的命令或代码都是不生效的；</p><p><strong>\\</strong> ： 表示脱义 ，将一些特殊符号的表达为普通字符或符号；</p><p><strong>|</strong> ： 管道符，将符号左边的内容传递给符号右边；</p><p><strong>$</strong> ： 变量前缀，<code>!$</code>组合正则中表示行尾；</p><p><strong>;</strong> ： 多条命令写到一行执行，使用<code>;</code>分隔；</p><p><strong>&amp;</strong> ： 放在命令结尾，表示后台执行；</p><p><strong>||</strong>和<strong>&amp;&amp;</strong> ： 用于多个命令之间，<code>&amp;&amp;</code>表示前一条执行正确再执行下一条，否则不执行后一条，<code>||</code>表示前一条执行不成功再执行下一条命令；</p></div></li></ul><h2 id=\"文档内容处理命令\"><a href=\"#文档内容处理命令\" class=\"headerlink\" title=\"文档内容处理命令\"></a>文档内容处理命令</h2><h3 id=\"cut命令\"><a href=\"#cut命令\" class=\"headerlink\" title=\"cut命令\"></a><strong>cut</strong>命令</h3><ul><li><p><code>cut</code>命令可以截取文件内容中的字符串，提取自己需要的内容；</p></li><li><p><code>cut</code>命令在使用时，需要指定截取内容的分隔符，使用<code>-d</code>选项指定分隔符将内容分段，然后使用<code>-f</code>选项指定需要的字符串段数，如截取1,2段，则命令为<code>-f 1,2</code>，也可以指定范围<code>-f 1-4</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot lux]<span class=\"comment\"># cat /etc/passwd | head -n 2</span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">[root@evobot lux]<span class=\"comment\"># cat /etc/passwd | head -n 2 | cut -d ':' -f 1,2</span></span><br><span class=\"line\">root:x</span><br><span class=\"line\">bin:x</span><br><span class=\"line\">[root@evobot lux]<span class=\"comment\"># cat /etc/passwd | head -n 2 | cut -d ':' -f 1-4</span></span><br><span class=\"line\">root:x:0:0</span><br><span class=\"line\">bin:x:1:1</span><br></pre></td></tr></table></figure></li><li><p><code>cut</code>命令的<code>-c</code>选项可以指定截取第几个字符，并且使用<code>-c</code>选项时，不能使用<code>-d</code>和<code>-f</code>指定分隔符和范围：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot lux]<span class=\"comment\"># cat /etc/passwd | head -n 2 | cut -c 1</span></span><br><span class=\"line\">r</span><br><span class=\"line\">b</span><br><span class=\"line\">[root@evobot lux]<span class=\"comment\"># cat /etc/passwd | head -n 2 | cut -c 2</span></span><br><span class=\"line\">o</span><br><span class=\"line\">i</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"sort命令\"><a href=\"#sort命令\" class=\"headerlink\" title=\"sort命令\"></a><strong>sort</strong>命令</h3><ul><li><p><code>sort</code>命令用来对文件内容进行排序，可以以数字排序，或者反序排列，并且也可以指定分隔符；</p></li><li><p><code>sort</code>命令常与<code>uniq</code>命令一起使用，默认直接使用<code>sort</code>对文件内容排序，是以内容的首字符的<code>ASCII</code>码排序：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot lux]<span class=\"comment\"># cat /etc/passwd | head -n 5 | sort</span></span><br><span class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p><code>sort</code>的<code>-n</code>选项可以以数字进行排序，当使用<code>-n</code>选项时，字母和特殊符号会被<code>sort</code>当做0进行处理，所以字母和符号会排在数字前面：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat test.txt </span></span><br><span class=\"line\">1111</span><br><span class=\"line\">1211</span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">@<span class=\"comment\">#$%^&amp;</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort -n test.txt </span></span><br><span class=\"line\">@<span class=\"comment\">#$%^&amp;</span></span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">1111</span><br><span class=\"line\">1211</span><br></pre></td></tr></table></figure></li><li><p><code>-r</code>选项是反序排列：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort -n -r test.txt </span></span><br><span class=\"line\">1211</span><br><span class=\"line\">1111</span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">@<span class=\"comment\">#$%^&amp;</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort -r test.txt </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">1211</span><br><span class=\"line\">1111</span><br><span class=\"line\">@<span class=\"comment\">#$%^&amp;</span></span><br></pre></td></tr></table></figure></li><li><p>同样的，<code>sort</code>命令也可以指定分隔符，选项为<code>-t [分隔符]</code>，然后使用<code>-k</code>选项指定以分隔出的第几段进行排序，格式为<code>-k n</code>或<code>-k n1,n2</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 5 /etc/passwd | sort -t ':' -k 1</span></span><br><span class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 5 /etc/passwd | sort -t ':' -k 3,4</span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p>一般<code>sort</code>命令将结果输出到终端，将结果写入文件可以使用重定向的方式，但是如果将结果写入原文件，使用重定向的方式会导致原文件被清空，所以这时需要使用<code>sort -o</code>参数：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat test.txt </span></span><br><span class=\"line\">123</span><br><span class=\"line\">223</span><br><span class=\"line\">333</span><br><span class=\"line\">124</span><br><span class=\"line\">234</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort -n test.txt </span></span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">223</span><br><span class=\"line\">234</span><br><span class=\"line\">333</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort -n test.txt &gt; test.txt </span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat test.txt </span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort -n test.txt -o test.txt </span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat test.txt </span></span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">223</span><br><span class=\"line\">234</span><br><span class=\"line\">333</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"wc命令\"><a href=\"#wc命令\" class=\"headerlink\" title=\"wc命令\"></a><strong>wc</strong>命令</h3><ul><li><p><code>wc</code>命令用来对文件内容的行数或字数，常用选项为<code>wc -l [filename]</code>统计行数和<code>wc -m [filename]</code> 统计字数：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat -n test.txt </span></span><br><span class=\"line\">     1\t1111</span><br><span class=\"line\">     2\t1211</span><br><span class=\"line\">     3\troot:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">     4\tbin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">     5\tdaemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">     6\t@<span class=\"comment\">#$%^&amp;</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># wc -l test.txt </span></span><br><span class=\"line\">6 test.txt</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># wc -m test.txt </span></span><br><span class=\"line\">122 test.txt</span><br></pre></td></tr></table></figure></li><li><p><code>wc -m</code>选项统计的字数不仅包括字符串，还包括内容里的<strong>换行符</strong>和空格；</p></li><li><p>另外<code>wc -w [filename]</code>可以统计文件内容的单词数，统计时以空格区分字符：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat test2.txt </span></span><br><span class=\"line\">this is <span class=\"built_in\">test</span> file <span class=\"keyword\">for</span> wc <span class=\"built_in\">command</span>,</span><br><span class=\"line\">这个文件用来测试wc命令.</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># wc -w test2.txt </span></span><br><span class=\"line\">8 test2.txt</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># wc -m test2.txt </span></span><br><span class=\"line\">48 test2.txt</span><br></pre></td></tr></table></figure><div class=\"note danger\"><p>这里可以看出，中文连在一起时，不论多少，统计时都只算一个单词。</p></div></li></ul><h3 id=\"uniq命令\"><a href=\"#uniq命令\" class=\"headerlink\" title=\"uniq命令\"></a><strong>uniq</strong>命令</h3><ul><li><p><code>uniq</code>命令用来对文件内容去重复，但是只能对连续多行重复的内容去重复：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat test2.txt </span></span><br><span class=\"line\">123</span><br><span class=\"line\">2</span><br><span class=\"line\">123</span><br><span class=\"line\">2</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># uniq test2.txt </span></span><br><span class=\"line\">123</span><br><span class=\"line\">2</span><br><span class=\"line\">123</span><br><span class=\"line\">2</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># vi test2.txt </span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># !cat</span></span><br><span class=\"line\">cat test2.txt </span><br><span class=\"line\">2</span><br><span class=\"line\">123</span><br><span class=\"line\">123</span><br><span class=\"line\">2</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># !uniq</span></span><br><span class=\"line\">uniq test2.txt </span><br><span class=\"line\">2</span><br><span class=\"line\">123</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure></li><li><p>所以一般在使用<code>uniq</code>命令时，需要先进行排序，再去重，与<code>sort</code>命令一起使用；</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort test2.txt </span></span><br><span class=\"line\">123</span><br><span class=\"line\">123</span><br><span class=\"line\">2</span><br><span class=\"line\">2</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort test2.txt | uniq</span></span><br><span class=\"line\">123</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure></li><li><p><code>uniq -c</code>选项可以在去重时统计重复内容的重复次数：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort test2.txt | uniq -c</span></span><br><span class=\"line\">      2 123</span><br><span class=\"line\">      2 2</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"tee命令\"><a href=\"#tee命令\" class=\"headerlink\" title=\"tee命令\"></a><strong>tee</strong>命令</h3><ul><li><p>之前使用的命令，都不会对文件内容进行更改，要么将处理后的内容输出的屏幕，要么使用重定向将内容输出到指定的文件，但输出到文件时，又看不到具体输出了什么内容，所以<code>tee</code>命令就是解决这样的问题，它既可以将处理后的内容输出到屏幕，同时也会将内容输出到文件中去；</p></li><li><p><code>tee</code>命令的用法就是<code>tee [filename]</code>，后面的文件名是要输出内容的保存文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort test2.txt | uniq -c | tee result.txt</span></span><br><span class=\"line\">      2 123</span><br><span class=\"line\">      2 2</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat result.txt </span></span><br><span class=\"line\">      2 123</span><br><span class=\"line\">      2 2</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，内容即输出到屏幕上也写入到了文件里。</p></blockquote></li><li><p><code>tee -a</code>选项的作用是将内容追加到文件中：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort test2.txt | uniq -c | tee -a result.txt </span></span><br><span class=\"line\">      2 123</span><br><span class=\"line\">      2 2</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat result.txt </span></span><br><span class=\"line\">      2 123</span><br><span class=\"line\">      2 2</span><br><span class=\"line\">      2 123</span><br><span class=\"line\">      2 2</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"tr命令\"><a href=\"#tr命令\" class=\"headerlink\" title=\"tr命令\"></a><strong>tr</strong>命令</h3><ul><li><p><code>tr</code>命令是针对字符进行替换操作的命令，如将小写替换为大写，并且支持使用通配符：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo 'evobot blog' | tr 'e' 'E'</span></span><br><span class=\"line\">Evobot blog</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo 'evobot blog' | tr '[eb]' '[EB]'</span></span><br><span class=\"line\">EvoBot Blog</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo 'evobot blog' | tr '[a-z]' '[A-Z]'</span></span><br><span class=\"line\">EVOBOT BLOG</span><br></pre></td></tr></table></figure></li><li><p>在使用<code>tr</code>命令时，如果要将多个字符替换为同一个字符，替换的字符不能使用<code>[]</code>指定，需要使用<code>tr &#39;[a-z]&#39; &#39;x&#39;</code> 的形式：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo 'evobot blog' | tr '[a-z]' '[x]'</span></span><br><span class=\"line\">]]]]]] ]]]]</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo 'evobot blog' | tr '[a-z]' 'x'</span></span><br><span class=\"line\">xxxxxx xxxx</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo 'evobot blog' | tr '[a-z]' '1'</span></span><br><span class=\"line\">111111 1111</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"split命令\"><a href=\"#split命令\" class=\"headerlink\" title=\"split命令\"></a><strong>split</strong>命令</h3><ul><li><p><code>split</code>命令用来对文件内容进行切割，比如将一个大文件切割为小文件，<code>split</code>常用选项为<code>-b</code>按大小进行分割，默认按字节进行分割，可以指定分割大小的单位，如<code>M</code>、<code>k</code>，另一个选项则为<code>-l</code>按行进行分割：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -lh secure.log </span></span><br><span class=\"line\">-rw------- 1 root root 19M 4月  24 23:07 secure.log</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># split -b 6M secure.log</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -lh</span></span><br><span class=\"line\">总用量 38M</span><br><span class=\"line\">-rw------- 1 root root  19M 4月  24 23:07 secure.log</span><br><span class=\"line\">-rw-r--r-- 1 root root 6.0M 4月  24 23:10 xaa</span><br><span class=\"line\">-rw-r--r-- 1 root root 6.0M 4月  24 23:10 xab</span><br><span class=\"line\">-rw-r--r-- 1 root root 6.0M 4月  24 23:10 xac</span><br><span class=\"line\">-rw-r--r-- 1 root root 621K 4月  24 23:10 xad</span><br><span class=\"line\"><span class=\"comment\"># xa开头的文件就是split分割出来的文件</span></span><br></pre></td></tr></table></figure></li><li><p><code>split</code>分割时可以指定分割出的文件名的前缀，格式为<code>split -b 1M [filename] [前缀]</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># split -b 6M secure.log secure.</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -lh</span></span><br><span class=\"line\">总用量 38M</span><br><span class=\"line\">-rw-r--r-- 1 root root 6.0M 4月  24 23:17 secure.aa</span><br><span class=\"line\">-rw-r--r-- 1 root root 6.0M 4月  24 23:17 secure.ab</span><br><span class=\"line\">-rw-r--r-- 1 root root 6.0M 4月  24 23:17 secure.ac</span><br><span class=\"line\">-rw-r--r-- 1 root root 621K 4月  24 23:17 secure.ad</span><br><span class=\"line\">-rw------- 1 root root  19M 4月  24 23:07 secure.log</span><br></pre></td></tr></table></figure></li><li><p>按行切割的<code>-l</code>选项的用法如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># wc -l secure.log </span></span><br><span class=\"line\">180663 secure.log</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># split -l 30000 secure.log secure.</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># wc -l *</span></span><br><span class=\"line\">   30000 secure.aa</span><br><span class=\"line\">   30000 secure.ab</span><br><span class=\"line\">   30000 secure.ac</span><br><span class=\"line\">   30000 secure.ad</span><br><span class=\"line\">   30000 secure.ae</span><br><span class=\"line\">   30000 secure.af</span><br><span class=\"line\">     663 secure.ag</span><br><span class=\"line\">  180663 secure.log</span><br><span class=\"line\">  361326 总用量</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"shell脚本调用的三种方法\"><a href=\"#shell脚本调用的三种方法\" class=\"headerlink\" title=\"shell脚本调用的三种方法\"></a>shell脚本调用的三种方法</h2><ul><li><p>在shell脚本中调用另一个shell脚本，可以使用<code>fork</code>、<code>exec</code>、<code>source</code>三种方法，三种方法对环境变量以及后续命令执行的影响各不相同，具体的使用异同如下：</p><ul><li><strong><code>fork</code></strong> ：用法为<code>fork [/path/to/script.sh]</code>，这种方式在运行时会开启一个<code>sub-shell(子shell)</code>，然后在sub-shell中执行调用的脚本，sub-shell执行时，父shell(parent-shell)依然存在，sub-shell执行时从parent-shell继承环境变量，执行完毕后返回到parent-shell执行父级的后续命令，sub-shell中的环境变量不会带回parent-shell中；</li><li><strong><code>exec</code></strong>： 用法为<code>exec [/path/to/script.sh]</code>，这种方式不会新开一个sub-shell执行被调用的脚本，而是直接与父脚本在同一个shell中执行，但是被调用的脚本执行完以后，父脚本<code>exec</code>行之后的内容就不会再继续执行；</li><li><strong><code>source</code></strong>： 用法为<code>source [/path/to/script.sh]</code>，source与exec唯一的不同点在于被调用的脚本执行完之后会继续执行父脚本的后续命令，同时子脚本的环境变量会影响父级环境变量。</li></ul><p>​</p></li><li><p>可以通过下面两个脚本体会三种调用之间的不同：</p><figure class=\"highlight bash\"><figcaption><span>1.sh</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">A=B</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"PID for 1.sh before exec/source/fork:$$\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> A</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"1.sh:\\$A is <span class=\"variable\">$A</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">exec</span>)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"using exec...\"</span></span><br><span class=\"line\">        <span class=\"built_in\">exec</span> ./2.sh ;;</span><br><span class=\"line\">    <span class=\"built_in\">source</span>)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"using source...\"</span></span><br><span class=\"line\">        . ./2.sh ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"using fork by default...\"</span></span><br><span class=\"line\">        ./2.sh ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"PID for 1.sh after exec/source/fork;$$\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"1.sh: \\$A is <span class=\"variable\">$A</span>\"</span></span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption><span>2.sh</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"PID for 2.sh: $$\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"2.sh get \\$A=<span class=\"variable\">$A</span> from 1.sh\"</span></span><br><span class=\"line\">A=C</span><br><span class=\"line\"><span class=\"built_in\">export</span> A</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"2.sh: \\$A is <span class=\"variable\">$A</span>\"</span></span><br></pre></td></tr></table></figure></li><li><p>执行结果如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ./1.sh </span></span><br><span class=\"line\">PID <span class=\"keyword\">for</span> 1.sh before <span class=\"built_in\">exec</span>/<span class=\"built_in\">source</span>/fork:8286</span><br><span class=\"line\">1.sh:<span class=\"variable\">$A</span> is B</span><br><span class=\"line\">using fork by default...</span><br><span class=\"line\">PID <span class=\"keyword\">for</span> 2.sh: 8287</span><br><span class=\"line\">2.sh get <span class=\"variable\">$A</span>=B from 1.sh</span><br><span class=\"line\">2.sh: <span class=\"variable\">$A</span> is C</span><br><span class=\"line\">PID <span class=\"keyword\">for</span> 1.sh after <span class=\"built_in\">exec</span>/<span class=\"built_in\">source</span>/fork;8286</span><br><span class=\"line\">1.sh: <span class=\"variable\">$A</span> is B\t<span class=\"comment\"># 子shell的环境变量不影响父shell</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ./1.sh exec</span></span><br><span class=\"line\">PID <span class=\"keyword\">for</span> 1.sh before <span class=\"built_in\">exec</span>/<span class=\"built_in\">source</span>/fork:8363</span><br><span class=\"line\">1.sh:<span class=\"variable\">$A</span> is B</span><br><span class=\"line\">using <span class=\"built_in\">exec</span>...</span><br><span class=\"line\">PID <span class=\"keyword\">for</span> 2.sh: 8363</span><br><span class=\"line\">2.sh get <span class=\"variable\">$A</span>=B from 1.sh</span><br><span class=\"line\">2.sh: <span class=\"variable\">$A</span> is C\t<span class=\"comment\"># 父脚本后面的命令没有执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ./1.sh source</span></span><br><span class=\"line\">PID <span class=\"keyword\">for</span> 1.sh before <span class=\"built_in\">exec</span>/<span class=\"built_in\">source</span>/fork:8393</span><br><span class=\"line\">1.sh:<span class=\"variable\">$A</span> is B</span><br><span class=\"line\">using <span class=\"built_in\">source</span>...</span><br><span class=\"line\">PID <span class=\"keyword\">for</span> 2.sh: 8393</span><br><span class=\"line\">2.sh get <span class=\"variable\">$A</span>=B from 1.sh</span><br><span class=\"line\">2.sh: <span class=\"variable\">$A</span> is C</span><br><span class=\"line\">PID <span class=\"keyword\">for</span> 1.sh after <span class=\"built_in\">exec</span>/<span class=\"built_in\">source</span>/fork;8393</span><br><span class=\"line\">1.sh: <span class=\"variable\">$A</span> is C\t<span class=\"comment\"># 父脚本命令继续执行，环境变量受子shell影响</span></span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p>本文继续介绍Linux Shell相关基础知识，主要介绍Shell的特殊符号，介绍几个常用的shell命令，如<strong>cut</strong>、<strong>sort</strong>、<strong>wc</strong>、<strong>uniq</strong>几个对文件内容进行操作和排序统计的命令，以及<strong>tee</strong>、<strong>tr</strong>、<strong>split</strong>命令等。</p>","more":"<hr><h1 id=\"Shell基础-三\"><a href=\"#Shell基础-三\" class=\"headerlink\" title=\"Shell基础(三)\"></a>Shell基础(三)</h1><h2 id=\"Shell的特殊符号\"><a href=\"#Shell的特殊符号\" class=\"headerlink\" title=\"Shell的特殊符号\"></a>Shell的特殊符号</h2><ul><li>shell中有一些特殊符号，常用的有以下几种：<div class=\"note success\"><p><strong>*</strong> ： 代表零个或多个任意字符；</p><p><strong>?</strong> ： 代表任意一个字符；</p><p><strong>#</strong> ：表示注释字符，以#号开头的命令或代码都是不生效的；</p><p><strong>\\</strong> ： 表示脱义 ，将一些特殊符号的表达为普通字符或符号；</p><p><strong>|</strong> ： 管道符，将符号左边的内容传递给符号右边；</p><p><strong>$</strong> ： 变量前缀，<code>!$</code>组合正则中表示行尾；</p><p><strong>;</strong> ： 多条命令写到一行执行，使用<code>;</code>分隔；</p><p><strong>&amp;</strong> ： 放在命令结尾，表示后台执行；</p><p><strong>||</strong>和<strong>&amp;&amp;</strong> ： 用于多个命令之间，<code>&amp;&amp;</code>表示前一条执行正确再执行下一条，否则不执行后一条，<code>||</code>表示前一条执行不成功再执行下一条命令；</p></div></li></ul><h2 id=\"文档内容处理命令\"><a href=\"#文档内容处理命令\" class=\"headerlink\" title=\"文档内容处理命令\"></a>文档内容处理命令</h2><h3 id=\"cut命令\"><a href=\"#cut命令\" class=\"headerlink\" title=\"cut命令\"></a><strong>cut</strong>命令</h3><ul><li><p><code>cut</code>命令可以截取文件内容中的字符串，提取自己需要的内容；</p></li><li><p><code>cut</code>命令在使用时，需要指定截取内容的分隔符，使用<code>-d</code>选项指定分隔符将内容分段，然后使用<code>-f</code>选项指定需要的字符串段数，如截取1,2段，则命令为<code>-f 1,2</code>，也可以指定范围<code>-f 1-4</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot lux]<span class=\"comment\"># cat /etc/passwd | head -n 2</span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">[root@evobot lux]<span class=\"comment\"># cat /etc/passwd | head -n 2 | cut -d ':' -f 1,2</span></span><br><span class=\"line\">root:x</span><br><span class=\"line\">bin:x</span><br><span class=\"line\">[root@evobot lux]<span class=\"comment\"># cat /etc/passwd | head -n 2 | cut -d ':' -f 1-4</span></span><br><span class=\"line\">root:x:0:0</span><br><span class=\"line\">bin:x:1:1</span><br></pre></td></tr></table></figure></li><li><p><code>cut</code>命令的<code>-c</code>选项可以指定截取第几个字符，并且使用<code>-c</code>选项时，不能使用<code>-d</code>和<code>-f</code>指定分隔符和范围：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot lux]<span class=\"comment\"># cat /etc/passwd | head -n 2 | cut -c 1</span></span><br><span class=\"line\">r</span><br><span class=\"line\">b</span><br><span class=\"line\">[root@evobot lux]<span class=\"comment\"># cat /etc/passwd | head -n 2 | cut -c 2</span></span><br><span class=\"line\">o</span><br><span class=\"line\">i</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"sort命令\"><a href=\"#sort命令\" class=\"headerlink\" title=\"sort命令\"></a><strong>sort</strong>命令</h3><ul><li><p><code>sort</code>命令用来对文件内容进行排序，可以以数字排序，或者反序排列，并且也可以指定分隔符；</p></li><li><p><code>sort</code>命令常与<code>uniq</code>命令一起使用，默认直接使用<code>sort</code>对文件内容排序，是以内容的首字符的<code>ASCII</code>码排序：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot lux]<span class=\"comment\"># cat /etc/passwd | head -n 5 | sort</span></span><br><span class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p><code>sort</code>的<code>-n</code>选项可以以数字进行排序，当使用<code>-n</code>选项时，字母和特殊符号会被<code>sort</code>当做0进行处理，所以字母和符号会排在数字前面：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat test.txt </span></span><br><span class=\"line\">1111</span><br><span class=\"line\">1211</span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">@<span class=\"comment\">#$%^&amp;</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort -n test.txt </span></span><br><span class=\"line\">@<span class=\"comment\">#$%^&amp;</span></span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">1111</span><br><span class=\"line\">1211</span><br></pre></td></tr></table></figure></li><li><p><code>-r</code>选项是反序排列：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort -n -r test.txt </span></span><br><span class=\"line\">1211</span><br><span class=\"line\">1111</span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">@<span class=\"comment\">#$%^&amp;</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort -r test.txt </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">1211</span><br><span class=\"line\">1111</span><br><span class=\"line\">@<span class=\"comment\">#$%^&amp;</span></span><br></pre></td></tr></table></figure></li><li><p>同样的，<code>sort</code>命令也可以指定分隔符，选项为<code>-t [分隔符]</code>，然后使用<code>-k</code>选项指定以分隔出的第几段进行排序，格式为<code>-k n</code>或<code>-k n1,n2</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 5 /etc/passwd | sort -t ':' -k 1</span></span><br><span class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># head -n 5 /etc/passwd | sort -t ':' -k 3,4</span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p>一般<code>sort</code>命令将结果输出到终端，将结果写入文件可以使用重定向的方式，但是如果将结果写入原文件，使用重定向的方式会导致原文件被清空，所以这时需要使用<code>sort -o</code>参数：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat test.txt </span></span><br><span class=\"line\">123</span><br><span class=\"line\">223</span><br><span class=\"line\">333</span><br><span class=\"line\">124</span><br><span class=\"line\">234</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort -n test.txt </span></span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">223</span><br><span class=\"line\">234</span><br><span class=\"line\">333</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort -n test.txt &gt; test.txt </span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat test.txt </span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort -n test.txt -o test.txt </span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat test.txt </span></span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">223</span><br><span class=\"line\">234</span><br><span class=\"line\">333</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"wc命令\"><a href=\"#wc命令\" class=\"headerlink\" title=\"wc命令\"></a><strong>wc</strong>命令</h3><ul><li><p><code>wc</code>命令用来对文件内容的行数或字数，常用选项为<code>wc -l [filename]</code>统计行数和<code>wc -m [filename]</code> 统计字数：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat -n test.txt </span></span><br><span class=\"line\">     1\t1111</span><br><span class=\"line\">     2\t1211</span><br><span class=\"line\">     3\troot:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">     4\tbin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">     5\tdaemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">     6\t@<span class=\"comment\">#$%^&amp;</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># wc -l test.txt </span></span><br><span class=\"line\">6 test.txt</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># wc -m test.txt </span></span><br><span class=\"line\">122 test.txt</span><br></pre></td></tr></table></figure></li><li><p><code>wc -m</code>选项统计的字数不仅包括字符串，还包括内容里的<strong>换行符</strong>和空格；</p></li><li><p>另外<code>wc -w [filename]</code>可以统计文件内容的单词数，统计时以空格区分字符：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat test2.txt </span></span><br><span class=\"line\">this is <span class=\"built_in\">test</span> file <span class=\"keyword\">for</span> wc <span class=\"built_in\">command</span>,</span><br><span class=\"line\">这个文件用来测试wc命令.</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># wc -w test2.txt </span></span><br><span class=\"line\">8 test2.txt</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># wc -m test2.txt </span></span><br><span class=\"line\">48 test2.txt</span><br></pre></td></tr></table></figure><div class=\"note danger\"><p>这里可以看出，中文连在一起时，不论多少，统计时都只算一个单词。</p></div></li></ul><h3 id=\"uniq命令\"><a href=\"#uniq命令\" class=\"headerlink\" title=\"uniq命令\"></a><strong>uniq</strong>命令</h3><ul><li><p><code>uniq</code>命令用来对文件内容去重复，但是只能对连续多行重复的内容去重复：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat test2.txt </span></span><br><span class=\"line\">123</span><br><span class=\"line\">2</span><br><span class=\"line\">123</span><br><span class=\"line\">2</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># uniq test2.txt </span></span><br><span class=\"line\">123</span><br><span class=\"line\">2</span><br><span class=\"line\">123</span><br><span class=\"line\">2</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># vi test2.txt </span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># !cat</span></span><br><span class=\"line\">cat test2.txt </span><br><span class=\"line\">2</span><br><span class=\"line\">123</span><br><span class=\"line\">123</span><br><span class=\"line\">2</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># !uniq</span></span><br><span class=\"line\">uniq test2.txt </span><br><span class=\"line\">2</span><br><span class=\"line\">123</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure></li><li><p>所以一般在使用<code>uniq</code>命令时，需要先进行排序，再去重，与<code>sort</code>命令一起使用；</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort test2.txt </span></span><br><span class=\"line\">123</span><br><span class=\"line\">123</span><br><span class=\"line\">2</span><br><span class=\"line\">2</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort test2.txt | uniq</span></span><br><span class=\"line\">123</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure></li><li><p><code>uniq -c</code>选项可以在去重时统计重复内容的重复次数：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort test2.txt | uniq -c</span></span><br><span class=\"line\">      2 123</span><br><span class=\"line\">      2 2</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"tee命令\"><a href=\"#tee命令\" class=\"headerlink\" title=\"tee命令\"></a><strong>tee</strong>命令</h3><ul><li><p>之前使用的命令，都不会对文件内容进行更改，要么将处理后的内容输出的屏幕，要么使用重定向将内容输出到指定的文件，但输出到文件时，又看不到具体输出了什么内容，所以<code>tee</code>命令就是解决这样的问题，它既可以将处理后的内容输出到屏幕，同时也会将内容输出到文件中去；</p></li><li><p><code>tee</code>命令的用法就是<code>tee [filename]</code>，后面的文件名是要输出内容的保存文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort test2.txt | uniq -c | tee result.txt</span></span><br><span class=\"line\">      2 123</span><br><span class=\"line\">      2 2</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat result.txt </span></span><br><span class=\"line\">      2 123</span><br><span class=\"line\">      2 2</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，内容即输出到屏幕上也写入到了文件里。</p></blockquote></li><li><p><code>tee -a</code>选项的作用是将内容追加到文件中：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># sort test2.txt | uniq -c | tee -a result.txt </span></span><br><span class=\"line\">      2 123</span><br><span class=\"line\">      2 2</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat result.txt </span></span><br><span class=\"line\">      2 123</span><br><span class=\"line\">      2 2</span><br><span class=\"line\">      2 123</span><br><span class=\"line\">      2 2</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"tr命令\"><a href=\"#tr命令\" class=\"headerlink\" title=\"tr命令\"></a><strong>tr</strong>命令</h3><ul><li><p><code>tr</code>命令是针对字符进行替换操作的命令，如将小写替换为大写，并且支持使用通配符：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo 'evobot blog' | tr 'e' 'E'</span></span><br><span class=\"line\">Evobot blog</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo 'evobot blog' | tr '[eb]' '[EB]'</span></span><br><span class=\"line\">EvoBot Blog</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo 'evobot blog' | tr '[a-z]' '[A-Z]'</span></span><br><span class=\"line\">EVOBOT BLOG</span><br></pre></td></tr></table></figure></li><li><p>在使用<code>tr</code>命令时，如果要将多个字符替换为同一个字符，替换的字符不能使用<code>[]</code>指定，需要使用<code>tr &#39;[a-z]&#39; &#39;x&#39;</code> 的形式：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo 'evobot blog' | tr '[a-z]' '[x]'</span></span><br><span class=\"line\">]]]]]] ]]]]</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo 'evobot blog' | tr '[a-z]' 'x'</span></span><br><span class=\"line\">xxxxxx xxxx</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo 'evobot blog' | tr '[a-z]' '1'</span></span><br><span class=\"line\">111111 1111</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"split命令\"><a href=\"#split命令\" class=\"headerlink\" title=\"split命令\"></a><strong>split</strong>命令</h3><ul><li><p><code>split</code>命令用来对文件内容进行切割，比如将一个大文件切割为小文件，<code>split</code>常用选项为<code>-b</code>按大小进行分割，默认按字节进行分割，可以指定分割大小的单位，如<code>M</code>、<code>k</code>，另一个选项则为<code>-l</code>按行进行分割：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -lh secure.log </span></span><br><span class=\"line\">-rw------- 1 root root 19M 4月  24 23:07 secure.log</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># split -b 6M secure.log</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -lh</span></span><br><span class=\"line\">总用量 38M</span><br><span class=\"line\">-rw------- 1 root root  19M 4月  24 23:07 secure.log</span><br><span class=\"line\">-rw-r--r-- 1 root root 6.0M 4月  24 23:10 xaa</span><br><span class=\"line\">-rw-r--r-- 1 root root 6.0M 4月  24 23:10 xab</span><br><span class=\"line\">-rw-r--r-- 1 root root 6.0M 4月  24 23:10 xac</span><br><span class=\"line\">-rw-r--r-- 1 root root 621K 4月  24 23:10 xad</span><br><span class=\"line\"><span class=\"comment\"># xa开头的文件就是split分割出来的文件</span></span><br></pre></td></tr></table></figure></li><li><p><code>split</code>分割时可以指定分割出的文件名的前缀，格式为<code>split -b 1M [filename] [前缀]</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># split -b 6M secure.log secure.</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -lh</span></span><br><span class=\"line\">总用量 38M</span><br><span class=\"line\">-rw-r--r-- 1 root root 6.0M 4月  24 23:17 secure.aa</span><br><span class=\"line\">-rw-r--r-- 1 root root 6.0M 4月  24 23:17 secure.ab</span><br><span class=\"line\">-rw-r--r-- 1 root root 6.0M 4月  24 23:17 secure.ac</span><br><span class=\"line\">-rw-r--r-- 1 root root 621K 4月  24 23:17 secure.ad</span><br><span class=\"line\">-rw------- 1 root root  19M 4月  24 23:07 secure.log</span><br></pre></td></tr></table></figure></li><li><p>按行切割的<code>-l</code>选项的用法如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># wc -l secure.log </span></span><br><span class=\"line\">180663 secure.log</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># split -l 30000 secure.log secure.</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># wc -l *</span></span><br><span class=\"line\">   30000 secure.aa</span><br><span class=\"line\">   30000 secure.ab</span><br><span class=\"line\">   30000 secure.ac</span><br><span class=\"line\">   30000 secure.ad</span><br><span class=\"line\">   30000 secure.ae</span><br><span class=\"line\">   30000 secure.af</span><br><span class=\"line\">     663 secure.ag</span><br><span class=\"line\">  180663 secure.log</span><br><span class=\"line\">  361326 总用量</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"shell脚本调用的三种方法\"><a href=\"#shell脚本调用的三种方法\" class=\"headerlink\" title=\"shell脚本调用的三种方法\"></a>shell脚本调用的三种方法</h2><ul><li><p>在shell脚本中调用另一个shell脚本，可以使用<code>fork</code>、<code>exec</code>、<code>source</code>三种方法，三种方法对环境变量以及后续命令执行的影响各不相同，具体的使用异同如下：</p><ul><li><strong><code>fork</code></strong> ：用法为<code>fork [/path/to/script.sh]</code>，这种方式在运行时会开启一个<code>sub-shell(子shell)</code>，然后在sub-shell中执行调用的脚本，sub-shell执行时，父shell(parent-shell)依然存在，sub-shell执行时从parent-shell继承环境变量，执行完毕后返回到parent-shell执行父级的后续命令，sub-shell中的环境变量不会带回parent-shell中；</li><li><strong><code>exec</code></strong>： 用法为<code>exec [/path/to/script.sh]</code>，这种方式不会新开一个sub-shell执行被调用的脚本，而是直接与父脚本在同一个shell中执行，但是被调用的脚本执行完以后，父脚本<code>exec</code>行之后的内容就不会再继续执行；</li><li><strong><code>source</code></strong>： 用法为<code>source [/path/to/script.sh]</code>，source与exec唯一的不同点在于被调用的脚本执行完之后会继续执行父脚本的后续命令，同时子脚本的环境变量会影响父级环境变量。</li></ul><p>​</p></li><li><p>可以通过下面两个脚本体会三种调用之间的不同：</p><figure class=\"highlight bash\"><figcaption><span>1.sh</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">A=B</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"PID for 1.sh before exec/source/fork:$$\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> A</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"1.sh:\\$A is <span class=\"variable\">$A</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">exec</span>)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"using exec...\"</span></span><br><span class=\"line\">        <span class=\"built_in\">exec</span> ./2.sh ;;</span><br><span class=\"line\">    <span class=\"built_in\">source</span>)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"using source...\"</span></span><br><span class=\"line\">        . ./2.sh ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"using fork by default...\"</span></span><br><span class=\"line\">        ./2.sh ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"PID for 1.sh after exec/source/fork;$$\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"1.sh: \\$A is <span class=\"variable\">$A</span>\"</span></span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption><span>2.sh</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"PID for 2.sh: $$\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"2.sh get \\$A=<span class=\"variable\">$A</span> from 1.sh\"</span></span><br><span class=\"line\">A=C</span><br><span class=\"line\"><span class=\"built_in\">export</span> A</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"2.sh: \\$A is <span class=\"variable\">$A</span>\"</span></span><br></pre></td></tr></table></figure></li><li><p>执行结果如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ./1.sh </span></span><br><span class=\"line\">PID <span class=\"keyword\">for</span> 1.sh before <span class=\"built_in\">exec</span>/<span class=\"built_in\">source</span>/fork:8286</span><br><span class=\"line\">1.sh:<span class=\"variable\">$A</span> is B</span><br><span class=\"line\">using fork by default...</span><br><span class=\"line\">PID <span class=\"keyword\">for</span> 2.sh: 8287</span><br><span class=\"line\">2.sh get <span class=\"variable\">$A</span>=B from 1.sh</span><br><span class=\"line\">2.sh: <span class=\"variable\">$A</span> is C</span><br><span class=\"line\">PID <span class=\"keyword\">for</span> 1.sh after <span class=\"built_in\">exec</span>/<span class=\"built_in\">source</span>/fork;8286</span><br><span class=\"line\">1.sh: <span class=\"variable\">$A</span> is B\t<span class=\"comment\"># 子shell的环境变量不影响父shell</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ./1.sh exec</span></span><br><span class=\"line\">PID <span class=\"keyword\">for</span> 1.sh before <span class=\"built_in\">exec</span>/<span class=\"built_in\">source</span>/fork:8363</span><br><span class=\"line\">1.sh:<span class=\"variable\">$A</span> is B</span><br><span class=\"line\">using <span class=\"built_in\">exec</span>...</span><br><span class=\"line\">PID <span class=\"keyword\">for</span> 2.sh: 8363</span><br><span class=\"line\">2.sh get <span class=\"variable\">$A</span>=B from 1.sh</span><br><span class=\"line\">2.sh: <span class=\"variable\">$A</span> is C\t<span class=\"comment\"># 父脚本后面的命令没有执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ./1.sh source</span></span><br><span class=\"line\">PID <span class=\"keyword\">for</span> 1.sh before <span class=\"built_in\">exec</span>/<span class=\"built_in\">source</span>/fork:8393</span><br><span class=\"line\">1.sh:<span class=\"variable\">$A</span> is B</span><br><span class=\"line\">using <span class=\"built_in\">source</span>...</span><br><span class=\"line\">PID <span class=\"keyword\">for</span> 2.sh: 8393</span><br><span class=\"line\">2.sh get <span class=\"variable\">$A</span>=B from 1.sh</span><br><span class=\"line\">2.sh: <span class=\"variable\">$A</span> is C</span><br><span class=\"line\">PID <span class=\"keyword\">for</span> 1.sh after <span class=\"built_in\">exec</span>/<span class=\"built_in\">source</span>/fork;8393</span><br><span class=\"line\">1.sh: <span class=\"variable\">$A</span> is C\t<span class=\"comment\"># 父脚本命令继续执行，环境变量受子shell影响</span></span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->"},{"title":"Shell基础(二)","author":"Evobot","abbrlink":"49e2ed70","date":"2018-04-22T15:30:43.000Z","image":null,"_content":"\n\n\n本文继续介绍Shell的基础知识，涵盖管道符和作业控制的相关知识、Shell变量的相关知识以及系统环境变量配置文件的介绍。\n\n<!--more-->\n\n---\n\n# Shell基础(二)\n\n## 管道符和作业控制\n\n- 管道符`|`表示把一个文件或命令的输出内容传递给后面的命令，使用形式如`cat 1.txt | wc -l`或`cat 1.txt | grep 'aaa'`;\n\n```bash\n[root@evobot tmp]# cat setRps.log | grep 'queues'\neth:eth0  queues:1\ntotal_nic_queues:1  flow_entries:4096\n```\n\n- 上面的命令输出结果，就只包含管道符后面的`grep`筛选的内容。\n- 作业控制表示控制程序运行状态，如暂停，继续运行，使用`ctrl+z`可以暂停当前任务，如暂停vim任务：\n\n```bash\n[root@evobot tmp]# vi\n\n[1]+  已停止               vi\n```\n\n- 将已经暂停的任务调回前台，使用`fg`命令：\n\n```bash\n[root@evobot tmp]# fg\nvi\n```\n\n- 当有多个任务被暂停时，使用命令`jobs`可以查看系统已经暂停的任务，显示出的任务会有一个序号，`fg`指定任务编号，即可将指定编号的任务调回前台：\n\n```bash\n[root@evobot tmp]# jobs\n[1]-  已停止               vi aaa\n[2]+  已停止               vi bbb\n[root@evobot tmp]# fg 2\nvi bbb\n```\n\n- 除了`fg`将任务调回前台，还可以使用`bg`命令让任务后台运行，例如`vmstat 1`命令，会持续输出系统状态，我们将其设置为后台运行：\n\n```bash\n[root@evobot tmp]# jobs\n[1]+  已停止               vi aaa\n[root@evobot tmp]# vmstat 1\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n 2  0      0 533176 225372 1026764    0    0     1    43  100  104  2  1 97  0  0\n 1  0      0 533176 225372 1026764    0    0     0     0  111  116  0  0 100  0  0\n^Z\n[2]+  已停止               vmstat 1\n[root@evobot tmp]# jobs\n[1]-  已停止               vi aaa\n[2]+  已停止               vmstat 1\n[root@evobot tmp]# bg 2\n[2]+ vmstat 1 &\n[root@evobot tmp]#  0  0      0 532648 225376 1027132    0    0     0    20  509  585  0  0 100  0  0\n 0  0      0 532648 225376 1027132    0    0     0    20  112  123  0  0 99  1  0\n 0  0      0 532648 225376 1027132    0    0     0     0   93  111  0  1 99  0  0\njobs\n[1]+  已停止               vi aaa\n[2]-  运行中               vmstat 1 &\n\n```\n\n- 虽然`vmstat 1`命令在后台运行也会在前台打印，但是执行`jobs`命令可以看到任务状态是**运行中**，并且在命令的结尾有一个`&`符号，这表示任务在后台运行；\n- 使用`fg`和`bg`命令，在不加任务编号的情况下，默认会调用最后一次暂停的任务；\n- 在命令结尾加`&`，可以让命令在后台运行，并且也可以使用`jobs`查看任务：\n\n```bash\n[root@evobot tmp]# sleep 500\n^Z\n[2]+  已停止               sleep 500\n[root@evobot tmp]# jobs\n[1]-  已停止               vi aaa\n[2]+  已停止               sleep 500\n[root@evobot tmp]# sleep 1000 &\n[3] 13618\n[root@evobot tmp]# jobs\n[1]-  已停止               vi aaa\n[2]+  已停止               sleep 500\n[3]   运行中               sleep 1000 &\n```\n\n- `jobs`命令只能查看当前tty的任务，另一个tty不能查看到其他tty的任务。\n\n## shell变量\n\n### 查看变量\n\n- 如以前说过的`PATH`，就是系统的一个环境变量，查看系统所以的变量，可以使用`env`命令查看，一般系统变量以大写字符串定义：\n\n  ```bash\n  [root@evobot tmp]# env\n  XDG_SESSION_ID=5806\n  HOSTNAME=evobot\n  SHELL=/bin/bash\n  TERM=xterm-256color\n  HISTSIZE=3000\n  USER=root\n  ```\n\n- `set`命令也可以查看变量，并且不仅列出系统变量，还会输出用户定义的变量：\n\n  ```bash\n  [root@evobot tmp]# set\n  ABRT_DEBUG_LOG=/dev/null\n  BASH=/bin/bash\n  BASHOPTS=checkwinsize:cmdhist:expand_aliases:extglob:extquote:force_fignore:histappend:interactive_comments:login_shell:progcomp:promptvars:sourcepath\n  BASH_ALIASES=()\n  BASH_ARGC=()\n  BASH_ARGV=()\n  BASH_CMDS=()\n  BASH_COMPLETION_COMPAT_DIR=/etc/bash_completion.d\n  BASH_LINENO=()\n  BASH_REMATCH=()\n  BASH_SOURCE=()\n  BASH_VERSINFO=([0]=\"4\" [1]=\"2\" [2]=\"46\" [3]=\"2\" [4]=\"release\" [5]=\"x86_64-redhat-linux-gnu\")\n  BASH_VERSION='4.2.46(2)-release'\n  ```\n\n### 自定义变量\n\n- 自定义变量直接使用`=`复制即可，查看变量使用`echo $[变量名]`：\n\n  ```bash\n  [root@evobot tmp]# myvar=abc\n  [root@evobot tmp]# echo $myvar\n  abc\n  [root@evobot tmp]# set | grep 'myvar'\n  myvar=abc\n  ```\n\n- Shell自定义变量的命名规则必须由**字母、数字或下划线**组成，并且**首位不能为数字**；变量的值存在特殊符号时，值需要使用单引号括起来，单引号可以将特殊字符脱义，而双引号则不行：\n\n  ```bash\n  [root@evobot tmp]# 1a=111\n  -bash: 1a=111: 未找到命令\n  [root@evobot tmp]# a1=111\n  [root@evobot tmp]# echo $a1\n  111\n  [root@evobot tmp]# a_2=zxcv\n  [root@evobot tmp]# echo $a_2\n  zxcv\n\n  [root@evobot tmp]# var1=a b c\n  -bash: b: 未找到命令\n  [root@evobot tmp]# var1='a b c'\n  [root@evobot tmp]# echo $var1\n  a b c\n  [root@evobot tmp]# var2=\"a$bc\"\n  [root@evobot tmp]# echo $var2\n  a\n  [root@evobot tmp]# var2='a$bc'\n  [root@evobot tmp]# echo $var2\n  a$bc\n  ```\n\n- 变量之间可以进行累加，如将两个变量的值进行拼接：\n\n  ```bash\n  [root@evobot tmp]# var3=1\n  [root@evobot tmp]# var4=2\n  [root@evobot tmp]# echo $var3$var4\n  12\n  [root@evobot tmp]# echo \"a$var4\"c\n  a2c\n  [root@evobot tmp]# echo \"a$bc\"\t# $后面被识别为变量bc\n  a\n  ```\n\n### 全局变量\n\n- 使用命令`w`可以查看当前登录的客户端和用户，使用TTY表示，查看当前用户的TTY，可以查看变量`SSH_TTY`：\n\n  ```bash\n  [lux@evobot ~]$ w\n   00:38:58 up 4 days, 3 min,  2 users,  load average: 0.00, 0.01, 0.05\n  USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\n  lux      pts/0    118.113.33.203   23:36    1:06   0.17s  0.00s sshd: lux [priv]    \n  lux      pts/1    118.113.33.203   00:38    1.00s  0.03s  0.00s w\n\n  [lux@evobot ~]$ echo $SSH_TTY\n  /dev/pts/1\n  ```\n\n- 普通的自定义变量只能在当前bash中访问，例如在当前shell中新建`bash`,新的bash中就无法再访问父shell的自定义变量：\n\n  ```bash\n  [lux@evobot ~]$ echo $var1\n\n  [lux@evobot ~]$ var1=abc\n  [lux@evobot ~]$ echo $var1\n  abc\n  [lux@evobot ~]$ bash\n  [lux@evobot ~]$ echo $var1\n\n  [lux@evobot ~]$ \n  ```\n\n\n- 定义全局变量使用`export [变量名=值]`，需要注意的是，全局变量只能在子shell中生效，而子shell中的全局变量无法在父shell中生效，也不会在其他的tty中生效：\n\n  ```bash\n  [lux@evobot ~]$ echo $SSH_TTY\n  /dev/pts/2\n  [lux@evobot ~]$ echo $var1\n\n  [lux@evobot ~]$ \n\n  [lux@evobot ~]$ export var2=cdef\n  [lux@evobot ~]$ echo $var2\n  cdef\n  [lux@evobot ~]$ exit\n  exit\n  [lux@evobot ~]$ echo $var2\n\n  [lux@evobot ~]$ \n  ```\n\n- 使用`unset`命令可以取消变量，命令用法为`unset [变量名]`:\n\n  ```bash\n  [lux@evobot ~]$ echo $var1\n  centosvar\n  [lux@evobot ~]$ unset var1\n  [lux@evobot ~]$ echo $var1\n\n  ```\n\n---\n\n## 环境变量配置文件\n\n- Linux中的环境变量配置文件分为系统全局配置和用户配置，常见的配置文件有以下几个：\n\n  - 系统层次环境变量配置文件：\n\n    >  **/etc/profile** 用户环境变量,登录、交互才执行;\n    >\n    >  **/etc/bashrc** 用户不用登录，执行shell就生效；\n\n  - 用户层次环境变量配置文件，每个用户的家目录下都会有以下文件：\n\n    > **~/.bashrc**\n    >\n    > **~/.bash_profile**\n    >\n    > **~/.bash_history**\n    >\n    > **~/bash_logout**\n\n  - 其中`profile`命名的文件是与登录相关的配置，`bashrc`命名的文件，则是与系统或用户执行命令和脚本相关的配置；\n\n\n### bashrc和bash_profile的区别\n\n- 当直接在机器login界面登陆、使用ssh登陆或者su切换用户登陆时，`.bash_profile` 会被调用来初始化shell环境\n\n\n- 查看`~/.bash_profile`的文件内容：\n\n  ```bash\n  # .bash_profile\n\n  # Get the aliases and functions\n  if [ -f ~/.bashrc ]; then\n          . ~/.bashrc\t\t# 这里的.符号与source命令作用相同,.bash_profile会自动加载~/.bashrc;\n  fi\n\n  # User specific environment and startup programs\n\n  PATH=$PATH:$HOME/bin\n\n  export PATH\n  ```\n\n- 当不登陆系统而使用ssh直接在远端执行命令，.bashrc 会被调用，已经登陆系统后，每打开一个新的Terminal时，.bashrc 都会被再次调用，在`~/.bashrc`的文件内容中，又会自动加载`/etc/bashrc`：\n\n  ```bash\n  # .bashrc\n\n  # User specific aliases and functions\n\n  alias rm='rm -i'\n  alias cp='cp -i'\n  alias mv='mv -i'\n\n  # Source global definitions\n  if [ -f /etc/bashrc ]; then\n          . /etc/bashrc\n  fi\n  ```\n\n- 所以配置环境变量，最好是卸载`.bashrc`文件中，因为不论是登陆还是不登陆，该文件都会被调用。\n\n### 其他环境变量文件\n\n- `～/.bash_logout`文件用来定义用户退出时系统所做的操作，如用户退出时清除命令历史，那么将相关命令写入文件即可；\n\n- `PS1`变量使用来定义用户登录后的提示符格式的，如`[root@evobot ~]#`，这样的格式就是在`PS1`变量中定义的，`PS1`变量的定义在`/etc/bashrc`中：\n\n  ```bash\n  [root@evobot ~]# echo $PS1\n  [\\u@\\h \\W]\\$\n  # 这里\\u表示用户名,\\h表示hostname，\\W表示当前目录\n\n  [root@evobot ~]# cat /etc/bashrc | grep '&& PS1='\n    [ \"$PS1\" = \"\\\\s-\\\\v\\\\\\$ \" ] && PS1=\"[\\u@\\h \\W]\\\\$ \"\n  ```\n\n- 如果将`\\W`改为`\\w`，则当前目录将显示绝对路径，其他能够更改的选项如下表格所示：\n\n<style>\ntable th:first-of-type {\n    width: 130px;\n    text-align: center;\n}\n</style>\n\n| 设置选项 |             作用             |\n| :--: | :------------------------: |\n| `\\d` | 表示日期，格式为weekday month date |\n| `\\H` |           完整的主机名           |\n| `\\h` |          主机的第一个名字          |\n| `\\t` |     24小时格式(HH:MM:SS)时间     |\n| `\\T` |           12小时格式           |\n| `\\A` |    24小时时间格式(HH:MM)，不包括秒    |\n| `\\u` |           当前用户名            |\n| `\\v` |         BASH的版本信息          |\n| `\\w` |         工作目录的绝对路径          |\n| `\\w` |         当前工作目录的目录名         |\n| `\\#` |           第几个命令            |\n| `\\$` |  提示字符，root用户为`#`，普通用户为`$`  |\n\n- 对于`PS1`，不仅可以设置格式，也可以设置颜色。\n- 除了`PS1`之外，还有`PS2`变量，`PS2`变量用来定义进入shell下的程序提供的终端时显示的格式，默认`PS2`的变量值为`>`。\n\n---\n\n## 简单操作记录审计\n\n- 在需要针对用户操作进行历史记录以便出现问题时查找责任人时，由于`history`命令用户能够自行删除，所以可以通过一些配置来记录用户的操作记录；\n\n- 首先创建所需要的目录：\n\n  ```bash\n  [root@evobot ~]# mkdir -p /usr/local/records/\n  [root@evobot ~]# chmod 777 /usr/local/records/\n  [root@evobot ~]# chmod +t /usr/local/records/\n  ```\n\n- 在`/etc/profile`中添加如下的代码：\n\n  ```bash\n  if [ ! -d /usr/local/records/${LOGNAME} ];then\n      mkdir -p /usr/local/records/${LOGNAME}\n      chmod 300 /usr/local/records/${LOGNAME}\n  fi\n\n  export HISTORY_FILE=\"/usr/local/records/${LOGNAME}/bash_history\"\n  export PROMPT_COMMAND='{ date +\"%Y-%m-%d %T ##### $(who am i |awk \"{print \\$1\\\" \\\"\\$2\\\" \\\"\\$5}\") #### $(history 1 | { read x cmd; echo \"$cmd\";})\";} >> $HISTORY_FILE'\n  ```\n\n- 这样在用户登录时，会在`/usr/local/records`目录下创建一个与用户名同名的目录，目录下的`bash_history`会将用户的历史命令记录下来，其中`PROMPT_COMMAND`变量是在显示`PS1`变量之前执行的，所以这里用户每执行一次命令再显示下一个`PS1`之前，都会执行`PROMPT_COMMAND`的定义的内容；\n\n- 这里定义的`PROMPT_COMMAND`的内容就是历史记录的格式，首先输出日期和时间，然后截取用户的用户名，tty和IP地址，`history 1 | { read x cmd; echo \"$cmd\";}`表示取`history`命令的最后一个记录，`history`命令格式如下：\n\n  ```bash\n  [lux@evobot ~]$ history 1\n    308  history 1\n  ```\n\n- `{ read x cmd; echo \"$cmd\"; }`则表示将`history 1`的输出分别赋值给`x`和`cmd`，然后打印`cmd`变量的值；\n\n- 这样一个简单的用户历史命令审计系统就可以运行了，但是实际上用户仍然可以更改目录的权限，对命令历史进行更改。\n\n---\n\n","source":"_posts/Shell基础(二).md","raw":"---\ntitle: Shell基础(二)\nauthor: Evobot\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\nabbrlink: 49e2ed70\ndate: 2018-04-22 23:30:43\nimage:\n---\n\n\n\n本文继续介绍Shell的基础知识，涵盖管道符和作业控制的相关知识、Shell变量的相关知识以及系统环境变量配置文件的介绍。\n\n<!--more-->\n\n---\n\n# Shell基础(二)\n\n## 管道符和作业控制\n\n- 管道符`|`表示把一个文件或命令的输出内容传递给后面的命令，使用形式如`cat 1.txt | wc -l`或`cat 1.txt | grep 'aaa'`;\n\n```bash\n[root@evobot tmp]# cat setRps.log | grep 'queues'\neth:eth0  queues:1\ntotal_nic_queues:1  flow_entries:4096\n```\n\n- 上面的命令输出结果，就只包含管道符后面的`grep`筛选的内容。\n- 作业控制表示控制程序运行状态，如暂停，继续运行，使用`ctrl+z`可以暂停当前任务，如暂停vim任务：\n\n```bash\n[root@evobot tmp]# vi\n\n[1]+  已停止               vi\n```\n\n- 将已经暂停的任务调回前台，使用`fg`命令：\n\n```bash\n[root@evobot tmp]# fg\nvi\n```\n\n- 当有多个任务被暂停时，使用命令`jobs`可以查看系统已经暂停的任务，显示出的任务会有一个序号，`fg`指定任务编号，即可将指定编号的任务调回前台：\n\n```bash\n[root@evobot tmp]# jobs\n[1]-  已停止               vi aaa\n[2]+  已停止               vi bbb\n[root@evobot tmp]# fg 2\nvi bbb\n```\n\n- 除了`fg`将任务调回前台，还可以使用`bg`命令让任务后台运行，例如`vmstat 1`命令，会持续输出系统状态，我们将其设置为后台运行：\n\n```bash\n[root@evobot tmp]# jobs\n[1]+  已停止               vi aaa\n[root@evobot tmp]# vmstat 1\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n 2  0      0 533176 225372 1026764    0    0     1    43  100  104  2  1 97  0  0\n 1  0      0 533176 225372 1026764    0    0     0     0  111  116  0  0 100  0  0\n^Z\n[2]+  已停止               vmstat 1\n[root@evobot tmp]# jobs\n[1]-  已停止               vi aaa\n[2]+  已停止               vmstat 1\n[root@evobot tmp]# bg 2\n[2]+ vmstat 1 &\n[root@evobot tmp]#  0  0      0 532648 225376 1027132    0    0     0    20  509  585  0  0 100  0  0\n 0  0      0 532648 225376 1027132    0    0     0    20  112  123  0  0 99  1  0\n 0  0      0 532648 225376 1027132    0    0     0     0   93  111  0  1 99  0  0\njobs\n[1]+  已停止               vi aaa\n[2]-  运行中               vmstat 1 &\n\n```\n\n- 虽然`vmstat 1`命令在后台运行也会在前台打印，但是执行`jobs`命令可以看到任务状态是**运行中**，并且在命令的结尾有一个`&`符号，这表示任务在后台运行；\n- 使用`fg`和`bg`命令，在不加任务编号的情况下，默认会调用最后一次暂停的任务；\n- 在命令结尾加`&`，可以让命令在后台运行，并且也可以使用`jobs`查看任务：\n\n```bash\n[root@evobot tmp]# sleep 500\n^Z\n[2]+  已停止               sleep 500\n[root@evobot tmp]# jobs\n[1]-  已停止               vi aaa\n[2]+  已停止               sleep 500\n[root@evobot tmp]# sleep 1000 &\n[3] 13618\n[root@evobot tmp]# jobs\n[1]-  已停止               vi aaa\n[2]+  已停止               sleep 500\n[3]   运行中               sleep 1000 &\n```\n\n- `jobs`命令只能查看当前tty的任务，另一个tty不能查看到其他tty的任务。\n\n## shell变量\n\n### 查看变量\n\n- 如以前说过的`PATH`，就是系统的一个环境变量，查看系统所以的变量，可以使用`env`命令查看，一般系统变量以大写字符串定义：\n\n  ```bash\n  [root@evobot tmp]# env\n  XDG_SESSION_ID=5806\n  HOSTNAME=evobot\n  SHELL=/bin/bash\n  TERM=xterm-256color\n  HISTSIZE=3000\n  USER=root\n  ```\n\n- `set`命令也可以查看变量，并且不仅列出系统变量，还会输出用户定义的变量：\n\n  ```bash\n  [root@evobot tmp]# set\n  ABRT_DEBUG_LOG=/dev/null\n  BASH=/bin/bash\n  BASHOPTS=checkwinsize:cmdhist:expand_aliases:extglob:extquote:force_fignore:histappend:interactive_comments:login_shell:progcomp:promptvars:sourcepath\n  BASH_ALIASES=()\n  BASH_ARGC=()\n  BASH_ARGV=()\n  BASH_CMDS=()\n  BASH_COMPLETION_COMPAT_DIR=/etc/bash_completion.d\n  BASH_LINENO=()\n  BASH_REMATCH=()\n  BASH_SOURCE=()\n  BASH_VERSINFO=([0]=\"4\" [1]=\"2\" [2]=\"46\" [3]=\"2\" [4]=\"release\" [5]=\"x86_64-redhat-linux-gnu\")\n  BASH_VERSION='4.2.46(2)-release'\n  ```\n\n### 自定义变量\n\n- 自定义变量直接使用`=`复制即可，查看变量使用`echo $[变量名]`：\n\n  ```bash\n  [root@evobot tmp]# myvar=abc\n  [root@evobot tmp]# echo $myvar\n  abc\n  [root@evobot tmp]# set | grep 'myvar'\n  myvar=abc\n  ```\n\n- Shell自定义变量的命名规则必须由**字母、数字或下划线**组成，并且**首位不能为数字**；变量的值存在特殊符号时，值需要使用单引号括起来，单引号可以将特殊字符脱义，而双引号则不行：\n\n  ```bash\n  [root@evobot tmp]# 1a=111\n  -bash: 1a=111: 未找到命令\n  [root@evobot tmp]# a1=111\n  [root@evobot tmp]# echo $a1\n  111\n  [root@evobot tmp]# a_2=zxcv\n  [root@evobot tmp]# echo $a_2\n  zxcv\n\n  [root@evobot tmp]# var1=a b c\n  -bash: b: 未找到命令\n  [root@evobot tmp]# var1='a b c'\n  [root@evobot tmp]# echo $var1\n  a b c\n  [root@evobot tmp]# var2=\"a$bc\"\n  [root@evobot tmp]# echo $var2\n  a\n  [root@evobot tmp]# var2='a$bc'\n  [root@evobot tmp]# echo $var2\n  a$bc\n  ```\n\n- 变量之间可以进行累加，如将两个变量的值进行拼接：\n\n  ```bash\n  [root@evobot tmp]# var3=1\n  [root@evobot tmp]# var4=2\n  [root@evobot tmp]# echo $var3$var4\n  12\n  [root@evobot tmp]# echo \"a$var4\"c\n  a2c\n  [root@evobot tmp]# echo \"a$bc\"\t# $后面被识别为变量bc\n  a\n  ```\n\n### 全局变量\n\n- 使用命令`w`可以查看当前登录的客户端和用户，使用TTY表示，查看当前用户的TTY，可以查看变量`SSH_TTY`：\n\n  ```bash\n  [lux@evobot ~]$ w\n   00:38:58 up 4 days, 3 min,  2 users,  load average: 0.00, 0.01, 0.05\n  USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\n  lux      pts/0    118.113.33.203   23:36    1:06   0.17s  0.00s sshd: lux [priv]    \n  lux      pts/1    118.113.33.203   00:38    1.00s  0.03s  0.00s w\n\n  [lux@evobot ~]$ echo $SSH_TTY\n  /dev/pts/1\n  ```\n\n- 普通的自定义变量只能在当前bash中访问，例如在当前shell中新建`bash`,新的bash中就无法再访问父shell的自定义变量：\n\n  ```bash\n  [lux@evobot ~]$ echo $var1\n\n  [lux@evobot ~]$ var1=abc\n  [lux@evobot ~]$ echo $var1\n  abc\n  [lux@evobot ~]$ bash\n  [lux@evobot ~]$ echo $var1\n\n  [lux@evobot ~]$ \n  ```\n\n\n- 定义全局变量使用`export [变量名=值]`，需要注意的是，全局变量只能在子shell中生效，而子shell中的全局变量无法在父shell中生效，也不会在其他的tty中生效：\n\n  ```bash\n  [lux@evobot ~]$ echo $SSH_TTY\n  /dev/pts/2\n  [lux@evobot ~]$ echo $var1\n\n  [lux@evobot ~]$ \n\n  [lux@evobot ~]$ export var2=cdef\n  [lux@evobot ~]$ echo $var2\n  cdef\n  [lux@evobot ~]$ exit\n  exit\n  [lux@evobot ~]$ echo $var2\n\n  [lux@evobot ~]$ \n  ```\n\n- 使用`unset`命令可以取消变量，命令用法为`unset [变量名]`:\n\n  ```bash\n  [lux@evobot ~]$ echo $var1\n  centosvar\n  [lux@evobot ~]$ unset var1\n  [lux@evobot ~]$ echo $var1\n\n  ```\n\n---\n\n## 环境变量配置文件\n\n- Linux中的环境变量配置文件分为系统全局配置和用户配置，常见的配置文件有以下几个：\n\n  - 系统层次环境变量配置文件：\n\n    >  **/etc/profile** 用户环境变量,登录、交互才执行;\n    >\n    >  **/etc/bashrc** 用户不用登录，执行shell就生效；\n\n  - 用户层次环境变量配置文件，每个用户的家目录下都会有以下文件：\n\n    > **~/.bashrc**\n    >\n    > **~/.bash_profile**\n    >\n    > **~/.bash_history**\n    >\n    > **~/bash_logout**\n\n  - 其中`profile`命名的文件是与登录相关的配置，`bashrc`命名的文件，则是与系统或用户执行命令和脚本相关的配置；\n\n\n### bashrc和bash_profile的区别\n\n- 当直接在机器login界面登陆、使用ssh登陆或者su切换用户登陆时，`.bash_profile` 会被调用来初始化shell环境\n\n\n- 查看`~/.bash_profile`的文件内容：\n\n  ```bash\n  # .bash_profile\n\n  # Get the aliases and functions\n  if [ -f ~/.bashrc ]; then\n          . ~/.bashrc\t\t# 这里的.符号与source命令作用相同,.bash_profile会自动加载~/.bashrc;\n  fi\n\n  # User specific environment and startup programs\n\n  PATH=$PATH:$HOME/bin\n\n  export PATH\n  ```\n\n- 当不登陆系统而使用ssh直接在远端执行命令，.bashrc 会被调用，已经登陆系统后，每打开一个新的Terminal时，.bashrc 都会被再次调用，在`~/.bashrc`的文件内容中，又会自动加载`/etc/bashrc`：\n\n  ```bash\n  # .bashrc\n\n  # User specific aliases and functions\n\n  alias rm='rm -i'\n  alias cp='cp -i'\n  alias mv='mv -i'\n\n  # Source global definitions\n  if [ -f /etc/bashrc ]; then\n          . /etc/bashrc\n  fi\n  ```\n\n- 所以配置环境变量，最好是卸载`.bashrc`文件中，因为不论是登陆还是不登陆，该文件都会被调用。\n\n### 其他环境变量文件\n\n- `～/.bash_logout`文件用来定义用户退出时系统所做的操作，如用户退出时清除命令历史，那么将相关命令写入文件即可；\n\n- `PS1`变量使用来定义用户登录后的提示符格式的，如`[root@evobot ~]#`，这样的格式就是在`PS1`变量中定义的，`PS1`变量的定义在`/etc/bashrc`中：\n\n  ```bash\n  [root@evobot ~]# echo $PS1\n  [\\u@\\h \\W]\\$\n  # 这里\\u表示用户名,\\h表示hostname，\\W表示当前目录\n\n  [root@evobot ~]# cat /etc/bashrc | grep '&& PS1='\n    [ \"$PS1\" = \"\\\\s-\\\\v\\\\\\$ \" ] && PS1=\"[\\u@\\h \\W]\\\\$ \"\n  ```\n\n- 如果将`\\W`改为`\\w`，则当前目录将显示绝对路径，其他能够更改的选项如下表格所示：\n\n<style>\ntable th:first-of-type {\n    width: 130px;\n    text-align: center;\n}\n</style>\n\n| 设置选项 |             作用             |\n| :--: | :------------------------: |\n| `\\d` | 表示日期，格式为weekday month date |\n| `\\H` |           完整的主机名           |\n| `\\h` |          主机的第一个名字          |\n| `\\t` |     24小时格式(HH:MM:SS)时间     |\n| `\\T` |           12小时格式           |\n| `\\A` |    24小时时间格式(HH:MM)，不包括秒    |\n| `\\u` |           当前用户名            |\n| `\\v` |         BASH的版本信息          |\n| `\\w` |         工作目录的绝对路径          |\n| `\\w` |         当前工作目录的目录名         |\n| `\\#` |           第几个命令            |\n| `\\$` |  提示字符，root用户为`#`，普通用户为`$`  |\n\n- 对于`PS1`，不仅可以设置格式，也可以设置颜色。\n- 除了`PS1`之外，还有`PS2`变量，`PS2`变量用来定义进入shell下的程序提供的终端时显示的格式，默认`PS2`的变量值为`>`。\n\n---\n\n## 简单操作记录审计\n\n- 在需要针对用户操作进行历史记录以便出现问题时查找责任人时，由于`history`命令用户能够自行删除，所以可以通过一些配置来记录用户的操作记录；\n\n- 首先创建所需要的目录：\n\n  ```bash\n  [root@evobot ~]# mkdir -p /usr/local/records/\n  [root@evobot ~]# chmod 777 /usr/local/records/\n  [root@evobot ~]# chmod +t /usr/local/records/\n  ```\n\n- 在`/etc/profile`中添加如下的代码：\n\n  ```bash\n  if [ ! -d /usr/local/records/${LOGNAME} ];then\n      mkdir -p /usr/local/records/${LOGNAME}\n      chmod 300 /usr/local/records/${LOGNAME}\n  fi\n\n  export HISTORY_FILE=\"/usr/local/records/${LOGNAME}/bash_history\"\n  export PROMPT_COMMAND='{ date +\"%Y-%m-%d %T ##### $(who am i |awk \"{print \\$1\\\" \\\"\\$2\\\" \\\"\\$5}\") #### $(history 1 | { read x cmd; echo \"$cmd\";})\";} >> $HISTORY_FILE'\n  ```\n\n- 这样在用户登录时，会在`/usr/local/records`目录下创建一个与用户名同名的目录，目录下的`bash_history`会将用户的历史命令记录下来，其中`PROMPT_COMMAND`变量是在显示`PS1`变量之前执行的，所以这里用户每执行一次命令再显示下一个`PS1`之前，都会执行`PROMPT_COMMAND`的定义的内容；\n\n- 这里定义的`PROMPT_COMMAND`的内容就是历史记录的格式，首先输出日期和时间，然后截取用户的用户名，tty和IP地址，`history 1 | { read x cmd; echo \"$cmd\";}`表示取`history`命令的最后一个记录，`history`命令格式如下：\n\n  ```bash\n  [lux@evobot ~]$ history 1\n    308  history 1\n  ```\n\n- `{ read x cmd; echo \"$cmd\"; }`则表示将`history 1`的输出分别赋值给`x`和`cmd`，然后打印`cmd`变量的值；\n\n- 这样一个简单的用户历史命令审计系统就可以运行了，但是实际上用户仍然可以更改目录的权限，对命令历史进行更改。\n\n---\n\n","slug":"Shell基础(二)","published":1,"updated":"2018-06-02T13:01:29.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazd6003au1jxo6g15vg7","content":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p>本文继续介绍Shell的基础知识，涵盖管道符和作业控制的相关知识、Shell变量的相关知识以及系统环境变量配置文件的介绍。</p><a id=\"more\"></a><hr><h1 id=\"Shell基础-二\"><a href=\"#Shell基础-二\" class=\"headerlink\" title=\"Shell基础(二)\"></a>Shell基础(二)</h1><h2 id=\"管道符和作业控制\"><a href=\"#管道符和作业控制\" class=\"headerlink\" title=\"管道符和作业控制\"></a>管道符和作业控制</h2><ul><li>管道符<code>|</code>表示把一个文件或命令的输出内容传递给后面的命令，使用形式如<code>cat 1.txt | wc -l</code>或<code>cat 1.txt | grep &#39;aaa&#39;</code>;</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># cat setRps.log | grep 'queues'</span></span><br><span class=\"line\">eth:eth0  queues:1</span><br><span class=\"line\">total_nic_queues:1  flow_entries:4096</span><br></pre></td></tr></table></figure><ul><li>上面的命令输出结果，就只包含管道符后面的<code>grep</code>筛选的内容。</li><li>作业控制表示控制程序运行状态，如暂停，继续运行，使用<code>ctrl+z</code>可以暂停当前任务，如暂停vim任务：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># vi</span></span><br><span class=\"line\"></span><br><span class=\"line\">[1]+  已停止               vi</span><br></pre></td></tr></table></figure><ul><li>将已经暂停的任务调回前台，使用<code>fg</code>命令：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># fg</span></span><br><span class=\"line\">vi</span><br></pre></td></tr></table></figure><ul><li>当有多个任务被暂停时，使用命令<code>jobs</code>可以查看系统已经暂停的任务，显示出的任务会有一个序号，<code>fg</code>指定任务编号，即可将指定编号的任务调回前台：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># jobs</span></span><br><span class=\"line\">[1]-  已停止               vi aaa</span><br><span class=\"line\">[2]+  已停止               vi bbb</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># fg 2</span></span><br><span class=\"line\">vi bbb</span><br></pre></td></tr></table></figure><ul><li>除了<code>fg</code>将任务调回前台，还可以使用<code>bg</code>命令让任务后台运行，例如<code>vmstat 1</code>命令，会持续输出系统状态，我们将其设置为后台运行：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># jobs</span></span><br><span class=\"line\">[1]+  已停止               vi aaa</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># vmstat 1</span></span><br><span class=\"line\">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class=\"line\"> r  b   swpd   free   buff  cache   si   so    bi    bo   <span class=\"keyword\">in</span>   cs us sy id wa st</span><br><span class=\"line\"> 2  0      0 533176 225372 1026764    0    0     1    43  100  104  2  1 97  0  0</span><br><span class=\"line\"> 1  0      0 533176 225372 1026764    0    0     0     0  111  116  0  0 100  0  0</span><br><span class=\"line\">^Z</span><br><span class=\"line\">[2]+  已停止               vmstat 1</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># jobs</span></span><br><span class=\"line\">[1]-  已停止               vi aaa</span><br><span class=\"line\">[2]+  已停止               vmstat 1</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># bg 2</span></span><br><span class=\"line\">[2]+ vmstat 1 &amp;</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\">#  0  0      0 532648 225376 1027132    0    0     0    20  509  585  0  0 100  0  0</span></span><br><span class=\"line\"> 0  0      0 532648 225376 1027132    0    0     0    20  112  123  0  0 99  1  0</span><br><span class=\"line\"> 0  0      0 532648 225376 1027132    0    0     0     0   93  111  0  1 99  0  0</span><br><span class=\"line\"><span class=\"built_in\">jobs</span></span><br><span class=\"line\">[1]+  已停止               vi aaa</span><br><span class=\"line\">[2]-  运行中               vmstat 1 &amp;</span><br></pre></td></tr></table></figure><ul><li>虽然<code>vmstat 1</code>命令在后台运行也会在前台打印，但是执行<code>jobs</code>命令可以看到任务状态是<strong>运行中</strong>，并且在命令的结尾有一个<code>&amp;</code>符号，这表示任务在后台运行；</li><li>使用<code>fg</code>和<code>bg</code>命令，在不加任务编号的情况下，默认会调用最后一次暂停的任务；</li><li>在命令结尾加<code>&amp;</code>，可以让命令在后台运行，并且也可以使用<code>jobs</code>查看任务：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># sleep 500</span></span><br><span class=\"line\">^Z</span><br><span class=\"line\">[2]+  已停止               sleep 500</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># jobs</span></span><br><span class=\"line\">[1]-  已停止               vi aaa</span><br><span class=\"line\">[2]+  已停止               sleep 500</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># sleep 1000 &amp;</span></span><br><span class=\"line\">[3] 13618</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># jobs</span></span><br><span class=\"line\">[1]-  已停止               vi aaa</span><br><span class=\"line\">[2]+  已停止               sleep 500</span><br><span class=\"line\">[3]   运行中               sleep 1000 &amp;</span><br></pre></td></tr></table></figure><ul><li><code>jobs</code>命令只能查看当前tty的任务，另一个tty不能查看到其他tty的任务。</li></ul><h2 id=\"shell变量\"><a href=\"#shell变量\" class=\"headerlink\" title=\"shell变量\"></a>shell变量</h2><h3 id=\"查看变量\"><a href=\"#查看变量\" class=\"headerlink\" title=\"查看变量\"></a>查看变量</h3><ul><li><p>如以前说过的<code>PATH</code>，就是系统的一个环境变量，查看系统所以的变量，可以使用<code>env</code>命令查看，一般系统变量以大写字符串定义：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># env</span></span><br><span class=\"line\">XDG_SESSION_ID=5806</span><br><span class=\"line\">HOSTNAME=evobot</span><br><span class=\"line\">SHELL=/bin/bash</span><br><span class=\"line\">TERM=xterm-256color</span><br><span class=\"line\">HISTSIZE=3000</span><br><span class=\"line\">USER=root</span><br></pre></td></tr></table></figure></li><li><p><code>set</code>命令也可以查看变量，并且不仅列出系统变量，还会输出用户定义的变量：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># set</span></span><br><span class=\"line\">ABRT_DEBUG_LOG=/dev/null</span><br><span class=\"line\">BASH=/bin/bash</span><br><span class=\"line\">BASHOPTS=checkwinsize:cmdhist:expand_aliases:extglob:extquote:force_fignore:histappend:interactive_comments:login_shell:progcomp:promptvars:sourcepath</span><br><span class=\"line\">BASH_ALIASES=()</span><br><span class=\"line\">BASH_ARGC=()</span><br><span class=\"line\">BASH_ARGV=()</span><br><span class=\"line\">BASH_CMDS=()</span><br><span class=\"line\">BASH_COMPLETION_COMPAT_DIR=/etc/bash_completion.d</span><br><span class=\"line\">BASH_LINENO=()</span><br><span class=\"line\">BASH_REMATCH=()</span><br><span class=\"line\">BASH_SOURCE=()</span><br><span class=\"line\">BASH_VERSINFO=([0]=<span class=\"string\">\"4\"</span> [1]=<span class=\"string\">\"2\"</span> [2]=<span class=\"string\">\"46\"</span> [3]=<span class=\"string\">\"2\"</span> [4]=<span class=\"string\">\"release\"</span> [5]=<span class=\"string\">\"x86_64-redhat-linux-gnu\"</span>)</span><br><span class=\"line\">BASH_VERSION=<span class=\"string\">'4.2.46(2)-release'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id=\"自定义变量\"><a href=\"#自定义变量\" class=\"headerlink\" title=\"自定义变量\"></a>自定义变量</h3><ul><li><p>自定义变量直接使用<code>=</code>复制即可，查看变量使用<code>echo $[变量名]</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># myvar=abc</span></span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># echo $myvar</span></span><br><span class=\"line\">abc</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># set | grep 'myvar'</span></span><br><span class=\"line\">myvar=abc</span><br></pre></td></tr></table></figure></li><li><p>Shell自定义变量的命名规则必须由<strong>字母、数字或下划线</strong>组成，并且<strong>首位不能为数字</strong>；变量的值存在特殊符号时，值需要使用单引号括起来，单引号可以将特殊字符脱义，而双引号则不行：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># 1a=111</span></span><br><span class=\"line\">-bash: 1a=111: 未找到命令</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># a1=111</span></span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># echo $a1</span></span><br><span class=\"line\">111</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># a_2=zxcv</span></span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># echo $a_2</span></span><br><span class=\"line\">zxcv</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># var1=a b c</span></span><br><span class=\"line\">-bash: b: 未找到命令</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># var1='a b c'</span></span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># echo $var1</span></span><br><span class=\"line\">a b c</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># var2=\"a$bc\"</span></span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># echo $var2</span></span><br><span class=\"line\">a</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># var2='a$bc'</span></span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># echo $var2</span></span><br><span class=\"line\">a<span class=\"variable\">$bc</span></span><br></pre></td></tr></table></figure></li><li><p>变量之间可以进行累加，如将两个变量的值进行拼接：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># var3=1</span></span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># var4=2</span></span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># echo $var3$var4</span></span><br><span class=\"line\">12</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># echo \"a$var4\"c</span></span><br><span class=\"line\">a2c</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># echo \"a$bc\"\t# $后面被识别为变量bc</span></span><br><span class=\"line\">a</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h3><ul><li><p>使用命令<code>w</code>可以查看当前登录的客户端和用户，使用TTY表示，查看当前用户的TTY，可以查看变量<code>SSH_TTY</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@evobot ~]$ w</span><br><span class=\"line\"> 00:38:58 up 4 days, 3 min,  2 users,  load average: 0.00, 0.01, 0.05</span><br><span class=\"line\">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class=\"line\">lux      pts/0    118.113.33.203   23:36    1:06   0.17s  0.00s sshd: lux [priv]    </span><br><span class=\"line\">lux      pts/1    118.113.33.203   00:38    1.00s  0.03s  0.00s w</span><br><span class=\"line\"></span><br><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$SSH_TTY</span></span><br><span class=\"line\">/dev/pts/1</span><br></pre></td></tr></table></figure></li><li><p>普通的自定义变量只能在当前bash中访问，例如在当前shell中新建<code>bash</code>,新的bash中就无法再访问父shell的自定义变量：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$var1</span></span><br><span class=\"line\"></span><br><span class=\"line\">[lux@evobot ~]$ var1=abc</span><br><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$var1</span></span><br><span class=\"line\">abc</span><br><span class=\"line\">[lux@evobot ~]$ bash</span><br><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$var1</span></span><br><span class=\"line\"></span><br><span class=\"line\">[lux@evobot ~]$</span><br></pre></td></tr></table></figure></li><li><p>定义全局变量使用<code>export [变量名=值]</code>，需要注意的是，全局变量只能在子shell中生效，而子shell中的全局变量无法在父shell中生效，也不会在其他的tty中生效：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$SSH_TTY</span></span><br><span class=\"line\">/dev/pts/2</span><br><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$var1</span></span><br><span class=\"line\"></span><br><span class=\"line\">[lux@evobot ~]$ </span><br><span class=\"line\"></span><br><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">export</span> var2=cdef</span><br><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$var2</span></span><br><span class=\"line\">cdef</span><br><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$var2</span></span><br><span class=\"line\"></span><br><span class=\"line\">[lux@evobot ~]$</span><br></pre></td></tr></table></figure></li><li><p>使用<code>unset</code>命令可以取消变量，命令用法为<code>unset [变量名]</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$var1</span></span><br><span class=\"line\">centosvar</span><br><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">unset</span> var1</span><br><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$var1</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id=\"环境变量配置文件\"><a href=\"#环境变量配置文件\" class=\"headerlink\" title=\"环境变量配置文件\"></a>环境变量配置文件</h2><ul><li><p>Linux中的环境变量配置文件分为系统全局配置和用户配置，常见的配置文件有以下几个：</p><ul><li><p>系统层次环境变量配置文件：</p><blockquote><p><strong>/etc/profile</strong> 用户环境变量,登录、交互才执行;</p><p><strong>/etc/bashrc</strong> 用户不用登录，执行shell就生效；</p></blockquote></li><li><p>用户层次环境变量配置文件，每个用户的家目录下都会有以下文件：</p><blockquote><p><strong>~/.bashrc</strong></p><p><strong>~/.bash_profile</strong></p><p><strong>~/.bash_history</strong></p><p><strong>~/bash_logout</strong></p></blockquote></li><li><p>其中<code>profile</code>命名的文件是与登录相关的配置，<code>bashrc</code>命名的文件，则是与系统或用户执行命令和脚本相关的配置；</p></li></ul></li></ul><h3 id=\"bashrc和bash-profile的区别\"><a href=\"#bashrc和bash-profile的区别\" class=\"headerlink\" title=\"bashrc和bash_profile的区别\"></a>bashrc和bash_profile的区别</h3><ul><li>当直接在机器login界面登陆、使用ssh登陆或者su切换用户登陆时，<code>.bash_profile</code> 会被调用来初始化shell环境</li></ul><ul><li><p>查看<code>~/.bash_profile</code>的文件内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .bash_profile</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Get the aliases and functions</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f ~/.bashrc ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        . ~/.bashrc\t\t<span class=\"comment\"># 这里的.符号与source命令作用相同,.bash_profile会自动加载~/.bashrc;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># User specific environment and startup programs</span></span><br><span class=\"line\"></span><br><span class=\"line\">PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HOME</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH</span><br></pre></td></tr></table></figure></li><li><p>当不登陆系统而使用ssh直接在远端执行命令，.bashrc 会被调用，已经登陆系统后，每打开一个新的Terminal时，.bashrc 都会被再次调用，在<code>~/.bashrc</code>的文件内容中，又会自动加载<code>/etc/bashrc</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .bashrc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># User specific aliases and functions</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">alias</span> rm=<span class=\"string\">'rm -i'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> cp=<span class=\"string\">'cp -i'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> mv=<span class=\"string\">'mv -i'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Source global definitions</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f /etc/bashrc ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        . /etc/bashrc</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></li><li><p>所以配置环境变量，最好是卸载<code>.bashrc</code>文件中，因为不论是登陆还是不登陆，该文件都会被调用。</p></li></ul><h3 id=\"其他环境变量文件\"><a href=\"#其他环境变量文件\" class=\"headerlink\" title=\"其他环境变量文件\"></a>其他环境变量文件</h3><ul><li><p><code>～/.bash_logout</code>文件用来定义用户退出时系统所做的操作，如用户退出时清除命令历史，那么将相关命令写入文件即可；</p></li><li><p><code>PS1</code>变量使用来定义用户登录后的提示符格式的，如<code>[root@evobot ~]#</code>，这样的格式就是在<code>PS1</code>变量中定义的，<code>PS1</code>变量的定义在<code>/etc/bashrc</code>中：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo $PS1</span></span><br><span class=\"line\">[\\u@\\h \\W]\\$</span><br><span class=\"line\"><span class=\"comment\"># 这里\\u表示用户名,\\h表示hostname，\\W表示当前目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat /etc/bashrc | grep '&amp;&amp; PS1='</span></span><br><span class=\"line\">  [ <span class=\"string\">\"<span class=\"variable\">$PS1</span>\"</span> = <span class=\"string\">\"\\\\s-\\\\v\\\\\\$ \"</span> ] &amp;&amp; PS1=<span class=\"string\">\"[\\u@\\h \\W]\\\\$ \"</span></span><br></pre></td></tr></table></figure></li><li><p>如果将<code>\\W</code>改为<code>\\w</code>，则当前目录将显示绝对路径，其他能够更改的选项如下表格所示：</p></li></ul><style>table th:first-of-type{width:130px;text-align:center}</style><table><thead><tr><th style=\"text-align:center\">设置选项</th><th style=\"text-align:center\">作用</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>\\d</code></td><td style=\"text-align:center\">表示日期，格式为weekday month date</td></tr><tr><td style=\"text-align:center\"><code>\\H</code></td><td style=\"text-align:center\">完整的主机名</td></tr><tr><td style=\"text-align:center\"><code>\\h</code></td><td style=\"text-align:center\">主机的第一个名字</td></tr><tr><td style=\"text-align:center\"><code>\\t</code></td><td style=\"text-align:center\">24小时格式(HH:MM:SS)时间</td></tr><tr><td style=\"text-align:center\"><code>\\T</code></td><td style=\"text-align:center\">12小时格式</td></tr><tr><td style=\"text-align:center\"><code>\\A</code></td><td style=\"text-align:center\">24小时时间格式(HH:MM)，不包括秒</td></tr><tr><td style=\"text-align:center\"><code>\\u</code></td><td style=\"text-align:center\">当前用户名</td></tr><tr><td style=\"text-align:center\"><code>\\v</code></td><td style=\"text-align:center\">BASH的版本信息</td></tr><tr><td style=\"text-align:center\"><code>\\w</code></td><td style=\"text-align:center\">工作目录的绝对路径</td></tr><tr><td style=\"text-align:center\"><code>\\w</code></td><td style=\"text-align:center\">当前工作目录的目录名</td></tr><tr><td style=\"text-align:center\"><code>\\#</code></td><td style=\"text-align:center\">第几个命令</td></tr><tr><td style=\"text-align:center\"><code>\\$</code></td><td style=\"text-align:center\">提示字符，root用户为<code>#</code>，普通用户为<code>$</code></td></tr></tbody></table><ul><li>对于<code>PS1</code>，不仅可以设置格式，也可以设置颜色。</li><li>除了<code>PS1</code>之外，还有<code>PS2</code>变量，<code>PS2</code>变量用来定义进入shell下的程序提供的终端时显示的格式，默认<code>PS2</code>的变量值为<code>&gt;</code>。</li></ul><hr><h2 id=\"简单操作记录审计\"><a href=\"#简单操作记录审计\" class=\"headerlink\" title=\"简单操作记录审计\"></a>简单操作记录审计</h2><ul><li><p>在需要针对用户操作进行历史记录以便出现问题时查找责任人时，由于<code>history</code>命令用户能够自行删除，所以可以通过一些配置来记录用户的操作记录；</p></li><li><p>首先创建所需要的目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkdir -p /usr/local/records/</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># chmod 777 /usr/local/records/</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># chmod +t /usr/local/records/</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>/etc/profile</code>中添加如下的代码：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ ! -d /usr/<span class=\"built_in\">local</span>/records/<span class=\"variable\">$&#123;LOGNAME&#125;</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    mkdir -p /usr/<span class=\"built_in\">local</span>/records/<span class=\"variable\">$&#123;LOGNAME&#125;</span></span><br><span class=\"line\">    chmod 300 /usr/<span class=\"built_in\">local</span>/records/<span class=\"variable\">$&#123;LOGNAME&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> HISTORY_FILE=<span class=\"string\">\"/usr/local/records/<span class=\"variable\">$&#123;LOGNAME&#125;</span>/bash_history\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PROMPT_COMMAND=<span class=\"string\">'&#123; date +\"%Y-%m-%d %T ##### $(who am i |awk \"&#123;print \\$1\\\" \\\"\\$2\\\" \\\"\\$5&#125;\") #### $(history 1 | &#123; read x cmd; echo \"$cmd\";&#125;)\";&#125; &gt;&gt; $HISTORY_FILE'</span></span><br></pre></td></tr></table></figure></li><li><p>这样在用户登录时，会在<code>/usr/local/records</code>目录下创建一个与用户名同名的目录，目录下的<code>bash_history</code>会将用户的历史命令记录下来，其中<code>PROMPT_COMMAND</code>变量是在显示<code>PS1</code>变量之前执行的，所以这里用户每执行一次命令再显示下一个<code>PS1</code>之前，都会执行<code>PROMPT_COMMAND</code>的定义的内容；</p></li><li><p>这里定义的<code>PROMPT_COMMAND</code>的内容就是历史记录的格式，首先输出日期和时间，然后截取用户的用户名，tty和IP地址，<code>history 1 | { read x cmd; echo &quot;$cmd&quot;;}</code>表示取<code>history</code>命令的最后一个记录，<code>history</code>命令格式如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">history</span> 1</span><br><span class=\"line\">  308  <span class=\"built_in\">history</span> 1</span><br></pre></td></tr></table></figure></li><li><p><code>{ read x cmd; echo &quot;$cmd&quot;; }</code>则表示将<code>history 1</code>的输出分别赋值给<code>x</code>和<code>cmd</code>，然后打印<code>cmd</code>变量的值；</p></li><li><p>这样一个简单的用户历史命令审计系统就可以运行了，但是实际上用户仍然可以更改目录的权限，对命令历史进行更改。</p></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:39 GMT+0800 (CST) --><p>本文继续介绍Shell的基础知识，涵盖管道符和作业控制的相关知识、Shell变量的相关知识以及系统环境变量配置文件的介绍。</p>","more":"<hr><h1 id=\"Shell基础-二\"><a href=\"#Shell基础-二\" class=\"headerlink\" title=\"Shell基础(二)\"></a>Shell基础(二)</h1><h2 id=\"管道符和作业控制\"><a href=\"#管道符和作业控制\" class=\"headerlink\" title=\"管道符和作业控制\"></a>管道符和作业控制</h2><ul><li>管道符<code>|</code>表示把一个文件或命令的输出内容传递给后面的命令，使用形式如<code>cat 1.txt | wc -l</code>或<code>cat 1.txt | grep &#39;aaa&#39;</code>;</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># cat setRps.log | grep 'queues'</span></span><br><span class=\"line\">eth:eth0  queues:1</span><br><span class=\"line\">total_nic_queues:1  flow_entries:4096</span><br></pre></td></tr></table></figure><ul><li>上面的命令输出结果，就只包含管道符后面的<code>grep</code>筛选的内容。</li><li>作业控制表示控制程序运行状态，如暂停，继续运行，使用<code>ctrl+z</code>可以暂停当前任务，如暂停vim任务：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># vi</span></span><br><span class=\"line\"></span><br><span class=\"line\">[1]+  已停止               vi</span><br></pre></td></tr></table></figure><ul><li>将已经暂停的任务调回前台，使用<code>fg</code>命令：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># fg</span></span><br><span class=\"line\">vi</span><br></pre></td></tr></table></figure><ul><li>当有多个任务被暂停时，使用命令<code>jobs</code>可以查看系统已经暂停的任务，显示出的任务会有一个序号，<code>fg</code>指定任务编号，即可将指定编号的任务调回前台：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># jobs</span></span><br><span class=\"line\">[1]-  已停止               vi aaa</span><br><span class=\"line\">[2]+  已停止               vi bbb</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># fg 2</span></span><br><span class=\"line\">vi bbb</span><br></pre></td></tr></table></figure><ul><li>除了<code>fg</code>将任务调回前台，还可以使用<code>bg</code>命令让任务后台运行，例如<code>vmstat 1</code>命令，会持续输出系统状态，我们将其设置为后台运行：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># jobs</span></span><br><span class=\"line\">[1]+  已停止               vi aaa</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># vmstat 1</span></span><br><span class=\"line\">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class=\"line\"> r  b   swpd   free   buff  cache   si   so    bi    bo   <span class=\"keyword\">in</span>   cs us sy id wa st</span><br><span class=\"line\"> 2  0      0 533176 225372 1026764    0    0     1    43  100  104  2  1 97  0  0</span><br><span class=\"line\"> 1  0      0 533176 225372 1026764    0    0     0     0  111  116  0  0 100  0  0</span><br><span class=\"line\">^Z</span><br><span class=\"line\">[2]+  已停止               vmstat 1</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># jobs</span></span><br><span class=\"line\">[1]-  已停止               vi aaa</span><br><span class=\"line\">[2]+  已停止               vmstat 1</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># bg 2</span></span><br><span class=\"line\">[2]+ vmstat 1 &amp;</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\">#  0  0      0 532648 225376 1027132    0    0     0    20  509  585  0  0 100  0  0</span></span><br><span class=\"line\"> 0  0      0 532648 225376 1027132    0    0     0    20  112  123  0  0 99  1  0</span><br><span class=\"line\"> 0  0      0 532648 225376 1027132    0    0     0     0   93  111  0  1 99  0  0</span><br><span class=\"line\"><span class=\"built_in\">jobs</span></span><br><span class=\"line\">[1]+  已停止               vi aaa</span><br><span class=\"line\">[2]-  运行中               vmstat 1 &amp;</span><br></pre></td></tr></table></figure><ul><li>虽然<code>vmstat 1</code>命令在后台运行也会在前台打印，但是执行<code>jobs</code>命令可以看到任务状态是<strong>运行中</strong>，并且在命令的结尾有一个<code>&amp;</code>符号，这表示任务在后台运行；</li><li>使用<code>fg</code>和<code>bg</code>命令，在不加任务编号的情况下，默认会调用最后一次暂停的任务；</li><li>在命令结尾加<code>&amp;</code>，可以让命令在后台运行，并且也可以使用<code>jobs</code>查看任务：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># sleep 500</span></span><br><span class=\"line\">^Z</span><br><span class=\"line\">[2]+  已停止               sleep 500</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># jobs</span></span><br><span class=\"line\">[1]-  已停止               vi aaa</span><br><span class=\"line\">[2]+  已停止               sleep 500</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># sleep 1000 &amp;</span></span><br><span class=\"line\">[3] 13618</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># jobs</span></span><br><span class=\"line\">[1]-  已停止               vi aaa</span><br><span class=\"line\">[2]+  已停止               sleep 500</span><br><span class=\"line\">[3]   运行中               sleep 1000 &amp;</span><br></pre></td></tr></table></figure><ul><li><code>jobs</code>命令只能查看当前tty的任务，另一个tty不能查看到其他tty的任务。</li></ul><h2 id=\"shell变量\"><a href=\"#shell变量\" class=\"headerlink\" title=\"shell变量\"></a>shell变量</h2><h3 id=\"查看变量\"><a href=\"#查看变量\" class=\"headerlink\" title=\"查看变量\"></a>查看变量</h3><ul><li><p>如以前说过的<code>PATH</code>，就是系统的一个环境变量，查看系统所以的变量，可以使用<code>env</code>命令查看，一般系统变量以大写字符串定义：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># env</span></span><br><span class=\"line\">XDG_SESSION_ID=5806</span><br><span class=\"line\">HOSTNAME=evobot</span><br><span class=\"line\">SHELL=/bin/bash</span><br><span class=\"line\">TERM=xterm-256color</span><br><span class=\"line\">HISTSIZE=3000</span><br><span class=\"line\">USER=root</span><br></pre></td></tr></table></figure></li><li><p><code>set</code>命令也可以查看变量，并且不仅列出系统变量，还会输出用户定义的变量：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># set</span></span><br><span class=\"line\">ABRT_DEBUG_LOG=/dev/null</span><br><span class=\"line\">BASH=/bin/bash</span><br><span class=\"line\">BASHOPTS=checkwinsize:cmdhist:expand_aliases:extglob:extquote:force_fignore:histappend:interactive_comments:login_shell:progcomp:promptvars:sourcepath</span><br><span class=\"line\">BASH_ALIASES=()</span><br><span class=\"line\">BASH_ARGC=()</span><br><span class=\"line\">BASH_ARGV=()</span><br><span class=\"line\">BASH_CMDS=()</span><br><span class=\"line\">BASH_COMPLETION_COMPAT_DIR=/etc/bash_completion.d</span><br><span class=\"line\">BASH_LINENO=()</span><br><span class=\"line\">BASH_REMATCH=()</span><br><span class=\"line\">BASH_SOURCE=()</span><br><span class=\"line\">BASH_VERSINFO=([0]=<span class=\"string\">\"4\"</span> [1]=<span class=\"string\">\"2\"</span> [2]=<span class=\"string\">\"46\"</span> [3]=<span class=\"string\">\"2\"</span> [4]=<span class=\"string\">\"release\"</span> [5]=<span class=\"string\">\"x86_64-redhat-linux-gnu\"</span>)</span><br><span class=\"line\">BASH_VERSION=<span class=\"string\">'4.2.46(2)-release'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id=\"自定义变量\"><a href=\"#自定义变量\" class=\"headerlink\" title=\"自定义变量\"></a>自定义变量</h3><ul><li><p>自定义变量直接使用<code>=</code>复制即可，查看变量使用<code>echo $[变量名]</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># myvar=abc</span></span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># echo $myvar</span></span><br><span class=\"line\">abc</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># set | grep 'myvar'</span></span><br><span class=\"line\">myvar=abc</span><br></pre></td></tr></table></figure></li><li><p>Shell自定义变量的命名规则必须由<strong>字母、数字或下划线</strong>组成，并且<strong>首位不能为数字</strong>；变量的值存在特殊符号时，值需要使用单引号括起来，单引号可以将特殊字符脱义，而双引号则不行：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># 1a=111</span></span><br><span class=\"line\">-bash: 1a=111: 未找到命令</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># a1=111</span></span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># echo $a1</span></span><br><span class=\"line\">111</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># a_2=zxcv</span></span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># echo $a_2</span></span><br><span class=\"line\">zxcv</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># var1=a b c</span></span><br><span class=\"line\">-bash: b: 未找到命令</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># var1='a b c'</span></span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># echo $var1</span></span><br><span class=\"line\">a b c</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># var2=\"a$bc\"</span></span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># echo $var2</span></span><br><span class=\"line\">a</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># var2='a$bc'</span></span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># echo $var2</span></span><br><span class=\"line\">a<span class=\"variable\">$bc</span></span><br></pre></td></tr></table></figure></li><li><p>变量之间可以进行累加，如将两个变量的值进行拼接：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># var3=1</span></span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># var4=2</span></span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># echo $var3$var4</span></span><br><span class=\"line\">12</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># echo \"a$var4\"c</span></span><br><span class=\"line\">a2c</span><br><span class=\"line\">[root@evobot tmp]<span class=\"comment\"># echo \"a$bc\"\t# $后面被识别为变量bc</span></span><br><span class=\"line\">a</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h3><ul><li><p>使用命令<code>w</code>可以查看当前登录的客户端和用户，使用TTY表示，查看当前用户的TTY，可以查看变量<code>SSH_TTY</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@evobot ~]$ w</span><br><span class=\"line\"> 00:38:58 up 4 days, 3 min,  2 users,  load average: 0.00, 0.01, 0.05</span><br><span class=\"line\">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class=\"line\">lux      pts/0    118.113.33.203   23:36    1:06   0.17s  0.00s sshd: lux [priv]    </span><br><span class=\"line\">lux      pts/1    118.113.33.203   00:38    1.00s  0.03s  0.00s w</span><br><span class=\"line\"></span><br><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$SSH_TTY</span></span><br><span class=\"line\">/dev/pts/1</span><br></pre></td></tr></table></figure></li><li><p>普通的自定义变量只能在当前bash中访问，例如在当前shell中新建<code>bash</code>,新的bash中就无法再访问父shell的自定义变量：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$var1</span></span><br><span class=\"line\"></span><br><span class=\"line\">[lux@evobot ~]$ var1=abc</span><br><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$var1</span></span><br><span class=\"line\">abc</span><br><span class=\"line\">[lux@evobot ~]$ bash</span><br><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$var1</span></span><br><span class=\"line\"></span><br><span class=\"line\">[lux@evobot ~]$</span><br></pre></td></tr></table></figure></li><li><p>定义全局变量使用<code>export [变量名=值]</code>，需要注意的是，全局变量只能在子shell中生效，而子shell中的全局变量无法在父shell中生效，也不会在其他的tty中生效：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$SSH_TTY</span></span><br><span class=\"line\">/dev/pts/2</span><br><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$var1</span></span><br><span class=\"line\"></span><br><span class=\"line\">[lux@evobot ~]$ </span><br><span class=\"line\"></span><br><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">export</span> var2=cdef</span><br><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$var2</span></span><br><span class=\"line\">cdef</span><br><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$var2</span></span><br><span class=\"line\"></span><br><span class=\"line\">[lux@evobot ~]$</span><br></pre></td></tr></table></figure></li><li><p>使用<code>unset</code>命令可以取消变量，命令用法为<code>unset [变量名]</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$var1</span></span><br><span class=\"line\">centosvar</span><br><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">unset</span> var1</span><br><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$var1</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id=\"环境变量配置文件\"><a href=\"#环境变量配置文件\" class=\"headerlink\" title=\"环境变量配置文件\"></a>环境变量配置文件</h2><ul><li><p>Linux中的环境变量配置文件分为系统全局配置和用户配置，常见的配置文件有以下几个：</p><ul><li><p>系统层次环境变量配置文件：</p><blockquote><p><strong>/etc/profile</strong> 用户环境变量,登录、交互才执行;</p><p><strong>/etc/bashrc</strong> 用户不用登录，执行shell就生效；</p></blockquote></li><li><p>用户层次环境变量配置文件，每个用户的家目录下都会有以下文件：</p><blockquote><p><strong>~/.bashrc</strong></p><p><strong>~/.bash_profile</strong></p><p><strong>~/.bash_history</strong></p><p><strong>~/bash_logout</strong></p></blockquote></li><li><p>其中<code>profile</code>命名的文件是与登录相关的配置，<code>bashrc</code>命名的文件，则是与系统或用户执行命令和脚本相关的配置；</p></li></ul></li></ul><h3 id=\"bashrc和bash-profile的区别\"><a href=\"#bashrc和bash-profile的区别\" class=\"headerlink\" title=\"bashrc和bash_profile的区别\"></a>bashrc和bash_profile的区别</h3><ul><li>当直接在机器login界面登陆、使用ssh登陆或者su切换用户登陆时，<code>.bash_profile</code> 会被调用来初始化shell环境</li></ul><ul><li><p>查看<code>~/.bash_profile</code>的文件内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .bash_profile</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Get the aliases and functions</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f ~/.bashrc ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        . ~/.bashrc\t\t<span class=\"comment\"># 这里的.符号与source命令作用相同,.bash_profile会自动加载~/.bashrc;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># User specific environment and startup programs</span></span><br><span class=\"line\"></span><br><span class=\"line\">PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HOME</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH</span><br></pre></td></tr></table></figure></li><li><p>当不登陆系统而使用ssh直接在远端执行命令，.bashrc 会被调用，已经登陆系统后，每打开一个新的Terminal时，.bashrc 都会被再次调用，在<code>~/.bashrc</code>的文件内容中，又会自动加载<code>/etc/bashrc</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .bashrc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># User specific aliases and functions</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">alias</span> rm=<span class=\"string\">'rm -i'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> cp=<span class=\"string\">'cp -i'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> mv=<span class=\"string\">'mv -i'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Source global definitions</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f /etc/bashrc ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        . /etc/bashrc</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></li><li><p>所以配置环境变量，最好是卸载<code>.bashrc</code>文件中，因为不论是登陆还是不登陆，该文件都会被调用。</p></li></ul><h3 id=\"其他环境变量文件\"><a href=\"#其他环境变量文件\" class=\"headerlink\" title=\"其他环境变量文件\"></a>其他环境变量文件</h3><ul><li><p><code>～/.bash_logout</code>文件用来定义用户退出时系统所做的操作，如用户退出时清除命令历史，那么将相关命令写入文件即可；</p></li><li><p><code>PS1</code>变量使用来定义用户登录后的提示符格式的，如<code>[root@evobot ~]#</code>，这样的格式就是在<code>PS1</code>变量中定义的，<code>PS1</code>变量的定义在<code>/etc/bashrc</code>中：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># echo $PS1</span></span><br><span class=\"line\">[\\u@\\h \\W]\\$</span><br><span class=\"line\"><span class=\"comment\"># 这里\\u表示用户名,\\h表示hostname，\\W表示当前目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat /etc/bashrc | grep '&amp;&amp; PS1='</span></span><br><span class=\"line\">  [ <span class=\"string\">\"<span class=\"variable\">$PS1</span>\"</span> = <span class=\"string\">\"\\\\s-\\\\v\\\\\\$ \"</span> ] &amp;&amp; PS1=<span class=\"string\">\"[\\u@\\h \\W]\\\\$ \"</span></span><br></pre></td></tr></table></figure></li><li><p>如果将<code>\\W</code>改为<code>\\w</code>，则当前目录将显示绝对路径，其他能够更改的选项如下表格所示：</p></li></ul><style>table th:first-of-type{width:130px;text-align:center}</style><table><thead><tr><th style=\"text-align:center\">设置选项</th><th style=\"text-align:center\">作用</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>\\d</code></td><td style=\"text-align:center\">表示日期，格式为weekday month date</td></tr><tr><td style=\"text-align:center\"><code>\\H</code></td><td style=\"text-align:center\">完整的主机名</td></tr><tr><td style=\"text-align:center\"><code>\\h</code></td><td style=\"text-align:center\">主机的第一个名字</td></tr><tr><td style=\"text-align:center\"><code>\\t</code></td><td style=\"text-align:center\">24小时格式(HH:MM:SS)时间</td></tr><tr><td style=\"text-align:center\"><code>\\T</code></td><td style=\"text-align:center\">12小时格式</td></tr><tr><td style=\"text-align:center\"><code>\\A</code></td><td style=\"text-align:center\">24小时时间格式(HH:MM)，不包括秒</td></tr><tr><td style=\"text-align:center\"><code>\\u</code></td><td style=\"text-align:center\">当前用户名</td></tr><tr><td style=\"text-align:center\"><code>\\v</code></td><td style=\"text-align:center\">BASH的版本信息</td></tr><tr><td style=\"text-align:center\"><code>\\w</code></td><td style=\"text-align:center\">工作目录的绝对路径</td></tr><tr><td style=\"text-align:center\"><code>\\w</code></td><td style=\"text-align:center\">当前工作目录的目录名</td></tr><tr><td style=\"text-align:center\"><code>\\#</code></td><td style=\"text-align:center\">第几个命令</td></tr><tr><td style=\"text-align:center\"><code>\\$</code></td><td style=\"text-align:center\">提示字符，root用户为<code>#</code>，普通用户为<code>$</code></td></tr></tbody></table><ul><li>对于<code>PS1</code>，不仅可以设置格式，也可以设置颜色。</li><li>除了<code>PS1</code>之外，还有<code>PS2</code>变量，<code>PS2</code>变量用来定义进入shell下的程序提供的终端时显示的格式，默认<code>PS2</code>的变量值为<code>&gt;</code>。</li></ul><hr><h2 id=\"简单操作记录审计\"><a href=\"#简单操作记录审计\" class=\"headerlink\" title=\"简单操作记录审计\"></a>简单操作记录审计</h2><ul><li><p>在需要针对用户操作进行历史记录以便出现问题时查找责任人时，由于<code>history</code>命令用户能够自行删除，所以可以通过一些配置来记录用户的操作记录；</p></li><li><p>首先创建所需要的目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># mkdir -p /usr/local/records/</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># chmod 777 /usr/local/records/</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># chmod +t /usr/local/records/</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>/etc/profile</code>中添加如下的代码：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ ! -d /usr/<span class=\"built_in\">local</span>/records/<span class=\"variable\">$&#123;LOGNAME&#125;</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    mkdir -p /usr/<span class=\"built_in\">local</span>/records/<span class=\"variable\">$&#123;LOGNAME&#125;</span></span><br><span class=\"line\">    chmod 300 /usr/<span class=\"built_in\">local</span>/records/<span class=\"variable\">$&#123;LOGNAME&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> HISTORY_FILE=<span class=\"string\">\"/usr/local/records/<span class=\"variable\">$&#123;LOGNAME&#125;</span>/bash_history\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PROMPT_COMMAND=<span class=\"string\">'&#123; date +\"%Y-%m-%d %T ##### $(who am i |awk \"&#123;print \\$1\\\" \\\"\\$2\\\" \\\"\\$5&#125;\") #### $(history 1 | &#123; read x cmd; echo \"$cmd\";&#125;)\";&#125; &gt;&gt; $HISTORY_FILE'</span></span><br></pre></td></tr></table></figure></li><li><p>这样在用户登录时，会在<code>/usr/local/records</code>目录下创建一个与用户名同名的目录，目录下的<code>bash_history</code>会将用户的历史命令记录下来，其中<code>PROMPT_COMMAND</code>变量是在显示<code>PS1</code>变量之前执行的，所以这里用户每执行一次命令再显示下一个<code>PS1</code>之前，都会执行<code>PROMPT_COMMAND</code>的定义的内容；</p></li><li><p>这里定义的<code>PROMPT_COMMAND</code>的内容就是历史记录的格式，首先输出日期和时间，然后截取用户的用户名，tty和IP地址，<code>history 1 | { read x cmd; echo &quot;$cmd&quot;;}</code>表示取<code>history</code>命令的最后一个记录，<code>history</code>命令格式如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@evobot ~]$ <span class=\"built_in\">history</span> 1</span><br><span class=\"line\">  308  <span class=\"built_in\">history</span> 1</span><br></pre></td></tr></table></figure></li><li><p><code>{ read x cmd; echo &quot;$cmd&quot;; }</code>则表示将<code>history 1</code>的输出分别赋值给<code>x</code>和<code>cmd</code>，然后打印<code>cmd</code>变量的值；</p></li><li><p>这样一个简单的用户历史命令审计系统就可以运行了，但是实际上用户仍然可以更改目录的权限，对命令历史进行更改。</p></li></ul><hr><!-- rebuild by neat -->"},{"title":"Vim基础(一)","author":"Evobot","image":"http://p5qynomrl.bkt.clouddn.com/1523547969821sdmsr6q0.png?imageslim","abbrlink":"e6c82f61","date":"2018-04-12T14:23:48.000Z","_content":"\n\n\nVim是Linux下的一个文本编辑器，是vi的增强版，与一般概念的编辑器不同，vim具有一般模式、编辑模式和命令模式，不同的工作模式所能做的操作也不同，本文主要学习Vim的一些基础操作，如光标移动，复制粘贴。\n\n<!--more-->\n\n---\n\n# vim安装和介绍\n\n- 默认Centos没有安装vim，只有vi，安装vim，使用`yum install -y vim-enhanced`命令安装；\n\n- vim相比vi，默认是具备颜色高亮显示的，颜色会根据文件存储的位置、后缀名，文件内容等显示，下面两张图是分别使用vi和vim查看`/etc/passwd`文件的默认显示：\n\n  ![vi](http://p5qynomrl.bkt.clouddn.com/1523544542096lpvuekxi.png?imageslim)\n\n  ![vim](http://p5qynomrl.bkt.clouddn.com/1523544586409fzzd4jl7.png?imageslim)\n\n- vim分为一般模式，编辑模式和命令模式，默认使用vim打开一个文件时，是一般模式，进入编辑模式和命令模式，需要使用对应的按键，如编辑模式的`i`，命令模式的`:`；\n\n- vim的配置文件在`/etc/vimrc`中，同时在每个用户的家目录下同样存在`.vimrc`文件让用户分别保存自己的vim配置。\n\n---\n\n\n# vim一般模式\n\n## 光标移动操作\n\n- 一般模式下的常用的光标移动操作有下面几种：\n\n<style>\ntable th:first-of-type {\n    width: 180px;\n}\ntable th {\n    text-align: center;\n}\n</style>\n\n| 按键操作              | 作用            |\n| :-----------------: | :-------------: |\n| `[n]h`或左方向键         | 光标向左移动一个或n个字符 |\n| `[n]l`、空格或右方向建 | 光标向右移动一个或n个字符 |\n| `[n]k`或上方向键         | 光标向上移动一个或n个字符 |\n| `[n]j`或下方向键         | 光标向下移动一个或n个字符 |\n| Ctrl+f或PageUp键    | 屏幕向前移动一页      |\n| Ctrl+b或PageDown键  | 屏幕向后移动一页      |\n| 数字0或Shift+6       | 移动到光标所在行行首    |\n| Shift+4           | 移动到光标所在行行尾    |\n| gg                | 移动到文档首行       |\n| G                 | 移动到文档尾行       |\n| nG(n为任意数字)        | 移动到第n行        |\n\n\n## 复制粘贴和删除操作\n\n- 一般模式下可以对文档内容进行复制和粘贴，常用的按键操作如下表：\n\n\n| 按键操作   | 作用                      |\n| :------: | :-----------------------: |\n| x & X  | x表示向后删除一个字符，X表示向前删除一个字符 |\n| nx     | 向后删除n个字符                |\n| dd     | 删除/剪切光标所在行              |\n| ndd    | 删除/剪切光标所在行之后的n行         |\n| yy     | 复制光标所在行                 |\n| p      | 粘贴复制或剪切的内容到光标所在行之下      |\n| P      | 粘贴复制或剪切的内容到光标所在行之上      |\n| nyy    | 从光标所在行开始，向下复制n行         |\n| u      | 撤销上一步操作                 |\n| Ctrl+r | 还原撤销操作                  |\n| v      | 可视化选定内容，然后可以执行复制、粘贴操作   |\n\n---\n\n","source":"_posts/Vim基础(一).md","raw":"---\ntitle: Vim基础(一)\nauthor: Evobot\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\nimage: 'http://p5qynomrl.bkt.clouddn.com/1523547969821sdmsr6q0.png?imageslim'\nabbrlink: e6c82f61\ndate: 2018-04-12 22:23:48\n---\n\n\n\nVim是Linux下的一个文本编辑器，是vi的增强版，与一般概念的编辑器不同，vim具有一般模式、编辑模式和命令模式，不同的工作模式所能做的操作也不同，本文主要学习Vim的一些基础操作，如光标移动，复制粘贴。\n\n<!--more-->\n\n---\n\n# vim安装和介绍\n\n- 默认Centos没有安装vim，只有vi，安装vim，使用`yum install -y vim-enhanced`命令安装；\n\n- vim相比vi，默认是具备颜色高亮显示的，颜色会根据文件存储的位置、后缀名，文件内容等显示，下面两张图是分别使用vi和vim查看`/etc/passwd`文件的默认显示：\n\n  ![vi](http://p5qynomrl.bkt.clouddn.com/1523544542096lpvuekxi.png?imageslim)\n\n  ![vim](http://p5qynomrl.bkt.clouddn.com/1523544586409fzzd4jl7.png?imageslim)\n\n- vim分为一般模式，编辑模式和命令模式，默认使用vim打开一个文件时，是一般模式，进入编辑模式和命令模式，需要使用对应的按键，如编辑模式的`i`，命令模式的`:`；\n\n- vim的配置文件在`/etc/vimrc`中，同时在每个用户的家目录下同样存在`.vimrc`文件让用户分别保存自己的vim配置。\n\n---\n\n\n# vim一般模式\n\n## 光标移动操作\n\n- 一般模式下的常用的光标移动操作有下面几种：\n\n<style>\ntable th:first-of-type {\n    width: 180px;\n}\ntable th {\n    text-align: center;\n}\n</style>\n\n| 按键操作              | 作用            |\n| :-----------------: | :-------------: |\n| `[n]h`或左方向键         | 光标向左移动一个或n个字符 |\n| `[n]l`、空格或右方向建 | 光标向右移动一个或n个字符 |\n| `[n]k`或上方向键         | 光标向上移动一个或n个字符 |\n| `[n]j`或下方向键         | 光标向下移动一个或n个字符 |\n| Ctrl+f或PageUp键    | 屏幕向前移动一页      |\n| Ctrl+b或PageDown键  | 屏幕向后移动一页      |\n| 数字0或Shift+6       | 移动到光标所在行行首    |\n| Shift+4           | 移动到光标所在行行尾    |\n| gg                | 移动到文档首行       |\n| G                 | 移动到文档尾行       |\n| nG(n为任意数字)        | 移动到第n行        |\n\n\n## 复制粘贴和删除操作\n\n- 一般模式下可以对文档内容进行复制和粘贴，常用的按键操作如下表：\n\n\n| 按键操作   | 作用                      |\n| :------: | :-----------------------: |\n| x & X  | x表示向后删除一个字符，X表示向前删除一个字符 |\n| nx     | 向后删除n个字符                |\n| dd     | 删除/剪切光标所在行              |\n| ndd    | 删除/剪切光标所在行之后的n行         |\n| yy     | 复制光标所在行                 |\n| p      | 粘贴复制或剪切的内容到光标所在行之下      |\n| P      | 粘贴复制或剪切的内容到光标所在行之上      |\n| nyy    | 从光标所在行开始，向下复制n行         |\n| u      | 撤销上一步操作                 |\n| Ctrl+r | 还原撤销操作                  |\n| v      | 可视化选定内容，然后可以执行复制、粘贴操作   |\n\n---\n\n","slug":"Vim基础(一)","published":1,"updated":"2018-06-02T13:01:29.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazdd003du1jxx9k57ktr","content":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p>Vim是Linux下的一个文本编辑器，是vi的增强版，与一般概念的编辑器不同，vim具有一般模式、编辑模式和命令模式，不同的工作模式所能做的操作也不同，本文主要学习Vim的一些基础操作，如光标移动，复制粘贴。</p><a id=\"more\"></a><hr><h1 id=\"vim安装和介绍\"><a href=\"#vim安装和介绍\" class=\"headerlink\" title=\"vim安装和介绍\"></a>vim安装和介绍</h1><ul><li><p>默认Centos没有安装vim，只有vi，安装vim，使用<code>yum install -y vim-enhanced</code>命令安装；</p></li><li><p>vim相比vi，默认是具备颜色高亮显示的，颜色会根据文件存储的位置、后缀名，文件内容等显示，下面两张图是分别使用vi和vim查看<code>/etc/passwd</code>文件的默认显示：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1523544542096lpvuekxi.png?imageslim\" alt=\"vi\"></p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1523544586409fzzd4jl7.png?imageslim\" alt=\"vim\"></p></li><li><p>vim分为一般模式，编辑模式和命令模式，默认使用vim打开一个文件时，是一般模式，进入编辑模式和命令模式，需要使用对应的按键，如编辑模式的<code>i</code>，命令模式的<code>:</code>；</p></li><li><p>vim的配置文件在<code>/etc/vimrc</code>中，同时在每个用户的家目录下同样存在<code>.vimrc</code>文件让用户分别保存自己的vim配置。</p></li></ul><hr><h1 id=\"vim一般模式\"><a href=\"#vim一般模式\" class=\"headerlink\" title=\"vim一般模式\"></a>vim一般模式</h1><h2 id=\"光标移动操作\"><a href=\"#光标移动操作\" class=\"headerlink\" title=\"光标移动操作\"></a>光标移动操作</h2><ul><li>一般模式下的常用的光标移动操作有下面几种：</li></ul><style>table th:first-of-type{width:180px}table th{text-align:center}</style><table><thead><tr><th style=\"text-align:center\">按键操作</th><th style=\"text-align:center\">作用</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>[n]h</code>或左方向键</td><td style=\"text-align:center\">光标向左移动一个或n个字符</td></tr><tr><td style=\"text-align:center\"><code>[n]l</code>、空格或右方向建</td><td style=\"text-align:center\">光标向右移动一个或n个字符</td></tr><tr><td style=\"text-align:center\"><code>[n]k</code>或上方向键</td><td style=\"text-align:center\">光标向上移动一个或n个字符</td></tr><tr><td style=\"text-align:center\"><code>[n]j</code>或下方向键</td><td style=\"text-align:center\">光标向下移动一个或n个字符</td></tr><tr><td style=\"text-align:center\">Ctrl+f或PageUp键</td><td style=\"text-align:center\">屏幕向前移动一页</td></tr><tr><td style=\"text-align:center\">Ctrl+b或PageDown键</td><td style=\"text-align:center\">屏幕向后移动一页</td></tr><tr><td style=\"text-align:center\">数字0或Shift+6</td><td style=\"text-align:center\">移动到光标所在行行首</td></tr><tr><td style=\"text-align:center\">Shift+4</td><td style=\"text-align:center\">移动到光标所在行行尾</td></tr><tr><td style=\"text-align:center\">gg</td><td style=\"text-align:center\">移动到文档首行</td></tr><tr><td style=\"text-align:center\">G</td><td style=\"text-align:center\">移动到文档尾行</td></tr><tr><td style=\"text-align:center\">nG(n为任意数字)</td><td style=\"text-align:center\">移动到第n行</td></tr></tbody></table><h2 id=\"复制粘贴和删除操作\"><a href=\"#复制粘贴和删除操作\" class=\"headerlink\" title=\"复制粘贴和删除操作\"></a>复制粘贴和删除操作</h2><ul><li>一般模式下可以对文档内容进行复制和粘贴，常用的按键操作如下表：</li></ul><table><thead><tr><th style=\"text-align:center\">按键操作</th><th style=\"text-align:center\">作用</th></tr></thead><tbody><tr><td style=\"text-align:center\">x &amp; X</td><td style=\"text-align:center\">x表示向后删除一个字符，X表示向前删除一个字符</td></tr><tr><td style=\"text-align:center\">nx</td><td style=\"text-align:center\">向后删除n个字符</td></tr><tr><td style=\"text-align:center\">dd</td><td style=\"text-align:center\">删除/剪切光标所在行</td></tr><tr><td style=\"text-align:center\">ndd</td><td style=\"text-align:center\">删除/剪切光标所在行之后的n行</td></tr><tr><td style=\"text-align:center\">yy</td><td style=\"text-align:center\">复制光标所在行</td></tr><tr><td style=\"text-align:center\">p</td><td style=\"text-align:center\">粘贴复制或剪切的内容到光标所在行之下</td></tr><tr><td style=\"text-align:center\">P</td><td style=\"text-align:center\">粘贴复制或剪切的内容到光标所在行之上</td></tr><tr><td style=\"text-align:center\">nyy</td><td style=\"text-align:center\">从光标所在行开始，向下复制n行</td></tr><tr><td style=\"text-align:center\">u</td><td style=\"text-align:center\">撤销上一步操作</td></tr><tr><td style=\"text-align:center\">Ctrl+r</td><td style=\"text-align:center\">还原撤销操作</td></tr><tr><td style=\"text-align:center\">v</td><td style=\"text-align:center\">可视化选定内容，然后可以执行复制、粘贴操作</td></tr></tbody></table><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p>Vim是Linux下的一个文本编辑器，是vi的增强版，与一般概念的编辑器不同，vim具有一般模式、编辑模式和命令模式，不同的工作模式所能做的操作也不同，本文主要学习Vim的一些基础操作，如光标移动，复制粘贴。</p>","more":"<hr><h1 id=\"vim安装和介绍\"><a href=\"#vim安装和介绍\" class=\"headerlink\" title=\"vim安装和介绍\"></a>vim安装和介绍</h1><ul><li><p>默认Centos没有安装vim，只有vi，安装vim，使用<code>yum install -y vim-enhanced</code>命令安装；</p></li><li><p>vim相比vi，默认是具备颜色高亮显示的，颜色会根据文件存储的位置、后缀名，文件内容等显示，下面两张图是分别使用vi和vim查看<code>/etc/passwd</code>文件的默认显示：</p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1523544542096lpvuekxi.png?imageslim\" alt=\"vi\"></p><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1523544586409fzzd4jl7.png?imageslim\" alt=\"vim\"></p></li><li><p>vim分为一般模式，编辑模式和命令模式，默认使用vim打开一个文件时，是一般模式，进入编辑模式和命令模式，需要使用对应的按键，如编辑模式的<code>i</code>，命令模式的<code>:</code>；</p></li><li><p>vim的配置文件在<code>/etc/vimrc</code>中，同时在每个用户的家目录下同样存在<code>.vimrc</code>文件让用户分别保存自己的vim配置。</p></li></ul><hr><h1 id=\"vim一般模式\"><a href=\"#vim一般模式\" class=\"headerlink\" title=\"vim一般模式\"></a>vim一般模式</h1><h2 id=\"光标移动操作\"><a href=\"#光标移动操作\" class=\"headerlink\" title=\"光标移动操作\"></a>光标移动操作</h2><ul><li>一般模式下的常用的光标移动操作有下面几种：</li></ul><style>table th:first-of-type{width:180px}table th{text-align:center}</style><table><thead><tr><th style=\"text-align:center\">按键操作</th><th style=\"text-align:center\">作用</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>[n]h</code>或左方向键</td><td style=\"text-align:center\">光标向左移动一个或n个字符</td></tr><tr><td style=\"text-align:center\"><code>[n]l</code>、空格或右方向建</td><td style=\"text-align:center\">光标向右移动一个或n个字符</td></tr><tr><td style=\"text-align:center\"><code>[n]k</code>或上方向键</td><td style=\"text-align:center\">光标向上移动一个或n个字符</td></tr><tr><td style=\"text-align:center\"><code>[n]j</code>或下方向键</td><td style=\"text-align:center\">光标向下移动一个或n个字符</td></tr><tr><td style=\"text-align:center\">Ctrl+f或PageUp键</td><td style=\"text-align:center\">屏幕向前移动一页</td></tr><tr><td style=\"text-align:center\">Ctrl+b或PageDown键</td><td style=\"text-align:center\">屏幕向后移动一页</td></tr><tr><td style=\"text-align:center\">数字0或Shift+6</td><td style=\"text-align:center\">移动到光标所在行行首</td></tr><tr><td style=\"text-align:center\">Shift+4</td><td style=\"text-align:center\">移动到光标所在行行尾</td></tr><tr><td style=\"text-align:center\">gg</td><td style=\"text-align:center\">移动到文档首行</td></tr><tr><td style=\"text-align:center\">G</td><td style=\"text-align:center\">移动到文档尾行</td></tr><tr><td style=\"text-align:center\">nG(n为任意数字)</td><td style=\"text-align:center\">移动到第n行</td></tr></tbody></table><h2 id=\"复制粘贴和删除操作\"><a href=\"#复制粘贴和删除操作\" class=\"headerlink\" title=\"复制粘贴和删除操作\"></a>复制粘贴和删除操作</h2><ul><li>一般模式下可以对文档内容进行复制和粘贴，常用的按键操作如下表：</li></ul><table><thead><tr><th style=\"text-align:center\">按键操作</th><th style=\"text-align:center\">作用</th></tr></thead><tbody><tr><td style=\"text-align:center\">x &amp; X</td><td style=\"text-align:center\">x表示向后删除一个字符，X表示向前删除一个字符</td></tr><tr><td style=\"text-align:center\">nx</td><td style=\"text-align:center\">向后删除n个字符</td></tr><tr><td style=\"text-align:center\">dd</td><td style=\"text-align:center\">删除/剪切光标所在行</td></tr><tr><td style=\"text-align:center\">ndd</td><td style=\"text-align:center\">删除/剪切光标所在行之后的n行</td></tr><tr><td style=\"text-align:center\">yy</td><td style=\"text-align:center\">复制光标所在行</td></tr><tr><td style=\"text-align:center\">p</td><td style=\"text-align:center\">粘贴复制或剪切的内容到光标所在行之下</td></tr><tr><td style=\"text-align:center\">P</td><td style=\"text-align:center\">粘贴复制或剪切的内容到光标所在行之上</td></tr><tr><td style=\"text-align:center\">nyy</td><td style=\"text-align:center\">从光标所在行开始，向下复制n行</td></tr><tr><td style=\"text-align:center\">u</td><td style=\"text-align:center\">撤销上一步操作</td></tr><tr><td style=\"text-align:center\">Ctrl+r</td><td style=\"text-align:center\">还原撤销操作</td></tr><tr><td style=\"text-align:center\">v</td><td style=\"text-align:center\">可视化选定内容，然后可以执行复制、粘贴操作</td></tr></tbody></table><hr><!-- rebuild by neat -->"},{"title":"Vim基础(二)","author":"Evobot","abbrlink":"49f9b403","date":"2018-04-13T17:42:17.000Z","image":null,"_content":"\n\n\n![vim模式关系](http://p5qynomrl.bkt.clouddn.com/15236446713184315ls9p.png?imageslim)\n\n本文主要介绍Vim的编辑模式相关操作以及命令模式的相关操作。\n\n<!--more-->\n\n---\n\n\n\n# 编辑模式\n\n- 想要对文档的内容进行增加和编辑，在vim中需要进入编辑模式，进入编辑模式的常用操作如下表：\n\n\n<style>\ntable th:first-of-type {\n    width: 180px;\n}\ntable th {\n    text-align: center;\n}\n</style>\n\n\n| 按键操作 |        作用        |\n| :--: | :--------------: |\n|  i   |    在当前光标位置插入     |\n|  I   |    在光标所在行行首插入    |\n|  o   |   在光标所在行下方插入一行   |\n|  O   |    在光标所在行上方插入    |\n|  a   | 在当前光标位置后一个字符位置插入 |\n|  A   |  在当前光标所在行行尾插入编辑  |\n\n- 进入编辑模式后的编辑操作与普通编辑器操作相同。\n\n# 命令模式\n\n- vim的命令模式可以实现对文档保存，退出，搜索或是其他更加复杂的操作，命令模式的相关操作如下表：\n\n<style>\ntable th:first-of-type {\n    width: 180px;\n}\ntable th {\n    text-align: center;\n}\n</style>\n\n| 按键操作                  | 作用                                       |\n| -------------------- | --------------------------------------- |\n| /word                 | 向光标之后查找一个字符串word，按n向后继续搜索                |\n| ?word                 | 向光标之前查找一个字符串word，按n向前继续搜索                |\n| :n1,n2s/word1/word2/g | 将n1到n2的行中的word1全部替换为word2，结尾不加g，则只替换每一行第一个word1 |\n| :1,$s/word1/word2/g   | 将文档中所有的word1替换为word2，当word1中存在`/`时，可以使用`:1,$s#word1#word2#g` |\n| :w                    | 保存文本                                     |\n| :q                    | 退出vim                                    |\n| :w!                   | 强制保存，在root用户下，即使文本只读也可以保存                |\n| :q!                   | 不保存改动并强制退出                               |\n| :wq                   | 保存并退出，没有改动时也会修改文档mtime                   |\n| :set nu               | 显示行号                                     |\n| :set nonu             | 取消显示行号                                   |\n| :x                    | 未改动文档内容时，保存退出且不改动文档mtime                 |\n\n---\n\n","source":"_posts/Vim基础(二).md","raw":"---\ntitle: Vim基础(二)\nauthor: Evobot\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\nabbrlink: 49f9b403\ndate: 2018-04-14 01:42:17\nimage:\n---\n\n\n\n![vim模式关系](http://p5qynomrl.bkt.clouddn.com/15236446713184315ls9p.png?imageslim)\n\n本文主要介绍Vim的编辑模式相关操作以及命令模式的相关操作。\n\n<!--more-->\n\n---\n\n\n\n# 编辑模式\n\n- 想要对文档的内容进行增加和编辑，在vim中需要进入编辑模式，进入编辑模式的常用操作如下表：\n\n\n<style>\ntable th:first-of-type {\n    width: 180px;\n}\ntable th {\n    text-align: center;\n}\n</style>\n\n\n| 按键操作 |        作用        |\n| :--: | :--------------: |\n|  i   |    在当前光标位置插入     |\n|  I   |    在光标所在行行首插入    |\n|  o   |   在光标所在行下方插入一行   |\n|  O   |    在光标所在行上方插入    |\n|  a   | 在当前光标位置后一个字符位置插入 |\n|  A   |  在当前光标所在行行尾插入编辑  |\n\n- 进入编辑模式后的编辑操作与普通编辑器操作相同。\n\n# 命令模式\n\n- vim的命令模式可以实现对文档保存，退出，搜索或是其他更加复杂的操作，命令模式的相关操作如下表：\n\n<style>\ntable th:first-of-type {\n    width: 180px;\n}\ntable th {\n    text-align: center;\n}\n</style>\n\n| 按键操作                  | 作用                                       |\n| -------------------- | --------------------------------------- |\n| /word                 | 向光标之后查找一个字符串word，按n向后继续搜索                |\n| ?word                 | 向光标之前查找一个字符串word，按n向前继续搜索                |\n| :n1,n2s/word1/word2/g | 将n1到n2的行中的word1全部替换为word2，结尾不加g，则只替换每一行第一个word1 |\n| :1,$s/word1/word2/g   | 将文档中所有的word1替换为word2，当word1中存在`/`时，可以使用`:1,$s#word1#word2#g` |\n| :w                    | 保存文本                                     |\n| :q                    | 退出vim                                    |\n| :w!                   | 强制保存，在root用户下，即使文本只读也可以保存                |\n| :q!                   | 不保存改动并强制退出                               |\n| :wq                   | 保存并退出，没有改动时也会修改文档mtime                   |\n| :set nu               | 显示行号                                     |\n| :set nonu             | 取消显示行号                                   |\n| :x                    | 未改动文档内容时，保存退出且不改动文档mtime                 |\n\n---\n\n","slug":"Vim基础(二)","published":1,"updated":"2018-06-02T13:01:29.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazdi003gu1jx6ngu09rf","content":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p><img src=\"http://p5qynomrl.bkt.clouddn.com/15236446713184315ls9p.png?imageslim\" alt=\"vim模式关系\"></p><p>本文主要介绍Vim的编辑模式相关操作以及命令模式的相关操作。</p><a id=\"more\"></a><hr><h1 id=\"编辑模式\"><a href=\"#编辑模式\" class=\"headerlink\" title=\"编辑模式\"></a>编辑模式</h1><ul><li>想要对文档的内容进行增加和编辑，在vim中需要进入编辑模式，进入编辑模式的常用操作如下表：</li></ul><style>table th:first-of-type{width:180px}table th{text-align:center}</style><table><thead><tr><th style=\"text-align:center\">按键操作</th><th style=\"text-align:center\">作用</th></tr></thead><tbody><tr><td style=\"text-align:center\">i</td><td style=\"text-align:center\">在当前光标位置插入</td></tr><tr><td style=\"text-align:center\">I</td><td style=\"text-align:center\">在光标所在行行首插入</td></tr><tr><td style=\"text-align:center\">o</td><td style=\"text-align:center\">在光标所在行下方插入一行</td></tr><tr><td style=\"text-align:center\">O</td><td style=\"text-align:center\">在光标所在行上方插入</td></tr><tr><td style=\"text-align:center\">a</td><td style=\"text-align:center\">在当前光标位置后一个字符位置插入</td></tr><tr><td style=\"text-align:center\">A</td><td style=\"text-align:center\">在当前光标所在行行尾插入编辑</td></tr></tbody></table><ul><li>进入编辑模式后的编辑操作与普通编辑器操作相同。</li></ul><h1 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h1><ul><li>vim的命令模式可以实现对文档保存，退出，搜索或是其他更加复杂的操作，命令模式的相关操作如下表：</li></ul><style>table th:first-of-type{width:180px}table th{text-align:center}</style><table><thead><tr><th>按键操作</th><th>作用</th></tr></thead><tbody><tr><td>/word</td><td>向光标之后查找一个字符串word，按n向后继续搜索</td></tr><tr><td>?word</td><td>向光标之前查找一个字符串word，按n向前继续搜索</td></tr><tr><td>:n1,n2s/word1/word2/g</td><td>将n1到n2的行中的word1全部替换为word2，结尾不加g，则只替换每一行第一个word1</td></tr><tr><td>:1,$s/word1/word2/g</td><td>将文档中所有的word1替换为word2，当word1中存在<code>/</code>时，可以使用<code>:1,$s#word1#word2#g</code></td></tr><tr><td>:w</td><td>保存文本</td></tr><tr><td>:q</td><td>退出vim</td></tr><tr><td>:w!</td><td>强制保存，在root用户下，即使文本只读也可以保存</td></tr><tr><td>:q!</td><td>不保存改动并强制退出</td></tr><tr><td>:wq</td><td>保存并退出，没有改动时也会修改文档mtime</td></tr><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>取消显示行号</td></tr><tr><td>:x</td><td>未改动文档内容时，保存退出且不改动文档mtime</td></tr></tbody></table><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p><img src=\"http://p5qynomrl.bkt.clouddn.com/15236446713184315ls9p.png?imageslim\" alt=\"vim模式关系\"></p><p>本文主要介绍Vim的编辑模式相关操作以及命令模式的相关操作。</p>","more":"<hr><h1 id=\"编辑模式\"><a href=\"#编辑模式\" class=\"headerlink\" title=\"编辑模式\"></a>编辑模式</h1><ul><li>想要对文档的内容进行增加和编辑，在vim中需要进入编辑模式，进入编辑模式的常用操作如下表：</li></ul><style>table th:first-of-type{width:180px}table th{text-align:center}</style><table><thead><tr><th style=\"text-align:center\">按键操作</th><th style=\"text-align:center\">作用</th></tr></thead><tbody><tr><td style=\"text-align:center\">i</td><td style=\"text-align:center\">在当前光标位置插入</td></tr><tr><td style=\"text-align:center\">I</td><td style=\"text-align:center\">在光标所在行行首插入</td></tr><tr><td style=\"text-align:center\">o</td><td style=\"text-align:center\">在光标所在行下方插入一行</td></tr><tr><td style=\"text-align:center\">O</td><td style=\"text-align:center\">在光标所在行上方插入</td></tr><tr><td style=\"text-align:center\">a</td><td style=\"text-align:center\">在当前光标位置后一个字符位置插入</td></tr><tr><td style=\"text-align:center\">A</td><td style=\"text-align:center\">在当前光标所在行行尾插入编辑</td></tr></tbody></table><ul><li>进入编辑模式后的编辑操作与普通编辑器操作相同。</li></ul><h1 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h1><ul><li>vim的命令模式可以实现对文档保存，退出，搜索或是其他更加复杂的操作，命令模式的相关操作如下表：</li></ul><style>table th:first-of-type{width:180px}table th{text-align:center}</style><table><thead><tr><th>按键操作</th><th>作用</th></tr></thead><tbody><tr><td>/word</td><td>向光标之后查找一个字符串word，按n向后继续搜索</td></tr><tr><td>?word</td><td>向光标之前查找一个字符串word，按n向前继续搜索</td></tr><tr><td>:n1,n2s/word1/word2/g</td><td>将n1到n2的行中的word1全部替换为word2，结尾不加g，则只替换每一行第一个word1</td></tr><tr><td>:1,$s/word1/word2/g</td><td>将文档中所有的word1替换为word2，当word1中存在<code>/</code>时，可以使用<code>:1,$s#word1#word2#g</code></td></tr><tr><td>:w</td><td>保存文本</td></tr><tr><td>:q</td><td>退出vim</td></tr><tr><td>:w!</td><td>强制保存，在root用户下，即使文本只读也可以保存</td></tr><tr><td>:q!</td><td>不保存改动并强制退出</td></tr><tr><td>:wq</td><td>保存并退出，没有改动时也会修改文档mtime</td></tr><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>取消显示行号</td></tr><tr><td>:x</td><td>未改动文档内容时，保存退出且不改动文档mtime</td></tr></tbody></table><hr><!-- rebuild by neat -->"},{"title":"Windows10开机自启动Linux子系统和ssh服务","author":"Evobot","abbrlink":"5a8b1c0f","date":"2018-06-01T09:17:21.000Z","image":null,"_content":"\nwin10中的Linux子系统默认无法开机自启动，并且ssh服务也需要每次启动bash后手动启动，这里使用两个脚本来让Linux子系统在系统启动时也自行启动，并且将ssh服务打开。\n\n<!--more-->\n\n---\n\n# win10配置\n\n- 创建一个批处理脚本`wslstartup.bat`，写入如下内容：\n\n  ```powershell\n  powershell.exe -WindowStyle Hidden -c \"bash /init.sh \"\n  ```\n\n  - 这里表示隐藏窗口启动Linux子系统，并执行`/init.sh`shell脚本。\n\n- 打开运行，输入`shell:startup`回车，打开windows启动文件夹，将创建的批处理脚本移动进去。\n\n# Linux子系统配置\n- 在根目录创建`init.sh`shell脚本，写入以下内容：\n  ```bash\n  #!/bin/bash\n  pn=$(ps aux | grep -v grep |grep sshd|wc -l)\n  if [ \"${pn}\" != \"0\" ]; then\n      pid=$(ps aux|grep -v grep|grep /usr/sbin/sshd|awk '{print $2}')\n      echo \"123456\" | sudo -S kill $pid\n  fi\n  echo \"123456\" | sudo -S /usr/sbin/service ssh start\n  ```\n  - 其中`echo`的内容为默认登陆用户的登陆密码。\n- 更改脚本权限，和更改属主和属组为默认用户：\n  ```bash\n  # chmod 755 /init.sh\n  # chown user:user /init.sh\n  ```\n- 配置完成后，下次开机就可以自启动Linux子系统，并且将ssh服务启动，我们就可以在xshell等软件中登陆子系统了。\n---\n\n","source":"_posts/Windows10开机自启动Linux子系统和ssh服务.md","raw":"---\ntitle: Windows10开机自启动Linux子系统和ssh服务\nauthor: Evobot\nabbrlink: 5a8b1c0f\ndate: 2018-06-01 17:17:21\ncategories: Linux\ntags: [windows10,WSL]\nimage:\n---\n\nwin10中的Linux子系统默认无法开机自启动，并且ssh服务也需要每次启动bash后手动启动，这里使用两个脚本来让Linux子系统在系统启动时也自行启动，并且将ssh服务打开。\n\n<!--more-->\n\n---\n\n# win10配置\n\n- 创建一个批处理脚本`wslstartup.bat`，写入如下内容：\n\n  ```powershell\n  powershell.exe -WindowStyle Hidden -c \"bash /init.sh \"\n  ```\n\n  - 这里表示隐藏窗口启动Linux子系统，并执行`/init.sh`shell脚本。\n\n- 打开运行，输入`shell:startup`回车，打开windows启动文件夹，将创建的批处理脚本移动进去。\n\n# Linux子系统配置\n- 在根目录创建`init.sh`shell脚本，写入以下内容：\n  ```bash\n  #!/bin/bash\n  pn=$(ps aux | grep -v grep |grep sshd|wc -l)\n  if [ \"${pn}\" != \"0\" ]; then\n      pid=$(ps aux|grep -v grep|grep /usr/sbin/sshd|awk '{print $2}')\n      echo \"123456\" | sudo -S kill $pid\n  fi\n  echo \"123456\" | sudo -S /usr/sbin/service ssh start\n  ```\n  - 其中`echo`的内容为默认登陆用户的登陆密码。\n- 更改脚本权限，和更改属主和属组为默认用户：\n  ```bash\n  # chmod 755 /init.sh\n  # chown user:user /init.sh\n  ```\n- 配置完成后，下次开机就可以自启动Linux子系统，并且将ssh服务启动，我们就可以在xshell等软件中登陆子系统了。\n---\n\n","slug":"Windows10开机自启动Linux子系统和ssh服务","published":1,"updated":"2018-06-04T01:36:30.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazdn003ju1jxqhxrbvld","content":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p>win10中的Linux子系统默认无法开机自启动，并且ssh服务也需要每次启动bash后手动启动，这里使用两个脚本来让Linux子系统在系统启动时也自行启动，并且将ssh服务打开。</p><a id=\"more\"></a><hr><h1 id=\"win10配置\"><a href=\"#win10配置\" class=\"headerlink\" title=\"win10配置\"></a>win10配置</h1><ul><li><p>创建一个批处理脚本<code>wslstartup.bat</code>，写入如下内容：</p><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">powershell.exe -WindowStyle Hidden -c <span class=\"string\">\"bash /init.sh \"</span></span><br></pre></td></tr></table></figure><ul><li>这里表示隐藏窗口启动Linux子系统，并执行<code>/init.sh</code>shell脚本。</li></ul></li><li><p>打开运行，输入<code>shell:startup</code>回车，打开windows启动文件夹，将创建的批处理脚本移动进去。</p></li></ul><h1 id=\"Linux子系统配置\"><a href=\"#Linux子系统配置\" class=\"headerlink\" title=\"Linux子系统配置\"></a>Linux子系统配置</h1><ul><li><p>在根目录创建<code>init.sh</code>shell脚本，写入以下内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">pn=$(ps aux | grep -v grep |grep sshd|wc -l)</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$&#123;pn&#125;</span>\"</span> != <span class=\"string\">\"0\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    pid=$(ps aux|grep -v grep|grep /usr/sbin/sshd|awk <span class=\"string\">'&#123;print $2&#125;'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"123456\"</span> | sudo -S <span class=\"built_in\">kill</span> <span class=\"variable\">$pid</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"123456\"</span> | sudo -S /usr/sbin/service ssh start</span><br></pre></td></tr></table></figure><ul><li>其中<code>echo</code>的内容为默认登陆用户的登陆密码。</li></ul></li><li><p>更改脚本权限，和更改属主和属组为默认用户：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># chmod 755 /init.sh</span></span><br><span class=\"line\"><span class=\"comment\"># chown user:user /init.sh</span></span><br></pre></td></tr></table></figure></li><li><p>配置完成后，下次开机就可以自启动Linux子系统，并且将ssh服务启动，我们就可以在xshell等软件中登陆子系统了。</p></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p>win10中的Linux子系统默认无法开机自启动，并且ssh服务也需要每次启动bash后手动启动，这里使用两个脚本来让Linux子系统在系统启动时也自行启动，并且将ssh服务打开。</p>","more":"<hr><h1 id=\"win10配置\"><a href=\"#win10配置\" class=\"headerlink\" title=\"win10配置\"></a>win10配置</h1><ul><li><p>创建一个批处理脚本<code>wslstartup.bat</code>，写入如下内容：</p><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">powershell.exe -WindowStyle Hidden -c <span class=\"string\">\"bash /init.sh \"</span></span><br></pre></td></tr></table></figure><ul><li>这里表示隐藏窗口启动Linux子系统，并执行<code>/init.sh</code>shell脚本。</li></ul></li><li><p>打开运行，输入<code>shell:startup</code>回车，打开windows启动文件夹，将创建的批处理脚本移动进去。</p></li></ul><h1 id=\"Linux子系统配置\"><a href=\"#Linux子系统配置\" class=\"headerlink\" title=\"Linux子系统配置\"></a>Linux子系统配置</h1><ul><li><p>在根目录创建<code>init.sh</code>shell脚本，写入以下内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">pn=$(ps aux | grep -v grep |grep sshd|wc -l)</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$&#123;pn&#125;</span>\"</span> != <span class=\"string\">\"0\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    pid=$(ps aux|grep -v grep|grep /usr/sbin/sshd|awk <span class=\"string\">'&#123;print $2&#125;'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"123456\"</span> | sudo -S <span class=\"built_in\">kill</span> <span class=\"variable\">$pid</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"123456\"</span> | sudo -S /usr/sbin/service ssh start</span><br></pre></td></tr></table></figure><ul><li>其中<code>echo</code>的内容为默认登陆用户的登陆密码。</li></ul></li><li><p>更改脚本权限，和更改属主和属组为默认用户：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># chmod 755 /init.sh</span></span><br><span class=\"line\"><span class=\"comment\"># chown user:user /init.sh</span></span><br></pre></td></tr></table></figure></li><li><p>配置完成后，下次开机就可以自启动Linux子系统，并且将ssh服务启动，我们就可以在xshell等软件中登陆子系统了。</p></li></ul><hr><!-- rebuild by neat -->"},{"title":"Centos软件包的安装与卸载(二)","author":"Evobot","abbrlink":"85ee13c4","date":"2018-04-18T15:29:28.000Z","image":null,"_content":"\n\n\n本文继续介绍关于yum的配置，如更换国内yum源以提高下载速度，和使用yum下载rpm软件包；另外将介绍如何使用源码包安装软件。\n\n<!--more-->\n\n---\n\n# yum相关配置\n\n## 更换yum源\n\n- 由于yum配置的源默认为国外的源，访问速度较慢，所以我们可以将yum源替换为国内的源；\n- 首先将上篇文章备份的`yum.repos.d`目录恢复，然后删除目录下的`CentOS7-Base.repo`文件：\n\n```bash\n[root@localhost ~]# rm -rf /etc/yum.repos.d\n[root@localhost ~]# mv /etc/yum.repos.d.bak/ /etc/yum.repos.d\n\n[root@localhost ~]# rm -f /etc/yum.repos.d/CentOS-Base.repo\n```\n\n- 然后下载网易163的yum源文件，可以使用`wget`命令或者`curl`命令，由于默认`wget`命令没有安装，并且已经删除了yum源文件，所以使用`curl -O \thttp://mirrors.163.com/.help/CentOS7-Base-163.repo`下载文件：\n\n```bash\n[root@localhost ~]# cd /etc/yum.repos.d/\n[root@localhost yum.repos.d]# curl -O http://mirrors.163.com/.help/CentOS7-Base-163.repo\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  1572  100  1572    0     0   8253      0 --:--:-- --:--:-- --:--:--  8273\n[root@localhost yum.repos.d]# ls\nCentOS7-Base-163.repo  CentOS-Debuginfo.repo  CentOS-Media.repo    CentOS-Vault.repo\nCentOS-CR.repo         CentOS-fasttrack.repo  CentOS-Sources.repo\n```\n\n- 然后使用命令`yum repolist`或`yum repolist all`查看新的yum源是否启用：\n\n```bash\n[root@localhost yum.repos.d]# yum repolist\n已加载插件：fastestmirror\nLoading mirror speeds from cached hostfile\n源标识                                源名称                                             状态\nbase/7/x86_64                         CentOS-7 - Base - 163.com                          9,591\nextras/7/x86_64                       CentOS-7 - Extras - 163.com                          448\nupdates/7/x86_64                      CentOS-7 - Updates - 163.com                       2,416\nrepolist: 12,455\n```\n\n- 接着使用`yum clean all`情况缓存，即可正常使用新的yum源，使用`yum install -y wget`安装`wget`命令。\n\n## 安装扩展源\n\n- 有些软件包没有在yum源内，这时需要为yum安装扩展源epel；\n- 安装扩展源epel可以直接使用`yum install -y epel-release`命令，安装之后在`/etc/yum.repo.d/`目录下会下载两个epel仓库文件：\n\n```bash\n[root@evobot yum.repos.d]# ls\nCentOS-Base.repo       CentOS-Epel.repo       CentOS-Sources.repo  epel-testing.repo\nCentOS-CR.repo         CentOS-fasttrack.repo  CentOS-Vault.repo\nCentOS-Debuginfo.repo  CentOS-Media.repo      epel.repo\n```\n\n- 再使用`yum repolist`查看epel仓库已经被启用：\n\n```bash\n[root@localhost yum.repos.d]# yum repolist \n已加载插件：fastestmirror\nepel/x86_64/metalink                                                   | 6.4 kB  00:00:00     \nepel                                                                   | 4.7 kB  00:00:00     \n(1/3): epel/x86_64/group_gz                                            | 266 kB  00:00:01     \n(2/3): epel/x86_64/updateinfo                                          | 915 kB  00:00:01     \n(3/3): epel/x86_64/primary_db                                          | 6.3 MB  00:00:02     \nLoading mirror speeds from cached hostfile\n * epel: mirrors.ustc.edu.cn\n源标识                       源名称                                                     状态\nbase/7/x86_64                CentOS-7 - Base - 163.com                                   9,591\nepel/x86_64                  Extra Packages for Enterprise Linux 7 - x86_64             12,491\nextras/7/x86_64              CentOS-7 - Extras - 163.com                                   448\nupdates/7/x86_64             CentOS-7 - Updates - 163.com                                2,416\nrepolist: 24,946\n```\n\n## 下载rpm包\n\n- 使用yum可以将仓库内的rpm软件包下载到本地，但下载的软件包必须是未被安装的软件包，否则会提示软件包已安装，不做处理；\n- 使用`yum install -y [包名] --downloadonly`命令就可以将rpm软件包下载到本地：\n\n```bash\n[root@evobot yum.repos.d]# yum install -y zsh --downloadonly\n已加载插件：fastestmirror, langpacks\nRepository epel is listed more than once in the configuration\nLoading mirror speeds from cached hostfile\n正在解决依赖关系\n--> 正在检查事务\n---> 软件包 zsh.x86_64.0.5.0.2-28.el7 将被 安装\n--> 解决依赖关系完成\n\n依赖关系解决\n\n==============================================================================================\n Package            架构                  版本                        源                 大小\n==============================================================================================\n正在安装:\n zsh                x86_64                5.0.2-28.el7                os                2.4 M\n\n事务概要\n==============================================================================================\n安装  1 软件包\n\n总下载量：2.4 M\n安装大小：5.6 M\nBackground downloading packages, then exiting:\nzsh-5.0.2-28.el7.x86_64.rpm                                            | 2.4 MB  00:00:00     \nexiting because \"Download Only\" specified\n```\n\n- 下载的软件包存放在系统`/var/cache/yum/x86_64/7/`目录下的对应的源的`Packages`目录下，软件包是从哪个源下载的，从之前的下载命令可以看到软件包的源，如上面的zsh软件包的源是`os`，所以下载的软件包在`var/cache/yum/x86_64/7/os/packages/`目录下：\n\n```bash\n[root@evobot yum.repos.d]# cd /var/cache/yum/x86_64/7/os/packages/\n[root@evobot packages]# ls\nzsh-5.0.2-28.el7.x86_64.rpm\n```\n\n- 也可以在下载时指定软件包下载的路径，在下载命令后使用`--downloaddir=/dirpath`选项即可：\n\n```bash\n[root@evobot packages]# yum install -y zsh --downloadonly --downloaddir=/tmp/\n已加载插件：fastestmirror, langpacks\nRepository epel is listed more than once in the configuration\nLoading mirror speeds from cached hostfile\n正在解决依赖关系\n--> 正在检查事务\n---> 软件包 zsh.x86_64.0.5.0.2-28.el7 将被 安装\n--> 解决依赖关系完成\n\n依赖关系解决\n\n==============================================================================================\n Package            架构                  版本                        源                 大小\n==============================================================================================\n正在安装:\n zsh                x86_64                5.0.2-28.el7                os                2.4 M\n\n事务概要\n==============================================================================================\n安装  1 软件包\n\n总下载量：2.4 M\n安装大小：5.6 M\nBackground downloading packages, then exiting:\nexiting because \"Download Only\" specified\n[root@evobot packages]# ls /tmp/\nyum_save_tx.2018-04-19.00-20.1V7tv9.yumtx  zsh-5.0.2-28.el7.x86_64.rpm\n```\n\n- 针对已安装的包想要下载rpm包，可以使用`yum reinstall`命令来下载，其余选项与前面的命令相同：\n\n```bash\n[root@evobot packages]# yum install -y vim-enhanced --downloadonly --downloaddir=/tmp\n已加载插件：fastestmirror, langpacks\nRepository epel is listed more than once in the configuration\nLoading mirror speeds from cached hostfile\n软件包 2:vim-enhanced-7.4.160-2.el7.x86_64 已安装并且是最新版本\n无须任何处理\n\n[root@evobot packages]# yum reinstall -y vim-enhanced --downloadonly --downloaddir=/tmp\n已加载插件：fastestmirror, langpacks\nRepository epel is listed more than once in the configuration\nLoading mirror speeds from cached hostfile\n正在解决依赖关系\n--> 正在检查事务\n---> 软件包 vim-enhanced.x86_64.2.7.4.160-2.el7 将被 已重新安装\n--> 解决依赖关系完成\n\n依赖关系解决\n\n==============================================================================================\n Package                  架构               版本                        源              大小\n==============================================================================================\n重新安装:\n vim-enhanced             x86_64             2:7.4.160-2.el7             os             1.0 M\n\n事务概要\n==============================================================================================\n重新安装  1 软件包\n\n总下载量：1.0 M\n安装大小：2.2 M\nBackground downloading packages, then exiting:\nvim-enhanced-7.4.160-2.el7.x86_64.rpm                                  | 1.0 MB  00:00:00     \nexiting because \"Download Only\" specified\n\n[root@evobot packages]# ls /tmp/\nvim-enhanced-7.4.160-2.el7.x86_64.rpm      yum_save_tx.2018-04-19.00-23.Hu2DEg.yumtx\n```\n\n## yum源优先级\n\n- 设置yum源的优先级，需要安装`yum-plugin-priorities`软件包；\n- 确认`/etc//etc/yum/pluginconf.d/priorities.conf`文件内容如下：\n\n```bash\n[main]\nenabled = 1\n```\n\n- 要在 yum 检查更新时获取权限较低的源中较新的软件，可在上面的文件中加入`check_obsoletes=1 `\n- 然后在`yum.repos.d`目录下的`.repo`文件中加入`priority=N  `指定优先级，其中N为1~99，默认为99，N越小权限越高；\n- 添加优先级的形式如下：\n\n```bash\n[base]\nname=CentOS-$releasever - Base\nmirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=os\n#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/\ngpgcheck=1\ngpgkey=http://mirror.centos.org/centos/RPM-GPG-KEY-centos4\npriority=1\n#released updates\n[updates]\nname=CentOS-$releasever - Updates\nmirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=updates\n#baseurl=http://mirror.centos.org/centos/$releasever/updates/$basearch/\ngpgcheck=1\ngpgkey=http://mirror.centos.org/centos/RPM-GPG-KEY-centos4\npriority=1\n[contrib]\nname=CentOS-$releasever - Contrib\nmirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=contrib\n#baseurl=http://mirror.centos.org/centos/$releasever/contrib/$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=http://mirror.centos.org/centos/RPM-GPG-KEY-centos4\npriority=2\n```\n\n- 官方建议的仓库优先级如下：\n\n```bash\n[base], [addons], [updates], [extras] ... priority=1\n[centosplus] priority=1 (same priority as base and updates) but should be left disabled\n[contrib] ... priority=2\nThird Party Repos ... priority=N  (where N is > 10 and based on your preference)\n```\n\n---\n\n# 安装源码包\n\n- 安装源码包，需要先下载软件包的源代码，建议下载的源码包保存在`/usr/local/src`目录下；\n- 这里以Apache源码包安装为例，首先下载Apache的源码包并解压：\n\n```bash\n[root@evobot src]# wget http://mirrors.cnnic.cn/apache/httpd/httpd-2.4.33.tar.gz\n[root@evobot src]# tar zxvf httpd-2.4.33.tar.gz \n\n[root@evobot src]# cd httpd-2.4.33/\n[root@evobot httpd-2.4.33]# ls\nABOUT_APACHE     BuildBin.dsp    emacs-style     LAYOUT        NOTICE            srclib\nacinclude.m4     buildconf       httpd.dep       libhttpd.dep  NWGNUmakefile     support\nApache-apr2.dsw  CHANGES         httpd.dsp       libhttpd.dsp  os                test\nApache.dsw       CMakeLists.txt  httpd.mak       libhttpd.mak  README            VERSIONING\napache_probes.d  config.layout   httpd.spec      LICENSE       README.cmake\nap.d             configure       include         Makefile.in   README.platforms\nbuild            configure.in    INSTALL         Makefile.win  ROADMAP\nBuildAll.dsp     docs            InstallBin.dsp  modules       server\n```\n\n- 查看解压出的文件，一般源码包都会包含`INSTALL`和`README`文件，其中`README`一般是介绍软件包，`INSTALL`文件则是源码包安装方法；\n- 在`INSTALL`中，安装Apache的步骤如下：\n\n```bash\n$ ./configure --prefix=PREFIX\t# PREFIX是指安装路径，其余选项可以参考INSTALL文件\n$ make\n$ make install\n$ PREFIX/bin/apachectl start\n```\n\n- 执行`./configure`时，如果无法判断命令执行结果是否正常，可以在运行完之后运行`echo $?`，如果返回值为`0`，则命令执行正确，否则命令执行错误；\n\n```bash\n[root@evobot httpd-2.4.33]# ./configure --prefix=/usr/local/apache\nchecking for chosen layout... Apache\nchecking for working mkdir -p... yes\nchecking for grep that handles long lines and -e... /bin/grep\nchecking for egrep... /bin/grep -E\nchecking build system type... x86_64-pc-linux-gnu\nchecking host system type... x86_64-pc-linux-gnu\nchecking target system type... x86_64-pc-linux-gnu\nconfigure: \nconfigure: Configuring Apache Portable Runtime library...\nconfigure: \nchecking for APR... no\nconfigure: error: APR not found.  Please read the documentation.\n[root@evobot httpd-2.4.33]# echo $?\n1\n# 返回值不为0，命令执行错误，报错为APR未找到，需要下载APR\n```\n\n- Apache编译依赖APR包，所以再次下载`apr`和`apr-util`源码包解压到Apache源码包内的`srclib`目录内，另外还需要安装`gcc`、`pcre-devel.x86_64`和`expat-devel.x86_64`软件包：\n\n```bash\n[root@evobot src]# wget http://mirrors.cnnic.cn/apache/apr/apr-1.6.3.tar.gz\n[root@evobot src]# wget http://mirrors.cnnic.cn/apache/apr/apr-util-1.6.1.tar.bz2\n[root@evobot src]# tar zxvf apr-1.6.3.tar.gz -C httpd-2.4.33/srclib/apr\n[root@evobot src]# tar jxvf apr-util-1.6.1.tar.bz2 -C httpd-2.4.33/srclib/apr-util\n```\n\n- 添加`apr`选项并重新编译安装：\n\n```bash\n[root@evobot httpd-2.4.33]# ./configure --prefix=/usr/local/apache  --with-included-apr\n[root@evobot httpd-2.4.33]# make\n[root@evobot httpd-2.4.33]# make install\n```\n\n- 安装完成并没有报错后，可以查看安装目录下的文件：\n\n```bash\n[root@evobot local]# ls apache/\nbin  build  cgi-bin  conf  error  htdocs  icons  include  lib  logs  man  manual  modules\n```\n\n- 源码包安装相较于yum安装，可以指定安装路径，并且卸载时只需要直接删除软件安装目录即可。\n\n---\n\n# rpm打包\n\n## rpm打包命令\n\n- 将源码包打包为rpm包，可以方便将软件包移植到其他机器，方便使用；\n- 在Centos7中，将源码包打包为rpm包，需要使用`yum`安装`rpmdevtools`软件包，然后执行`rpmdev-setuptree`在家目录生成rpm打包目录：\n\n```bash\n[root@localhost ~]# yum install -y rpmdevtools\n[root@localhost local]# rpmdev-setuptree\t# 将在家目录生成rpmbuild目录\n```\n\n- 在`rpmbuild`目录下，会有五个子目录，作用如下：\n\n|   目录名   |         作用          |\n| :-----: | :-----------------: |\n|  BUILD  |     编译时所用的暂存目录      |\n|  RPMS   |     存放打包好的rpm包      |\n| SOURCES |     放置源码包和补丁文件      |\n|  SPECS  | 放置spec模板文件，用于生成rpm包 |\n|  SRPMS  |      放置rpm源码包       |\n\n## spec文件说明\n\n- rpm打包的关键就在于sepc文件的编写，需要为要打包的源码生成一个新的spec文件，使用命令`rpmdev-newspec [filename.spec]`生成，然后将源码包放到SOURCES目录：\n\n```bash\n[root@localhost rpmbuild]# cd SPECS/\t# 进入SPEC目录\n[root@localhost SPECS]# rpmdev-newspec http-2.4.33.spec\t#生成spec模板\nhttp-2.4.33.spec created; type minimal, rpm version >= 4.11.\n[root@localhost SPECS]# ls\nhttp-2.4.33.spec\n[root@localhost SPECS]# cp /usr/local/src/httpd-2.4.33.tar.gz ../SOURCES/\t# 复制源码包到SOURCES目录\n```\n\n- 由于Apache2.4.33依赖APR软件包，所以需要将apr和apr-util源码包也放入SOURCES目录下以便使用；\n- spec文件的格式和每行作用如下：\n\n```\nName:           http-2.4.33\t# 软件名称\nVersion:\t\t\t# 软件版本\nRelease:        1%{?dist}\t# 发布次数\nSummary:\t\t\t# 软件说明\nLicense:\t\t\t# 授权模式，如GPL，即自由软件\nURL:\t\t\t\t# 源码包URL地址，可随意填写\nSource0:\t\t\t# 源码包名字，可以指定多个\nBuildRequires:\t\t# 编译过程依赖的工具\nRequires:\t\t\t# 打包生成的rpm包安装时所以来的软件包\n\n%description\t\t# 软件描述\n\n%prep\t\t\t\t# 打包准备工作，如创建目录，解压源码包等\n%setup -q\t\t\t# 自动解压缩源码包并进入解压出的目录\n\n%build\t\t\t\t# 在BUILD目录编译时的编译命令，如configure和make\n%configure\nmake %{?_smp_mflags}\n\n%install\t\t\t# 安装到BUILDROOT虚拟目录的操作命令，如make install\nrm -rf $RPM_BUILD_ROOT\n%make_install\n\n%files\t\t\t\t# 需要添加到rpm包中的文件\n%doc\n\n%changelog\t\t\t# 更新记录\n\n# 最终生成的rpm包以{Name}-{Version}-{Release}-{BuildArch}.rpm命名\n```\n\n- 在上面的配置文件选项中，有些如`%configure`这样的字符串，这是打包定义的变量，定义变量的文件在`/usr/lib/rpm/macros`中，如`RPM_BUILD_DIR`表示`~/rpmbuild/BUILD`\n- 以Apache源码包为例，配置sepc文件如下：\n\n```bash\nName:           httpd\nVersion:        2.4.33\nRelease:        1%{?dist}\nSummary:        Apache source code\n\nLicense:        GPL\nURL:            apache.com\nSource0:        httpd-2.4.33.tar.gz\n\nBuildRequires:  gcc\nRequires:       rpm\n\n%description\n\n\n%prep\n%setup -q\nrm -rf srclib/apr*\ntar -zxvf %_sourcedir/apr-1.6.3.tar.gz -C srclib/\ntar -jxvf %_sourcedir/apr-util-1.6.1.tar.bz2 -C srclib/\npwd\nmv -f srclib/apr-1.6.3 srclib/apr\nmv -f srclib/apr-util-1.6.1 srclib/apr-util\n\n%build\n./configure --prefix=%_prefix  --with-included-apr\nmake %{?_smp_mflags}\n\n\n%install\nmake  DESTDIR=%buildroot/usr/local/apache install\n\n\n%files\n%defattr(-,root,root)\n/usr/local/apache\n\n%changelog\n```\n\n- 其中的`BuildRequires`是构架rpm包时需要的依赖，`Requires`是安装软件包时的依赖包，如果构建rpm包的依赖包不存在，则会在构建时提示失败如下：\n\n```bash\n[root@localhost SPECS]# rpmbuild -ba http-2.4.33.spec \n错误：构建依赖失败：\n\tgcc 被 http-2.4.33-2.4.33-1.el7.centos.x86_64 需要\n\tautomake 被 http-2.4.33-2.4.33-1.el7.centos.x86_64 需要\n\n```\n\n---\n\n","source":"_posts/Centos软件包的安装与卸载(二).md","raw":"---\ntitle: Centos软件包的安装与卸载(二)\nauthor: Evobot\nabbrlink: 85ee13c4\ndate: 2018-04-18 23:29:28\ncategories: Centos7\ntags: [Linux, Centos]\nimage:\n\n---\n\n\n\n本文继续介绍关于yum的配置，如更换国内yum源以提高下载速度，和使用yum下载rpm软件包；另外将介绍如何使用源码包安装软件。\n\n<!--more-->\n\n---\n\n# yum相关配置\n\n## 更换yum源\n\n- 由于yum配置的源默认为国外的源，访问速度较慢，所以我们可以将yum源替换为国内的源；\n- 首先将上篇文章备份的`yum.repos.d`目录恢复，然后删除目录下的`CentOS7-Base.repo`文件：\n\n```bash\n[root@localhost ~]# rm -rf /etc/yum.repos.d\n[root@localhost ~]# mv /etc/yum.repos.d.bak/ /etc/yum.repos.d\n\n[root@localhost ~]# rm -f /etc/yum.repos.d/CentOS-Base.repo\n```\n\n- 然后下载网易163的yum源文件，可以使用`wget`命令或者`curl`命令，由于默认`wget`命令没有安装，并且已经删除了yum源文件，所以使用`curl -O \thttp://mirrors.163.com/.help/CentOS7-Base-163.repo`下载文件：\n\n```bash\n[root@localhost ~]# cd /etc/yum.repos.d/\n[root@localhost yum.repos.d]# curl -O http://mirrors.163.com/.help/CentOS7-Base-163.repo\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  1572  100  1572    0     0   8253      0 --:--:-- --:--:-- --:--:--  8273\n[root@localhost yum.repos.d]# ls\nCentOS7-Base-163.repo  CentOS-Debuginfo.repo  CentOS-Media.repo    CentOS-Vault.repo\nCentOS-CR.repo         CentOS-fasttrack.repo  CentOS-Sources.repo\n```\n\n- 然后使用命令`yum repolist`或`yum repolist all`查看新的yum源是否启用：\n\n```bash\n[root@localhost yum.repos.d]# yum repolist\n已加载插件：fastestmirror\nLoading mirror speeds from cached hostfile\n源标识                                源名称                                             状态\nbase/7/x86_64                         CentOS-7 - Base - 163.com                          9,591\nextras/7/x86_64                       CentOS-7 - Extras - 163.com                          448\nupdates/7/x86_64                      CentOS-7 - Updates - 163.com                       2,416\nrepolist: 12,455\n```\n\n- 接着使用`yum clean all`情况缓存，即可正常使用新的yum源，使用`yum install -y wget`安装`wget`命令。\n\n## 安装扩展源\n\n- 有些软件包没有在yum源内，这时需要为yum安装扩展源epel；\n- 安装扩展源epel可以直接使用`yum install -y epel-release`命令，安装之后在`/etc/yum.repo.d/`目录下会下载两个epel仓库文件：\n\n```bash\n[root@evobot yum.repos.d]# ls\nCentOS-Base.repo       CentOS-Epel.repo       CentOS-Sources.repo  epel-testing.repo\nCentOS-CR.repo         CentOS-fasttrack.repo  CentOS-Vault.repo\nCentOS-Debuginfo.repo  CentOS-Media.repo      epel.repo\n```\n\n- 再使用`yum repolist`查看epel仓库已经被启用：\n\n```bash\n[root@localhost yum.repos.d]# yum repolist \n已加载插件：fastestmirror\nepel/x86_64/metalink                                                   | 6.4 kB  00:00:00     \nepel                                                                   | 4.7 kB  00:00:00     \n(1/3): epel/x86_64/group_gz                                            | 266 kB  00:00:01     \n(2/3): epel/x86_64/updateinfo                                          | 915 kB  00:00:01     \n(3/3): epel/x86_64/primary_db                                          | 6.3 MB  00:00:02     \nLoading mirror speeds from cached hostfile\n * epel: mirrors.ustc.edu.cn\n源标识                       源名称                                                     状态\nbase/7/x86_64                CentOS-7 - Base - 163.com                                   9,591\nepel/x86_64                  Extra Packages for Enterprise Linux 7 - x86_64             12,491\nextras/7/x86_64              CentOS-7 - Extras - 163.com                                   448\nupdates/7/x86_64             CentOS-7 - Updates - 163.com                                2,416\nrepolist: 24,946\n```\n\n## 下载rpm包\n\n- 使用yum可以将仓库内的rpm软件包下载到本地，但下载的软件包必须是未被安装的软件包，否则会提示软件包已安装，不做处理；\n- 使用`yum install -y [包名] --downloadonly`命令就可以将rpm软件包下载到本地：\n\n```bash\n[root@evobot yum.repos.d]# yum install -y zsh --downloadonly\n已加载插件：fastestmirror, langpacks\nRepository epel is listed more than once in the configuration\nLoading mirror speeds from cached hostfile\n正在解决依赖关系\n--> 正在检查事务\n---> 软件包 zsh.x86_64.0.5.0.2-28.el7 将被 安装\n--> 解决依赖关系完成\n\n依赖关系解决\n\n==============================================================================================\n Package            架构                  版本                        源                 大小\n==============================================================================================\n正在安装:\n zsh                x86_64                5.0.2-28.el7                os                2.4 M\n\n事务概要\n==============================================================================================\n安装  1 软件包\n\n总下载量：2.4 M\n安装大小：5.6 M\nBackground downloading packages, then exiting:\nzsh-5.0.2-28.el7.x86_64.rpm                                            | 2.4 MB  00:00:00     \nexiting because \"Download Only\" specified\n```\n\n- 下载的软件包存放在系统`/var/cache/yum/x86_64/7/`目录下的对应的源的`Packages`目录下，软件包是从哪个源下载的，从之前的下载命令可以看到软件包的源，如上面的zsh软件包的源是`os`，所以下载的软件包在`var/cache/yum/x86_64/7/os/packages/`目录下：\n\n```bash\n[root@evobot yum.repos.d]# cd /var/cache/yum/x86_64/7/os/packages/\n[root@evobot packages]# ls\nzsh-5.0.2-28.el7.x86_64.rpm\n```\n\n- 也可以在下载时指定软件包下载的路径，在下载命令后使用`--downloaddir=/dirpath`选项即可：\n\n```bash\n[root@evobot packages]# yum install -y zsh --downloadonly --downloaddir=/tmp/\n已加载插件：fastestmirror, langpacks\nRepository epel is listed more than once in the configuration\nLoading mirror speeds from cached hostfile\n正在解决依赖关系\n--> 正在检查事务\n---> 软件包 zsh.x86_64.0.5.0.2-28.el7 将被 安装\n--> 解决依赖关系完成\n\n依赖关系解决\n\n==============================================================================================\n Package            架构                  版本                        源                 大小\n==============================================================================================\n正在安装:\n zsh                x86_64                5.0.2-28.el7                os                2.4 M\n\n事务概要\n==============================================================================================\n安装  1 软件包\n\n总下载量：2.4 M\n安装大小：5.6 M\nBackground downloading packages, then exiting:\nexiting because \"Download Only\" specified\n[root@evobot packages]# ls /tmp/\nyum_save_tx.2018-04-19.00-20.1V7tv9.yumtx  zsh-5.0.2-28.el7.x86_64.rpm\n```\n\n- 针对已安装的包想要下载rpm包，可以使用`yum reinstall`命令来下载，其余选项与前面的命令相同：\n\n```bash\n[root@evobot packages]# yum install -y vim-enhanced --downloadonly --downloaddir=/tmp\n已加载插件：fastestmirror, langpacks\nRepository epel is listed more than once in the configuration\nLoading mirror speeds from cached hostfile\n软件包 2:vim-enhanced-7.4.160-2.el7.x86_64 已安装并且是最新版本\n无须任何处理\n\n[root@evobot packages]# yum reinstall -y vim-enhanced --downloadonly --downloaddir=/tmp\n已加载插件：fastestmirror, langpacks\nRepository epel is listed more than once in the configuration\nLoading mirror speeds from cached hostfile\n正在解决依赖关系\n--> 正在检查事务\n---> 软件包 vim-enhanced.x86_64.2.7.4.160-2.el7 将被 已重新安装\n--> 解决依赖关系完成\n\n依赖关系解决\n\n==============================================================================================\n Package                  架构               版本                        源              大小\n==============================================================================================\n重新安装:\n vim-enhanced             x86_64             2:7.4.160-2.el7             os             1.0 M\n\n事务概要\n==============================================================================================\n重新安装  1 软件包\n\n总下载量：1.0 M\n安装大小：2.2 M\nBackground downloading packages, then exiting:\nvim-enhanced-7.4.160-2.el7.x86_64.rpm                                  | 1.0 MB  00:00:00     \nexiting because \"Download Only\" specified\n\n[root@evobot packages]# ls /tmp/\nvim-enhanced-7.4.160-2.el7.x86_64.rpm      yum_save_tx.2018-04-19.00-23.Hu2DEg.yumtx\n```\n\n## yum源优先级\n\n- 设置yum源的优先级，需要安装`yum-plugin-priorities`软件包；\n- 确认`/etc//etc/yum/pluginconf.d/priorities.conf`文件内容如下：\n\n```bash\n[main]\nenabled = 1\n```\n\n- 要在 yum 检查更新时获取权限较低的源中较新的软件，可在上面的文件中加入`check_obsoletes=1 `\n- 然后在`yum.repos.d`目录下的`.repo`文件中加入`priority=N  `指定优先级，其中N为1~99，默认为99，N越小权限越高；\n- 添加优先级的形式如下：\n\n```bash\n[base]\nname=CentOS-$releasever - Base\nmirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=os\n#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/\ngpgcheck=1\ngpgkey=http://mirror.centos.org/centos/RPM-GPG-KEY-centos4\npriority=1\n#released updates\n[updates]\nname=CentOS-$releasever - Updates\nmirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=updates\n#baseurl=http://mirror.centos.org/centos/$releasever/updates/$basearch/\ngpgcheck=1\ngpgkey=http://mirror.centos.org/centos/RPM-GPG-KEY-centos4\npriority=1\n[contrib]\nname=CentOS-$releasever - Contrib\nmirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=contrib\n#baseurl=http://mirror.centos.org/centos/$releasever/contrib/$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=http://mirror.centos.org/centos/RPM-GPG-KEY-centos4\npriority=2\n```\n\n- 官方建议的仓库优先级如下：\n\n```bash\n[base], [addons], [updates], [extras] ... priority=1\n[centosplus] priority=1 (same priority as base and updates) but should be left disabled\n[contrib] ... priority=2\nThird Party Repos ... priority=N  (where N is > 10 and based on your preference)\n```\n\n---\n\n# 安装源码包\n\n- 安装源码包，需要先下载软件包的源代码，建议下载的源码包保存在`/usr/local/src`目录下；\n- 这里以Apache源码包安装为例，首先下载Apache的源码包并解压：\n\n```bash\n[root@evobot src]# wget http://mirrors.cnnic.cn/apache/httpd/httpd-2.4.33.tar.gz\n[root@evobot src]# tar zxvf httpd-2.4.33.tar.gz \n\n[root@evobot src]# cd httpd-2.4.33/\n[root@evobot httpd-2.4.33]# ls\nABOUT_APACHE     BuildBin.dsp    emacs-style     LAYOUT        NOTICE            srclib\nacinclude.m4     buildconf       httpd.dep       libhttpd.dep  NWGNUmakefile     support\nApache-apr2.dsw  CHANGES         httpd.dsp       libhttpd.dsp  os                test\nApache.dsw       CMakeLists.txt  httpd.mak       libhttpd.mak  README            VERSIONING\napache_probes.d  config.layout   httpd.spec      LICENSE       README.cmake\nap.d             configure       include         Makefile.in   README.platforms\nbuild            configure.in    INSTALL         Makefile.win  ROADMAP\nBuildAll.dsp     docs            InstallBin.dsp  modules       server\n```\n\n- 查看解压出的文件，一般源码包都会包含`INSTALL`和`README`文件，其中`README`一般是介绍软件包，`INSTALL`文件则是源码包安装方法；\n- 在`INSTALL`中，安装Apache的步骤如下：\n\n```bash\n$ ./configure --prefix=PREFIX\t# PREFIX是指安装路径，其余选项可以参考INSTALL文件\n$ make\n$ make install\n$ PREFIX/bin/apachectl start\n```\n\n- 执行`./configure`时，如果无法判断命令执行结果是否正常，可以在运行完之后运行`echo $?`，如果返回值为`0`，则命令执行正确，否则命令执行错误；\n\n```bash\n[root@evobot httpd-2.4.33]# ./configure --prefix=/usr/local/apache\nchecking for chosen layout... Apache\nchecking for working mkdir -p... yes\nchecking for grep that handles long lines and -e... /bin/grep\nchecking for egrep... /bin/grep -E\nchecking build system type... x86_64-pc-linux-gnu\nchecking host system type... x86_64-pc-linux-gnu\nchecking target system type... x86_64-pc-linux-gnu\nconfigure: \nconfigure: Configuring Apache Portable Runtime library...\nconfigure: \nchecking for APR... no\nconfigure: error: APR not found.  Please read the documentation.\n[root@evobot httpd-2.4.33]# echo $?\n1\n# 返回值不为0，命令执行错误，报错为APR未找到，需要下载APR\n```\n\n- Apache编译依赖APR包，所以再次下载`apr`和`apr-util`源码包解压到Apache源码包内的`srclib`目录内，另外还需要安装`gcc`、`pcre-devel.x86_64`和`expat-devel.x86_64`软件包：\n\n```bash\n[root@evobot src]# wget http://mirrors.cnnic.cn/apache/apr/apr-1.6.3.tar.gz\n[root@evobot src]# wget http://mirrors.cnnic.cn/apache/apr/apr-util-1.6.1.tar.bz2\n[root@evobot src]# tar zxvf apr-1.6.3.tar.gz -C httpd-2.4.33/srclib/apr\n[root@evobot src]# tar jxvf apr-util-1.6.1.tar.bz2 -C httpd-2.4.33/srclib/apr-util\n```\n\n- 添加`apr`选项并重新编译安装：\n\n```bash\n[root@evobot httpd-2.4.33]# ./configure --prefix=/usr/local/apache  --with-included-apr\n[root@evobot httpd-2.4.33]# make\n[root@evobot httpd-2.4.33]# make install\n```\n\n- 安装完成并没有报错后，可以查看安装目录下的文件：\n\n```bash\n[root@evobot local]# ls apache/\nbin  build  cgi-bin  conf  error  htdocs  icons  include  lib  logs  man  manual  modules\n```\n\n- 源码包安装相较于yum安装，可以指定安装路径，并且卸载时只需要直接删除软件安装目录即可。\n\n---\n\n# rpm打包\n\n## rpm打包命令\n\n- 将源码包打包为rpm包，可以方便将软件包移植到其他机器，方便使用；\n- 在Centos7中，将源码包打包为rpm包，需要使用`yum`安装`rpmdevtools`软件包，然后执行`rpmdev-setuptree`在家目录生成rpm打包目录：\n\n```bash\n[root@localhost ~]# yum install -y rpmdevtools\n[root@localhost local]# rpmdev-setuptree\t# 将在家目录生成rpmbuild目录\n```\n\n- 在`rpmbuild`目录下，会有五个子目录，作用如下：\n\n|   目录名   |         作用          |\n| :-----: | :-----------------: |\n|  BUILD  |     编译时所用的暂存目录      |\n|  RPMS   |     存放打包好的rpm包      |\n| SOURCES |     放置源码包和补丁文件      |\n|  SPECS  | 放置spec模板文件，用于生成rpm包 |\n|  SRPMS  |      放置rpm源码包       |\n\n## spec文件说明\n\n- rpm打包的关键就在于sepc文件的编写，需要为要打包的源码生成一个新的spec文件，使用命令`rpmdev-newspec [filename.spec]`生成，然后将源码包放到SOURCES目录：\n\n```bash\n[root@localhost rpmbuild]# cd SPECS/\t# 进入SPEC目录\n[root@localhost SPECS]# rpmdev-newspec http-2.4.33.spec\t#生成spec模板\nhttp-2.4.33.spec created; type minimal, rpm version >= 4.11.\n[root@localhost SPECS]# ls\nhttp-2.4.33.spec\n[root@localhost SPECS]# cp /usr/local/src/httpd-2.4.33.tar.gz ../SOURCES/\t# 复制源码包到SOURCES目录\n```\n\n- 由于Apache2.4.33依赖APR软件包，所以需要将apr和apr-util源码包也放入SOURCES目录下以便使用；\n- spec文件的格式和每行作用如下：\n\n```\nName:           http-2.4.33\t# 软件名称\nVersion:\t\t\t# 软件版本\nRelease:        1%{?dist}\t# 发布次数\nSummary:\t\t\t# 软件说明\nLicense:\t\t\t# 授权模式，如GPL，即自由软件\nURL:\t\t\t\t# 源码包URL地址，可随意填写\nSource0:\t\t\t# 源码包名字，可以指定多个\nBuildRequires:\t\t# 编译过程依赖的工具\nRequires:\t\t\t# 打包生成的rpm包安装时所以来的软件包\n\n%description\t\t# 软件描述\n\n%prep\t\t\t\t# 打包准备工作，如创建目录，解压源码包等\n%setup -q\t\t\t# 自动解压缩源码包并进入解压出的目录\n\n%build\t\t\t\t# 在BUILD目录编译时的编译命令，如configure和make\n%configure\nmake %{?_smp_mflags}\n\n%install\t\t\t# 安装到BUILDROOT虚拟目录的操作命令，如make install\nrm -rf $RPM_BUILD_ROOT\n%make_install\n\n%files\t\t\t\t# 需要添加到rpm包中的文件\n%doc\n\n%changelog\t\t\t# 更新记录\n\n# 最终生成的rpm包以{Name}-{Version}-{Release}-{BuildArch}.rpm命名\n```\n\n- 在上面的配置文件选项中，有些如`%configure`这样的字符串，这是打包定义的变量，定义变量的文件在`/usr/lib/rpm/macros`中，如`RPM_BUILD_DIR`表示`~/rpmbuild/BUILD`\n- 以Apache源码包为例，配置sepc文件如下：\n\n```bash\nName:           httpd\nVersion:        2.4.33\nRelease:        1%{?dist}\nSummary:        Apache source code\n\nLicense:        GPL\nURL:            apache.com\nSource0:        httpd-2.4.33.tar.gz\n\nBuildRequires:  gcc\nRequires:       rpm\n\n%description\n\n\n%prep\n%setup -q\nrm -rf srclib/apr*\ntar -zxvf %_sourcedir/apr-1.6.3.tar.gz -C srclib/\ntar -jxvf %_sourcedir/apr-util-1.6.1.tar.bz2 -C srclib/\npwd\nmv -f srclib/apr-1.6.3 srclib/apr\nmv -f srclib/apr-util-1.6.1 srclib/apr-util\n\n%build\n./configure --prefix=%_prefix  --with-included-apr\nmake %{?_smp_mflags}\n\n\n%install\nmake  DESTDIR=%buildroot/usr/local/apache install\n\n\n%files\n%defattr(-,root,root)\n/usr/local/apache\n\n%changelog\n```\n\n- 其中的`BuildRequires`是构架rpm包时需要的依赖，`Requires`是安装软件包时的依赖包，如果构建rpm包的依赖包不存在，则会在构建时提示失败如下：\n\n```bash\n[root@localhost SPECS]# rpmbuild -ba http-2.4.33.spec \n错误：构建依赖失败：\n\tgcc 被 http-2.4.33-2.4.33-1.el7.centos.x86_64 需要\n\tautomake 被 http-2.4.33-2.4.33-1.el7.centos.x86_64 需要\n\n```\n\n---\n\n","slug":"Centos软件包的安装与卸载(二)","published":1,"updated":"2018-06-02T13:01:29.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazdt003mu1jxugp15sx1","content":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p>本文继续介绍关于yum的配置，如更换国内yum源以提高下载速度，和使用yum下载rpm软件包；另外将介绍如何使用源码包安装软件。</p><a id=\"more\"></a><hr><h1 id=\"yum相关配置\"><a href=\"#yum相关配置\" class=\"headerlink\" title=\"yum相关配置\"></a>yum相关配置</h1><h2 id=\"更换yum源\"><a href=\"#更换yum源\" class=\"headerlink\" title=\"更换yum源\"></a>更换yum源</h2><ul><li>由于yum配置的源默认为国外的源，访问速度较慢，所以我们可以将yum源替换为国内的源；</li><li>首先将上篇文章备份的<code>yum.repos.d</code>目录恢复，然后删除目录下的<code>CentOS7-Base.repo</code>文件：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># rm -rf /etc/yum.repos.d</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mv /etc/yum.repos.d.bak/ /etc/yum.repos.d</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># rm -f /etc/yum.repos.d/CentOS-Base.repo</span></span><br></pre></td></tr></table></figure><ul><li>然后下载网易163的yum源文件，可以使用<code>wget</code>命令或者<code>curl</code>命令，由于默认<code>wget</code>命令没有安装，并且已经删除了yum源文件，所以使用<code>curl -O http://mirrors.163.com/.help/CentOS7-Base-163.repo</code>下载文件：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cd /etc/yum.repos.d/</span></span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># curl -O http://mirrors.163.com/.help/CentOS7-Base-163.repo</span></span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100  1572  100  1572    0     0   8253      0 --:--:-- --:--:-- --:--:--  8273</span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># ls</span></span><br><span class=\"line\">CentOS7-Base-163.repo  CentOS-Debuginfo.repo  CentOS-Media.repo    CentOS-Vault.repo</span><br><span class=\"line\">CentOS-CR.repo         CentOS-fasttrack.repo  CentOS-Sources.repo</span><br></pre></td></tr></table></figure><ul><li>然后使用命令<code>yum repolist</code>或<code>yum repolist all</code>查看新的yum源是否启用：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># yum repolist</span></span><br><span class=\"line\">已加载插件：fastestmirror</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\">源标识                                源名称                                             状态</span><br><span class=\"line\">base/7/x86_64                         CentOS-7 - Base - 163.com                          9,591</span><br><span class=\"line\">extras/7/x86_64                       CentOS-7 - Extras - 163.com                          448</span><br><span class=\"line\">updates/7/x86_64                      CentOS-7 - Updates - 163.com                       2,416</span><br><span class=\"line\">repolist: 12,455</span><br></pre></td></tr></table></figure><ul><li>接着使用<code>yum clean all</code>情况缓存，即可正常使用新的yum源，使用<code>yum install -y wget</code>安装<code>wget</code>命令。</li></ul><h2 id=\"安装扩展源\"><a href=\"#安装扩展源\" class=\"headerlink\" title=\"安装扩展源\"></a>安装扩展源</h2><ul><li>有些软件包没有在yum源内，这时需要为yum安装扩展源epel；</li><li>安装扩展源epel可以直接使用<code>yum install -y epel-release</code>命令，安装之后在<code>/etc/yum.repo.d/</code>目录下会下载两个epel仓库文件：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot yum.repos.d]<span class=\"comment\"># ls</span></span><br><span class=\"line\">CentOS-Base.repo       CentOS-Epel.repo       CentOS-Sources.repo  epel-testing.repo</span><br><span class=\"line\">CentOS-CR.repo         CentOS-fasttrack.repo  CentOS-Vault.repo</span><br><span class=\"line\">CentOS-Debuginfo.repo  CentOS-Media.repo      epel.repo</span><br></pre></td></tr></table></figure><ul><li>再使用<code>yum repolist</code>查看epel仓库已经被启用：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># yum repolist </span></span><br><span class=\"line\">已加载插件：fastestmirror</span><br><span class=\"line\">epel/x86_64/metalink                                                   | 6.4 kB  00:00:00     </span><br><span class=\"line\">epel                                                                   | 4.7 kB  00:00:00     </span><br><span class=\"line\">(1/3): epel/x86_64/group_gz                                            | 266 kB  00:00:01     </span><br><span class=\"line\">(2/3): epel/x86_64/updateinfo                                          | 915 kB  00:00:01     </span><br><span class=\"line\">(3/3): epel/x86_64/primary_db                                          | 6.3 MB  00:00:02     </span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * epel: mirrors.ustc.edu.cn</span><br><span class=\"line\">源标识                       源名称                                                     状态</span><br><span class=\"line\">base/7/x86_64                CentOS-7 - Base - 163.com                                   9,591</span><br><span class=\"line\">epel/x86_64                  Extra Packages <span class=\"keyword\">for</span> Enterprise Linux 7 - x86_64             12,491</span><br><span class=\"line\">extras/7/x86_64              CentOS-7 - Extras - 163.com                                   448</span><br><span class=\"line\">updates/7/x86_64             CentOS-7 - Updates - 163.com                                2,416</span><br><span class=\"line\">repolist: 24,946</span><br></pre></td></tr></table></figure><h2 id=\"下载rpm包\"><a href=\"#下载rpm包\" class=\"headerlink\" title=\"下载rpm包\"></a>下载rpm包</h2><ul><li>使用yum可以将仓库内的rpm软件包下载到本地，但下载的软件包必须是未被安装的软件包，否则会提示软件包已安装，不做处理；</li><li>使用<code>yum install -y [包名] --downloadonly</code>命令就可以将rpm软件包下载到本地：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot yum.repos.d]<span class=\"comment\"># yum install -y zsh --downloadonly</span></span><br><span class=\"line\">已加载插件：fastestmirror, langpacks</span><br><span class=\"line\">Repository epel is listed more than once <span class=\"keyword\">in</span> the configuration</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\">正在解决依赖关系</span><br><span class=\"line\">--&gt; 正在检查事务</span><br><span class=\"line\">---&gt; 软件包 zsh.x86_64.0.5.0.2-28.el7 将被 安装</span><br><span class=\"line\">--&gt; 解决依赖关系完成</span><br><span class=\"line\"></span><br><span class=\"line\">依赖关系解决</span><br><span class=\"line\"></span><br><span class=\"line\">==============================================================================================</span><br><span class=\"line\"> Package            架构                  版本                        源                 大小</span><br><span class=\"line\">==============================================================================================</span><br><span class=\"line\">正在安装:</span><br><span class=\"line\"> zsh                x86_64                5.0.2-28.el7                os                2.4 M</span><br><span class=\"line\"></span><br><span class=\"line\">事务概要</span><br><span class=\"line\">==============================================================================================</span><br><span class=\"line\">安装  1 软件包</span><br><span class=\"line\"></span><br><span class=\"line\">总下载量：2.4 M</span><br><span class=\"line\">安装大小：5.6 M</span><br><span class=\"line\">Background downloading packages, <span class=\"keyword\">then</span> exiting:</span><br><span class=\"line\">zsh-5.0.2-28.el7.x86_64.rpm                                            | 2.4 MB  00:00:00     </span><br><span class=\"line\">exiting because <span class=\"string\">\"Download Only\"</span> specified</span><br></pre></td></tr></table></figure><ul><li>下载的软件包存放在系统<code>/var/cache/yum/x86_64/7/</code>目录下的对应的源的<code>Packages</code>目录下，软件包是从哪个源下载的，从之前的下载命令可以看到软件包的源，如上面的zsh软件包的源是<code>os</code>，所以下载的软件包在<code>var/cache/yum/x86_64/7/os/packages/</code>目录下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot yum.repos.d]<span class=\"comment\"># cd /var/cache/yum/x86_64/7/os/packages/</span></span><br><span class=\"line\">[root@evobot packages]<span class=\"comment\"># ls</span></span><br><span class=\"line\">zsh-5.0.2-28.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><ul><li>也可以在下载时指定软件包下载的路径，在下载命令后使用<code>--downloaddir=/dirpath</code>选项即可：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot packages]<span class=\"comment\"># yum install -y zsh --downloadonly --downloaddir=/tmp/</span></span><br><span class=\"line\">已加载插件：fastestmirror, langpacks</span><br><span class=\"line\">Repository epel is listed more than once <span class=\"keyword\">in</span> the configuration</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\">正在解决依赖关系</span><br><span class=\"line\">--&gt; 正在检查事务</span><br><span class=\"line\">---&gt; 软件包 zsh.x86_64.0.5.0.2-28.el7 将被 安装</span><br><span class=\"line\">--&gt; 解决依赖关系完成</span><br><span class=\"line\"></span><br><span class=\"line\">依赖关系解决</span><br><span class=\"line\"></span><br><span class=\"line\">==============================================================================================</span><br><span class=\"line\"> Package            架构                  版本                        源                 大小</span><br><span class=\"line\">==============================================================================================</span><br><span class=\"line\">正在安装:</span><br><span class=\"line\"> zsh                x86_64                5.0.2-28.el7                os                2.4 M</span><br><span class=\"line\"></span><br><span class=\"line\">事务概要</span><br><span class=\"line\">==============================================================================================</span><br><span class=\"line\">安装  1 软件包</span><br><span class=\"line\"></span><br><span class=\"line\">总下载量：2.4 M</span><br><span class=\"line\">安装大小：5.6 M</span><br><span class=\"line\">Background downloading packages, <span class=\"keyword\">then</span> exiting:</span><br><span class=\"line\">exiting because <span class=\"string\">\"Download Only\"</span> specified</span><br><span class=\"line\">[root@evobot packages]<span class=\"comment\"># ls /tmp/</span></span><br><span class=\"line\">yum_save_tx.2018-04-19.00-20.1V7tv9.yumtx  zsh-5.0.2-28.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><ul><li>针对已安装的包想要下载rpm包，可以使用<code>yum reinstall</code>命令来下载，其余选项与前面的命令相同：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot packages]<span class=\"comment\"># yum install -y vim-enhanced --downloadonly --downloaddir=/tmp</span></span><br><span class=\"line\">已加载插件：fastestmirror, langpacks</span><br><span class=\"line\">Repository epel is listed more than once <span class=\"keyword\">in</span> the configuration</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\">软件包 2:vim-enhanced-7.4.160-2.el7.x86_64 已安装并且是最新版本</span><br><span class=\"line\">无须任何处理</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot packages]<span class=\"comment\"># yum reinstall -y vim-enhanced --downloadonly --downloaddir=/tmp</span></span><br><span class=\"line\">已加载插件：fastestmirror, langpacks</span><br><span class=\"line\">Repository epel is listed more than once <span class=\"keyword\">in</span> the configuration</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\">正在解决依赖关系</span><br><span class=\"line\">--&gt; 正在检查事务</span><br><span class=\"line\">---&gt; 软件包 vim-enhanced.x86_64.2.7.4.160-2.el7 将被 已重新安装</span><br><span class=\"line\">--&gt; 解决依赖关系完成</span><br><span class=\"line\"></span><br><span class=\"line\">依赖关系解决</span><br><span class=\"line\"></span><br><span class=\"line\">==============================================================================================</span><br><span class=\"line\"> Package                  架构               版本                        源              大小</span><br><span class=\"line\">==============================================================================================</span><br><span class=\"line\">重新安装:</span><br><span class=\"line\"> vim-enhanced             x86_64             2:7.4.160-2.el7             os             1.0 M</span><br><span class=\"line\"></span><br><span class=\"line\">事务概要</span><br><span class=\"line\">==============================================================================================</span><br><span class=\"line\">重新安装  1 软件包</span><br><span class=\"line\"></span><br><span class=\"line\">总下载量：1.0 M</span><br><span class=\"line\">安装大小：2.2 M</span><br><span class=\"line\">Background downloading packages, <span class=\"keyword\">then</span> exiting:</span><br><span class=\"line\">vim-enhanced-7.4.160-2.el7.x86_64.rpm                                  | 1.0 MB  00:00:00     </span><br><span class=\"line\">exiting because <span class=\"string\">\"Download Only\"</span> specified</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot packages]<span class=\"comment\"># ls /tmp/</span></span><br><span class=\"line\">vim-enhanced-7.4.160-2.el7.x86_64.rpm      yum_save_tx.2018-04-19.00-23.Hu2DEg.yumtx</span><br></pre></td></tr></table></figure><h2 id=\"yum源优先级\"><a href=\"#yum源优先级\" class=\"headerlink\" title=\"yum源优先级\"></a>yum源优先级</h2><ul><li>设置yum源的优先级，需要安装<code>yum-plugin-priorities</code>软件包；</li><li>确认<code>/etc//etc/yum/pluginconf.d/priorities.conf</code>文件内容如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[main]</span><br><span class=\"line\">enabled = 1</span><br></pre></td></tr></table></figure><ul><li>要在 yum 检查更新时获取权限较低的源中较新的软件，可在上面的文件中加入<code>check_obsoletes=1</code></li><li>然后在<code>yum.repos.d</code>目录下的<code>.repo</code>文件中加入<code>priority=N</code>指定优先级，其中N为1~99，默认为99，N越小权限越高；</li><li>添加优先级的形式如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[base]</span><br><span class=\"line\">name=CentOS-<span class=\"variable\">$releasever</span> - Base</span><br><span class=\"line\">mirrorlist=http://mirrorlist.centos.org/?release=<span class=\"variable\">$releasever</span>&amp;arch=<span class=\"variable\">$basearch</span>&amp;repo=os</span><br><span class=\"line\"><span class=\"comment\">#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/</span></span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=http://mirror.centos.org/centos/RPM-GPG-KEY-centos4</span><br><span class=\"line\">priority=1</span><br><span class=\"line\"><span class=\"comment\">#released updates</span></span><br><span class=\"line\">[updates]</span><br><span class=\"line\">name=CentOS-<span class=\"variable\">$releasever</span> - Updates</span><br><span class=\"line\">mirrorlist=http://mirrorlist.centos.org/?release=<span class=\"variable\">$releasever</span>&amp;arch=<span class=\"variable\">$basearch</span>&amp;repo=updates</span><br><span class=\"line\"><span class=\"comment\">#baseurl=http://mirror.centos.org/centos/$releasever/updates/$basearch/</span></span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=http://mirror.centos.org/centos/RPM-GPG-KEY-centos4</span><br><span class=\"line\">priority=1</span><br><span class=\"line\">[contrib]</span><br><span class=\"line\">name=CentOS-<span class=\"variable\">$releasever</span> - Contrib</span><br><span class=\"line\">mirrorlist=http://mirrorlist.centos.org/?release=<span class=\"variable\">$releasever</span>&amp;arch=<span class=\"variable\">$basearch</span>&amp;repo=contrib</span><br><span class=\"line\"><span class=\"comment\">#baseurl=http://mirror.centos.org/centos/$releasever/contrib/$basearch/</span></span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">gpgkey=http://mirror.centos.org/centos/RPM-GPG-KEY-centos4</span><br><span class=\"line\">priority=2</span><br></pre></td></tr></table></figure><ul><li>官方建议的仓库优先级如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[base], [addons], [updates], [extras] ... priority=1</span><br><span class=\"line\">[centosplus] priority=1 (same priority as base and updates) but should be left disabled</span><br><span class=\"line\">[contrib] ... priority=2</span><br><span class=\"line\">Third Party Repos ... priority=N  (<span class=\"built_in\">where</span> N is &gt; 10 and based on your preference)</span><br></pre></td></tr></table></figure><hr><h1 id=\"安装源码包\"><a href=\"#安装源码包\" class=\"headerlink\" title=\"安装源码包\"></a>安装源码包</h1><ul><li>安装源码包，需要先下载软件包的源代码，建议下载的源码包保存在<code>/usr/local/src</code>目录下；</li><li>这里以Apache源码包安装为例，首先下载Apache的源码包并解压：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot src]<span class=\"comment\"># wget http://mirrors.cnnic.cn/apache/httpd/httpd-2.4.33.tar.gz</span></span><br><span class=\"line\">[root@evobot src]<span class=\"comment\"># tar zxvf httpd-2.4.33.tar.gz </span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot src]<span class=\"comment\"># cd httpd-2.4.33/</span></span><br><span class=\"line\">[root@evobot httpd-2.4.33]<span class=\"comment\"># ls</span></span><br><span class=\"line\">ABOUT_APACHE     BuildBin.dsp    emacs-style     LAYOUT        NOTICE            srclib</span><br><span class=\"line\">acinclude.m4     buildconf       httpd.dep       libhttpd.dep  NWGNUmakefile     support</span><br><span class=\"line\">Apache-apr2.dsw  CHANGES         httpd.dsp       libhttpd.dsp  os                <span class=\"built_in\">test</span></span><br><span class=\"line\">Apache.dsw       CMakeLists.txt  httpd.mak       libhttpd.mak  README            VERSIONING</span><br><span class=\"line\">apache_probes.d  config.layout   httpd.spec      LICENSE       README.cmake</span><br><span class=\"line\">ap.d             configure       include         Makefile.in   README.platforms</span><br><span class=\"line\">build            configure.in    INSTALL         Makefile.win  ROADMAP</span><br><span class=\"line\">BuildAll.dsp     docs            InstallBin.dsp  modules       server</span><br></pre></td></tr></table></figure><ul><li>查看解压出的文件，一般源码包都会包含<code>INSTALL</code>和<code>README</code>文件，其中<code>README</code>一般是介绍软件包，<code>INSTALL</code>文件则是源码包安装方法；</li><li>在<code>INSTALL</code>中，安装Apache的步骤如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./configure --prefix=PREFIX\t<span class=\"comment\"># PREFIX是指安装路径，其余选项可以参考INSTALL文件</span></span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ make install</span><br><span class=\"line\">$ PREFIX/bin/apachectl start</span><br></pre></td></tr></table></figure><ul><li>执行<code>./configure</code>时，如果无法判断命令执行结果是否正常，可以在运行完之后运行<code>echo $?</code>，如果返回值为<code>0</code>，则命令执行正确，否则命令执行错误；</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot httpd-2.4.33]<span class=\"comment\"># ./configure --prefix=/usr/local/apache</span></span><br><span class=\"line\">checking <span class=\"keyword\">for</span> chosen layout... Apache</span><br><span class=\"line\">checking <span class=\"keyword\">for</span> working mkdir -p... yes</span><br><span class=\"line\">checking <span class=\"keyword\">for</span> grep that handles long lines and -e... /bin/grep</span><br><span class=\"line\">checking <span class=\"keyword\">for</span> egrep... /bin/grep -E</span><br><span class=\"line\">checking build system <span class=\"built_in\">type</span>... x86_64-pc-linux-gnu</span><br><span class=\"line\">checking host system <span class=\"built_in\">type</span>... x86_64-pc-linux-gnu</span><br><span class=\"line\">checking target system <span class=\"built_in\">type</span>... x86_64-pc-linux-gnu</span><br><span class=\"line\">configure: </span><br><span class=\"line\">configure: Configuring Apache Portable Runtime library...</span><br><span class=\"line\">configure: </span><br><span class=\"line\">checking <span class=\"keyword\">for</span> APR... no</span><br><span class=\"line\">configure: error: APR not found.  Please <span class=\"built_in\">read</span> the documentation.</span><br><span class=\"line\">[root@evobot httpd-2.4.33]<span class=\"comment\"># echo $?</span></span><br><span class=\"line\">1</span><br><span class=\"line\"><span class=\"comment\"># 返回值不为0，命令执行错误，报错为APR未找到，需要下载APR</span></span><br></pre></td></tr></table></figure><ul><li>Apache编译依赖APR包，所以再次下载<code>apr</code>和<code>apr-util</code>源码包解压到Apache源码包内的<code>srclib</code>目录内，另外还需要安装<code>gcc</code>、<code>pcre-devel.x86_64</code>和<code>expat-devel.x86_64</code>软件包：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot src]<span class=\"comment\"># wget http://mirrors.cnnic.cn/apache/apr/apr-1.6.3.tar.gz</span></span><br><span class=\"line\">[root@evobot src]<span class=\"comment\"># wget http://mirrors.cnnic.cn/apache/apr/apr-util-1.6.1.tar.bz2</span></span><br><span class=\"line\">[root@evobot src]<span class=\"comment\"># tar zxvf apr-1.6.3.tar.gz -C httpd-2.4.33/srclib/apr</span></span><br><span class=\"line\">[root@evobot src]<span class=\"comment\"># tar jxvf apr-util-1.6.1.tar.bz2 -C httpd-2.4.33/srclib/apr-util</span></span><br></pre></td></tr></table></figure><ul><li>添加<code>apr</code>选项并重新编译安装：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot httpd-2.4.33]<span class=\"comment\"># ./configure --prefix=/usr/local/apache  --with-included-apr</span></span><br><span class=\"line\">[root@evobot httpd-2.4.33]<span class=\"comment\"># make</span></span><br><span class=\"line\">[root@evobot httpd-2.4.33]<span class=\"comment\"># make install</span></span><br></pre></td></tr></table></figure><ul><li>安装完成并没有报错后，可以查看安装目录下的文件：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">local</span>]<span class=\"comment\"># ls apache/</span></span><br><span class=\"line\">bin  build  cgi-bin  conf  error  htdocs  icons  include  lib  logs  man  manual  modules</span><br></pre></td></tr></table></figure><ul><li>源码包安装相较于yum安装，可以指定安装路径，并且卸载时只需要直接删除软件安装目录即可。</li></ul><hr><h1 id=\"rpm打包\"><a href=\"#rpm打包\" class=\"headerlink\" title=\"rpm打包\"></a>rpm打包</h1><h2 id=\"rpm打包命令\"><a href=\"#rpm打包命令\" class=\"headerlink\" title=\"rpm打包命令\"></a>rpm打包命令</h2><ul><li>将源码包打包为rpm包，可以方便将软件包移植到其他机器，方便使用；</li><li>在Centos7中，将源码包打包为rpm包，需要使用<code>yum</code>安装<code>rpmdevtools</code>软件包，然后执行<code>rpmdev-setuptree</code>在家目录生成rpm打包目录：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># yum install -y rpmdevtools</span></span><br><span class=\"line\">[root@localhost <span class=\"built_in\">local</span>]<span class=\"comment\"># rpmdev-setuptree\t# 将在家目录生成rpmbuild目录</span></span><br></pre></td></tr></table></figure><ul><li>在<code>rpmbuild</code>目录下，会有五个子目录，作用如下：</li></ul><table><thead><tr><th style=\"text-align:center\">目录名</th><th style=\"text-align:center\">作用</th></tr></thead><tbody><tr><td style=\"text-align:center\">BUILD</td><td style=\"text-align:center\">编译时所用的暂存目录</td></tr><tr><td style=\"text-align:center\">RPMS</td><td style=\"text-align:center\">存放打包好的rpm包</td></tr><tr><td style=\"text-align:center\">SOURCES</td><td style=\"text-align:center\">放置源码包和补丁文件</td></tr><tr><td style=\"text-align:center\">SPECS</td><td style=\"text-align:center\">放置spec模板文件，用于生成rpm包</td></tr><tr><td style=\"text-align:center\">SRPMS</td><td style=\"text-align:center\">放置rpm源码包</td></tr></tbody></table><h2 id=\"spec文件说明\"><a href=\"#spec文件说明\" class=\"headerlink\" title=\"spec文件说明\"></a>spec文件说明</h2><ul><li>rpm打包的关键就在于sepc文件的编写，需要为要打包的源码生成一个新的spec文件，使用命令<code>rpmdev-newspec [filename.spec]</code>生成，然后将源码包放到SOURCES目录：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost rpmbuild]<span class=\"comment\"># cd SPECS/\t# 进入SPEC目录</span></span><br><span class=\"line\">[root@localhost SPECS]<span class=\"comment\"># rpmdev-newspec http-2.4.33.spec\t#生成spec模板</span></span><br><span class=\"line\">http-2.4.33.spec created; <span class=\"built_in\">type</span> minimal, rpm version &gt;= 4.11.</span><br><span class=\"line\">[root@localhost SPECS]<span class=\"comment\"># ls</span></span><br><span class=\"line\">http-2.4.33.spec</span><br><span class=\"line\">[root@localhost SPECS]<span class=\"comment\"># cp /usr/local/src/httpd-2.4.33.tar.gz ../SOURCES/\t# 复制源码包到SOURCES目录</span></span><br></pre></td></tr></table></figure><ul><li>由于Apache2.4.33依赖APR软件包，所以需要将apr和apr-util源码包也放入SOURCES目录下以便使用；</li><li>spec文件的格式和每行作用如下：</li></ul><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name:           http-2.4.33\t# 软件名称</span><br><span class=\"line\">Version:\t\t\t# 软件版本</span><br><span class=\"line\">Release:        1%&#123;?dist&#125;\t# 发布次数</span><br><span class=\"line\">Summary:\t\t\t# 软件说明</span><br><span class=\"line\">License:\t\t\t# 授权模式，如GPL，即自由软件</span><br><span class=\"line\">URL:\t\t\t\t# 源码包URL地址，可随意填写</span><br><span class=\"line\">Source0:\t\t\t# 源码包名字，可以指定多个</span><br><span class=\"line\">BuildRequires:\t\t# 编译过程依赖的工具</span><br><span class=\"line\">Requires:\t\t\t# 打包生成的rpm包安装时所以来的软件包</span><br><span class=\"line\"></span><br><span class=\"line\">%description\t\t# 软件描述</span><br><span class=\"line\"></span><br><span class=\"line\">%prep\t\t\t\t# 打包准备工作，如创建目录，解压源码包等</span><br><span class=\"line\">%setup -q\t\t\t# 自动解压缩源码包并进入解压出的目录</span><br><span class=\"line\"></span><br><span class=\"line\">%build\t\t\t\t# 在BUILD目录编译时的编译命令，如configure和make</span><br><span class=\"line\">%configure</span><br><span class=\"line\">make %&#123;?_smp_mflags&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">%install\t\t\t# 安装到BUILDROOT虚拟目录的操作命令，如make install</span><br><span class=\"line\">rm -rf $RPM_BUILD_ROOT</span><br><span class=\"line\">%make_install</span><br><span class=\"line\"></span><br><span class=\"line\">%files\t\t\t\t# 需要添加到rpm包中的文件</span><br><span class=\"line\">%doc</span><br><span class=\"line\"></span><br><span class=\"line\">%changelog\t\t\t# 更新记录</span><br><span class=\"line\"></span><br><span class=\"line\"># 最终生成的rpm包以&#123;Name&#125;-&#123;Version&#125;-&#123;Release&#125;-&#123;BuildArch&#125;.rpm命名</span><br></pre></td></tr></table></figure><ul><li>在上面的配置文件选项中，有些如<code>%configure</code>这样的字符串，这是打包定义的变量，定义变量的文件在<code>/usr/lib/rpm/macros</code>中，如<code>RPM_BUILD_DIR</code>表示<code>~/rpmbuild/BUILD</code></li><li>以Apache源码包为例，配置sepc文件如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name:           httpd</span><br><span class=\"line\">Version:        2.4.33</span><br><span class=\"line\">Release:        1%&#123;?dist&#125;</span><br><span class=\"line\">Summary:        Apache <span class=\"built_in\">source</span> code</span><br><span class=\"line\"></span><br><span class=\"line\">License:        GPL</span><br><span class=\"line\">URL:            apache.com</span><br><span class=\"line\">Source0:        httpd-2.4.33.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">BuildRequires:  gcc</span><br><span class=\"line\">Requires:       rpm</span><br><span class=\"line\"></span><br><span class=\"line\">%description</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">%prep</span><br><span class=\"line\">%setup -q</span><br><span class=\"line\">rm -rf srclib/apr*</span><br><span class=\"line\">tar -zxvf %_sourcedir/apr-1.6.3.tar.gz -C srclib/</span><br><span class=\"line\">tar -jxvf %_sourcedir/apr-util-1.6.1.tar.bz2 -C srclib/</span><br><span class=\"line\"><span class=\"built_in\">pwd</span></span><br><span class=\"line\">mv -f srclib/apr-1.6.3 srclib/apr</span><br><span class=\"line\">mv -f srclib/apr-util-1.6.1 srclib/apr-util</span><br><span class=\"line\"></span><br><span class=\"line\">%build</span><br><span class=\"line\">./configure --prefix=%_prefix  --with-included-apr</span><br><span class=\"line\">make %&#123;?_smp_mflags&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">%install</span><br><span class=\"line\">make  DESTDIR=%buildroot/usr/<span class=\"built_in\">local</span>/apache install</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">%files</span><br><span class=\"line\">%defattr(-,root,root)</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/apache</span><br><span class=\"line\"></span><br><span class=\"line\">%changelog</span><br></pre></td></tr></table></figure><ul><li>其中的<code>BuildRequires</code>是构架rpm包时需要的依赖，<code>Requires</code>是安装软件包时的依赖包，如果构建rpm包的依赖包不存在，则会在构建时提示失败如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost SPECS]<span class=\"comment\"># rpmbuild -ba http-2.4.33.spec </span></span><br><span class=\"line\">错误：构建依赖失败：</span><br><span class=\"line\">\tgcc 被 http-2.4.33-2.4.33-1.el7.centos.x86_64 需要</span><br><span class=\"line\">\tautomake 被 http-2.4.33-2.4.33-1.el7.centos.x86_64 需要</span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p>本文继续介绍关于yum的配置，如更换国内yum源以提高下载速度，和使用yum下载rpm软件包；另外将介绍如何使用源码包安装软件。</p>","more":"<hr><h1 id=\"yum相关配置\"><a href=\"#yum相关配置\" class=\"headerlink\" title=\"yum相关配置\"></a>yum相关配置</h1><h2 id=\"更换yum源\"><a href=\"#更换yum源\" class=\"headerlink\" title=\"更换yum源\"></a>更换yum源</h2><ul><li>由于yum配置的源默认为国外的源，访问速度较慢，所以我们可以将yum源替换为国内的源；</li><li>首先将上篇文章备份的<code>yum.repos.d</code>目录恢复，然后删除目录下的<code>CentOS7-Base.repo</code>文件：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># rm -rf /etc/yum.repos.d</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mv /etc/yum.repos.d.bak/ /etc/yum.repos.d</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># rm -f /etc/yum.repos.d/CentOS-Base.repo</span></span><br></pre></td></tr></table></figure><ul><li>然后下载网易163的yum源文件，可以使用<code>wget</code>命令或者<code>curl</code>命令，由于默认<code>wget</code>命令没有安装，并且已经删除了yum源文件，所以使用<code>curl -O http://mirrors.163.com/.help/CentOS7-Base-163.repo</code>下载文件：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cd /etc/yum.repos.d/</span></span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># curl -O http://mirrors.163.com/.help/CentOS7-Base-163.repo</span></span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100  1572  100  1572    0     0   8253      0 --:--:-- --:--:-- --:--:--  8273</span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># ls</span></span><br><span class=\"line\">CentOS7-Base-163.repo  CentOS-Debuginfo.repo  CentOS-Media.repo    CentOS-Vault.repo</span><br><span class=\"line\">CentOS-CR.repo         CentOS-fasttrack.repo  CentOS-Sources.repo</span><br></pre></td></tr></table></figure><ul><li>然后使用命令<code>yum repolist</code>或<code>yum repolist all</code>查看新的yum源是否启用：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># yum repolist</span></span><br><span class=\"line\">已加载插件：fastestmirror</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\">源标识                                源名称                                             状态</span><br><span class=\"line\">base/7/x86_64                         CentOS-7 - Base - 163.com                          9,591</span><br><span class=\"line\">extras/7/x86_64                       CentOS-7 - Extras - 163.com                          448</span><br><span class=\"line\">updates/7/x86_64                      CentOS-7 - Updates - 163.com                       2,416</span><br><span class=\"line\">repolist: 12,455</span><br></pre></td></tr></table></figure><ul><li>接着使用<code>yum clean all</code>情况缓存，即可正常使用新的yum源，使用<code>yum install -y wget</code>安装<code>wget</code>命令。</li></ul><h2 id=\"安装扩展源\"><a href=\"#安装扩展源\" class=\"headerlink\" title=\"安装扩展源\"></a>安装扩展源</h2><ul><li>有些软件包没有在yum源内，这时需要为yum安装扩展源epel；</li><li>安装扩展源epel可以直接使用<code>yum install -y epel-release</code>命令，安装之后在<code>/etc/yum.repo.d/</code>目录下会下载两个epel仓库文件：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot yum.repos.d]<span class=\"comment\"># ls</span></span><br><span class=\"line\">CentOS-Base.repo       CentOS-Epel.repo       CentOS-Sources.repo  epel-testing.repo</span><br><span class=\"line\">CentOS-CR.repo         CentOS-fasttrack.repo  CentOS-Vault.repo</span><br><span class=\"line\">CentOS-Debuginfo.repo  CentOS-Media.repo      epel.repo</span><br></pre></td></tr></table></figure><ul><li>再使用<code>yum repolist</code>查看epel仓库已经被启用：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># yum repolist </span></span><br><span class=\"line\">已加载插件：fastestmirror</span><br><span class=\"line\">epel/x86_64/metalink                                                   | 6.4 kB  00:00:00     </span><br><span class=\"line\">epel                                                                   | 4.7 kB  00:00:00     </span><br><span class=\"line\">(1/3): epel/x86_64/group_gz                                            | 266 kB  00:00:01     </span><br><span class=\"line\">(2/3): epel/x86_64/updateinfo                                          | 915 kB  00:00:01     </span><br><span class=\"line\">(3/3): epel/x86_64/primary_db                                          | 6.3 MB  00:00:02     </span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * epel: mirrors.ustc.edu.cn</span><br><span class=\"line\">源标识                       源名称                                                     状态</span><br><span class=\"line\">base/7/x86_64                CentOS-7 - Base - 163.com                                   9,591</span><br><span class=\"line\">epel/x86_64                  Extra Packages <span class=\"keyword\">for</span> Enterprise Linux 7 - x86_64             12,491</span><br><span class=\"line\">extras/7/x86_64              CentOS-7 - Extras - 163.com                                   448</span><br><span class=\"line\">updates/7/x86_64             CentOS-7 - Updates - 163.com                                2,416</span><br><span class=\"line\">repolist: 24,946</span><br></pre></td></tr></table></figure><h2 id=\"下载rpm包\"><a href=\"#下载rpm包\" class=\"headerlink\" title=\"下载rpm包\"></a>下载rpm包</h2><ul><li>使用yum可以将仓库内的rpm软件包下载到本地，但下载的软件包必须是未被安装的软件包，否则会提示软件包已安装，不做处理；</li><li>使用<code>yum install -y [包名] --downloadonly</code>命令就可以将rpm软件包下载到本地：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot yum.repos.d]<span class=\"comment\"># yum install -y zsh --downloadonly</span></span><br><span class=\"line\">已加载插件：fastestmirror, langpacks</span><br><span class=\"line\">Repository epel is listed more than once <span class=\"keyword\">in</span> the configuration</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\">正在解决依赖关系</span><br><span class=\"line\">--&gt; 正在检查事务</span><br><span class=\"line\">---&gt; 软件包 zsh.x86_64.0.5.0.2-28.el7 将被 安装</span><br><span class=\"line\">--&gt; 解决依赖关系完成</span><br><span class=\"line\"></span><br><span class=\"line\">依赖关系解决</span><br><span class=\"line\"></span><br><span class=\"line\">==============================================================================================</span><br><span class=\"line\"> Package            架构                  版本                        源                 大小</span><br><span class=\"line\">==============================================================================================</span><br><span class=\"line\">正在安装:</span><br><span class=\"line\"> zsh                x86_64                5.0.2-28.el7                os                2.4 M</span><br><span class=\"line\"></span><br><span class=\"line\">事务概要</span><br><span class=\"line\">==============================================================================================</span><br><span class=\"line\">安装  1 软件包</span><br><span class=\"line\"></span><br><span class=\"line\">总下载量：2.4 M</span><br><span class=\"line\">安装大小：5.6 M</span><br><span class=\"line\">Background downloading packages, <span class=\"keyword\">then</span> exiting:</span><br><span class=\"line\">zsh-5.0.2-28.el7.x86_64.rpm                                            | 2.4 MB  00:00:00     </span><br><span class=\"line\">exiting because <span class=\"string\">\"Download Only\"</span> specified</span><br></pre></td></tr></table></figure><ul><li>下载的软件包存放在系统<code>/var/cache/yum/x86_64/7/</code>目录下的对应的源的<code>Packages</code>目录下，软件包是从哪个源下载的，从之前的下载命令可以看到软件包的源，如上面的zsh软件包的源是<code>os</code>，所以下载的软件包在<code>var/cache/yum/x86_64/7/os/packages/</code>目录下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot yum.repos.d]<span class=\"comment\"># cd /var/cache/yum/x86_64/7/os/packages/</span></span><br><span class=\"line\">[root@evobot packages]<span class=\"comment\"># ls</span></span><br><span class=\"line\">zsh-5.0.2-28.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><ul><li>也可以在下载时指定软件包下载的路径，在下载命令后使用<code>--downloaddir=/dirpath</code>选项即可：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot packages]<span class=\"comment\"># yum install -y zsh --downloadonly --downloaddir=/tmp/</span></span><br><span class=\"line\">已加载插件：fastestmirror, langpacks</span><br><span class=\"line\">Repository epel is listed more than once <span class=\"keyword\">in</span> the configuration</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\">正在解决依赖关系</span><br><span class=\"line\">--&gt; 正在检查事务</span><br><span class=\"line\">---&gt; 软件包 zsh.x86_64.0.5.0.2-28.el7 将被 安装</span><br><span class=\"line\">--&gt; 解决依赖关系完成</span><br><span class=\"line\"></span><br><span class=\"line\">依赖关系解决</span><br><span class=\"line\"></span><br><span class=\"line\">==============================================================================================</span><br><span class=\"line\"> Package            架构                  版本                        源                 大小</span><br><span class=\"line\">==============================================================================================</span><br><span class=\"line\">正在安装:</span><br><span class=\"line\"> zsh                x86_64                5.0.2-28.el7                os                2.4 M</span><br><span class=\"line\"></span><br><span class=\"line\">事务概要</span><br><span class=\"line\">==============================================================================================</span><br><span class=\"line\">安装  1 软件包</span><br><span class=\"line\"></span><br><span class=\"line\">总下载量：2.4 M</span><br><span class=\"line\">安装大小：5.6 M</span><br><span class=\"line\">Background downloading packages, <span class=\"keyword\">then</span> exiting:</span><br><span class=\"line\">exiting because <span class=\"string\">\"Download Only\"</span> specified</span><br><span class=\"line\">[root@evobot packages]<span class=\"comment\"># ls /tmp/</span></span><br><span class=\"line\">yum_save_tx.2018-04-19.00-20.1V7tv9.yumtx  zsh-5.0.2-28.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><ul><li>针对已安装的包想要下载rpm包，可以使用<code>yum reinstall</code>命令来下载，其余选项与前面的命令相同：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot packages]<span class=\"comment\"># yum install -y vim-enhanced --downloadonly --downloaddir=/tmp</span></span><br><span class=\"line\">已加载插件：fastestmirror, langpacks</span><br><span class=\"line\">Repository epel is listed more than once <span class=\"keyword\">in</span> the configuration</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\">软件包 2:vim-enhanced-7.4.160-2.el7.x86_64 已安装并且是最新版本</span><br><span class=\"line\">无须任何处理</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot packages]<span class=\"comment\"># yum reinstall -y vim-enhanced --downloadonly --downloaddir=/tmp</span></span><br><span class=\"line\">已加载插件：fastestmirror, langpacks</span><br><span class=\"line\">Repository epel is listed more than once <span class=\"keyword\">in</span> the configuration</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\">正在解决依赖关系</span><br><span class=\"line\">--&gt; 正在检查事务</span><br><span class=\"line\">---&gt; 软件包 vim-enhanced.x86_64.2.7.4.160-2.el7 将被 已重新安装</span><br><span class=\"line\">--&gt; 解决依赖关系完成</span><br><span class=\"line\"></span><br><span class=\"line\">依赖关系解决</span><br><span class=\"line\"></span><br><span class=\"line\">==============================================================================================</span><br><span class=\"line\"> Package                  架构               版本                        源              大小</span><br><span class=\"line\">==============================================================================================</span><br><span class=\"line\">重新安装:</span><br><span class=\"line\"> vim-enhanced             x86_64             2:7.4.160-2.el7             os             1.0 M</span><br><span class=\"line\"></span><br><span class=\"line\">事务概要</span><br><span class=\"line\">==============================================================================================</span><br><span class=\"line\">重新安装  1 软件包</span><br><span class=\"line\"></span><br><span class=\"line\">总下载量：1.0 M</span><br><span class=\"line\">安装大小：2.2 M</span><br><span class=\"line\">Background downloading packages, <span class=\"keyword\">then</span> exiting:</span><br><span class=\"line\">vim-enhanced-7.4.160-2.el7.x86_64.rpm                                  | 1.0 MB  00:00:00     </span><br><span class=\"line\">exiting because <span class=\"string\">\"Download Only\"</span> specified</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot packages]<span class=\"comment\"># ls /tmp/</span></span><br><span class=\"line\">vim-enhanced-7.4.160-2.el7.x86_64.rpm      yum_save_tx.2018-04-19.00-23.Hu2DEg.yumtx</span><br></pre></td></tr></table></figure><h2 id=\"yum源优先级\"><a href=\"#yum源优先级\" class=\"headerlink\" title=\"yum源优先级\"></a>yum源优先级</h2><ul><li>设置yum源的优先级，需要安装<code>yum-plugin-priorities</code>软件包；</li><li>确认<code>/etc//etc/yum/pluginconf.d/priorities.conf</code>文件内容如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[main]</span><br><span class=\"line\">enabled = 1</span><br></pre></td></tr></table></figure><ul><li>要在 yum 检查更新时获取权限较低的源中较新的软件，可在上面的文件中加入<code>check_obsoletes=1</code></li><li>然后在<code>yum.repos.d</code>目录下的<code>.repo</code>文件中加入<code>priority=N</code>指定优先级，其中N为1~99，默认为99，N越小权限越高；</li><li>添加优先级的形式如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[base]</span><br><span class=\"line\">name=CentOS-<span class=\"variable\">$releasever</span> - Base</span><br><span class=\"line\">mirrorlist=http://mirrorlist.centos.org/?release=<span class=\"variable\">$releasever</span>&amp;arch=<span class=\"variable\">$basearch</span>&amp;repo=os</span><br><span class=\"line\"><span class=\"comment\">#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/</span></span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=http://mirror.centos.org/centos/RPM-GPG-KEY-centos4</span><br><span class=\"line\">priority=1</span><br><span class=\"line\"><span class=\"comment\">#released updates</span></span><br><span class=\"line\">[updates]</span><br><span class=\"line\">name=CentOS-<span class=\"variable\">$releasever</span> - Updates</span><br><span class=\"line\">mirrorlist=http://mirrorlist.centos.org/?release=<span class=\"variable\">$releasever</span>&amp;arch=<span class=\"variable\">$basearch</span>&amp;repo=updates</span><br><span class=\"line\"><span class=\"comment\">#baseurl=http://mirror.centos.org/centos/$releasever/updates/$basearch/</span></span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=http://mirror.centos.org/centos/RPM-GPG-KEY-centos4</span><br><span class=\"line\">priority=1</span><br><span class=\"line\">[contrib]</span><br><span class=\"line\">name=CentOS-<span class=\"variable\">$releasever</span> - Contrib</span><br><span class=\"line\">mirrorlist=http://mirrorlist.centos.org/?release=<span class=\"variable\">$releasever</span>&amp;arch=<span class=\"variable\">$basearch</span>&amp;repo=contrib</span><br><span class=\"line\"><span class=\"comment\">#baseurl=http://mirror.centos.org/centos/$releasever/contrib/$basearch/</span></span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">gpgkey=http://mirror.centos.org/centos/RPM-GPG-KEY-centos4</span><br><span class=\"line\">priority=2</span><br></pre></td></tr></table></figure><ul><li>官方建议的仓库优先级如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[base], [addons], [updates], [extras] ... priority=1</span><br><span class=\"line\">[centosplus] priority=1 (same priority as base and updates) but should be left disabled</span><br><span class=\"line\">[contrib] ... priority=2</span><br><span class=\"line\">Third Party Repos ... priority=N  (<span class=\"built_in\">where</span> N is &gt; 10 and based on your preference)</span><br></pre></td></tr></table></figure><hr><h1 id=\"安装源码包\"><a href=\"#安装源码包\" class=\"headerlink\" title=\"安装源码包\"></a>安装源码包</h1><ul><li>安装源码包，需要先下载软件包的源代码，建议下载的源码包保存在<code>/usr/local/src</code>目录下；</li><li>这里以Apache源码包安装为例，首先下载Apache的源码包并解压：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot src]<span class=\"comment\"># wget http://mirrors.cnnic.cn/apache/httpd/httpd-2.4.33.tar.gz</span></span><br><span class=\"line\">[root@evobot src]<span class=\"comment\"># tar zxvf httpd-2.4.33.tar.gz </span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot src]<span class=\"comment\"># cd httpd-2.4.33/</span></span><br><span class=\"line\">[root@evobot httpd-2.4.33]<span class=\"comment\"># ls</span></span><br><span class=\"line\">ABOUT_APACHE     BuildBin.dsp    emacs-style     LAYOUT        NOTICE            srclib</span><br><span class=\"line\">acinclude.m4     buildconf       httpd.dep       libhttpd.dep  NWGNUmakefile     support</span><br><span class=\"line\">Apache-apr2.dsw  CHANGES         httpd.dsp       libhttpd.dsp  os                <span class=\"built_in\">test</span></span><br><span class=\"line\">Apache.dsw       CMakeLists.txt  httpd.mak       libhttpd.mak  README            VERSIONING</span><br><span class=\"line\">apache_probes.d  config.layout   httpd.spec      LICENSE       README.cmake</span><br><span class=\"line\">ap.d             configure       include         Makefile.in   README.platforms</span><br><span class=\"line\">build            configure.in    INSTALL         Makefile.win  ROADMAP</span><br><span class=\"line\">BuildAll.dsp     docs            InstallBin.dsp  modules       server</span><br></pre></td></tr></table></figure><ul><li>查看解压出的文件，一般源码包都会包含<code>INSTALL</code>和<code>README</code>文件，其中<code>README</code>一般是介绍软件包，<code>INSTALL</code>文件则是源码包安装方法；</li><li>在<code>INSTALL</code>中，安装Apache的步骤如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./configure --prefix=PREFIX\t<span class=\"comment\"># PREFIX是指安装路径，其余选项可以参考INSTALL文件</span></span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ make install</span><br><span class=\"line\">$ PREFIX/bin/apachectl start</span><br></pre></td></tr></table></figure><ul><li>执行<code>./configure</code>时，如果无法判断命令执行结果是否正常，可以在运行完之后运行<code>echo $?</code>，如果返回值为<code>0</code>，则命令执行正确，否则命令执行错误；</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot httpd-2.4.33]<span class=\"comment\"># ./configure --prefix=/usr/local/apache</span></span><br><span class=\"line\">checking <span class=\"keyword\">for</span> chosen layout... Apache</span><br><span class=\"line\">checking <span class=\"keyword\">for</span> working mkdir -p... yes</span><br><span class=\"line\">checking <span class=\"keyword\">for</span> grep that handles long lines and -e... /bin/grep</span><br><span class=\"line\">checking <span class=\"keyword\">for</span> egrep... /bin/grep -E</span><br><span class=\"line\">checking build system <span class=\"built_in\">type</span>... x86_64-pc-linux-gnu</span><br><span class=\"line\">checking host system <span class=\"built_in\">type</span>... x86_64-pc-linux-gnu</span><br><span class=\"line\">checking target system <span class=\"built_in\">type</span>... x86_64-pc-linux-gnu</span><br><span class=\"line\">configure: </span><br><span class=\"line\">configure: Configuring Apache Portable Runtime library...</span><br><span class=\"line\">configure: </span><br><span class=\"line\">checking <span class=\"keyword\">for</span> APR... no</span><br><span class=\"line\">configure: error: APR not found.  Please <span class=\"built_in\">read</span> the documentation.</span><br><span class=\"line\">[root@evobot httpd-2.4.33]<span class=\"comment\"># echo $?</span></span><br><span class=\"line\">1</span><br><span class=\"line\"><span class=\"comment\"># 返回值不为0，命令执行错误，报错为APR未找到，需要下载APR</span></span><br></pre></td></tr></table></figure><ul><li>Apache编译依赖APR包，所以再次下载<code>apr</code>和<code>apr-util</code>源码包解压到Apache源码包内的<code>srclib</code>目录内，另外还需要安装<code>gcc</code>、<code>pcre-devel.x86_64</code>和<code>expat-devel.x86_64</code>软件包：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot src]<span class=\"comment\"># wget http://mirrors.cnnic.cn/apache/apr/apr-1.6.3.tar.gz</span></span><br><span class=\"line\">[root@evobot src]<span class=\"comment\"># wget http://mirrors.cnnic.cn/apache/apr/apr-util-1.6.1.tar.bz2</span></span><br><span class=\"line\">[root@evobot src]<span class=\"comment\"># tar zxvf apr-1.6.3.tar.gz -C httpd-2.4.33/srclib/apr</span></span><br><span class=\"line\">[root@evobot src]<span class=\"comment\"># tar jxvf apr-util-1.6.1.tar.bz2 -C httpd-2.4.33/srclib/apr-util</span></span><br></pre></td></tr></table></figure><ul><li>添加<code>apr</code>选项并重新编译安装：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot httpd-2.4.33]<span class=\"comment\"># ./configure --prefix=/usr/local/apache  --with-included-apr</span></span><br><span class=\"line\">[root@evobot httpd-2.4.33]<span class=\"comment\"># make</span></span><br><span class=\"line\">[root@evobot httpd-2.4.33]<span class=\"comment\"># make install</span></span><br></pre></td></tr></table></figure><ul><li>安装完成并没有报错后，可以查看安装目录下的文件：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">local</span>]<span class=\"comment\"># ls apache/</span></span><br><span class=\"line\">bin  build  cgi-bin  conf  error  htdocs  icons  include  lib  logs  man  manual  modules</span><br></pre></td></tr></table></figure><ul><li>源码包安装相较于yum安装，可以指定安装路径，并且卸载时只需要直接删除软件安装目录即可。</li></ul><hr><h1 id=\"rpm打包\"><a href=\"#rpm打包\" class=\"headerlink\" title=\"rpm打包\"></a>rpm打包</h1><h2 id=\"rpm打包命令\"><a href=\"#rpm打包命令\" class=\"headerlink\" title=\"rpm打包命令\"></a>rpm打包命令</h2><ul><li>将源码包打包为rpm包，可以方便将软件包移植到其他机器，方便使用；</li><li>在Centos7中，将源码包打包为rpm包，需要使用<code>yum</code>安装<code>rpmdevtools</code>软件包，然后执行<code>rpmdev-setuptree</code>在家目录生成rpm打包目录：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># yum install -y rpmdevtools</span></span><br><span class=\"line\">[root@localhost <span class=\"built_in\">local</span>]<span class=\"comment\"># rpmdev-setuptree\t# 将在家目录生成rpmbuild目录</span></span><br></pre></td></tr></table></figure><ul><li>在<code>rpmbuild</code>目录下，会有五个子目录，作用如下：</li></ul><table><thead><tr><th style=\"text-align:center\">目录名</th><th style=\"text-align:center\">作用</th></tr></thead><tbody><tr><td style=\"text-align:center\">BUILD</td><td style=\"text-align:center\">编译时所用的暂存目录</td></tr><tr><td style=\"text-align:center\">RPMS</td><td style=\"text-align:center\">存放打包好的rpm包</td></tr><tr><td style=\"text-align:center\">SOURCES</td><td style=\"text-align:center\">放置源码包和补丁文件</td></tr><tr><td style=\"text-align:center\">SPECS</td><td style=\"text-align:center\">放置spec模板文件，用于生成rpm包</td></tr><tr><td style=\"text-align:center\">SRPMS</td><td style=\"text-align:center\">放置rpm源码包</td></tr></tbody></table><h2 id=\"spec文件说明\"><a href=\"#spec文件说明\" class=\"headerlink\" title=\"spec文件说明\"></a>spec文件说明</h2><ul><li>rpm打包的关键就在于sepc文件的编写，需要为要打包的源码生成一个新的spec文件，使用命令<code>rpmdev-newspec [filename.spec]</code>生成，然后将源码包放到SOURCES目录：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost rpmbuild]<span class=\"comment\"># cd SPECS/\t# 进入SPEC目录</span></span><br><span class=\"line\">[root@localhost SPECS]<span class=\"comment\"># rpmdev-newspec http-2.4.33.spec\t#生成spec模板</span></span><br><span class=\"line\">http-2.4.33.spec created; <span class=\"built_in\">type</span> minimal, rpm version &gt;= 4.11.</span><br><span class=\"line\">[root@localhost SPECS]<span class=\"comment\"># ls</span></span><br><span class=\"line\">http-2.4.33.spec</span><br><span class=\"line\">[root@localhost SPECS]<span class=\"comment\"># cp /usr/local/src/httpd-2.4.33.tar.gz ../SOURCES/\t# 复制源码包到SOURCES目录</span></span><br></pre></td></tr></table></figure><ul><li>由于Apache2.4.33依赖APR软件包，所以需要将apr和apr-util源码包也放入SOURCES目录下以便使用；</li><li>spec文件的格式和每行作用如下：</li></ul><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name:           http-2.4.33\t# 软件名称</span><br><span class=\"line\">Version:\t\t\t# 软件版本</span><br><span class=\"line\">Release:        1%&#123;?dist&#125;\t# 发布次数</span><br><span class=\"line\">Summary:\t\t\t# 软件说明</span><br><span class=\"line\">License:\t\t\t# 授权模式，如GPL，即自由软件</span><br><span class=\"line\">URL:\t\t\t\t# 源码包URL地址，可随意填写</span><br><span class=\"line\">Source0:\t\t\t# 源码包名字，可以指定多个</span><br><span class=\"line\">BuildRequires:\t\t# 编译过程依赖的工具</span><br><span class=\"line\">Requires:\t\t\t# 打包生成的rpm包安装时所以来的软件包</span><br><span class=\"line\"></span><br><span class=\"line\">%description\t\t# 软件描述</span><br><span class=\"line\"></span><br><span class=\"line\">%prep\t\t\t\t# 打包准备工作，如创建目录，解压源码包等</span><br><span class=\"line\">%setup -q\t\t\t# 自动解压缩源码包并进入解压出的目录</span><br><span class=\"line\"></span><br><span class=\"line\">%build\t\t\t\t# 在BUILD目录编译时的编译命令，如configure和make</span><br><span class=\"line\">%configure</span><br><span class=\"line\">make %&#123;?_smp_mflags&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">%install\t\t\t# 安装到BUILDROOT虚拟目录的操作命令，如make install</span><br><span class=\"line\">rm -rf $RPM_BUILD_ROOT</span><br><span class=\"line\">%make_install</span><br><span class=\"line\"></span><br><span class=\"line\">%files\t\t\t\t# 需要添加到rpm包中的文件</span><br><span class=\"line\">%doc</span><br><span class=\"line\"></span><br><span class=\"line\">%changelog\t\t\t# 更新记录</span><br><span class=\"line\"></span><br><span class=\"line\"># 最终生成的rpm包以&#123;Name&#125;-&#123;Version&#125;-&#123;Release&#125;-&#123;BuildArch&#125;.rpm命名</span><br></pre></td></tr></table></figure><ul><li>在上面的配置文件选项中，有些如<code>%configure</code>这样的字符串，这是打包定义的变量，定义变量的文件在<code>/usr/lib/rpm/macros</code>中，如<code>RPM_BUILD_DIR</code>表示<code>~/rpmbuild/BUILD</code></li><li>以Apache源码包为例，配置sepc文件如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name:           httpd</span><br><span class=\"line\">Version:        2.4.33</span><br><span class=\"line\">Release:        1%&#123;?dist&#125;</span><br><span class=\"line\">Summary:        Apache <span class=\"built_in\">source</span> code</span><br><span class=\"line\"></span><br><span class=\"line\">License:        GPL</span><br><span class=\"line\">URL:            apache.com</span><br><span class=\"line\">Source0:        httpd-2.4.33.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">BuildRequires:  gcc</span><br><span class=\"line\">Requires:       rpm</span><br><span class=\"line\"></span><br><span class=\"line\">%description</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">%prep</span><br><span class=\"line\">%setup -q</span><br><span class=\"line\">rm -rf srclib/apr*</span><br><span class=\"line\">tar -zxvf %_sourcedir/apr-1.6.3.tar.gz -C srclib/</span><br><span class=\"line\">tar -jxvf %_sourcedir/apr-util-1.6.1.tar.bz2 -C srclib/</span><br><span class=\"line\"><span class=\"built_in\">pwd</span></span><br><span class=\"line\">mv -f srclib/apr-1.6.3 srclib/apr</span><br><span class=\"line\">mv -f srclib/apr-util-1.6.1 srclib/apr-util</span><br><span class=\"line\"></span><br><span class=\"line\">%build</span><br><span class=\"line\">./configure --prefix=%_prefix  --with-included-apr</span><br><span class=\"line\">make %&#123;?_smp_mflags&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">%install</span><br><span class=\"line\">make  DESTDIR=%buildroot/usr/<span class=\"built_in\">local</span>/apache install</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">%files</span><br><span class=\"line\">%defattr(-,root,root)</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/apache</span><br><span class=\"line\"></span><br><span class=\"line\">%changelog</span><br></pre></td></tr></table></figure><ul><li>其中的<code>BuildRequires</code>是构架rpm包时需要的依赖，<code>Requires</code>是安装软件包时的依赖包，如果构建rpm包的依赖包不存在，则会在构建时提示失败如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost SPECS]<span class=\"comment\"># rpmbuild -ba http-2.4.33.spec </span></span><br><span class=\"line\">错误：构建依赖失败：</span><br><span class=\"line\">\tgcc 被 http-2.4.33-2.4.33-1.el7.centos.x86_64 需要</span><br><span class=\"line\">\tautomake 被 http-2.4.33-2.4.33-1.el7.centos.x86_64 需要</span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->"},{"title":"pyenv安装使用指南","author":"Evobot","abbrlink":"13c2c977","date":"2018-05-08T09:55:36.000Z","image":null,"_content":"\n在使用python的过程中，经常会遇到不同的项目可能使用的是不同的python版本，或者有些项目需要使用特定版本的软件包，为了保持系统python软件包不会变的混乱，我们可以使用pyenv来管理系统的python版本，并且使用virtualenv来管理不同的环境。\n<!--more-->\n\n------\n\n# pyenv安装配置\n\n- 官方的仓库和安装步骤可以查看[github-pyenv](https://github.com/pyenv/pyenv)，为了避免安装时报错，首先在shell中声明全局变量：\n\n  ```bash\n  $ export PYTHON_CONFIGURE_OPTS=\"--enable-shared\"\t\n  ```\n\n## 克隆仓库\n\n- 克隆最新版本的pyenv仓库，这里克隆到家目录下，也可以自行指定克隆到其他目录：\n\n  ```bash\n  $ git clone git://github.com/yyuu/pyenv.git ~/.pyenv\n  ```\n\n## 配置pyenv\n\n1. 为pyenv添加环境变量，如果先前克隆仓库时指定了其他目录，这里也要相应的更改pyenv的目录：\n\n   ```bash\n   $ echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bash_profile\n   $ echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bash_profile\n   ```\n\n   {% note info %}\n\n   使用zsh的需要将上面的`~/.bash_profile`替换为`~/.zshenv`；\n\n   Ubuntu和Fedora则使用`~/.bashrc`替换；\n\n   {% endnote %}\n\n2. 然后将pyenv的初始化命令添加到shell中：\n\n   ```bash\n   $ echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n  eval \"$(pyenv init -)\"\\nfi' >> ~/.bash_profile\n   ```\n\n   {% note info %}\n\n   使用zsh的需要将上面的`~/.bash_profile`替换为`~/.zshenv`；\n\n   Ubuntu和Fedora则使用`~/.bashrc`替换；\n\n   {% endnote %}\n\n3. 安装完成后，需要重新登陆shell或者重新载入配置文件，如果上面替换过`.bash_profile`文件，则下面的命令也要更改为替换的文件名：\n\n   ```bash\n   $ source ~/.bash_pofile\n   ```\n\n4. 执行命令`pyenv --version`或`pyenv --help`来验证pyenv安装是否正确:\n\n   ```bash\n   $ pyenv --version\n   pyenv 1.2.4\n   $ pyenv --help\n   Usage: pyenv <command> [<args>]\n\n   Some useful pyenv commands are:\n      commands    List all available pyenv commands\n      local       Set or show the local application-specific Python version\n      global      Set or show the global Python version\n      shell       Set or show the shell-specific Python version\n      install     Install a Python version using python-build\n      uninstall   Uninstall a specific Python version\n      rehash      Rehash pyenv shims (run this after installing executables)\n      version     Show the current Python version and its origin\n      versions    List all Python versions available to pyenv\n      which       Display the full path to an executable\n      whence      List all Python versions that contain the given executable\n\n   See `pyenv help <command>' for information on a specific command.\n   For full documentation, see: https://github.com/pyenv/pyenv#readme\n   ```\n\n## 更换国内源\n\n- 由于使用pyenv默认会到官网下载python版本，导致下载速率非常缓慢，所以可以使用国内的源来加速pyenv的版本安装速度，pyenv的python版本下载配置文件每个都是单独的，所以需要针对要下载的版本修改其配置文件；\n\n- pyenv的python版本配置文件在目录`~/.pyenv/plugins/python-build/share/python-build/`下，例如需要下载python3.6.0版本，这里替换为搜狐的源<http://mirrors.sohu.com/python/>。\n\n- 修改`3.6.0`文件如下：\n\n  ```bash\n  #require_gcc\n  install_package \"openssl-1.0.2k\" \"https://www.openssl.org/source/openssl-1.0.2k.tar.gz#6b3977c61f2aedf0f96367dcfb5c6e578cf37e7b8d913b4ecb6643c3cb88d8c0\" mac_openssl --if has_broken_mac_openssl\n  install_package \"readline-6.3\" \"https://ftpmirror.gnu.org/readline/readline-6.3.tar.gz#56ba6071b9462f980c5a72ab0023893b65ba6debb4eeb475d7a563dc65cafd43\" standard --if has_broken_mac_readline\n  if has_tar_xz_support; then\n    #install_package \"Python-3.6.0\" \"https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tar.xz#b0c5f904f685e32d9232f7bdcbece9819a892929063b6e385414ad2dd6a23622\" ldflags_dirs standard verify_py36 ensurepip\n    # 注释原下载地址，增加下面的搜狐源下载地址\n    install_package \"Python-3.6.0\" \"http://mirrors.sohu.com/python/3.6.0/Python-3.6.0.tar.xz\" ldflags_dirs standard verify_py36 ensurepip\n  else\n    #install_package \"Python-3.6.0\" \"https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz#aa472515800d25a3739833f76ca3735d9f4b2fe77c3cb21f69275e0cce30cb2b\" ldflags_dirs standard verify_py36 ensurepip\n    # 同样进行替换\n    install_package \"Python-3.6.0\" \"http://mirrors.sohu.com/python/3.6.0/Python-3.6.0.tgz\" ldflags_dirs standard verify_py36 ensurepip\n  fi\n  ```\n\n- 修改完成后，执行`pyenv install 3.6.0`就可以看到下载是从搜狐的源进行下载，下载完成的python包保存在`~/.pyenv/cache`下：\n\n  ```bash\n  $ pyenv install 3.6.0\n  Downloading Python-3.6.0.tar.xz...\n  -> http://mirrors.sohu.com/python/3.6.0/Python-3.6.0.tar.xz\n  Installing Python-3.6.0...\n  Installed Python-3.6.0 to /home/evobot/.pyenv/versions/3.6.0\n  ```\n\n- 正是因为下载的包在`~/.pyenv/cache`目录下，所以我们也可以使用另一种方法来加速下载python版本包，直接到[搜狐源](http://mirrors.sohu.com/python/)下载需要的版本，然后放入`~/.pyenv/cache`目录，再执行`pyenv install`安装即可，也可以使用下面的一建执行命令：\n\n  ```bash\n  v=3.5.2|wget http://mirrors.sohu.com/python/$v/Python-$v.tar.xz -P ~/.pyenv/cache/;pyenv install $v\n  ```\n\n  > 其中变量v对应要下载的python版本号。\n\n# pyenv使用\n\n- 想要查看pyenv支持哪些python版本，可以执行`pyenv install --list`命令查看：\n\n  ```bash\n  $ pyenv install --list\n  Available versions:\n    2.1.3\n    2.2.3\n    2.3.7\n    ...\n  ```\n\n- 安装所需python版本命令如下，其中`-v`选项表示安装时是否输出详细信息：\n\n  ```bash\n  $ pyenv install -v 3.6.0\n  $ pyenv install 3.6.0\n  ```\n\n- `pyenv versions`查看当前系统已安装的python版本，其中有`*`的表示当前生效的版本，而`pyenv version`则是查看当前生效的python版本：\n\n  ```bash\n  $ pyenv versions\n  * system (set by /root/.pyenv/version)\n    3.5.0\n  $ pyenv version\n  3.5.0 (set by /root/.pyenv/version)\n  ```\n\n- 卸载python版本命令如下：\n\n  ```bash\n  $ pyenv versions\n  * system (set by /root/.pyenv/version)\n    3.5.0\n    \n  $ pyenv uninstall 3.5.0\n  pyenv: remove /root/.pyenv/versions/3.5.0? y\n\n  $ pyenv versions\n  * system (set by /root/.pyenv/version)\n  ```\n\n- 初始`pyenv versions`只有**system**，即系统全局的python版本，pyenv可以针对系统全局、目录、shell分别设置不同的python版本：\n\n  ```bash\n  # 设置全局python版本，版本号将会写入~/.pyenv/version\n  $ pyenv global 3.5.0\n\n  # 为当前目录设置python版本，版本号写入当前目录的.python-version文件。\n  # local设置的python版本优先级比global高。\n  $ pyenv local 3.6.0\n  $ pyenv versions\n    system\n    3.5.0\n  * 3.6.0 (set by /root/code/.python-version)\n\n  # 设置当前shell的python版本是通过设置PYENV_VERSION环境变量改变的。\n  # shell设置的pthon版本优先级比global和local都要高。\n  $ pyenv shell 3.5.0\n  $ pyenv versions\n    system\n  * 3.5.0 (set by PYENV_VERSION environment variable)\n    3.6.0\n    \n   # 取消当前shell的python版本设置\n   $ pyenv shell --unset\n  ```\n\n- 在每次增删python版本或者pip安装了新的包后，都需要执行`pyenv rehash`更新shims。\n\n> 更多的pyenv命令，可以查看[官方文档](https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#command-reference)。\n\n# virtualenv插件\n\npyenv的virtualenv插件，能够实现与virtualenv相同的功能，使用pyenv管理系统python版本，使用virtualenv管理不同的python环境，从而实现不同的项目在相同的python版本时，也能够同时使用各自的python环境。\n\n## 安装\n\n- [pyenv-virtualenv](https://github.com/pyenv/pyenv-virtualenv)插件安装直接使用git克隆到pyenv的Plugins目录：\n\n  ```bash\n  $ git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv\n  ```\n\n- 添加命令到`~/.bash_profile`，zsh用户添加到`~/.zshenv`，Ubuntu用户添加到`~/.bashrc`，完成后更新shell或重新登陆生效：\n\n  ```bash\n  $ echo 'eval \"$(pyenv virtualenv-init -)\"' >> ~/.bash_profile\n  $ exec \"$SHELL\"\n  ```\n\n## 使用\n\n- pyenv-virtualenv可以为同一个python版本创建多个虚拟工作环境，命令为`pyenv virtualenv [python版本号] [虚拟环境名]`，为当前的python版本创建虚拟环境的命令为`pyenv virtualenv [虚拟环境名]`：\n\n  ```bash\n  $ pyenv virtualenv 3.5.0 my-virtual-env-3.5.0\n\n  $ pyenv version\n  3.4.3 (set by /home/yyuu/.pyenv/version)\n  $ pyenv virtualenv venv34\n  ```\n\n- 使用`pyenv virtualenvs`查看系统当前存在的虚拟环境：\n\n  ```bash\n  $ pyenv virtualenvs\n    3.5.0/envs/venv35 (created from /root/.pyenv/versions/3.5.0)\n    venv35 (created from /root/.pyenv/versions/3.5.0)\n  ```\n\n- 如果在目录中使用`pyenv local [虚拟环境名]`为目录设置工作环境，那么在进入和离开目录时，会自动激活和去激活工作环境，并且在进入目录时，会在命令行开头显示当前的工作环境：\n\n  ```bash\n  root@ubuntu:~/code# pyenv local venv35\n  (venv35) root@ubuntu:~/code#\n  ```\n\n- 如果没有使用`pyenv local`命令为目录设置工作环境的话，也可以使用`pyenv activate [虚拟环境名]`来临时激活一个全局的工作环境，去激活使用`pyenv deactivate`命令：\n\n  ```bash\n  root@ubuntu:~/code2# pyenv activate venv35\n  pyenv-virtualenv: prompt changing will be removed from future release. configure `export PYENV_VIRTUALENV_DISABLE_PROMPT=1' to simulate the behavior.\n  (venv35) root@ubuntu:~/code2# cd ..\n  (venv35) root@ubuntu:~#\n\n  (venv35) root@ubuntu:~# pyenv deactivate\n  root@ubuntu:~#\n  ```\n\n- 删除已有的虚拟环境使用`pyenv uninstall my-virtual-env`命令：\n\n  ```bash\n  # pyenv uninstall venv35\n  pyenv-virtualenv: remove /root/.pyenv/versions/3.5.0/envs/venv35? y\n  ```\n\n# pip更换源\n\n- pip安装python包经常也会非常缓慢，可以将其更换为国内源，在家目录下创建`.pip`目录，并创建`.pip/pip.conf`文件，文件内容如下：\n\n  ```bash\n  [global]\n  index-url = http://mirrors.aliyun.com/pypi/simple/\n  [install]\n  trusted-host=mirrors.aliyun.com\n  ```\n\n- 这里使用阿里的pip镜像，使用`pip install`可以看到已经变成从阿里的镜像下载python包：\n\n  ```bash\n  $ pip install plumbum\n  Collecting plumbum\n    Downloading http://mirrors.aliyun.com/pypi/packages/b2/05/7720109462d0bd60466e74076a38ca12068771da146bfd18a502726c9da8/plumbum-1.6.6-py2.py3-none-any.whl (111kB)\n      100% |████████████████████████████████| 112kB 1.2MB/s\n  Installing collected packages: plumbum\n  Successfully installed plumbum-1.6.6\n  ```\n\n------\n\n","source":"_posts/pyenv安装使用指南.md","raw":"---\ntitle: pyenv安装使用指南\nauthor: Evobot\ncategories: Python\ntags:\n  - Python\n  - Linux\nabbrlink: 13c2c977\ndate: 2018-05-08 17:55:36\nimage:\n---\n\n在使用python的过程中，经常会遇到不同的项目可能使用的是不同的python版本，或者有些项目需要使用特定版本的软件包，为了保持系统python软件包不会变的混乱，我们可以使用pyenv来管理系统的python版本，并且使用virtualenv来管理不同的环境。\n<!--more-->\n\n------\n\n# pyenv安装配置\n\n- 官方的仓库和安装步骤可以查看[github-pyenv](https://github.com/pyenv/pyenv)，为了避免安装时报错，首先在shell中声明全局变量：\n\n  ```bash\n  $ export PYTHON_CONFIGURE_OPTS=\"--enable-shared\"\t\n  ```\n\n## 克隆仓库\n\n- 克隆最新版本的pyenv仓库，这里克隆到家目录下，也可以自行指定克隆到其他目录：\n\n  ```bash\n  $ git clone git://github.com/yyuu/pyenv.git ~/.pyenv\n  ```\n\n## 配置pyenv\n\n1. 为pyenv添加环境变量，如果先前克隆仓库时指定了其他目录，这里也要相应的更改pyenv的目录：\n\n   ```bash\n   $ echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bash_profile\n   $ echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bash_profile\n   ```\n\n   {% note info %}\n\n   使用zsh的需要将上面的`~/.bash_profile`替换为`~/.zshenv`；\n\n   Ubuntu和Fedora则使用`~/.bashrc`替换；\n\n   {% endnote %}\n\n2. 然后将pyenv的初始化命令添加到shell中：\n\n   ```bash\n   $ echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n  eval \"$(pyenv init -)\"\\nfi' >> ~/.bash_profile\n   ```\n\n   {% note info %}\n\n   使用zsh的需要将上面的`~/.bash_profile`替换为`~/.zshenv`；\n\n   Ubuntu和Fedora则使用`~/.bashrc`替换；\n\n   {% endnote %}\n\n3. 安装完成后，需要重新登陆shell或者重新载入配置文件，如果上面替换过`.bash_profile`文件，则下面的命令也要更改为替换的文件名：\n\n   ```bash\n   $ source ~/.bash_pofile\n   ```\n\n4. 执行命令`pyenv --version`或`pyenv --help`来验证pyenv安装是否正确:\n\n   ```bash\n   $ pyenv --version\n   pyenv 1.2.4\n   $ pyenv --help\n   Usage: pyenv <command> [<args>]\n\n   Some useful pyenv commands are:\n      commands    List all available pyenv commands\n      local       Set or show the local application-specific Python version\n      global      Set or show the global Python version\n      shell       Set or show the shell-specific Python version\n      install     Install a Python version using python-build\n      uninstall   Uninstall a specific Python version\n      rehash      Rehash pyenv shims (run this after installing executables)\n      version     Show the current Python version and its origin\n      versions    List all Python versions available to pyenv\n      which       Display the full path to an executable\n      whence      List all Python versions that contain the given executable\n\n   See `pyenv help <command>' for information on a specific command.\n   For full documentation, see: https://github.com/pyenv/pyenv#readme\n   ```\n\n## 更换国内源\n\n- 由于使用pyenv默认会到官网下载python版本，导致下载速率非常缓慢，所以可以使用国内的源来加速pyenv的版本安装速度，pyenv的python版本下载配置文件每个都是单独的，所以需要针对要下载的版本修改其配置文件；\n\n- pyenv的python版本配置文件在目录`~/.pyenv/plugins/python-build/share/python-build/`下，例如需要下载python3.6.0版本，这里替换为搜狐的源<http://mirrors.sohu.com/python/>。\n\n- 修改`3.6.0`文件如下：\n\n  ```bash\n  #require_gcc\n  install_package \"openssl-1.0.2k\" \"https://www.openssl.org/source/openssl-1.0.2k.tar.gz#6b3977c61f2aedf0f96367dcfb5c6e578cf37e7b8d913b4ecb6643c3cb88d8c0\" mac_openssl --if has_broken_mac_openssl\n  install_package \"readline-6.3\" \"https://ftpmirror.gnu.org/readline/readline-6.3.tar.gz#56ba6071b9462f980c5a72ab0023893b65ba6debb4eeb475d7a563dc65cafd43\" standard --if has_broken_mac_readline\n  if has_tar_xz_support; then\n    #install_package \"Python-3.6.0\" \"https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tar.xz#b0c5f904f685e32d9232f7bdcbece9819a892929063b6e385414ad2dd6a23622\" ldflags_dirs standard verify_py36 ensurepip\n    # 注释原下载地址，增加下面的搜狐源下载地址\n    install_package \"Python-3.6.0\" \"http://mirrors.sohu.com/python/3.6.0/Python-3.6.0.tar.xz\" ldflags_dirs standard verify_py36 ensurepip\n  else\n    #install_package \"Python-3.6.0\" \"https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz#aa472515800d25a3739833f76ca3735d9f4b2fe77c3cb21f69275e0cce30cb2b\" ldflags_dirs standard verify_py36 ensurepip\n    # 同样进行替换\n    install_package \"Python-3.6.0\" \"http://mirrors.sohu.com/python/3.6.0/Python-3.6.0.tgz\" ldflags_dirs standard verify_py36 ensurepip\n  fi\n  ```\n\n- 修改完成后，执行`pyenv install 3.6.0`就可以看到下载是从搜狐的源进行下载，下载完成的python包保存在`~/.pyenv/cache`下：\n\n  ```bash\n  $ pyenv install 3.6.0\n  Downloading Python-3.6.0.tar.xz...\n  -> http://mirrors.sohu.com/python/3.6.0/Python-3.6.0.tar.xz\n  Installing Python-3.6.0...\n  Installed Python-3.6.0 to /home/evobot/.pyenv/versions/3.6.0\n  ```\n\n- 正是因为下载的包在`~/.pyenv/cache`目录下，所以我们也可以使用另一种方法来加速下载python版本包，直接到[搜狐源](http://mirrors.sohu.com/python/)下载需要的版本，然后放入`~/.pyenv/cache`目录，再执行`pyenv install`安装即可，也可以使用下面的一建执行命令：\n\n  ```bash\n  v=3.5.2|wget http://mirrors.sohu.com/python/$v/Python-$v.tar.xz -P ~/.pyenv/cache/;pyenv install $v\n  ```\n\n  > 其中变量v对应要下载的python版本号。\n\n# pyenv使用\n\n- 想要查看pyenv支持哪些python版本，可以执行`pyenv install --list`命令查看：\n\n  ```bash\n  $ pyenv install --list\n  Available versions:\n    2.1.3\n    2.2.3\n    2.3.7\n    ...\n  ```\n\n- 安装所需python版本命令如下，其中`-v`选项表示安装时是否输出详细信息：\n\n  ```bash\n  $ pyenv install -v 3.6.0\n  $ pyenv install 3.6.0\n  ```\n\n- `pyenv versions`查看当前系统已安装的python版本，其中有`*`的表示当前生效的版本，而`pyenv version`则是查看当前生效的python版本：\n\n  ```bash\n  $ pyenv versions\n  * system (set by /root/.pyenv/version)\n    3.5.0\n  $ pyenv version\n  3.5.0 (set by /root/.pyenv/version)\n  ```\n\n- 卸载python版本命令如下：\n\n  ```bash\n  $ pyenv versions\n  * system (set by /root/.pyenv/version)\n    3.5.0\n    \n  $ pyenv uninstall 3.5.0\n  pyenv: remove /root/.pyenv/versions/3.5.0? y\n\n  $ pyenv versions\n  * system (set by /root/.pyenv/version)\n  ```\n\n- 初始`pyenv versions`只有**system**，即系统全局的python版本，pyenv可以针对系统全局、目录、shell分别设置不同的python版本：\n\n  ```bash\n  # 设置全局python版本，版本号将会写入~/.pyenv/version\n  $ pyenv global 3.5.0\n\n  # 为当前目录设置python版本，版本号写入当前目录的.python-version文件。\n  # local设置的python版本优先级比global高。\n  $ pyenv local 3.6.0\n  $ pyenv versions\n    system\n    3.5.0\n  * 3.6.0 (set by /root/code/.python-version)\n\n  # 设置当前shell的python版本是通过设置PYENV_VERSION环境变量改变的。\n  # shell设置的pthon版本优先级比global和local都要高。\n  $ pyenv shell 3.5.0\n  $ pyenv versions\n    system\n  * 3.5.0 (set by PYENV_VERSION environment variable)\n    3.6.0\n    \n   # 取消当前shell的python版本设置\n   $ pyenv shell --unset\n  ```\n\n- 在每次增删python版本或者pip安装了新的包后，都需要执行`pyenv rehash`更新shims。\n\n> 更多的pyenv命令，可以查看[官方文档](https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#command-reference)。\n\n# virtualenv插件\n\npyenv的virtualenv插件，能够实现与virtualenv相同的功能，使用pyenv管理系统python版本，使用virtualenv管理不同的python环境，从而实现不同的项目在相同的python版本时，也能够同时使用各自的python环境。\n\n## 安装\n\n- [pyenv-virtualenv](https://github.com/pyenv/pyenv-virtualenv)插件安装直接使用git克隆到pyenv的Plugins目录：\n\n  ```bash\n  $ git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv\n  ```\n\n- 添加命令到`~/.bash_profile`，zsh用户添加到`~/.zshenv`，Ubuntu用户添加到`~/.bashrc`，完成后更新shell或重新登陆生效：\n\n  ```bash\n  $ echo 'eval \"$(pyenv virtualenv-init -)\"' >> ~/.bash_profile\n  $ exec \"$SHELL\"\n  ```\n\n## 使用\n\n- pyenv-virtualenv可以为同一个python版本创建多个虚拟工作环境，命令为`pyenv virtualenv [python版本号] [虚拟环境名]`，为当前的python版本创建虚拟环境的命令为`pyenv virtualenv [虚拟环境名]`：\n\n  ```bash\n  $ pyenv virtualenv 3.5.0 my-virtual-env-3.5.0\n\n  $ pyenv version\n  3.4.3 (set by /home/yyuu/.pyenv/version)\n  $ pyenv virtualenv venv34\n  ```\n\n- 使用`pyenv virtualenvs`查看系统当前存在的虚拟环境：\n\n  ```bash\n  $ pyenv virtualenvs\n    3.5.0/envs/venv35 (created from /root/.pyenv/versions/3.5.0)\n    venv35 (created from /root/.pyenv/versions/3.5.0)\n  ```\n\n- 如果在目录中使用`pyenv local [虚拟环境名]`为目录设置工作环境，那么在进入和离开目录时，会自动激活和去激活工作环境，并且在进入目录时，会在命令行开头显示当前的工作环境：\n\n  ```bash\n  root@ubuntu:~/code# pyenv local venv35\n  (venv35) root@ubuntu:~/code#\n  ```\n\n- 如果没有使用`pyenv local`命令为目录设置工作环境的话，也可以使用`pyenv activate [虚拟环境名]`来临时激活一个全局的工作环境，去激活使用`pyenv deactivate`命令：\n\n  ```bash\n  root@ubuntu:~/code2# pyenv activate venv35\n  pyenv-virtualenv: prompt changing will be removed from future release. configure `export PYENV_VIRTUALENV_DISABLE_PROMPT=1' to simulate the behavior.\n  (venv35) root@ubuntu:~/code2# cd ..\n  (venv35) root@ubuntu:~#\n\n  (venv35) root@ubuntu:~# pyenv deactivate\n  root@ubuntu:~#\n  ```\n\n- 删除已有的虚拟环境使用`pyenv uninstall my-virtual-env`命令：\n\n  ```bash\n  # pyenv uninstall venv35\n  pyenv-virtualenv: remove /root/.pyenv/versions/3.5.0/envs/venv35? y\n  ```\n\n# pip更换源\n\n- pip安装python包经常也会非常缓慢，可以将其更换为国内源，在家目录下创建`.pip`目录，并创建`.pip/pip.conf`文件，文件内容如下：\n\n  ```bash\n  [global]\n  index-url = http://mirrors.aliyun.com/pypi/simple/\n  [install]\n  trusted-host=mirrors.aliyun.com\n  ```\n\n- 这里使用阿里的pip镜像，使用`pip install`可以看到已经变成从阿里的镜像下载python包：\n\n  ```bash\n  $ pip install plumbum\n  Collecting plumbum\n    Downloading http://mirrors.aliyun.com/pypi/packages/b2/05/7720109462d0bd60466e74076a38ca12068771da146bfd18a502726c9da8/plumbum-1.6.6-py2.py3-none-any.whl (111kB)\n      100% |████████████████████████████████| 112kB 1.2MB/s\n  Installing collected packages: plumbum\n  Successfully installed plumbum-1.6.6\n  ```\n\n------\n\n","slug":"pyenv安装使用指南","published":1,"updated":"2018-06-02T13:01:29.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazdz003ru1jxrefyec8l","content":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p>在使用python的过程中，经常会遇到不同的项目可能使用的是不同的python版本，或者有些项目需要使用特定版本的软件包，为了保持系统python软件包不会变的混乱，我们可以使用pyenv来管理系统的python版本，并且使用virtualenv来管理不同的环境。<br><a id=\"more\"></a></p><hr><h1 id=\"pyenv安装配置\"><a href=\"#pyenv安装配置\" class=\"headerlink\" title=\"pyenv安装配置\"></a>pyenv安装配置</h1><ul><li><p>官方的仓库和安装步骤可以查看<a href=\"https://github.com/pyenv/pyenv\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">github-pyenv</a>，为了避免安装时报错，首先在shell中声明全局变量：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> PYTHON_CONFIGURE_OPTS=<span class=\"string\">\"--enable-shared\"</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"克隆仓库\"><a href=\"#克隆仓库\" class=\"headerlink\" title=\"克隆仓库\"></a>克隆仓库</h2><ul><li><p>克隆最新版本的pyenv仓库，这里克隆到家目录下，也可以自行指定克隆到其他目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> git://github.com/yyuu/pyenv.git ~/.pyenv</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"配置pyenv\"><a href=\"#配置pyenv\" class=\"headerlink\" title=\"配置pyenv\"></a>配置pyenv</h2><ol><li><p>为pyenv添加环境变量，如果先前克隆仓库时指定了其他目录，这里也要相应的更改pyenv的目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'export PYENV_ROOT=\"$HOME/.pyenv\"'</span> &gt;&gt; ~/.bash_profile</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'export PATH=\"$PYENV_ROOT/bin:$PATH\"'</span> &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure><div class=\"note info\"><p>使用zsh的需要将上面的<code>~/.bash_profile</code>替换为<code>~/.zshenv</code>；</p><p>Ubuntu和Fedora则使用<code>~/.bashrc</code>替换；</p></div></li><li><p>然后将pyenv的初始化命令添加到shell中：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> -e <span class=\"string\">'if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\\n  eval \"$(pyenv init -)\"\\nfi'</span> &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure><div class=\"note info\"><p>使用zsh的需要将上面的<code>~/.bash_profile</code>替换为<code>~/.zshenv</code>；</p><p>Ubuntu和Fedora则使用<code>~/.bashrc</code>替换；</p></div></li><li><p>安装完成后，需要重新登陆shell或者重新载入配置文件，如果上面替换过<code>.bash_profile</code>文件，则下面的命令也要更改为替换的文件名：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> ~/.bash_pofile</span><br></pre></td></tr></table></figure></li><li><p>执行命令<code>pyenv --version</code>或<code>pyenv --help</code>来验证pyenv安装是否正确:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pyenv --version</span><br><span class=\"line\">pyenv 1.2.4</span><br><span class=\"line\">$ pyenv --<span class=\"built_in\">help</span></span><br><span class=\"line\">Usage: pyenv &lt;<span class=\"built_in\">command</span>&gt; [&lt;args&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">Some useful pyenv commands are:</span><br><span class=\"line\">   commands    List all available pyenv commands</span><br><span class=\"line\">   <span class=\"built_in\">local</span>       Set or show the <span class=\"built_in\">local</span> application-specific Python version</span><br><span class=\"line\">   global      Set or show the global Python version</span><br><span class=\"line\">   shell       Set or show the shell-specific Python version</span><br><span class=\"line\">   install     Install a Python version using python-build</span><br><span class=\"line\">   uninstall   Uninstall a specific Python version</span><br><span class=\"line\">   <span class=\"built_in\">rehash</span>      Rehash pyenv shims (run this after installing executables)</span><br><span class=\"line\">   version     Show the current Python version and its origin</span><br><span class=\"line\">   versions    List all Python versions available to pyenv</span><br><span class=\"line\">   <span class=\"built_in\">which</span>       Display the full path to an executable</span><br><span class=\"line\">   <span class=\"built_in\">whence</span>      List all Python versions that contain the given executable</span><br><span class=\"line\"></span><br><span class=\"line\">See `pyenv <span class=\"built_in\">help</span> &lt;<span class=\"built_in\">command</span>&gt;<span class=\"string\">' for information on a specific command.</span></span><br><span class=\"line\"><span class=\"string\">For full documentation, see: https://github.com/pyenv/pyenv#readme</span></span><br></pre></td></tr></table></figure></li></ol><h2 id=\"更换国内源\"><a href=\"#更换国内源\" class=\"headerlink\" title=\"更换国内源\"></a>更换国内源</h2><ul><li><p>由于使用pyenv默认会到官网下载python版本，导致下载速率非常缓慢，所以可以使用国内的源来加速pyenv的版本安装速度，pyenv的python版本下载配置文件每个都是单独的，所以需要针对要下载的版本修改其配置文件；</p></li><li><p>pyenv的python版本配置文件在目录<code>~/.pyenv/plugins/python-build/share/python-build/</code>下，例如需要下载python3.6.0版本，这里替换为搜狐的源<a href=\"http://mirrors.sohu.com/python/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://mirrors.sohu.com/python/</a>。</p></li><li><p>修改<code>3.6.0</code>文件如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#require_gcc</span></span><br><span class=\"line\">install_package <span class=\"string\">\"openssl-1.0.2k\"</span> <span class=\"string\">\"https://www.openssl.org/source/openssl-1.0.2k.tar.gz#6b3977c61f2aedf0f96367dcfb5c6e578cf37e7b8d913b4ecb6643c3cb88d8c0\"</span> mac_openssl --<span class=\"keyword\">if</span> has_broken_mac_openssl</span><br><span class=\"line\">install_package <span class=\"string\">\"readline-6.3\"</span> <span class=\"string\">\"https://ftpmirror.gnu.org/readline/readline-6.3.tar.gz#56ba6071b9462f980c5a72ab0023893b65ba6debb4eeb475d7a563dc65cafd43\"</span> standard --<span class=\"keyword\">if</span> has_broken_mac_readline</span><br><span class=\"line\"><span class=\"keyword\">if</span> has_tar_xz_support; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"comment\">#install_package \"Python-3.6.0\" \"https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tar.xz#b0c5f904f685e32d9232f7bdcbece9819a892929063b6e385414ad2dd6a23622\" ldflags_dirs standard verify_py36 ensurepip</span></span><br><span class=\"line\">  <span class=\"comment\"># 注释原下载地址，增加下面的搜狐源下载地址</span></span><br><span class=\"line\">  install_package <span class=\"string\">\"Python-3.6.0\"</span> <span class=\"string\">\"http://mirrors.sohu.com/python/3.6.0/Python-3.6.0.tar.xz\"</span> ldflags_dirs standard verify_py36 ensurepip</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"comment\">#install_package \"Python-3.6.0\" \"https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz#aa472515800d25a3739833f76ca3735d9f4b2fe77c3cb21f69275e0cce30cb2b\" ldflags_dirs standard verify_py36 ensurepip</span></span><br><span class=\"line\">  <span class=\"comment\"># 同样进行替换</span></span><br><span class=\"line\">  install_package <span class=\"string\">\"Python-3.6.0\"</span> <span class=\"string\">\"http://mirrors.sohu.com/python/3.6.0/Python-3.6.0.tgz\"</span> ldflags_dirs standard verify_py36 ensurepip</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></li><li><p>修改完成后，执行<code>pyenv install 3.6.0</code>就可以看到下载是从搜狐的源进行下载，下载完成的python包保存在<code>~/.pyenv/cache</code>下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pyenv install 3.6.0</span><br><span class=\"line\">Downloading Python-3.6.0.tar.xz...</span><br><span class=\"line\">-&gt; http://mirrors.sohu.com/python/3.6.0/Python-3.6.0.tar.xz</span><br><span class=\"line\">Installing Python-3.6.0...</span><br><span class=\"line\">Installed Python-3.6.0 to /home/evobot/.pyenv/versions/3.6.0</span><br></pre></td></tr></table></figure></li><li><p>正是因为下载的包在<code>~/.pyenv/cache</code>目录下，所以我们也可以使用另一种方法来加速下载python版本包，直接到<a href=\"http://mirrors.sohu.com/python/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">搜狐源</a>下载需要的版本，然后放入<code>~/.pyenv/cache</code>目录，再执行<code>pyenv install</code>安装即可，也可以使用下面的一建执行命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v=3.5.2|wget http://mirrors.sohu.com/python/<span class=\"variable\">$v</span>/Python-<span class=\"variable\">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class=\"variable\">$v</span></span><br></pre></td></tr></table></figure><blockquote><p>其中变量v对应要下载的python版本号。</p></blockquote></li></ul><h1 id=\"pyenv使用\"><a href=\"#pyenv使用\" class=\"headerlink\" title=\"pyenv使用\"></a>pyenv使用</h1><ul><li><p>想要查看pyenv支持哪些python版本，可以执行<code>pyenv install --list</code>命令查看：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pyenv install --list</span><br><span class=\"line\">Available versions:</span><br><span class=\"line\">  2.1.3</span><br><span class=\"line\">  2.2.3</span><br><span class=\"line\">  2.3.7</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure></li><li><p>安装所需python版本命令如下，其中<code>-v</code>选项表示安装时是否输出详细信息：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pyenv install -v 3.6.0</span><br><span class=\"line\">$ pyenv install 3.6.0</span><br></pre></td></tr></table></figure></li><li><p><code>pyenv versions</code>查看当前系统已安装的python版本，其中有<code>*</code>的表示当前生效的版本，而<code>pyenv version</code>则是查看当前生效的python版本：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pyenv versions</span><br><span class=\"line\">* system (<span class=\"built_in\">set</span> by /root/.pyenv/version)</span><br><span class=\"line\">  3.5.0</span><br><span class=\"line\">$ pyenv version</span><br><span class=\"line\">3.5.0 (<span class=\"built_in\">set</span> by /root/.pyenv/version)</span><br></pre></td></tr></table></figure></li><li><p>卸载python版本命令如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pyenv versions</span><br><span class=\"line\">* system (<span class=\"built_in\">set</span> by /root/.pyenv/version)</span><br><span class=\"line\">  3.5.0</span><br><span class=\"line\">  </span><br><span class=\"line\">$ pyenv uninstall 3.5.0</span><br><span class=\"line\">pyenv: remove /root/.pyenv/versions/3.5.0? y</span><br><span class=\"line\"></span><br><span class=\"line\">$ pyenv versions</span><br><span class=\"line\">* system (<span class=\"built_in\">set</span> by /root/.pyenv/version)</span><br></pre></td></tr></table></figure></li><li><p>初始<code>pyenv versions</code>只有<strong>system</strong>，即系统全局的python版本，pyenv可以针对系统全局、目录、shell分别设置不同的python版本：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置全局python版本，版本号将会写入~/.pyenv/version</span></span><br><span class=\"line\">$ pyenv global 3.5.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 为当前目录设置python版本，版本号写入当前目录的.python-version文件。</span></span><br><span class=\"line\"><span class=\"comment\"># local设置的python版本优先级比global高。</span></span><br><span class=\"line\">$ pyenv <span class=\"built_in\">local</span> 3.6.0</span><br><span class=\"line\">$ pyenv versions</span><br><span class=\"line\">  system</span><br><span class=\"line\">  3.5.0</span><br><span class=\"line\">* 3.6.0 (<span class=\"built_in\">set</span> by /root/code/.python-version)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置当前shell的python版本是通过设置PYENV_VERSION环境变量改变的。</span></span><br><span class=\"line\"><span class=\"comment\"># shell设置的pthon版本优先级比global和local都要高。</span></span><br><span class=\"line\">$ pyenv shell 3.5.0</span><br><span class=\"line\">$ pyenv versions</span><br><span class=\"line\">  system</span><br><span class=\"line\">* 3.5.0 (<span class=\"built_in\">set</span> by PYENV_VERSION environment variable)</span><br><span class=\"line\">  3.6.0</span><br><span class=\"line\">  </span><br><span class=\"line\"> <span class=\"comment\"># 取消当前shell的python版本设置</span></span><br><span class=\"line\"> $ pyenv shell --<span class=\"built_in\">unset</span></span><br></pre></td></tr></table></figure></li><li><p>在每次增删python版本或者pip安装了新的包后，都需要执行<code>pyenv rehash</code>更新shims。</p></li></ul><blockquote><p>更多的pyenv命令，可以查看<a href=\"https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#command-reference\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">官方文档</a>。</p></blockquote><h1 id=\"virtualenv插件\"><a href=\"#virtualenv插件\" class=\"headerlink\" title=\"virtualenv插件\"></a>virtualenv插件</h1><p>pyenv的virtualenv插件，能够实现与virtualenv相同的功能，使用pyenv管理系统python版本，使用virtualenv管理不同的python环境，从而实现不同的项目在相同的python版本时，也能够同时使用各自的python环境。</p><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul><li><p><a href=\"https://github.com/pyenv/pyenv-virtualenv\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">pyenv-virtualenv</a>插件安装直接使用git克隆到pyenv的Plugins目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv</span><br></pre></td></tr></table></figure></li><li><p>添加命令到<code>~/.bash_profile</code>，zsh用户添加到<code>~/.zshenv</code>，Ubuntu用户添加到<code>~/.bashrc</code>，完成后更新shell或重新登陆生效：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'eval \"$(pyenv virtualenv-init -)\"'</span> &gt;&gt; ~/.bash_profile</span><br><span class=\"line\">$ <span class=\"built_in\">exec</span> <span class=\"string\">\"<span class=\"variable\">$SHELL</span>\"</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul><li><p>pyenv-virtualenv可以为同一个python版本创建多个虚拟工作环境，命令为<code>pyenv virtualenv [python版本号] [虚拟环境名]</code>，为当前的python版本创建虚拟环境的命令为<code>pyenv virtualenv [虚拟环境名]</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pyenv virtualenv 3.5.0 my-virtual-env-3.5.0</span><br><span class=\"line\"></span><br><span class=\"line\">$ pyenv version</span><br><span class=\"line\">3.4.3 (<span class=\"built_in\">set</span> by /home/yyuu/.pyenv/version)</span><br><span class=\"line\">$ pyenv virtualenv venv34</span><br></pre></td></tr></table></figure></li><li><p>使用<code>pyenv virtualenvs</code>查看系统当前存在的虚拟环境：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pyenv virtualenvs</span><br><span class=\"line\">  3.5.0/envs/venv35 (created from /root/.pyenv/versions/3.5.0)</span><br><span class=\"line\">  venv35 (created from /root/.pyenv/versions/3.5.0)</span><br></pre></td></tr></table></figure></li><li><p>如果在目录中使用<code>pyenv local [虚拟环境名]</code>为目录设置工作环境，那么在进入和离开目录时，会自动激活和去激活工作环境，并且在进入目录时，会在命令行开头显示当前的工作环境：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~/code<span class=\"comment\"># pyenv local venv35</span></span><br><span class=\"line\">(venv35) root@ubuntu:~/code<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure></li><li><p>如果没有使用<code>pyenv local</code>命令为目录设置工作环境的话，也可以使用<code>pyenv activate [虚拟环境名]</code>来临时激活一个全局的工作环境，去激活使用<code>pyenv deactivate</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~/code2<span class=\"comment\"># pyenv activate venv35</span></span><br><span class=\"line\">pyenv-virtualenv: prompt changing will be removed from future release. configure `<span class=\"built_in\">export</span> PYENV_VIRTUALENV_DISABLE_PROMPT=1<span class=\"string\">' to simulate the behavior.</span></span><br><span class=\"line\"><span class=\"string\">(venv35) root@ubuntu:~/code2# cd ..</span></span><br><span class=\"line\"><span class=\"string\">(venv35) root@ubuntu:~#</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">(venv35) root@ubuntu:~# pyenv deactivate</span></span><br><span class=\"line\"><span class=\"string\">root@ubuntu:~#</span></span><br></pre></td></tr></table></figure></li><li><p>删除已有的虚拟环境使用<code>pyenv uninstall my-virtual-env</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pyenv uninstall venv35</span></span><br><span class=\"line\">pyenv-virtualenv: remove /root/.pyenv/versions/3.5.0/envs/venv35? y</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"pip更换源\"><a href=\"#pip更换源\" class=\"headerlink\" title=\"pip更换源\"></a>pip更换源</h1><ul><li><p>pip安装python包经常也会非常缓慢，可以将其更换为国内源，在家目录下创建<code>.pip</code>目录，并创建<code>.pip/pip.conf</code>文件，文件内容如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure></li><li><p>这里使用阿里的pip镜像，使用<code>pip install</code>可以看到已经变成从阿里的镜像下载python包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install plumbum</span><br><span class=\"line\">Collecting plumbum</span><br><span class=\"line\">  Downloading http://mirrors.aliyun.com/pypi/packages/b2/05/7720109462d0bd60466e74076a38ca12068771da146bfd18a502726c9da8/plumbum-1.6.6-py2.py3-none-any.whl (111kB)</span><br><span class=\"line\">    100% |████████████████████████████████| 112kB 1.2MB/s</span><br><span class=\"line\">Installing collected packages: plumbum</span><br><span class=\"line\">Successfully installed plumbum-1.6.6</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p>在使用python的过程中，经常会遇到不同的项目可能使用的是不同的python版本，或者有些项目需要使用特定版本的软件包，为了保持系统python软件包不会变的混乱，我们可以使用pyenv来管理系统的python版本，并且使用virtualenv来管理不同的环境。<br>","more":"</p><hr><h1 id=\"pyenv安装配置\"><a href=\"#pyenv安装配置\" class=\"headerlink\" title=\"pyenv安装配置\"></a>pyenv安装配置</h1><ul><li><p>官方的仓库和安装步骤可以查看<a href=\"https://github.com/pyenv/pyenv\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">github-pyenv</a>，为了避免安装时报错，首先在shell中声明全局变量：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> PYTHON_CONFIGURE_OPTS=<span class=\"string\">\"--enable-shared\"</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"克隆仓库\"><a href=\"#克隆仓库\" class=\"headerlink\" title=\"克隆仓库\"></a>克隆仓库</h2><ul><li><p>克隆最新版本的pyenv仓库，这里克隆到家目录下，也可以自行指定克隆到其他目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> git://github.com/yyuu/pyenv.git ~/.pyenv</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"配置pyenv\"><a href=\"#配置pyenv\" class=\"headerlink\" title=\"配置pyenv\"></a>配置pyenv</h2><ol><li><p>为pyenv添加环境变量，如果先前克隆仓库时指定了其他目录，这里也要相应的更改pyenv的目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'export PYENV_ROOT=\"$HOME/.pyenv\"'</span> &gt;&gt; ~/.bash_profile</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'export PATH=\"$PYENV_ROOT/bin:$PATH\"'</span> &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure><div class=\"note info\"><p>使用zsh的需要将上面的<code>~/.bash_profile</code>替换为<code>~/.zshenv</code>；</p><p>Ubuntu和Fedora则使用<code>~/.bashrc</code>替换；</p></div></li><li><p>然后将pyenv的初始化命令添加到shell中：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> -e <span class=\"string\">'if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\\n  eval \"$(pyenv init -)\"\\nfi'</span> &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure><div class=\"note info\"><p>使用zsh的需要将上面的<code>~/.bash_profile</code>替换为<code>~/.zshenv</code>；</p><p>Ubuntu和Fedora则使用<code>~/.bashrc</code>替换；</p></div></li><li><p>安装完成后，需要重新登陆shell或者重新载入配置文件，如果上面替换过<code>.bash_profile</code>文件，则下面的命令也要更改为替换的文件名：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> ~/.bash_pofile</span><br></pre></td></tr></table></figure></li><li><p>执行命令<code>pyenv --version</code>或<code>pyenv --help</code>来验证pyenv安装是否正确:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pyenv --version</span><br><span class=\"line\">pyenv 1.2.4</span><br><span class=\"line\">$ pyenv --<span class=\"built_in\">help</span></span><br><span class=\"line\">Usage: pyenv &lt;<span class=\"built_in\">command</span>&gt; [&lt;args&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">Some useful pyenv commands are:</span><br><span class=\"line\">   commands    List all available pyenv commands</span><br><span class=\"line\">   <span class=\"built_in\">local</span>       Set or show the <span class=\"built_in\">local</span> application-specific Python version</span><br><span class=\"line\">   global      Set or show the global Python version</span><br><span class=\"line\">   shell       Set or show the shell-specific Python version</span><br><span class=\"line\">   install     Install a Python version using python-build</span><br><span class=\"line\">   uninstall   Uninstall a specific Python version</span><br><span class=\"line\">   <span class=\"built_in\">rehash</span>      Rehash pyenv shims (run this after installing executables)</span><br><span class=\"line\">   version     Show the current Python version and its origin</span><br><span class=\"line\">   versions    List all Python versions available to pyenv</span><br><span class=\"line\">   <span class=\"built_in\">which</span>       Display the full path to an executable</span><br><span class=\"line\">   <span class=\"built_in\">whence</span>      List all Python versions that contain the given executable</span><br><span class=\"line\"></span><br><span class=\"line\">See `pyenv <span class=\"built_in\">help</span> &lt;<span class=\"built_in\">command</span>&gt;<span class=\"string\">' for information on a specific command.</span></span><br><span class=\"line\"><span class=\"string\">For full documentation, see: https://github.com/pyenv/pyenv#readme</span></span><br></pre></td></tr></table></figure></li></ol><h2 id=\"更换国内源\"><a href=\"#更换国内源\" class=\"headerlink\" title=\"更换国内源\"></a>更换国内源</h2><ul><li><p>由于使用pyenv默认会到官网下载python版本，导致下载速率非常缓慢，所以可以使用国内的源来加速pyenv的版本安装速度，pyenv的python版本下载配置文件每个都是单独的，所以需要针对要下载的版本修改其配置文件；</p></li><li><p>pyenv的python版本配置文件在目录<code>~/.pyenv/plugins/python-build/share/python-build/</code>下，例如需要下载python3.6.0版本，这里替换为搜狐的源<a href=\"http://mirrors.sohu.com/python/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://mirrors.sohu.com/python/</a>。</p></li><li><p>修改<code>3.6.0</code>文件如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#require_gcc</span></span><br><span class=\"line\">install_package <span class=\"string\">\"openssl-1.0.2k\"</span> <span class=\"string\">\"https://www.openssl.org/source/openssl-1.0.2k.tar.gz#6b3977c61f2aedf0f96367dcfb5c6e578cf37e7b8d913b4ecb6643c3cb88d8c0\"</span> mac_openssl --<span class=\"keyword\">if</span> has_broken_mac_openssl</span><br><span class=\"line\">install_package <span class=\"string\">\"readline-6.3\"</span> <span class=\"string\">\"https://ftpmirror.gnu.org/readline/readline-6.3.tar.gz#56ba6071b9462f980c5a72ab0023893b65ba6debb4eeb475d7a563dc65cafd43\"</span> standard --<span class=\"keyword\">if</span> has_broken_mac_readline</span><br><span class=\"line\"><span class=\"keyword\">if</span> has_tar_xz_support; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"comment\">#install_package \"Python-3.6.0\" \"https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tar.xz#b0c5f904f685e32d9232f7bdcbece9819a892929063b6e385414ad2dd6a23622\" ldflags_dirs standard verify_py36 ensurepip</span></span><br><span class=\"line\">  <span class=\"comment\"># 注释原下载地址，增加下面的搜狐源下载地址</span></span><br><span class=\"line\">  install_package <span class=\"string\">\"Python-3.6.0\"</span> <span class=\"string\">\"http://mirrors.sohu.com/python/3.6.0/Python-3.6.0.tar.xz\"</span> ldflags_dirs standard verify_py36 ensurepip</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"comment\">#install_package \"Python-3.6.0\" \"https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz#aa472515800d25a3739833f76ca3735d9f4b2fe77c3cb21f69275e0cce30cb2b\" ldflags_dirs standard verify_py36 ensurepip</span></span><br><span class=\"line\">  <span class=\"comment\"># 同样进行替换</span></span><br><span class=\"line\">  install_package <span class=\"string\">\"Python-3.6.0\"</span> <span class=\"string\">\"http://mirrors.sohu.com/python/3.6.0/Python-3.6.0.tgz\"</span> ldflags_dirs standard verify_py36 ensurepip</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></li><li><p>修改完成后，执行<code>pyenv install 3.6.0</code>就可以看到下载是从搜狐的源进行下载，下载完成的python包保存在<code>~/.pyenv/cache</code>下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pyenv install 3.6.0</span><br><span class=\"line\">Downloading Python-3.6.0.tar.xz...</span><br><span class=\"line\">-&gt; http://mirrors.sohu.com/python/3.6.0/Python-3.6.0.tar.xz</span><br><span class=\"line\">Installing Python-3.6.0...</span><br><span class=\"line\">Installed Python-3.6.0 to /home/evobot/.pyenv/versions/3.6.0</span><br></pre></td></tr></table></figure></li><li><p>正是因为下载的包在<code>~/.pyenv/cache</code>目录下，所以我们也可以使用另一种方法来加速下载python版本包，直接到<a href=\"http://mirrors.sohu.com/python/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">搜狐源</a>下载需要的版本，然后放入<code>~/.pyenv/cache</code>目录，再执行<code>pyenv install</code>安装即可，也可以使用下面的一建执行命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v=3.5.2|wget http://mirrors.sohu.com/python/<span class=\"variable\">$v</span>/Python-<span class=\"variable\">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class=\"variable\">$v</span></span><br></pre></td></tr></table></figure><blockquote><p>其中变量v对应要下载的python版本号。</p></blockquote></li></ul><h1 id=\"pyenv使用\"><a href=\"#pyenv使用\" class=\"headerlink\" title=\"pyenv使用\"></a>pyenv使用</h1><ul><li><p>想要查看pyenv支持哪些python版本，可以执行<code>pyenv install --list</code>命令查看：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pyenv install --list</span><br><span class=\"line\">Available versions:</span><br><span class=\"line\">  2.1.3</span><br><span class=\"line\">  2.2.3</span><br><span class=\"line\">  2.3.7</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure></li><li><p>安装所需python版本命令如下，其中<code>-v</code>选项表示安装时是否输出详细信息：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pyenv install -v 3.6.0</span><br><span class=\"line\">$ pyenv install 3.6.0</span><br></pre></td></tr></table></figure></li><li><p><code>pyenv versions</code>查看当前系统已安装的python版本，其中有<code>*</code>的表示当前生效的版本，而<code>pyenv version</code>则是查看当前生效的python版本：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pyenv versions</span><br><span class=\"line\">* system (<span class=\"built_in\">set</span> by /root/.pyenv/version)</span><br><span class=\"line\">  3.5.0</span><br><span class=\"line\">$ pyenv version</span><br><span class=\"line\">3.5.0 (<span class=\"built_in\">set</span> by /root/.pyenv/version)</span><br></pre></td></tr></table></figure></li><li><p>卸载python版本命令如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pyenv versions</span><br><span class=\"line\">* system (<span class=\"built_in\">set</span> by /root/.pyenv/version)</span><br><span class=\"line\">  3.5.0</span><br><span class=\"line\">  </span><br><span class=\"line\">$ pyenv uninstall 3.5.0</span><br><span class=\"line\">pyenv: remove /root/.pyenv/versions/3.5.0? y</span><br><span class=\"line\"></span><br><span class=\"line\">$ pyenv versions</span><br><span class=\"line\">* system (<span class=\"built_in\">set</span> by /root/.pyenv/version)</span><br></pre></td></tr></table></figure></li><li><p>初始<code>pyenv versions</code>只有<strong>system</strong>，即系统全局的python版本，pyenv可以针对系统全局、目录、shell分别设置不同的python版本：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置全局python版本，版本号将会写入~/.pyenv/version</span></span><br><span class=\"line\">$ pyenv global 3.5.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 为当前目录设置python版本，版本号写入当前目录的.python-version文件。</span></span><br><span class=\"line\"><span class=\"comment\"># local设置的python版本优先级比global高。</span></span><br><span class=\"line\">$ pyenv <span class=\"built_in\">local</span> 3.6.0</span><br><span class=\"line\">$ pyenv versions</span><br><span class=\"line\">  system</span><br><span class=\"line\">  3.5.0</span><br><span class=\"line\">* 3.6.0 (<span class=\"built_in\">set</span> by /root/code/.python-version)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置当前shell的python版本是通过设置PYENV_VERSION环境变量改变的。</span></span><br><span class=\"line\"><span class=\"comment\"># shell设置的pthon版本优先级比global和local都要高。</span></span><br><span class=\"line\">$ pyenv shell 3.5.0</span><br><span class=\"line\">$ pyenv versions</span><br><span class=\"line\">  system</span><br><span class=\"line\">* 3.5.0 (<span class=\"built_in\">set</span> by PYENV_VERSION environment variable)</span><br><span class=\"line\">  3.6.0</span><br><span class=\"line\">  </span><br><span class=\"line\"> <span class=\"comment\"># 取消当前shell的python版本设置</span></span><br><span class=\"line\"> $ pyenv shell --<span class=\"built_in\">unset</span></span><br></pre></td></tr></table></figure></li><li><p>在每次增删python版本或者pip安装了新的包后，都需要执行<code>pyenv rehash</code>更新shims。</p></li></ul><blockquote><p>更多的pyenv命令，可以查看<a href=\"https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#command-reference\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">官方文档</a>。</p></blockquote><h1 id=\"virtualenv插件\"><a href=\"#virtualenv插件\" class=\"headerlink\" title=\"virtualenv插件\"></a>virtualenv插件</h1><p>pyenv的virtualenv插件，能够实现与virtualenv相同的功能，使用pyenv管理系统python版本，使用virtualenv管理不同的python环境，从而实现不同的项目在相同的python版本时，也能够同时使用各自的python环境。</p><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul><li><p><a href=\"https://github.com/pyenv/pyenv-virtualenv\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">pyenv-virtualenv</a>插件安装直接使用git克隆到pyenv的Plugins目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv</span><br></pre></td></tr></table></figure></li><li><p>添加命令到<code>~/.bash_profile</code>，zsh用户添加到<code>~/.zshenv</code>，Ubuntu用户添加到<code>~/.bashrc</code>，完成后更新shell或重新登陆生效：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'eval \"$(pyenv virtualenv-init -)\"'</span> &gt;&gt; ~/.bash_profile</span><br><span class=\"line\">$ <span class=\"built_in\">exec</span> <span class=\"string\">\"<span class=\"variable\">$SHELL</span>\"</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul><li><p>pyenv-virtualenv可以为同一个python版本创建多个虚拟工作环境，命令为<code>pyenv virtualenv [python版本号] [虚拟环境名]</code>，为当前的python版本创建虚拟环境的命令为<code>pyenv virtualenv [虚拟环境名]</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pyenv virtualenv 3.5.0 my-virtual-env-3.5.0</span><br><span class=\"line\"></span><br><span class=\"line\">$ pyenv version</span><br><span class=\"line\">3.4.3 (<span class=\"built_in\">set</span> by /home/yyuu/.pyenv/version)</span><br><span class=\"line\">$ pyenv virtualenv venv34</span><br></pre></td></tr></table></figure></li><li><p>使用<code>pyenv virtualenvs</code>查看系统当前存在的虚拟环境：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pyenv virtualenvs</span><br><span class=\"line\">  3.5.0/envs/venv35 (created from /root/.pyenv/versions/3.5.0)</span><br><span class=\"line\">  venv35 (created from /root/.pyenv/versions/3.5.0)</span><br></pre></td></tr></table></figure></li><li><p>如果在目录中使用<code>pyenv local [虚拟环境名]</code>为目录设置工作环境，那么在进入和离开目录时，会自动激活和去激活工作环境，并且在进入目录时，会在命令行开头显示当前的工作环境：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~/code<span class=\"comment\"># pyenv local venv35</span></span><br><span class=\"line\">(venv35) root@ubuntu:~/code<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure></li><li><p>如果没有使用<code>pyenv local</code>命令为目录设置工作环境的话，也可以使用<code>pyenv activate [虚拟环境名]</code>来临时激活一个全局的工作环境，去激活使用<code>pyenv deactivate</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~/code2<span class=\"comment\"># pyenv activate venv35</span></span><br><span class=\"line\">pyenv-virtualenv: prompt changing will be removed from future release. configure `<span class=\"built_in\">export</span> PYENV_VIRTUALENV_DISABLE_PROMPT=1<span class=\"string\">' to simulate the behavior.</span></span><br><span class=\"line\"><span class=\"string\">(venv35) root@ubuntu:~/code2# cd ..</span></span><br><span class=\"line\"><span class=\"string\">(venv35) root@ubuntu:~#</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">(venv35) root@ubuntu:~# pyenv deactivate</span></span><br><span class=\"line\"><span class=\"string\">root@ubuntu:~#</span></span><br></pre></td></tr></table></figure></li><li><p>删除已有的虚拟环境使用<code>pyenv uninstall my-virtual-env</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pyenv uninstall venv35</span></span><br><span class=\"line\">pyenv-virtualenv: remove /root/.pyenv/versions/3.5.0/envs/venv35? y</span><br></pre></td></tr></table></figure></li></ul><h1 id=\"pip更换源\"><a href=\"#pip更换源\" class=\"headerlink\" title=\"pip更换源\"></a>pip更换源</h1><ul><li><p>pip安装python包经常也会非常缓慢，可以将其更换为国内源，在家目录下创建<code>.pip</code>目录，并创建<code>.pip/pip.conf</code>文件，文件内容如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure></li><li><p>这里使用阿里的pip镜像，使用<code>pip install</code>可以看到已经变成从阿里的镜像下载python包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install plumbum</span><br><span class=\"line\">Collecting plumbum</span><br><span class=\"line\">  Downloading http://mirrors.aliyun.com/pypi/packages/b2/05/7720109462d0bd60466e74076a38ca12068771da146bfd18a502726c9da8/plumbum-1.6.6-py2.py3-none-any.whl (111kB)</span><br><span class=\"line\">    100% |████████████████████████████████| 112kB 1.2MB/s</span><br><span class=\"line\">Installing collected packages: plumbum</span><br><span class=\"line\">Successfully installed plumbum-1.6.6</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->"},{"title":"rsync工具的使用","author":"Evobot","abbrlink":"d9f5c2d9","date":"2018-05-14T13:31:20.000Z","image":null,"_content":"\n\n\n本文介绍了LInux文件同步工具——rsync的用法，和一些相关的配置，以及如何使用rsync通过ssh或者服务进行同步。\n\n<!--more-->\n\n---\n\n# rsync同步工具\n\n## rsync介绍\n\n- 在Linux中，经常会需要对某个目录进行备份到其他机器或本机的其他目录，如备份到本机目录，如果使用cp命令，当文件在持续增加并且增加的内容很少时，由于cp命令拷贝时可以覆盖之前的文件，就导致实际操作效率不高，资源占用也较大，所以使用rsync命令可以有效的解决这些问题；\n\n- rsync可以实现增量拷贝，只备份新增的部分，而且支持远程同步备份；\n\n- `rsync -av [/path/file] [/path/file]`命令可以将文件同步到指定的目录下并且改名：\n\n  ```bash\n  [root@www ~]# rsync -av /etc/passwd ~/2.passwd\n  sending incremental file list\n  passwd\n\n  sent 1,145 bytes  received 35 bytes  2,360.00 bytes/sec\n  total size is 1,053  speedup is 0.89\n  [root@www ~]# ls\n  1.passwd\n  [root@www ~]# head -n3 2.passwd \n  root:x:0:0:root:/root:/bin/bash\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  ```\n\n- 而远程同步，命令格式为`rsync -av [/path/filename] user@host:/path/filename`:\n\n  ```bash\n  [root@www ~]# rsync -av /etc/passwd root@192.168.199.100:/tmp/rsync.passwd\n  root@192.168.199.100's password: \n  sending incremental file list\n  passwd\n\n  sent 1,139 bytes  received 34 bytes  67.03 bytes/sec\n  total size is 1,053  speedup is 0.90\n  ```\n\n  > 使用rsync远程备份需要远端机器上有rsync命令\n\n- rsync命令还有其他几种用法：\n\n  - `rsync [OPTION] ... SRC DEST`：OPTION选项指`-av`，然后SRC源文件或目录，DEST目的文件或目录；\n  - `rsync [OPTION] ... SRC [user]@host:DEST`：这里的用法就是上面的远程备份用法，这里的`user@`可以省略不写，省略时，默认以当前终端用户去连接远程机器；\n  - `rsync [OPTION] ... [user]@host:SRC DEST`：这里使用远程机器的文件路径作为SRC源文件，可以讲远程文件同步到本地上来；\n  - `rsync [OPTION] ... SRC [user]@host::DEST`：需要注意这里远程机器的host后面是两个`:`，通过服务将本地源文件同步到远程机器；\n  - `rsync [OPTION] ... [user]@host::SRC DEST`：与上面相同，使用两个`:`，通过服务将远程源文件同步到本地。\n\n## rsync常用选项\n\n|   常用选项    |                    作用                    |\n| :-------: | :--------------------------------------: |\n|    -a     |          综合选项，包含`-rtplgoD`这几个选项          |\n|    -r     |              同步目录，类似cp的-r选项              |\n|    -v     |                同步时显示同步过程                 |\n|    -l     |                  保留软连接                   |\n|    -L     |             同步软连接时将源文件同样同步过去             |\n|    -p     |                保持文件的权限属性                 |\n|    -o     |                 保持文件的属主                  |\n|    -g     |                 保持文件的属组                  |\n|    -D     |                 保持设备文件信息                 |\n|    -t     |                保持文件的时间属性                 |\n| --delete  |             删除目的目录中源目录没有的文件              |\n| --exclude | 过滤指定文件，如--exclude \"logs\"会将文件名包含logs的文件或目录过滤，不同步，支持通配 |\n|    -P     |             显示同步过程，如速率，比-v详细             |\n|    -u     |        使用此选项后，若DEST中文件比SRC新，则不同步         |\n|    -z     |                 传输时进行压缩                  |\n\n- 示例\n\n```bash\n[root@www ~]# ls -l rsync_dir/test \nlrwxrwxrwx 1 root root 9 5月  14 23:10 rsync_dir/test -> /tmp/test\n[root@www ~]# rsync -avL rsync_dir/ /tmp/rsync_dest\nsending incremental file list\ncreated directory /tmp/rsync_dest\n./\n111\n222\nasnd\ntest\n333/\n\nsent 318 bytes  received 137 bytes  910.00 bytes/sec\ntotal size is 0  speedup is 0.00\n[root@www ~]# ls -l /tmp/rsync_dest/\n总用量 0\n-rw-r--r-- 1 root root 0 5月  14 23:10 111\n-rw-r--r-- 1 root root 0 5月  14 23:10 222\ndrwxr-xr-x 2 root root 6 5月  14 23:10 333\n-rw-r--r-- 1 root root 0 5月  14 23:10 asnd\n-rw-r--r-- 1 root root 0 5月  14 23:10 test\n```\n\n> 使用`-L`之后，软连接文件同步到目的目录变成了普通文件\n\n```bash\n[root@www ~]# ls /tmp/rsync_dest/\n111  222  333  asnd  new.txt  test\n[root@www ~]# ls rsync_dir/\n111  222  333  asnd  test\n[root@www ~]# rsync -av --delete rsync_dir/ /tmp/rsync_dest/\nsending incremental file list\ndeleting new.txt\n./\ntest -> /tmp/test\n\nsent 177 bytes  received 34 bytes  422.00 bytes/sec\ntotal size is 9  speedup is 0.04\n[root@www ~]# ls /tmp/rsync_dest/\n111  222  333  asnd  test\n```\n\n> 使用`--delete`选项，会将目的目录中与源目录不一致的文件删除。\n\n```bash\n[root@www rsync_dir]# ls\n111.txt  222  333  asnd.txt  test\n[root@www rsync_dir]# rsync -av --exclude \"*.txt\" /root/rsync_dir/ /tmp/dest/\nsending incremental file list\ncreated directory /tmp/dest\n./\n222\ntest -> /tmp/test\n333/\n\nsent 179 bytes  received 77 bytes  512.00 bytes/sec\ntotal size is 9  speedup is 0.04\n[root@www rsync_dir]# ls /tmp/dest/\n222  333  test\n```\n\n> 使用`--exclude`选项可以过滤掉不想同步的文件，同时可以指定多个`--exclude`进行多种过滤。\n\n```bash\n[root@www rsync_dir]# rsync -avP /root/rsync_dir/ /tmp/dest\nsending incremental file list\ncreated directory /tmp/dest\n./\n111.txt\n              0 100%    0.00kB/s    0:00:00 (xfr#1, to-chk=5/7)\n222\n              0 100%    0.00kB/s    0:00:00 (xfr#2, to-chk=4/7)\nasnd.txt\n              0 100%    0.00kB/s    0:00:00 (xfr#3, to-chk=3/7)\nhello.txt\n    104,857,600 100%  168.87MB/s    0:00:00 (xfr#4, to-chk=2/7)\ntest -> /tmp/test\n333/\n\nsent 104,883,565 bytes  received 138 bytes  69,922,468.67 bytes/sec\ntotal size is 104,857,609  speedup is 1.00\n```\n\n> -P选项会将同步时的详细过程打印出来\n\n```bash\n[root@www rsync_dir]# cat /tmp/dest/111.txt \nasdniainaifnai\n[root@www rsync_dir]# cat 111.txt \n[root@www rsync_dir]# rsync -avPu /root/rsync_dir/ /tmp/dest/\nsending incremental file list\n./\n\nsent 207 bytes  received 20 bytes  454.00 bytes/sec\ntotal size is 104,857,609  speedup is 461,927.79\n[root@www rsync_dir]# cat 111.txt \n[root@www rsync_dir]# cat /tmp/dest/111.txt \nasdniainaifnai\n```\n\n> -u选项能够保证目标目录下更新的文件不被源文件所覆盖。\n\n## 通过ssh同步\n\n- rsync通过ssh同步，命令的形式为`rsync -av SRC [user]@host:DEST`；\n- 如果对方机器或者本地的ssh端口不是默认的22端口，则命令的形式为`rsync -av -e \"ssh -p 2022\" SRC [user]@host:DEST`；\n\n---\n\n","source":"_posts/rsync工具的使用.md","raw":"---\ntitle: rsync工具的使用\nauthor: Evobot\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\nabbrlink: d9f5c2d9\ndate: 2018-05-14 21:31:20\nimage:\n---\n\n\n\n本文介绍了LInux文件同步工具——rsync的用法，和一些相关的配置，以及如何使用rsync通过ssh或者服务进行同步。\n\n<!--more-->\n\n---\n\n# rsync同步工具\n\n## rsync介绍\n\n- 在Linux中，经常会需要对某个目录进行备份到其他机器或本机的其他目录，如备份到本机目录，如果使用cp命令，当文件在持续增加并且增加的内容很少时，由于cp命令拷贝时可以覆盖之前的文件，就导致实际操作效率不高，资源占用也较大，所以使用rsync命令可以有效的解决这些问题；\n\n- rsync可以实现增量拷贝，只备份新增的部分，而且支持远程同步备份；\n\n- `rsync -av [/path/file] [/path/file]`命令可以将文件同步到指定的目录下并且改名：\n\n  ```bash\n  [root@www ~]# rsync -av /etc/passwd ~/2.passwd\n  sending incremental file list\n  passwd\n\n  sent 1,145 bytes  received 35 bytes  2,360.00 bytes/sec\n  total size is 1,053  speedup is 0.89\n  [root@www ~]# ls\n  1.passwd\n  [root@www ~]# head -n3 2.passwd \n  root:x:0:0:root:/root:/bin/bash\n  bin:x:1:1:bin:/bin:/sbin/nologin\n  daemon:x:2:2:daemon:/sbin:/sbin/nologin\n  ```\n\n- 而远程同步，命令格式为`rsync -av [/path/filename] user@host:/path/filename`:\n\n  ```bash\n  [root@www ~]# rsync -av /etc/passwd root@192.168.199.100:/tmp/rsync.passwd\n  root@192.168.199.100's password: \n  sending incremental file list\n  passwd\n\n  sent 1,139 bytes  received 34 bytes  67.03 bytes/sec\n  total size is 1,053  speedup is 0.90\n  ```\n\n  > 使用rsync远程备份需要远端机器上有rsync命令\n\n- rsync命令还有其他几种用法：\n\n  - `rsync [OPTION] ... SRC DEST`：OPTION选项指`-av`，然后SRC源文件或目录，DEST目的文件或目录；\n  - `rsync [OPTION] ... SRC [user]@host:DEST`：这里的用法就是上面的远程备份用法，这里的`user@`可以省略不写，省略时，默认以当前终端用户去连接远程机器；\n  - `rsync [OPTION] ... [user]@host:SRC DEST`：这里使用远程机器的文件路径作为SRC源文件，可以讲远程文件同步到本地上来；\n  - `rsync [OPTION] ... SRC [user]@host::DEST`：需要注意这里远程机器的host后面是两个`:`，通过服务将本地源文件同步到远程机器；\n  - `rsync [OPTION] ... [user]@host::SRC DEST`：与上面相同，使用两个`:`，通过服务将远程源文件同步到本地。\n\n## rsync常用选项\n\n|   常用选项    |                    作用                    |\n| :-------: | :--------------------------------------: |\n|    -a     |          综合选项，包含`-rtplgoD`这几个选项          |\n|    -r     |              同步目录，类似cp的-r选项              |\n|    -v     |                同步时显示同步过程                 |\n|    -l     |                  保留软连接                   |\n|    -L     |             同步软连接时将源文件同样同步过去             |\n|    -p     |                保持文件的权限属性                 |\n|    -o     |                 保持文件的属主                  |\n|    -g     |                 保持文件的属组                  |\n|    -D     |                 保持设备文件信息                 |\n|    -t     |                保持文件的时间属性                 |\n| --delete  |             删除目的目录中源目录没有的文件              |\n| --exclude | 过滤指定文件，如--exclude \"logs\"会将文件名包含logs的文件或目录过滤，不同步，支持通配 |\n|    -P     |             显示同步过程，如速率，比-v详细             |\n|    -u     |        使用此选项后，若DEST中文件比SRC新，则不同步         |\n|    -z     |                 传输时进行压缩                  |\n\n- 示例\n\n```bash\n[root@www ~]# ls -l rsync_dir/test \nlrwxrwxrwx 1 root root 9 5月  14 23:10 rsync_dir/test -> /tmp/test\n[root@www ~]# rsync -avL rsync_dir/ /tmp/rsync_dest\nsending incremental file list\ncreated directory /tmp/rsync_dest\n./\n111\n222\nasnd\ntest\n333/\n\nsent 318 bytes  received 137 bytes  910.00 bytes/sec\ntotal size is 0  speedup is 0.00\n[root@www ~]# ls -l /tmp/rsync_dest/\n总用量 0\n-rw-r--r-- 1 root root 0 5月  14 23:10 111\n-rw-r--r-- 1 root root 0 5月  14 23:10 222\ndrwxr-xr-x 2 root root 6 5月  14 23:10 333\n-rw-r--r-- 1 root root 0 5月  14 23:10 asnd\n-rw-r--r-- 1 root root 0 5月  14 23:10 test\n```\n\n> 使用`-L`之后，软连接文件同步到目的目录变成了普通文件\n\n```bash\n[root@www ~]# ls /tmp/rsync_dest/\n111  222  333  asnd  new.txt  test\n[root@www ~]# ls rsync_dir/\n111  222  333  asnd  test\n[root@www ~]# rsync -av --delete rsync_dir/ /tmp/rsync_dest/\nsending incremental file list\ndeleting new.txt\n./\ntest -> /tmp/test\n\nsent 177 bytes  received 34 bytes  422.00 bytes/sec\ntotal size is 9  speedup is 0.04\n[root@www ~]# ls /tmp/rsync_dest/\n111  222  333  asnd  test\n```\n\n> 使用`--delete`选项，会将目的目录中与源目录不一致的文件删除。\n\n```bash\n[root@www rsync_dir]# ls\n111.txt  222  333  asnd.txt  test\n[root@www rsync_dir]# rsync -av --exclude \"*.txt\" /root/rsync_dir/ /tmp/dest/\nsending incremental file list\ncreated directory /tmp/dest\n./\n222\ntest -> /tmp/test\n333/\n\nsent 179 bytes  received 77 bytes  512.00 bytes/sec\ntotal size is 9  speedup is 0.04\n[root@www rsync_dir]# ls /tmp/dest/\n222  333  test\n```\n\n> 使用`--exclude`选项可以过滤掉不想同步的文件，同时可以指定多个`--exclude`进行多种过滤。\n\n```bash\n[root@www rsync_dir]# rsync -avP /root/rsync_dir/ /tmp/dest\nsending incremental file list\ncreated directory /tmp/dest\n./\n111.txt\n              0 100%    0.00kB/s    0:00:00 (xfr#1, to-chk=5/7)\n222\n              0 100%    0.00kB/s    0:00:00 (xfr#2, to-chk=4/7)\nasnd.txt\n              0 100%    0.00kB/s    0:00:00 (xfr#3, to-chk=3/7)\nhello.txt\n    104,857,600 100%  168.87MB/s    0:00:00 (xfr#4, to-chk=2/7)\ntest -> /tmp/test\n333/\n\nsent 104,883,565 bytes  received 138 bytes  69,922,468.67 bytes/sec\ntotal size is 104,857,609  speedup is 1.00\n```\n\n> -P选项会将同步时的详细过程打印出来\n\n```bash\n[root@www rsync_dir]# cat /tmp/dest/111.txt \nasdniainaifnai\n[root@www rsync_dir]# cat 111.txt \n[root@www rsync_dir]# rsync -avPu /root/rsync_dir/ /tmp/dest/\nsending incremental file list\n./\n\nsent 207 bytes  received 20 bytes  454.00 bytes/sec\ntotal size is 104,857,609  speedup is 461,927.79\n[root@www rsync_dir]# cat 111.txt \n[root@www rsync_dir]# cat /tmp/dest/111.txt \nasdniainaifnai\n```\n\n> -u选项能够保证目标目录下更新的文件不被源文件所覆盖。\n\n## 通过ssh同步\n\n- rsync通过ssh同步，命令的形式为`rsync -av SRC [user]@host:DEST`；\n- 如果对方机器或者本地的ssh端口不是默认的22端口，则命令的形式为`rsync -av -e \"ssh -p 2022\" SRC [user]@host:DEST`；\n\n---\n\n","slug":"rsync工具的使用","published":1,"updated":"2018-06-02T13:01:29.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gaze4003uu1jx03t1u1il","content":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p>本文介绍了LInux文件同步工具——rsync的用法，和一些相关的配置，以及如何使用rsync通过ssh或者服务进行同步。</p><a id=\"more\"></a><hr><h1 id=\"rsync同步工具\"><a href=\"#rsync同步工具\" class=\"headerlink\" title=\"rsync同步工具\"></a>rsync同步工具</h1><h2 id=\"rsync介绍\"><a href=\"#rsync介绍\" class=\"headerlink\" title=\"rsync介绍\"></a>rsync介绍</h2><ul><li><p>在Linux中，经常会需要对某个目录进行备份到其他机器或本机的其他目录，如备份到本机目录，如果使用cp命令，当文件在持续增加并且增加的内容很少时，由于cp命令拷贝时可以覆盖之前的文件，就导致实际操作效率不高，资源占用也较大，所以使用rsync命令可以有效的解决这些问题；</p></li><li><p>rsync可以实现增量拷贝，只备份新增的部分，而且支持远程同步备份；</p></li><li><p><code>rsync -av [/path/file] [/path/file]</code>命令可以将文件同步到指定的目录下并且改名：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># rsync -av /etc/passwd ~/2.passwd</span></span><br><span class=\"line\">sending incremental file list</span><br><span class=\"line\">passwd</span><br><span class=\"line\"></span><br><span class=\"line\">sent 1,145 bytes  received 35 bytes  2,360.00 bytes/sec</span><br><span class=\"line\">total size is 1,053  speedup is 0.89</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># ls</span></span><br><span class=\"line\">1.passwd</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># head -n3 2.passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p>而远程同步，命令格式为<code>rsync -av [/path/filename] user@host:/path/filename</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># rsync -av /etc/passwd root@192.168.199.100:/tmp/rsync.passwd</span></span><br><span class=\"line\">root@192.168.199.100<span class=\"string\">'s password: </span></span><br><span class=\"line\"><span class=\"string\">sending incremental file list</span></span><br><span class=\"line\"><span class=\"string\">passwd</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">sent 1,139 bytes  received 34 bytes  67.03 bytes/sec</span></span><br><span class=\"line\"><span class=\"string\">total size is 1,053  speedup is 0.90</span></span><br></pre></td></tr></table></figure><blockquote><p>使用rsync远程备份需要远端机器上有rsync命令</p></blockquote></li><li><p>rsync命令还有其他几种用法：</p><ul><li><code>rsync [OPTION] ... SRC DEST</code>：OPTION选项指<code>-av</code>，然后SRC源文件或目录，DEST目的文件或目录；</li><li><code>rsync [OPTION] ... SRC [user]@host:DEST</code>：这里的用法就是上面的远程备份用法，这里的<code>user@</code>可以省略不写，省略时，默认以当前终端用户去连接远程机器；</li><li><code>rsync [OPTION] ... [user]@host:SRC DEST</code>：这里使用远程机器的文件路径作为SRC源文件，可以讲远程文件同步到本地上来；</li><li><code>rsync [OPTION] ... SRC [user]@host::DEST</code>：需要注意这里远程机器的host后面是两个<code>:</code>，通过服务将本地源文件同步到远程机器；</li><li><code>rsync [OPTION] ... [user]@host::SRC DEST</code>：与上面相同，使用两个<code>:</code>，通过服务将远程源文件同步到本地。</li></ul></li></ul><h2 id=\"rsync常用选项\"><a href=\"#rsync常用选项\" class=\"headerlink\" title=\"rsync常用选项\"></a>rsync常用选项</h2><table><thead><tr><th style=\"text-align:center\">常用选项</th><th style=\"text-align:center\">作用</th></tr></thead><tbody><tr><td style=\"text-align:center\">-a</td><td style=\"text-align:center\">综合选项，包含<code>-rtplgoD</code>这几个选项</td></tr><tr><td style=\"text-align:center\">-r</td><td style=\"text-align:center\">同步目录，类似cp的-r选项</td></tr><tr><td style=\"text-align:center\">-v</td><td style=\"text-align:center\">同步时显示同步过程</td></tr><tr><td style=\"text-align:center\">-l</td><td style=\"text-align:center\">保留软连接</td></tr><tr><td style=\"text-align:center\">-L</td><td style=\"text-align:center\">同步软连接时将源文件同样同步过去</td></tr><tr><td style=\"text-align:center\">-p</td><td style=\"text-align:center\">保持文件的权限属性</td></tr><tr><td style=\"text-align:center\">-o</td><td style=\"text-align:center\">保持文件的属主</td></tr><tr><td style=\"text-align:center\">-g</td><td style=\"text-align:center\">保持文件的属组</td></tr><tr><td style=\"text-align:center\">-D</td><td style=\"text-align:center\">保持设备文件信息</td></tr><tr><td style=\"text-align:center\">-t</td><td style=\"text-align:center\">保持文件的时间属性</td></tr><tr><td style=\"text-align:center\">–delete</td><td style=\"text-align:center\">删除目的目录中源目录没有的文件</td></tr><tr><td style=\"text-align:center\">–exclude</td><td style=\"text-align:center\">过滤指定文件，如–exclude “logs”会将文件名包含logs的文件或目录过滤，不同步，支持通配</td></tr><tr><td style=\"text-align:center\">-P</td><td style=\"text-align:center\">显示同步过程，如速率，比-v详细</td></tr><tr><td style=\"text-align:center\">-u</td><td style=\"text-align:center\">使用此选项后，若DEST中文件比SRC新，则不同步</td></tr><tr><td style=\"text-align:center\">-z</td><td style=\"text-align:center\">传输时进行压缩</td></tr></tbody></table><ul><li>示例</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># ls -l rsync_dir/test </span></span><br><span class=\"line\">lrwxrwxrwx 1 root root 9 5月  14 23:10 rsync_dir/<span class=\"built_in\">test</span> -&gt; /tmp/<span class=\"built_in\">test</span></span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># rsync -avL rsync_dir/ /tmp/rsync_dest</span></span><br><span class=\"line\">sending incremental file list</span><br><span class=\"line\">created directory /tmp/rsync_dest</span><br><span class=\"line\">./</span><br><span class=\"line\">111</span><br><span class=\"line\">222</span><br><span class=\"line\">asnd</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">333/</span><br><span class=\"line\"></span><br><span class=\"line\">sent 318 bytes  received 137 bytes  910.00 bytes/sec</span><br><span class=\"line\">total size is 0  speedup is 0.00</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># ls -l /tmp/rsync_dest/</span></span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">-rw-r--r-- 1 root root 0 5月  14 23:10 111</span><br><span class=\"line\">-rw-r--r-- 1 root root 0 5月  14 23:10 222</span><br><span class=\"line\">drwxr-xr-x 2 root root 6 5月  14 23:10 333</span><br><span class=\"line\">-rw-r--r-- 1 root root 0 5月  14 23:10 asnd</span><br><span class=\"line\">-rw-r--r-- 1 root root 0 5月  14 23:10 <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure><blockquote><p>使用<code>-L</code>之后，软连接文件同步到目的目录变成了普通文件</p></blockquote><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># ls /tmp/rsync_dest/</span></span><br><span class=\"line\">111  222  333  asnd  new.txt  <span class=\"built_in\">test</span></span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># ls rsync_dir/</span></span><br><span class=\"line\">111  222  333  asnd  <span class=\"built_in\">test</span></span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># rsync -av --delete rsync_dir/ /tmp/rsync_dest/</span></span><br><span class=\"line\">sending incremental file list</span><br><span class=\"line\">deleting new.txt</span><br><span class=\"line\">./</span><br><span class=\"line\"><span class=\"built_in\">test</span> -&gt; /tmp/<span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\">sent 177 bytes  received 34 bytes  422.00 bytes/sec</span><br><span class=\"line\">total size is 9  speedup is 0.04</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># ls /tmp/rsync_dest/</span></span><br><span class=\"line\">111  222  333  asnd  <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure><blockquote><p>使用<code>--delete</code>选项，会将目的目录中与源目录不一致的文件删除。</p></blockquote><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www rsync_dir]<span class=\"comment\"># ls</span></span><br><span class=\"line\">111.txt  222  333  asnd.txt  <span class=\"built_in\">test</span></span><br><span class=\"line\">[root@www rsync_dir]<span class=\"comment\"># rsync -av --exclude \"*.txt\" /root/rsync_dir/ /tmp/dest/</span></span><br><span class=\"line\">sending incremental file list</span><br><span class=\"line\">created directory /tmp/dest</span><br><span class=\"line\">./</span><br><span class=\"line\">222</span><br><span class=\"line\"><span class=\"built_in\">test</span> -&gt; /tmp/<span class=\"built_in\">test</span></span><br><span class=\"line\">333/</span><br><span class=\"line\"></span><br><span class=\"line\">sent 179 bytes  received 77 bytes  512.00 bytes/sec</span><br><span class=\"line\">total size is 9  speedup is 0.04</span><br><span class=\"line\">[root@www rsync_dir]<span class=\"comment\"># ls /tmp/dest/</span></span><br><span class=\"line\">222  333  <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure><blockquote><p>使用<code>--exclude</code>选项可以过滤掉不想同步的文件，同时可以指定多个<code>--exclude</code>进行多种过滤。</p></blockquote><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www rsync_dir]<span class=\"comment\"># rsync -avP /root/rsync_dir/ /tmp/dest</span></span><br><span class=\"line\">sending incremental file list</span><br><span class=\"line\">created directory /tmp/dest</span><br><span class=\"line\">./</span><br><span class=\"line\">111.txt</span><br><span class=\"line\">              0 100%    0.00kB/s    0:00:00 (xfr<span class=\"comment\">#1, to-chk=5/7)</span></span><br><span class=\"line\">222</span><br><span class=\"line\">              0 100%    0.00kB/s    0:00:00 (xfr<span class=\"comment\">#2, to-chk=4/7)</span></span><br><span class=\"line\">asnd.txt</span><br><span class=\"line\">              0 100%    0.00kB/s    0:00:00 (xfr<span class=\"comment\">#3, to-chk=3/7)</span></span><br><span class=\"line\">hello.txt</span><br><span class=\"line\">    104,857,600 100%  168.87MB/s    0:00:00 (xfr<span class=\"comment\">#4, to-chk=2/7)</span></span><br><span class=\"line\"><span class=\"built_in\">test</span> -&gt; /tmp/<span class=\"built_in\">test</span></span><br><span class=\"line\">333/</span><br><span class=\"line\"></span><br><span class=\"line\">sent 104,883,565 bytes  received 138 bytes  69,922,468.67 bytes/sec</span><br><span class=\"line\">total size is 104,857,609  speedup is 1.00</span><br></pre></td></tr></table></figure><blockquote><p>-P选项会将同步时的详细过程打印出来</p></blockquote><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www rsync_dir]<span class=\"comment\"># cat /tmp/dest/111.txt </span></span><br><span class=\"line\">asdniainaifnai</span><br><span class=\"line\">[root@www rsync_dir]<span class=\"comment\"># cat 111.txt </span></span><br><span class=\"line\">[root@www rsync_dir]<span class=\"comment\"># rsync -avPu /root/rsync_dir/ /tmp/dest/</span></span><br><span class=\"line\">sending incremental file list</span><br><span class=\"line\">./</span><br><span class=\"line\"></span><br><span class=\"line\">sent 207 bytes  received 20 bytes  454.00 bytes/sec</span><br><span class=\"line\">total size is 104,857,609  speedup is 461,927.79</span><br><span class=\"line\">[root@www rsync_dir]<span class=\"comment\"># cat 111.txt </span></span><br><span class=\"line\">[root@www rsync_dir]<span class=\"comment\"># cat /tmp/dest/111.txt </span></span><br><span class=\"line\">asdniainaifnai</span><br></pre></td></tr></table></figure><blockquote><p>-u选项能够保证目标目录下更新的文件不被源文件所覆盖。</p></blockquote><h2 id=\"通过ssh同步\"><a href=\"#通过ssh同步\" class=\"headerlink\" title=\"通过ssh同步\"></a>通过ssh同步</h2><ul><li>rsync通过ssh同步，命令的形式为<code>rsync -av SRC [user]@host:DEST</code>；</li><li>如果对方机器或者本地的ssh端口不是默认的22端口，则命令的形式为<code>rsync -av -e &quot;ssh -p 2022&quot; SRC [user]@host:DEST</code>；</li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p>本文介绍了LInux文件同步工具——rsync的用法，和一些相关的配置，以及如何使用rsync通过ssh或者服务进行同步。</p>","more":"<hr><h1 id=\"rsync同步工具\"><a href=\"#rsync同步工具\" class=\"headerlink\" title=\"rsync同步工具\"></a>rsync同步工具</h1><h2 id=\"rsync介绍\"><a href=\"#rsync介绍\" class=\"headerlink\" title=\"rsync介绍\"></a>rsync介绍</h2><ul><li><p>在Linux中，经常会需要对某个目录进行备份到其他机器或本机的其他目录，如备份到本机目录，如果使用cp命令，当文件在持续增加并且增加的内容很少时，由于cp命令拷贝时可以覆盖之前的文件，就导致实际操作效率不高，资源占用也较大，所以使用rsync命令可以有效的解决这些问题；</p></li><li><p>rsync可以实现增量拷贝，只备份新增的部分，而且支持远程同步备份；</p></li><li><p><code>rsync -av [/path/file] [/path/file]</code>命令可以将文件同步到指定的目录下并且改名：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># rsync -av /etc/passwd ~/2.passwd</span></span><br><span class=\"line\">sending incremental file list</span><br><span class=\"line\">passwd</span><br><span class=\"line\"></span><br><span class=\"line\">sent 1,145 bytes  received 35 bytes  2,360.00 bytes/sec</span><br><span class=\"line\">total size is 1,053  speedup is 0.89</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># ls</span></span><br><span class=\"line\">1.passwd</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># head -n3 2.passwd </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p>而远程同步，命令格式为<code>rsync -av [/path/filename] user@host:/path/filename</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># rsync -av /etc/passwd root@192.168.199.100:/tmp/rsync.passwd</span></span><br><span class=\"line\">root@192.168.199.100<span class=\"string\">'s password: </span></span><br><span class=\"line\"><span class=\"string\">sending incremental file list</span></span><br><span class=\"line\"><span class=\"string\">passwd</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">sent 1,139 bytes  received 34 bytes  67.03 bytes/sec</span></span><br><span class=\"line\"><span class=\"string\">total size is 1,053  speedup is 0.90</span></span><br></pre></td></tr></table></figure><blockquote><p>使用rsync远程备份需要远端机器上有rsync命令</p></blockquote></li><li><p>rsync命令还有其他几种用法：</p><ul><li><code>rsync [OPTION] ... SRC DEST</code>：OPTION选项指<code>-av</code>，然后SRC源文件或目录，DEST目的文件或目录；</li><li><code>rsync [OPTION] ... SRC [user]@host:DEST</code>：这里的用法就是上面的远程备份用法，这里的<code>user@</code>可以省略不写，省略时，默认以当前终端用户去连接远程机器；</li><li><code>rsync [OPTION] ... [user]@host:SRC DEST</code>：这里使用远程机器的文件路径作为SRC源文件，可以讲远程文件同步到本地上来；</li><li><code>rsync [OPTION] ... SRC [user]@host::DEST</code>：需要注意这里远程机器的host后面是两个<code>:</code>，通过服务将本地源文件同步到远程机器；</li><li><code>rsync [OPTION] ... [user]@host::SRC DEST</code>：与上面相同，使用两个<code>:</code>，通过服务将远程源文件同步到本地。</li></ul></li></ul><h2 id=\"rsync常用选项\"><a href=\"#rsync常用选项\" class=\"headerlink\" title=\"rsync常用选项\"></a>rsync常用选项</h2><table><thead><tr><th style=\"text-align:center\">常用选项</th><th style=\"text-align:center\">作用</th></tr></thead><tbody><tr><td style=\"text-align:center\">-a</td><td style=\"text-align:center\">综合选项，包含<code>-rtplgoD</code>这几个选项</td></tr><tr><td style=\"text-align:center\">-r</td><td style=\"text-align:center\">同步目录，类似cp的-r选项</td></tr><tr><td style=\"text-align:center\">-v</td><td style=\"text-align:center\">同步时显示同步过程</td></tr><tr><td style=\"text-align:center\">-l</td><td style=\"text-align:center\">保留软连接</td></tr><tr><td style=\"text-align:center\">-L</td><td style=\"text-align:center\">同步软连接时将源文件同样同步过去</td></tr><tr><td style=\"text-align:center\">-p</td><td style=\"text-align:center\">保持文件的权限属性</td></tr><tr><td style=\"text-align:center\">-o</td><td style=\"text-align:center\">保持文件的属主</td></tr><tr><td style=\"text-align:center\">-g</td><td style=\"text-align:center\">保持文件的属组</td></tr><tr><td style=\"text-align:center\">-D</td><td style=\"text-align:center\">保持设备文件信息</td></tr><tr><td style=\"text-align:center\">-t</td><td style=\"text-align:center\">保持文件的时间属性</td></tr><tr><td style=\"text-align:center\">–delete</td><td style=\"text-align:center\">删除目的目录中源目录没有的文件</td></tr><tr><td style=\"text-align:center\">–exclude</td><td style=\"text-align:center\">过滤指定文件，如–exclude “logs”会将文件名包含logs的文件或目录过滤，不同步，支持通配</td></tr><tr><td style=\"text-align:center\">-P</td><td style=\"text-align:center\">显示同步过程，如速率，比-v详细</td></tr><tr><td style=\"text-align:center\">-u</td><td style=\"text-align:center\">使用此选项后，若DEST中文件比SRC新，则不同步</td></tr><tr><td style=\"text-align:center\">-z</td><td style=\"text-align:center\">传输时进行压缩</td></tr></tbody></table><ul><li>示例</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># ls -l rsync_dir/test </span></span><br><span class=\"line\">lrwxrwxrwx 1 root root 9 5月  14 23:10 rsync_dir/<span class=\"built_in\">test</span> -&gt; /tmp/<span class=\"built_in\">test</span></span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># rsync -avL rsync_dir/ /tmp/rsync_dest</span></span><br><span class=\"line\">sending incremental file list</span><br><span class=\"line\">created directory /tmp/rsync_dest</span><br><span class=\"line\">./</span><br><span class=\"line\">111</span><br><span class=\"line\">222</span><br><span class=\"line\">asnd</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">333/</span><br><span class=\"line\"></span><br><span class=\"line\">sent 318 bytes  received 137 bytes  910.00 bytes/sec</span><br><span class=\"line\">total size is 0  speedup is 0.00</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># ls -l /tmp/rsync_dest/</span></span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">-rw-r--r-- 1 root root 0 5月  14 23:10 111</span><br><span class=\"line\">-rw-r--r-- 1 root root 0 5月  14 23:10 222</span><br><span class=\"line\">drwxr-xr-x 2 root root 6 5月  14 23:10 333</span><br><span class=\"line\">-rw-r--r-- 1 root root 0 5月  14 23:10 asnd</span><br><span class=\"line\">-rw-r--r-- 1 root root 0 5月  14 23:10 <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure><blockquote><p>使用<code>-L</code>之后，软连接文件同步到目的目录变成了普通文件</p></blockquote><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># ls /tmp/rsync_dest/</span></span><br><span class=\"line\">111  222  333  asnd  new.txt  <span class=\"built_in\">test</span></span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># ls rsync_dir/</span></span><br><span class=\"line\">111  222  333  asnd  <span class=\"built_in\">test</span></span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># rsync -av --delete rsync_dir/ /tmp/rsync_dest/</span></span><br><span class=\"line\">sending incremental file list</span><br><span class=\"line\">deleting new.txt</span><br><span class=\"line\">./</span><br><span class=\"line\"><span class=\"built_in\">test</span> -&gt; /tmp/<span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\">sent 177 bytes  received 34 bytes  422.00 bytes/sec</span><br><span class=\"line\">total size is 9  speedup is 0.04</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># ls /tmp/rsync_dest/</span></span><br><span class=\"line\">111  222  333  asnd  <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure><blockquote><p>使用<code>--delete</code>选项，会将目的目录中与源目录不一致的文件删除。</p></blockquote><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www rsync_dir]<span class=\"comment\"># ls</span></span><br><span class=\"line\">111.txt  222  333  asnd.txt  <span class=\"built_in\">test</span></span><br><span class=\"line\">[root@www rsync_dir]<span class=\"comment\"># rsync -av --exclude \"*.txt\" /root/rsync_dir/ /tmp/dest/</span></span><br><span class=\"line\">sending incremental file list</span><br><span class=\"line\">created directory /tmp/dest</span><br><span class=\"line\">./</span><br><span class=\"line\">222</span><br><span class=\"line\"><span class=\"built_in\">test</span> -&gt; /tmp/<span class=\"built_in\">test</span></span><br><span class=\"line\">333/</span><br><span class=\"line\"></span><br><span class=\"line\">sent 179 bytes  received 77 bytes  512.00 bytes/sec</span><br><span class=\"line\">total size is 9  speedup is 0.04</span><br><span class=\"line\">[root@www rsync_dir]<span class=\"comment\"># ls /tmp/dest/</span></span><br><span class=\"line\">222  333  <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure><blockquote><p>使用<code>--exclude</code>选项可以过滤掉不想同步的文件，同时可以指定多个<code>--exclude</code>进行多种过滤。</p></blockquote><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www rsync_dir]<span class=\"comment\"># rsync -avP /root/rsync_dir/ /tmp/dest</span></span><br><span class=\"line\">sending incremental file list</span><br><span class=\"line\">created directory /tmp/dest</span><br><span class=\"line\">./</span><br><span class=\"line\">111.txt</span><br><span class=\"line\">              0 100%    0.00kB/s    0:00:00 (xfr<span class=\"comment\">#1, to-chk=5/7)</span></span><br><span class=\"line\">222</span><br><span class=\"line\">              0 100%    0.00kB/s    0:00:00 (xfr<span class=\"comment\">#2, to-chk=4/7)</span></span><br><span class=\"line\">asnd.txt</span><br><span class=\"line\">              0 100%    0.00kB/s    0:00:00 (xfr<span class=\"comment\">#3, to-chk=3/7)</span></span><br><span class=\"line\">hello.txt</span><br><span class=\"line\">    104,857,600 100%  168.87MB/s    0:00:00 (xfr<span class=\"comment\">#4, to-chk=2/7)</span></span><br><span class=\"line\"><span class=\"built_in\">test</span> -&gt; /tmp/<span class=\"built_in\">test</span></span><br><span class=\"line\">333/</span><br><span class=\"line\"></span><br><span class=\"line\">sent 104,883,565 bytes  received 138 bytes  69,922,468.67 bytes/sec</span><br><span class=\"line\">total size is 104,857,609  speedup is 1.00</span><br></pre></td></tr></table></figure><blockquote><p>-P选项会将同步时的详细过程打印出来</p></blockquote><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www rsync_dir]<span class=\"comment\"># cat /tmp/dest/111.txt </span></span><br><span class=\"line\">asdniainaifnai</span><br><span class=\"line\">[root@www rsync_dir]<span class=\"comment\"># cat 111.txt </span></span><br><span class=\"line\">[root@www rsync_dir]<span class=\"comment\"># rsync -avPu /root/rsync_dir/ /tmp/dest/</span></span><br><span class=\"line\">sending incremental file list</span><br><span class=\"line\">./</span><br><span class=\"line\"></span><br><span class=\"line\">sent 207 bytes  received 20 bytes  454.00 bytes/sec</span><br><span class=\"line\">total size is 104,857,609  speedup is 461,927.79</span><br><span class=\"line\">[root@www rsync_dir]<span class=\"comment\"># cat 111.txt </span></span><br><span class=\"line\">[root@www rsync_dir]<span class=\"comment\"># cat /tmp/dest/111.txt </span></span><br><span class=\"line\">asdniainaifnai</span><br></pre></td></tr></table></figure><blockquote><p>-u选项能够保证目标目录下更新的文件不被源文件所覆盖。</p></blockquote><h2 id=\"通过ssh同步\"><a href=\"#通过ssh同步\" class=\"headerlink\" title=\"通过ssh同步\"></a>通过ssh同步</h2><ul><li>rsync通过ssh同步，命令的形式为<code>rsync -av SRC [user]@host:DEST</code>；</li><li>如果对方机器或者本地的ssh端口不是默认的22端口，则命令的形式为<code>rsync -av -e &quot;ssh -p 2022&quot; SRC [user]@host:DEST</code>；</li></ul><hr><!-- rebuild by neat -->"},{"title":"rsync通过服务同步及系统日志介绍、screen工具的使用","author":"Evobot","abbrlink":"ccfd4295","date":"2018-05-15T14:03:12.000Z","image":null,"_content":"\n\n\n本文继续介绍rsync如何通过服务进行同步，另外介绍了Linux的系统日志和Screen工具的配置和使用。\n\n<!--more-->\n\n---\n\n# rsync服务同步\n\n- rsync通过服务同步的架构为CS架构，默认端口为873，启动服务后，机器之间可以通过服务端口进行通信和同步；\n\n- 服务同步的格式为`rsync -av ... SRC host::[Module]`，如果配置文件中配置了`auth users`则命令为`rsync -av ...SRC [user]@host::[module]`，对应的配置文件为`/etc/rsyncd.conf`，配置文件内容如下：\n\n  ```bash\n  port=873\t#指定rsync服务的监听端口\n  log file=/var/log/rsync.log\t\n  pid file=/var/run/rsync.pid\t\n  address=192.168.199.141\t#指定监听的本机ip，注释此项表示监听全部本机地址\n  [test]\t#模块名\n  path=/tmp/rsync\t#指定数据存放路径\n  use chroot=true\t\n  #开启此选项后，连接时会chroot到path中，如果path中存在软连接文件，同步时又使用了-L选项，那么将会报错，这时可以将其设置为false\n  max connections=4\t#指定最大连接数，默认为0\n  read only=true\t#true表示path可写，false表示只读\n  list=true\t#表示当用户使用rsync -avP 192.168.199.141::查询该服务器的可用模块时，该模块是否被列出，建议设置为false\n  uid=root\n  gid=root #指定传输时以什么用户身份传输，即文件的uid/gid\n  auth users=test\t#指定传输时使用的用户名\n  secrets file=/etc/rsyncd.passwd #指定auth users的密码文件，格式为username:passwd，权限为600\n  hosts allow=192.168.199.142\t#允许哪些服务器连接本机，多个IP使用空格分割，或者使用ip段：192.168.133.0/24\n  ```\n\n  > 指定的path必须要存在，命令中的module模块名指的是配置文件中的[test]配置。\n  >\n  > 如果指定了`auth users`和`secrets file`，对端机器在连接时可以创建rsync_pass.txt文件，并将密码写入其中，在同步时使用命令`rsync -av ...SRC --port=[port] --password-file=[/path/rsync_pass.txt][user]@host::[module]`，密码文件的权限为600。\n\n- 启动rsync服务命令为`rsync --daemon`:\n\n  ```bash\n  [root@localhost ~]# rsync --daemon\n  [root@localhost ~]# ps -aux | grep rsync\n  root       9472  0.0  0.1 126292  1684 pts/0    S+   22:24   0:00 vi /etc/rsyncd.conf\n  root       9502  0.0  0.0 114688   552 ?        Ss   22:34   0:00 rsync --daemon\n  root       9506  0.0  0.0 112668   972 pts/1    S+   22:35   0:00 grep --color=auto rsync\n  [root@localhost ~]# netstat -lntp\n  Active Internet connections (only servers)\n  Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \n  tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1134/sshd           \n  tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1709/master         \n  tcp        0      0 192.168.199.141:873     0.0.0.0:*               LISTEN      9502/rsync          \n  tcp6       0      0 :::22                   :::*                    LISTEN      1134/sshd           \n  tcp6       0      0 ::1:25                  :::*                    LISTEN      1709/master\n  ```\n\n- 在另一台机器上执行命令进行同步：\n\n  ```bash\n  [root@localhost tmp]# rsync -avP /tmp/lab.swp 192.168.199.141::test/\n  sending incremental file list\n  lab.swp\n      104,857,600 100%   47.92MB/s    0:00:02 (xfr#1, to-chk=0/1)\n\n  sent 104,883,286 bytes  received 35 bytes  29,966,663.14 bytes/sec\n  total size is 104,857,600  speedup is 1.00\n  ```\n\n  - 在配置文件内有`auth users`和`secrets file`两个配置，如果不想使用密码认证的话，可以注释这两行；\n  - 如果在执行命令时报错提示如下：\n\n  ```bash\n  rsync: failed to connect to 192.168.199.140 (192.168.199.140): No route to host (113)\n  rsync error: error in socket IO (code 10) at clientserver.c(125) [sender=3.1.2]\n  ```\n\n  - 那么可以安装`telnet`检查对端机器的rsync的端口是否开放，telnet命令格式为`telnet [ip address][port]`：\n\n  ```bash\n  [root@localhost tmp]# telnet 192.168.199.141 873\n  Trying 192.168.199.141...\n  telnet: connect to address 192.168.199.141: No route to host\n  ```\n\n  - 上面的输出表示对端端口无响应，然后我们需要检查对端机器的防火墙，可以关闭firewalld防火墙再重新telnet：\n\n  ```bash\n  [root@localhost tmp]# telnet 192.168.199.141 873\n  Trying 192.168.199.141...\n  Connected to 192.168.199.141.\n  Escape character is '^]'.\n  @RSYNCD: 31.0\n  ^]\n  telnet> quit\n  Connection closed.\n  ```\n\n  - 上面的输出表示对端机器端口正常，这时候再重新执行`rsync`命令即可。\n\n- 使用命令`rsync -avP host::[module]/files DEST`的形式从远端机器上拉取文件；\n\n- 如果对端机器的rsync更改了端口，那么再同步时需要使用`--port=[port]`指定端口进行同步。\n\n---\n\n# Linux系统日志\n\n## messages日志及logrotate介绍\n\n- 系统日志会记录与系统有关的所有信息，能够帮助我们排查错误和了解机器状态；\n\n- `/var/log/messages`日志是Linux系统的总日志，没有单独定义日志的服务，都会将日志记录在内，当messages日志达到一定大小时，系统会使用`logrotate`服务对其进行切割，logrotate的配置文件为`/etc/logrotate.conf`：\n\n  ```bash\n  [lux@evobot log]$ cat /etc/logrotate.conf\n  # see \"man logrotate\" for details\n  # rotate log files weekly\n  weekly\t# 表示每周切割一次\n\n  # keep 4 weeks worth of backlogs\n  rotate 4\t#表示保留4个日志\n\n  # create new (empty) log files after rotating old ones\n  create\t#切割完成时创建为新文件\n\n  # use date as a suffix of the rotated file\n  dateext\t#新文件的后缀名，这里表示日期\n\n  # uncomment this if you want your log files compressed\n  #compress\t#是否压缩\n\n  # RPM packages drop log rotation information into this directory\n  include /etc/logrotate.d\t#包含指定目录下的其他配置文件\n\n  # no packages own wtmp and btmp -- we'll rotate them here\n  # 对指定日志进行切割的配置\n  /var/log/wtmp {\t\n      monthly\n      create 0664 root utmp\t#创建时指定权限属主属组\n          minsize 1M\t#最小大小\n      rotate 1\t#保留个数\n  }\n\n  /var/log/btmp {\n      missingok\n      monthly\n      create 0600 root utmp\n      rotate 1\n  }\n\n  # system-specific logs may be also be configured here.\n  ```\n\n- 而在`/etc/logrotate.d`目录下，还有logrotate的其他配置文件：\n\n  ```bash\n  [lux@evobot log]$ ls /etc/logrotate.d/\n  bootlog  chrony  nginx  syslog  wpa_supplicant  yum\n\n  [lux@evobot log]$ cat /etc/logrotate.d/syslog\n  /var/log/cron\n  /var/log/maillog\n  /var/log/messages\n  /var/log/secure\n  /var/log/spooler\n  {\n          sharedscripts\n          dateext\n          rotate 25\n          size 40M\n          compress\n          dateformat  -%Y%m%d%s\n          postrotate\n                  /bin/kill -HUP `cat /var/run/syslogd.pid 2> /dev/null` 2> /dev/null || true\t#由于新建了日志文件，需要重启服务让日志写入到新的文件中\n          endscript\n  }\n  ```\n\n  > 关于logrotate的详细介绍，可以参考文章[logrotate 使用详解](https://my.oschina.net/u/2000675/blog/908189)\n\n## logrotate示例\n\n### 日志配置\n- 通常不需要修改**logrotate.conf**文件，只需要将需要轮询的日志独立配置文件放在`/etc/logrotate.d/`目录下即可；\n- 创建一个10MB的随机比特流数据日志文件：\n    \n  ```bash\n  touch /var/log/test-log\n  head -c 10M /dev/urandom > /var/log/test-log\n  ```\n\n- 在`/etc/logrotate.d/`目录下为日志文件创建同名配置文件：\n\n  ```bash\n  vi /etc/logrotate.d/test-log\n  ```\n  写入如下配置：\n  ```bash\n  /var/log/test-log {\n      monthly\n      rotate 5\n      compress\n      delaycompress\n      missingok\n      notifempty\n      create 644 root root\n      postrotate\n          /usr/bin/killall -HUP rsyslogd\n      endscript\n  }\n  ```\n  \n  - monthly: 日志文件将按月轮循。其它可用值为‘daily’，‘weekly’或者‘yearly’；\n  - rotate 5: 一次将存储5个归档日志。对于第六个归档，时间最久的归档将被删除；\n  - compress: 在轮循任务完成后，已轮循的归档将使用gzip进行压缩；\n  - delaycompress: 总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用；\n  - missingok: 在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误；\n  - otifempty: 如果日志文件为空，轮循不会进行；\n  - create 644 root root: 以指定的权限创建全新的日志文件，同时logrotate也会重命名原始日志文件；\n  - postrotate/endscript: 在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。\n  \n- 日志增长到指定大小进行分割：\n\n  ```bash\n  /var/log/test-log {\n    size=50M\n    rotate 5\n    create 644 root root\n    postrotate\n        /usr/bin/killall -HUP rsyslogd\n    endscript\n}\n  ```\n  \n- 分割的日志按照日期命名：\n    \n  ```bash\n  /var/log/test-log {\n    monthly\n    rotate 5\n    dateext\n    create 644 root root\n    postrotate\n        /usr/bin/killall -HUP rsyslogd\n    endscript\n}\n  ```\n  \n### logrotate操作\n\n- logrotate可以使用命令手动调用，如为`/etc/logrotate.d/`目录下所有配置调用logrotate:\n\n  ```bash\n  # logrorate /etc/logrotate.conf\n  ```\n  \n- 为某个特定配置调用：\n    \n  ```bash\n  # logrotate /etc/logrotate.d/test-log\n  ```\n\n\n- logrotate命令具有`-d`选项，可以运行logrotate，但实际不会真正去操作日志，只会模拟打印结果：\n\n  ```bash\n  # logratatte -d /etc/logrotate.d/test-log\n  ```\n  \n- 不满足日志轮询条件时，可以使用`-f`参数强制轮询,`-v`输出详细信息：\n    \n  ```bash\n  # logrotate -vf /etc/logrotate.d/test-log\n  ```\n\n- logrotate自身的日志位于`/var/lib/logrotate/status/`目录，如果需要临时指定日志输出路径，使用如下命令：\n\n  ```bash\n  # logrotate -vf -s /var/log/logrotate-status /etc/logrotate.d/test-log\n  ```\n  \n## dmsg日志\n\n- `dmesg`命令可以查看系统的硬件相关的日志，dmesg日志是保存在内存中的，例如服务器有硬件故障，就需要查看这个日志，`dmesg -c`可以清空日志。\n- 而`/var/log/dmesg`日志与`dmesg`命令查看的日志是不同的，其记录的是系统启动的相关日志。\n\n## last/lastb命令\n\n- `last`命令会调用`/var/log/wtmp`文件，这个文件为二进制文件，记录了系统所有的登陆日志，内容包括用户名、tty、来源ip，登陆时间和注销时间；\n- 而`lastb`命令则调用`/var/log/btmp`文件，同样是二进制文件，记录了登陆失败的日志。\n\n## secure日志\n\n- `/var/log/secure`日志记录了登陆成功和登陆失败的详细日志，并会记录失败的具体原因。并且还记录了系统中其他一些安全相关的日志，如sudo命令、定时任务等等。\n\n---\n\n# screen工具\n\n- Screen是个终端的多路复用器。可以在一个终端内执行任意多个应用程序。简单来说screen解决了终端下两个问题：\n\n  1. 终端下工作有时会面临需要打开多个个终端，或者多个标签页的清空，每个里面运行一个应用或者完整某类功能。然后在终端之间需要经常切换切换，screen只需要一个终端就可以解决。\n  2. 一般远程登录服务器，断网之后会使任务或命令中断，虽然可以使用`nohup command &`使命令在后台执行，但是这样会看不到命令的输出。而screen即使断网，或者放在后台、退出，都可以随时恢复。\n\n- 使用screen之前需要安装`screen`软件包，直接执行`screen`命令就会创建一个虚拟终端，在其中可以任意执行任务，使用快捷键`ctrl+a+d`可以将screen虚拟终端放入后台，同时在虚拟终端中的任务不会终端，仍旧会继续执行；\n\n- `screen -ls`可以查看所有的终端，Detached表示在后台运行，Attached表示在前台运行，每个终端最前面的数字为终端的ID：\n\n  ```bash\n  [root@evobot ~]# screen -ls\n  There is a screen on:\n          17491.pts-0.evobot      (Detached)\n  1 Socket in /var/run/screen/S-root.\n  ```\n\n- 恢复Detached的screen终端，使用`screen -r [id]`：\n\n  ```bash\n  [root@evobot ~]# screen -r 17491\n  ```\n\n- 结束一个screen终端，可以在终端内使用`exit`命令结束，或者使用`ctrl+k`杀死当前终端；\n\n- 创建screen终端还可以使用`screen -S [name]`来指定一个名字创建终端，这样在恢复终端时可以使用`screen -r [name]`来恢复终端。\n\n---","source":"_posts/rsync通过服务同步及系统日志介绍、screen工具的使用.md","raw":"---\ntitle: rsync通过服务同步及系统日志介绍、screen工具的使用\nauthor: Evobot\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\nabbrlink: ccfd4295\ndate: 2018-05-15 22:03:12\nimage:\n---\n\n\n\n本文继续介绍rsync如何通过服务进行同步，另外介绍了Linux的系统日志和Screen工具的配置和使用。\n\n<!--more-->\n\n---\n\n# rsync服务同步\n\n- rsync通过服务同步的架构为CS架构，默认端口为873，启动服务后，机器之间可以通过服务端口进行通信和同步；\n\n- 服务同步的格式为`rsync -av ... SRC host::[Module]`，如果配置文件中配置了`auth users`则命令为`rsync -av ...SRC [user]@host::[module]`，对应的配置文件为`/etc/rsyncd.conf`，配置文件内容如下：\n\n  ```bash\n  port=873\t#指定rsync服务的监听端口\n  log file=/var/log/rsync.log\t\n  pid file=/var/run/rsync.pid\t\n  address=192.168.199.141\t#指定监听的本机ip，注释此项表示监听全部本机地址\n  [test]\t#模块名\n  path=/tmp/rsync\t#指定数据存放路径\n  use chroot=true\t\n  #开启此选项后，连接时会chroot到path中，如果path中存在软连接文件，同步时又使用了-L选项，那么将会报错，这时可以将其设置为false\n  max connections=4\t#指定最大连接数，默认为0\n  read only=true\t#true表示path可写，false表示只读\n  list=true\t#表示当用户使用rsync -avP 192.168.199.141::查询该服务器的可用模块时，该模块是否被列出，建议设置为false\n  uid=root\n  gid=root #指定传输时以什么用户身份传输，即文件的uid/gid\n  auth users=test\t#指定传输时使用的用户名\n  secrets file=/etc/rsyncd.passwd #指定auth users的密码文件，格式为username:passwd，权限为600\n  hosts allow=192.168.199.142\t#允许哪些服务器连接本机，多个IP使用空格分割，或者使用ip段：192.168.133.0/24\n  ```\n\n  > 指定的path必须要存在，命令中的module模块名指的是配置文件中的[test]配置。\n  >\n  > 如果指定了`auth users`和`secrets file`，对端机器在连接时可以创建rsync_pass.txt文件，并将密码写入其中，在同步时使用命令`rsync -av ...SRC --port=[port] --password-file=[/path/rsync_pass.txt][user]@host::[module]`，密码文件的权限为600。\n\n- 启动rsync服务命令为`rsync --daemon`:\n\n  ```bash\n  [root@localhost ~]# rsync --daemon\n  [root@localhost ~]# ps -aux | grep rsync\n  root       9472  0.0  0.1 126292  1684 pts/0    S+   22:24   0:00 vi /etc/rsyncd.conf\n  root       9502  0.0  0.0 114688   552 ?        Ss   22:34   0:00 rsync --daemon\n  root       9506  0.0  0.0 112668   972 pts/1    S+   22:35   0:00 grep --color=auto rsync\n  [root@localhost ~]# netstat -lntp\n  Active Internet connections (only servers)\n  Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \n  tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1134/sshd           \n  tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1709/master         \n  tcp        0      0 192.168.199.141:873     0.0.0.0:*               LISTEN      9502/rsync          \n  tcp6       0      0 :::22                   :::*                    LISTEN      1134/sshd           \n  tcp6       0      0 ::1:25                  :::*                    LISTEN      1709/master\n  ```\n\n- 在另一台机器上执行命令进行同步：\n\n  ```bash\n  [root@localhost tmp]# rsync -avP /tmp/lab.swp 192.168.199.141::test/\n  sending incremental file list\n  lab.swp\n      104,857,600 100%   47.92MB/s    0:00:02 (xfr#1, to-chk=0/1)\n\n  sent 104,883,286 bytes  received 35 bytes  29,966,663.14 bytes/sec\n  total size is 104,857,600  speedup is 1.00\n  ```\n\n  - 在配置文件内有`auth users`和`secrets file`两个配置，如果不想使用密码认证的话，可以注释这两行；\n  - 如果在执行命令时报错提示如下：\n\n  ```bash\n  rsync: failed to connect to 192.168.199.140 (192.168.199.140): No route to host (113)\n  rsync error: error in socket IO (code 10) at clientserver.c(125) [sender=3.1.2]\n  ```\n\n  - 那么可以安装`telnet`检查对端机器的rsync的端口是否开放，telnet命令格式为`telnet [ip address][port]`：\n\n  ```bash\n  [root@localhost tmp]# telnet 192.168.199.141 873\n  Trying 192.168.199.141...\n  telnet: connect to address 192.168.199.141: No route to host\n  ```\n\n  - 上面的输出表示对端端口无响应，然后我们需要检查对端机器的防火墙，可以关闭firewalld防火墙再重新telnet：\n\n  ```bash\n  [root@localhost tmp]# telnet 192.168.199.141 873\n  Trying 192.168.199.141...\n  Connected to 192.168.199.141.\n  Escape character is '^]'.\n  @RSYNCD: 31.0\n  ^]\n  telnet> quit\n  Connection closed.\n  ```\n\n  - 上面的输出表示对端机器端口正常，这时候再重新执行`rsync`命令即可。\n\n- 使用命令`rsync -avP host::[module]/files DEST`的形式从远端机器上拉取文件；\n\n- 如果对端机器的rsync更改了端口，那么再同步时需要使用`--port=[port]`指定端口进行同步。\n\n---\n\n# Linux系统日志\n\n## messages日志及logrotate介绍\n\n- 系统日志会记录与系统有关的所有信息，能够帮助我们排查错误和了解机器状态；\n\n- `/var/log/messages`日志是Linux系统的总日志，没有单独定义日志的服务，都会将日志记录在内，当messages日志达到一定大小时，系统会使用`logrotate`服务对其进行切割，logrotate的配置文件为`/etc/logrotate.conf`：\n\n  ```bash\n  [lux@evobot log]$ cat /etc/logrotate.conf\n  # see \"man logrotate\" for details\n  # rotate log files weekly\n  weekly\t# 表示每周切割一次\n\n  # keep 4 weeks worth of backlogs\n  rotate 4\t#表示保留4个日志\n\n  # create new (empty) log files after rotating old ones\n  create\t#切割完成时创建为新文件\n\n  # use date as a suffix of the rotated file\n  dateext\t#新文件的后缀名，这里表示日期\n\n  # uncomment this if you want your log files compressed\n  #compress\t#是否压缩\n\n  # RPM packages drop log rotation information into this directory\n  include /etc/logrotate.d\t#包含指定目录下的其他配置文件\n\n  # no packages own wtmp and btmp -- we'll rotate them here\n  # 对指定日志进行切割的配置\n  /var/log/wtmp {\t\n      monthly\n      create 0664 root utmp\t#创建时指定权限属主属组\n          minsize 1M\t#最小大小\n      rotate 1\t#保留个数\n  }\n\n  /var/log/btmp {\n      missingok\n      monthly\n      create 0600 root utmp\n      rotate 1\n  }\n\n  # system-specific logs may be also be configured here.\n  ```\n\n- 而在`/etc/logrotate.d`目录下，还有logrotate的其他配置文件：\n\n  ```bash\n  [lux@evobot log]$ ls /etc/logrotate.d/\n  bootlog  chrony  nginx  syslog  wpa_supplicant  yum\n\n  [lux@evobot log]$ cat /etc/logrotate.d/syslog\n  /var/log/cron\n  /var/log/maillog\n  /var/log/messages\n  /var/log/secure\n  /var/log/spooler\n  {\n          sharedscripts\n          dateext\n          rotate 25\n          size 40M\n          compress\n          dateformat  -%Y%m%d%s\n          postrotate\n                  /bin/kill -HUP `cat /var/run/syslogd.pid 2> /dev/null` 2> /dev/null || true\t#由于新建了日志文件，需要重启服务让日志写入到新的文件中\n          endscript\n  }\n  ```\n\n  > 关于logrotate的详细介绍，可以参考文章[logrotate 使用详解](https://my.oschina.net/u/2000675/blog/908189)\n\n## logrotate示例\n\n### 日志配置\n- 通常不需要修改**logrotate.conf**文件，只需要将需要轮询的日志独立配置文件放在`/etc/logrotate.d/`目录下即可；\n- 创建一个10MB的随机比特流数据日志文件：\n    \n  ```bash\n  touch /var/log/test-log\n  head -c 10M /dev/urandom > /var/log/test-log\n  ```\n\n- 在`/etc/logrotate.d/`目录下为日志文件创建同名配置文件：\n\n  ```bash\n  vi /etc/logrotate.d/test-log\n  ```\n  写入如下配置：\n  ```bash\n  /var/log/test-log {\n      monthly\n      rotate 5\n      compress\n      delaycompress\n      missingok\n      notifempty\n      create 644 root root\n      postrotate\n          /usr/bin/killall -HUP rsyslogd\n      endscript\n  }\n  ```\n  \n  - monthly: 日志文件将按月轮循。其它可用值为‘daily’，‘weekly’或者‘yearly’；\n  - rotate 5: 一次将存储5个归档日志。对于第六个归档，时间最久的归档将被删除；\n  - compress: 在轮循任务完成后，已轮循的归档将使用gzip进行压缩；\n  - delaycompress: 总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用；\n  - missingok: 在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误；\n  - otifempty: 如果日志文件为空，轮循不会进行；\n  - create 644 root root: 以指定的权限创建全新的日志文件，同时logrotate也会重命名原始日志文件；\n  - postrotate/endscript: 在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。\n  \n- 日志增长到指定大小进行分割：\n\n  ```bash\n  /var/log/test-log {\n    size=50M\n    rotate 5\n    create 644 root root\n    postrotate\n        /usr/bin/killall -HUP rsyslogd\n    endscript\n}\n  ```\n  \n- 分割的日志按照日期命名：\n    \n  ```bash\n  /var/log/test-log {\n    monthly\n    rotate 5\n    dateext\n    create 644 root root\n    postrotate\n        /usr/bin/killall -HUP rsyslogd\n    endscript\n}\n  ```\n  \n### logrotate操作\n\n- logrotate可以使用命令手动调用，如为`/etc/logrotate.d/`目录下所有配置调用logrotate:\n\n  ```bash\n  # logrorate /etc/logrotate.conf\n  ```\n  \n- 为某个特定配置调用：\n    \n  ```bash\n  # logrotate /etc/logrotate.d/test-log\n  ```\n\n\n- logrotate命令具有`-d`选项，可以运行logrotate，但实际不会真正去操作日志，只会模拟打印结果：\n\n  ```bash\n  # logratatte -d /etc/logrotate.d/test-log\n  ```\n  \n- 不满足日志轮询条件时，可以使用`-f`参数强制轮询,`-v`输出详细信息：\n    \n  ```bash\n  # logrotate -vf /etc/logrotate.d/test-log\n  ```\n\n- logrotate自身的日志位于`/var/lib/logrotate/status/`目录，如果需要临时指定日志输出路径，使用如下命令：\n\n  ```bash\n  # logrotate -vf -s /var/log/logrotate-status /etc/logrotate.d/test-log\n  ```\n  \n## dmsg日志\n\n- `dmesg`命令可以查看系统的硬件相关的日志，dmesg日志是保存在内存中的，例如服务器有硬件故障，就需要查看这个日志，`dmesg -c`可以清空日志。\n- 而`/var/log/dmesg`日志与`dmesg`命令查看的日志是不同的，其记录的是系统启动的相关日志。\n\n## last/lastb命令\n\n- `last`命令会调用`/var/log/wtmp`文件，这个文件为二进制文件，记录了系统所有的登陆日志，内容包括用户名、tty、来源ip，登陆时间和注销时间；\n- 而`lastb`命令则调用`/var/log/btmp`文件，同样是二进制文件，记录了登陆失败的日志。\n\n## secure日志\n\n- `/var/log/secure`日志记录了登陆成功和登陆失败的详细日志，并会记录失败的具体原因。并且还记录了系统中其他一些安全相关的日志，如sudo命令、定时任务等等。\n\n---\n\n# screen工具\n\n- Screen是个终端的多路复用器。可以在一个终端内执行任意多个应用程序。简单来说screen解决了终端下两个问题：\n\n  1. 终端下工作有时会面临需要打开多个个终端，或者多个标签页的清空，每个里面运行一个应用或者完整某类功能。然后在终端之间需要经常切换切换，screen只需要一个终端就可以解决。\n  2. 一般远程登录服务器，断网之后会使任务或命令中断，虽然可以使用`nohup command &`使命令在后台执行，但是这样会看不到命令的输出。而screen即使断网，或者放在后台、退出，都可以随时恢复。\n\n- 使用screen之前需要安装`screen`软件包，直接执行`screen`命令就会创建一个虚拟终端，在其中可以任意执行任务，使用快捷键`ctrl+a+d`可以将screen虚拟终端放入后台，同时在虚拟终端中的任务不会终端，仍旧会继续执行；\n\n- `screen -ls`可以查看所有的终端，Detached表示在后台运行，Attached表示在前台运行，每个终端最前面的数字为终端的ID：\n\n  ```bash\n  [root@evobot ~]# screen -ls\n  There is a screen on:\n          17491.pts-0.evobot      (Detached)\n  1 Socket in /var/run/screen/S-root.\n  ```\n\n- 恢复Detached的screen终端，使用`screen -r [id]`：\n\n  ```bash\n  [root@evobot ~]# screen -r 17491\n  ```\n\n- 结束一个screen终端，可以在终端内使用`exit`命令结束，或者使用`ctrl+k`杀死当前终端；\n\n- 创建screen终端还可以使用`screen -S [name]`来指定一个名字创建终端，这样在恢复终端时可以使用`screen -r [name]`来恢复终端。\n\n---","slug":"rsync通过服务同步及系统日志介绍、screen工具的使用","published":1,"updated":"2018-06-02T13:01:29.612Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gaze9003xu1jxhmsmmvrl","content":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p>本文继续介绍rsync如何通过服务进行同步，另外介绍了Linux的系统日志和Screen工具的配置和使用。</p><a id=\"more\"></a><hr><h1 id=\"rsync服务同步\"><a href=\"#rsync服务同步\" class=\"headerlink\" title=\"rsync服务同步\"></a>rsync服务同步</h1><ul><li><p>rsync通过服务同步的架构为CS架构，默认端口为873，启动服务后，机器之间可以通过服务端口进行通信和同步；</p></li><li><p>服务同步的格式为<code>rsync -av ... SRC host::[Module]</code>，如果配置文件中配置了<code>auth users</code>则命令为<code>rsync -av ...SRC [user]@host::[module]</code>，对应的配置文件为<code>/etc/rsyncd.conf</code>，配置文件内容如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port=873\t<span class=\"comment\">#指定rsync服务的监听端口</span></span><br><span class=\"line\"><span class=\"built_in\">log</span> file=/var/<span class=\"built_in\">log</span>/rsync.log\t</span><br><span class=\"line\">pid file=/var/run/rsync.pid\t</span><br><span class=\"line\">address=192.168.199.141\t<span class=\"comment\">#指定监听的本机ip，注释此项表示监听全部本机地址</span></span><br><span class=\"line\">[<span class=\"built_in\">test</span>]\t<span class=\"comment\">#模块名</span></span><br><span class=\"line\">path=/tmp/rsync\t<span class=\"comment\">#指定数据存放路径</span></span><br><span class=\"line\">use chroot=<span class=\"literal\">true</span>\t</span><br><span class=\"line\"><span class=\"comment\">#开启此选项后，连接时会chroot到path中，如果path中存在软连接文件，同步时又使用了-L选项，那么将会报错，这时可以将其设置为false</span></span><br><span class=\"line\">max connections=4\t<span class=\"comment\">#指定最大连接数，默认为0</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> only=<span class=\"literal\">true</span>\t<span class=\"comment\">#true表示path可写，false表示只读</span></span><br><span class=\"line\">list=<span class=\"literal\">true</span>\t<span class=\"comment\">#表示当用户使用rsync -avP 192.168.199.141::查询该服务器的可用模块时，该模块是否被列出，建议设置为false</span></span><br><span class=\"line\">uid=root</span><br><span class=\"line\">gid=root <span class=\"comment\">#指定传输时以什么用户身份传输，即文件的uid/gid</span></span><br><span class=\"line\">auth users=<span class=\"built_in\">test</span>\t<span class=\"comment\">#指定传输时使用的用户名</span></span><br><span class=\"line\">secrets file=/etc/rsyncd.passwd <span class=\"comment\">#指定auth users的密码文件，格式为username:passwd，权限为600</span></span><br><span class=\"line\">hosts allow=192.168.199.142\t<span class=\"comment\">#允许哪些服务器连接本机，多个IP使用空格分割，或者使用ip段：192.168.133.0/24</span></span><br></pre></td></tr></table></figure><blockquote><p>指定的path必须要存在，命令中的module模块名指的是配置文件中的[test]配置。</p><p>如果指定了<code>auth users</code>和<code>secrets file</code>，对端机器在连接时可以创建rsync_pass.txt文件，并将密码写入其中，在同步时使用命令<code>rsync -av ...SRC --port=[port] --password-file=[/path/rsync_pass.txt][user]@host::[module]</code>，密码文件的权限为600。</p></blockquote></li><li><p>启动rsync服务命令为<code>rsync --daemon</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># rsync --daemon</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ps -aux | grep rsync</span></span><br><span class=\"line\">root       9472  0.0  0.1 126292  1684 pts/0    S+   22:24   0:00 vi /etc/rsyncd.conf</span><br><span class=\"line\">root       9502  0.0  0.0 114688   552 ?        Ss   22:34   0:00 rsync --daemon</span><br><span class=\"line\">root       9506  0.0  0.0 112668   972 pts/1    S+   22:35   0:00 grep --color=auto rsync</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># netstat -lntp</span></span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class=\"line\">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1134/sshd           </span><br><span class=\"line\">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1709/master         </span><br><span class=\"line\">tcp        0      0 192.168.199.141:873     0.0.0.0:*               LISTEN      9502/rsync          </span><br><span class=\"line\">tcp6       0      0 :::22                   :::*                    LISTEN      1134/sshd           </span><br><span class=\"line\">tcp6       0      0 ::1:25                  :::*                    LISTEN      1709/master</span><br></pre></td></tr></table></figure></li><li><p>在另一台机器上执行命令进行同步：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost tmp]<span class=\"comment\"># rsync -avP /tmp/lab.swp 192.168.199.141::test/</span></span><br><span class=\"line\">sending incremental file list</span><br><span class=\"line\">lab.swp</span><br><span class=\"line\">    104,857,600 100%   47.92MB/s    0:00:02 (xfr<span class=\"comment\">#1, to-chk=0/1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">sent 104,883,286 bytes  received 35 bytes  29,966,663.14 bytes/sec</span><br><span class=\"line\">total size is 104,857,600  speedup is 1.00</span><br></pre></td></tr></table></figure><ul><li>在配置文件内有<code>auth users</code>和<code>secrets file</code>两个配置，如果不想使用密码认证的话，可以注释这两行；</li><li>如果在执行命令时报错提示如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync: failed to connect to 192.168.199.140 (192.168.199.140): No route to host (113)</span><br><span class=\"line\">rsync error: error <span class=\"keyword\">in</span> socket IO (code 10) at clientserver.c(125) [sender=3.1.2]</span><br></pre></td></tr></table></figure><ul><li>那么可以安装<code>telnet</code>检查对端机器的rsync的端口是否开放，telnet命令格式为<code>telnet [ip address][port]</code>：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost tmp]<span class=\"comment\"># telnet 192.168.199.141 873</span></span><br><span class=\"line\">Trying 192.168.199.141...</span><br><span class=\"line\">telnet: connect to address 192.168.199.141: No route to host</span><br></pre></td></tr></table></figure><ul><li>上面的输出表示对端端口无响应，然后我们需要检查对端机器的防火墙，可以关闭firewalld防火墙再重新telnet：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost tmp]<span class=\"comment\"># telnet 192.168.199.141 873</span></span><br><span class=\"line\">Trying 192.168.199.141...</span><br><span class=\"line\">Connected to 192.168.199.141.</span><br><span class=\"line\">Escape character is <span class=\"string\">'^]'</span>.</span><br><span class=\"line\">@RSYNCD: 31.0</span><br><span class=\"line\">^]</span><br><span class=\"line\">telnet&gt; quit</span><br><span class=\"line\">Connection closed.</span><br></pre></td></tr></table></figure><ul><li>上面的输出表示对端机器端口正常，这时候再重新执行<code>rsync</code>命令即可。</li></ul></li><li><p>使用命令<code>rsync -avP host::[module]/files DEST</code>的形式从远端机器上拉取文件；</p></li><li><p>如果对端机器的rsync更改了端口，那么再同步时需要使用<code>--port=[port]</code>指定端口进行同步。</p></li></ul><hr><h1 id=\"Linux系统日志\"><a href=\"#Linux系统日志\" class=\"headerlink\" title=\"Linux系统日志\"></a>Linux系统日志</h1><h2 id=\"messages日志及logrotate介绍\"><a href=\"#messages日志及logrotate介绍\" class=\"headerlink\" title=\"messages日志及logrotate介绍\"></a>messages日志及logrotate介绍</h2><ul><li><p>系统日志会记录与系统有关的所有信息，能够帮助我们排查错误和了解机器状态；</p></li><li><p><code>/var/log/messages</code>日志是Linux系统的总日志，没有单独定义日志的服务，都会将日志记录在内，当messages日志达到一定大小时，系统会使用<code>logrotate</code>服务对其进行切割，logrotate的配置文件为<code>/etc/logrotate.conf</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@evobot <span class=\"built_in\">log</span>]$ cat /etc/logrotate.conf</span><br><span class=\"line\"><span class=\"comment\"># see \"man logrotate\" for details</span></span><br><span class=\"line\"><span class=\"comment\"># rotate log files weekly</span></span><br><span class=\"line\">weekly\t<span class=\"comment\"># 表示每周切割一次</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># keep 4 weeks worth of backlogs</span></span><br><span class=\"line\">rotate 4\t<span class=\"comment\">#表示保留4个日志</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># create new (empty) log files after rotating old ones</span></span><br><span class=\"line\">create\t<span class=\"comment\">#切割完成时创建为新文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># use date as a suffix of the rotated file</span></span><br><span class=\"line\">dateext\t<span class=\"comment\">#新文件的后缀名，这里表示日期</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># uncomment this if you want your log files compressed</span></span><br><span class=\"line\"><span class=\"comment\">#compress\t#是否压缩</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># RPM packages drop log rotation information into this directory</span></span><br><span class=\"line\">include /etc/logrotate.d\t<span class=\"comment\">#包含指定目录下的其他配置文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># no packages own wtmp and btmp -- we'll rotate them here</span></span><br><span class=\"line\"><span class=\"comment\"># 对指定日志进行切割的配置</span></span><br><span class=\"line\">/var/<span class=\"built_in\">log</span>/wtmp &#123;\t</span><br><span class=\"line\">    monthly</span><br><span class=\"line\">    create 0664 root utmp\t<span class=\"comment\">#创建时指定权限属主属组</span></span><br><span class=\"line\">        minsize 1M\t<span class=\"comment\">#最小大小</span></span><br><span class=\"line\">    rotate 1\t<span class=\"comment\">#保留个数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/var/<span class=\"built_in\">log</span>/btmp &#123;</span><br><span class=\"line\">    missingok</span><br><span class=\"line\">    monthly</span><br><span class=\"line\">    create 0600 root utmp</span><br><span class=\"line\">    rotate 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># system-specific logs may be also be configured here.</span></span><br></pre></td></tr></table></figure></li><li><p>而在<code>/etc/logrotate.d</code>目录下，还有logrotate的其他配置文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@evobot <span class=\"built_in\">log</span>]$ ls /etc/logrotate.d/</span><br><span class=\"line\">bootlog  chrony  nginx  syslog  wpa_supplicant  yum</span><br><span class=\"line\"></span><br><span class=\"line\">[lux@evobot <span class=\"built_in\">log</span>]$ cat /etc/logrotate.d/syslog</span><br><span class=\"line\">/var/<span class=\"built_in\">log</span>/cron</span><br><span class=\"line\">/var/<span class=\"built_in\">log</span>/maillog</span><br><span class=\"line\">/var/<span class=\"built_in\">log</span>/messages</span><br><span class=\"line\">/var/<span class=\"built_in\">log</span>/secure</span><br><span class=\"line\">/var/<span class=\"built_in\">log</span>/spooler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        sharedscripts</span><br><span class=\"line\">        dateext</span><br><span class=\"line\">        rotate 25</span><br><span class=\"line\">        size 40M</span><br><span class=\"line\">        compress</span><br><span class=\"line\">        dateformat  -%Y%m%d%s</span><br><span class=\"line\">        postrotate</span><br><span class=\"line\">                /bin/<span class=\"built_in\">kill</span> -HUP `cat /var/run/syslogd.pid 2&gt; /dev/null` 2&gt; /dev/null || <span class=\"literal\">true</span>\t<span class=\"comment\">#由于新建了日志文件，需要重启服务让日志写入到新的文件中</span></span><br><span class=\"line\">        endscript</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关于logrotate的详细介绍，可以参考文章<a href=\"https://my.oschina.net/u/2000675/blog/908189\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">logrotate 使用详解</a></p></blockquote></li></ul><h2 id=\"logrotate示例\"><a href=\"#logrotate示例\" class=\"headerlink\" title=\"logrotate示例\"></a>logrotate示例</h2><h3 id=\"日志配置\"><a href=\"#日志配置\" class=\"headerlink\" title=\"日志配置\"></a>日志配置</h3><ul><li>通常不需要修改<strong>logrotate.conf</strong>文件，只需要将需要轮询的日志独立配置文件放在<code>/etc/logrotate.d/</code>目录下即可；</li><li><p>创建一个10MB的随机比特流数据日志文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /var/<span class=\"built_in\">log</span>/<span class=\"built_in\">test</span>-log</span><br><span class=\"line\">head -c 10M /dev/urandom &gt; /var/<span class=\"built_in\">log</span>/<span class=\"built_in\">test</span>-log</span><br></pre></td></tr></table></figure></li><li><p>在<code>/etc/logrotate.d/</code>目录下为日志文件创建同名配置文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/logrotate.d/<span class=\"built_in\">test</span>-log</span><br></pre></td></tr></table></figure><p>写入如下配置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/var/<span class=\"built_in\">log</span>/<span class=\"built_in\">test</span>-log &#123;</span><br><span class=\"line\">    monthly</span><br><span class=\"line\">    rotate 5</span><br><span class=\"line\">    compress</span><br><span class=\"line\">    delaycompress</span><br><span class=\"line\">    missingok</span><br><span class=\"line\">    notifempty</span><br><span class=\"line\">    create 644 root root</span><br><span class=\"line\">    postrotate</span><br><span class=\"line\">        /usr/bin/killall -HUP rsyslogd</span><br><span class=\"line\">    endscript</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>monthly: 日志文件将按月轮循。其它可用值为‘daily’，‘weekly’或者‘yearly’；</li><li>rotate 5: 一次将存储5个归档日志。对于第六个归档，时间最久的归档将被删除；</li><li>compress: 在轮循任务完成后，已轮循的归档将使用gzip进行压缩；</li><li>delaycompress: 总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用；</li><li>missingok: 在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误；</li><li>otifempty: 如果日志文件为空，轮循不会进行；</li><li>create 644 root root: 以指定的权限创建全新的日志文件，同时logrotate也会重命名原始日志文件；</li><li>postrotate/endscript: 在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。</li></ul><ul><li><p>日志增长到指定大小进行分割：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  /var/<span class=\"built_in\">log</span>/<span class=\"built_in\">test</span>-log &#123;</span><br><span class=\"line\">    size=50M</span><br><span class=\"line\">    rotate 5</span><br><span class=\"line\">    create 644 root root</span><br><span class=\"line\">    postrotate</span><br><span class=\"line\">        /usr/bin/killall -HUP rsyslogd</span><br><span class=\"line\">    endscript</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>分割的日志按照日期命名：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  /var/<span class=\"built_in\">log</span>/<span class=\"built_in\">test</span>-log &#123;</span><br><span class=\"line\">    monthly</span><br><span class=\"line\">    rotate 5</span><br><span class=\"line\">    dateext</span><br><span class=\"line\">    create 644 root root</span><br><span class=\"line\">    postrotate</span><br><span class=\"line\">        /usr/bin/killall -HUP rsyslogd</span><br><span class=\"line\">    endscript</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"logrotate操作\"><a href=\"#logrotate操作\" class=\"headerlink\" title=\"logrotate操作\"></a>logrotate操作</h3><ul><li><p>logrotate可以使用命令手动调用，如为<code>/etc/logrotate.d/</code>目录下所有配置调用logrotate:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># logrorate /etc/logrotate.conf</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>为某个特定配置调用：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># logrotate /etc/logrotate.d/test-log</span></span><br></pre></td></tr></table></figure></li><li><p>logrotate命令具有<code>-d</code>选项，可以运行logrotate，但实际不会真正去操作日志，只会模拟打印结果：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># logratatte -d /etc/logrotate.d/test-log</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>不满足日志轮询条件时，可以使用<code>-f</code>参数强制轮询,<code>-v</code>输出详细信息：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># logrotate -vf /etc/logrotate.d/test-log</span></span><br></pre></td></tr></table></figure></li><li><p>logrotate自身的日志位于<code>/var/lib/logrotate/status/</code>目录，如果需要临时指定日志输出路径，使用如下命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># logrotate -vf -s /var/log/logrotate-status /etc/logrotate.d/test-log</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"dmsg日志\"><a href=\"#dmsg日志\" class=\"headerlink\" title=\"dmsg日志\"></a>dmsg日志</h2><ul><li><code>dmesg</code>命令可以查看系统的硬件相关的日志，dmesg日志是保存在内存中的，例如服务器有硬件故障，就需要查看这个日志，<code>dmesg -c</code>可以清空日志。</li><li>而<code>/var/log/dmesg</code>日志与<code>dmesg</code>命令查看的日志是不同的，其记录的是系统启动的相关日志。</li></ul><h2 id=\"last-lastb命令\"><a href=\"#last-lastb命令\" class=\"headerlink\" title=\"last/lastb命令\"></a>last/lastb命令</h2><ul><li><code>last</code>命令会调用<code>/var/log/wtmp</code>文件，这个文件为二进制文件，记录了系统所有的登陆日志，内容包括用户名、tty、来源ip，登陆时间和注销时间；</li><li>而<code>lastb</code>命令则调用<code>/var/log/btmp</code>文件，同样是二进制文件，记录了登陆失败的日志。</li></ul><h2 id=\"secure日志\"><a href=\"#secure日志\" class=\"headerlink\" title=\"secure日志\"></a>secure日志</h2><ul><li><code>/var/log/secure</code>日志记录了登陆成功和登陆失败的详细日志，并会记录失败的具体原因。并且还记录了系统中其他一些安全相关的日志，如sudo命令、定时任务等等。</li></ul><hr><h1 id=\"screen工具\"><a href=\"#screen工具\" class=\"headerlink\" title=\"screen工具\"></a>screen工具</h1><ul><li><p>Screen是个终端的多路复用器。可以在一个终端内执行任意多个应用程序。简单来说screen解决了终端下两个问题：</p><ol><li>终端下工作有时会面临需要打开多个个终端，或者多个标签页的清空，每个里面运行一个应用或者完整某类功能。然后在终端之间需要经常切换切换，screen只需要一个终端就可以解决。</li><li>一般远程登录服务器，断网之后会使任务或命令中断，虽然可以使用<code>nohup command &amp;</code>使命令在后台执行，但是这样会看不到命令的输出。而screen即使断网，或者放在后台、退出，都可以随时恢复。</li></ol></li><li><p>使用screen之前需要安装<code>screen</code>软件包，直接执行<code>screen</code>命令就会创建一个虚拟终端，在其中可以任意执行任务，使用快捷键<code>ctrl+a+d</code>可以将screen虚拟终端放入后台，同时在虚拟终端中的任务不会终端，仍旧会继续执行；</p></li><li><p><code>screen -ls</code>可以查看所有的终端，Detached表示在后台运行，Attached表示在前台运行，每个终端最前面的数字为终端的ID：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># screen -ls</span></span><br><span class=\"line\">There is a screen on:</span><br><span class=\"line\">        17491.pts-0.evobot      (Detached)</span><br><span class=\"line\">1 Socket <span class=\"keyword\">in</span> /var/run/screen/S-root.</span><br></pre></td></tr></table></figure></li><li><p>恢复Detached的screen终端，使用<code>screen -r [id]</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># screen -r 17491</span></span><br></pre></td></tr></table></figure></li><li><p>结束一个screen终端，可以在终端内使用<code>exit</code>命令结束，或者使用<code>ctrl+k</code>杀死当前终端；</p></li><li><p>创建screen终端还可以使用<code>screen -S [name]</code>来指定一个名字创建终端，这样在恢复终端时可以使用<code>screen -r [name]</code>来恢复终端。</p></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p>本文继续介绍rsync如何通过服务进行同步，另外介绍了Linux的系统日志和Screen工具的配置和使用。</p>","more":"<hr><h1 id=\"rsync服务同步\"><a href=\"#rsync服务同步\" class=\"headerlink\" title=\"rsync服务同步\"></a>rsync服务同步</h1><ul><li><p>rsync通过服务同步的架构为CS架构，默认端口为873，启动服务后，机器之间可以通过服务端口进行通信和同步；</p></li><li><p>服务同步的格式为<code>rsync -av ... SRC host::[Module]</code>，如果配置文件中配置了<code>auth users</code>则命令为<code>rsync -av ...SRC [user]@host::[module]</code>，对应的配置文件为<code>/etc/rsyncd.conf</code>，配置文件内容如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port=873\t<span class=\"comment\">#指定rsync服务的监听端口</span></span><br><span class=\"line\"><span class=\"built_in\">log</span> file=/var/<span class=\"built_in\">log</span>/rsync.log\t</span><br><span class=\"line\">pid file=/var/run/rsync.pid\t</span><br><span class=\"line\">address=192.168.199.141\t<span class=\"comment\">#指定监听的本机ip，注释此项表示监听全部本机地址</span></span><br><span class=\"line\">[<span class=\"built_in\">test</span>]\t<span class=\"comment\">#模块名</span></span><br><span class=\"line\">path=/tmp/rsync\t<span class=\"comment\">#指定数据存放路径</span></span><br><span class=\"line\">use chroot=<span class=\"literal\">true</span>\t</span><br><span class=\"line\"><span class=\"comment\">#开启此选项后，连接时会chroot到path中，如果path中存在软连接文件，同步时又使用了-L选项，那么将会报错，这时可以将其设置为false</span></span><br><span class=\"line\">max connections=4\t<span class=\"comment\">#指定最大连接数，默认为0</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> only=<span class=\"literal\">true</span>\t<span class=\"comment\">#true表示path可写，false表示只读</span></span><br><span class=\"line\">list=<span class=\"literal\">true</span>\t<span class=\"comment\">#表示当用户使用rsync -avP 192.168.199.141::查询该服务器的可用模块时，该模块是否被列出，建议设置为false</span></span><br><span class=\"line\">uid=root</span><br><span class=\"line\">gid=root <span class=\"comment\">#指定传输时以什么用户身份传输，即文件的uid/gid</span></span><br><span class=\"line\">auth users=<span class=\"built_in\">test</span>\t<span class=\"comment\">#指定传输时使用的用户名</span></span><br><span class=\"line\">secrets file=/etc/rsyncd.passwd <span class=\"comment\">#指定auth users的密码文件，格式为username:passwd，权限为600</span></span><br><span class=\"line\">hosts allow=192.168.199.142\t<span class=\"comment\">#允许哪些服务器连接本机，多个IP使用空格分割，或者使用ip段：192.168.133.0/24</span></span><br></pre></td></tr></table></figure><blockquote><p>指定的path必须要存在，命令中的module模块名指的是配置文件中的[test]配置。</p><p>如果指定了<code>auth users</code>和<code>secrets file</code>，对端机器在连接时可以创建rsync_pass.txt文件，并将密码写入其中，在同步时使用命令<code>rsync -av ...SRC --port=[port] --password-file=[/path/rsync_pass.txt][user]@host::[module]</code>，密码文件的权限为600。</p></blockquote></li><li><p>启动rsync服务命令为<code>rsync --daemon</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># rsync --daemon</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ps -aux | grep rsync</span></span><br><span class=\"line\">root       9472  0.0  0.1 126292  1684 pts/0    S+   22:24   0:00 vi /etc/rsyncd.conf</span><br><span class=\"line\">root       9502  0.0  0.0 114688   552 ?        Ss   22:34   0:00 rsync --daemon</span><br><span class=\"line\">root       9506  0.0  0.0 112668   972 pts/1    S+   22:35   0:00 grep --color=auto rsync</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># netstat -lntp</span></span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class=\"line\">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1134/sshd           </span><br><span class=\"line\">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1709/master         </span><br><span class=\"line\">tcp        0      0 192.168.199.141:873     0.0.0.0:*               LISTEN      9502/rsync          </span><br><span class=\"line\">tcp6       0      0 :::22                   :::*                    LISTEN      1134/sshd           </span><br><span class=\"line\">tcp6       0      0 ::1:25                  :::*                    LISTEN      1709/master</span><br></pre></td></tr></table></figure></li><li><p>在另一台机器上执行命令进行同步：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost tmp]<span class=\"comment\"># rsync -avP /tmp/lab.swp 192.168.199.141::test/</span></span><br><span class=\"line\">sending incremental file list</span><br><span class=\"line\">lab.swp</span><br><span class=\"line\">    104,857,600 100%   47.92MB/s    0:00:02 (xfr<span class=\"comment\">#1, to-chk=0/1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">sent 104,883,286 bytes  received 35 bytes  29,966,663.14 bytes/sec</span><br><span class=\"line\">total size is 104,857,600  speedup is 1.00</span><br></pre></td></tr></table></figure><ul><li>在配置文件内有<code>auth users</code>和<code>secrets file</code>两个配置，如果不想使用密码认证的话，可以注释这两行；</li><li>如果在执行命令时报错提示如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync: failed to connect to 192.168.199.140 (192.168.199.140): No route to host (113)</span><br><span class=\"line\">rsync error: error <span class=\"keyword\">in</span> socket IO (code 10) at clientserver.c(125) [sender=3.1.2]</span><br></pre></td></tr></table></figure><ul><li>那么可以安装<code>telnet</code>检查对端机器的rsync的端口是否开放，telnet命令格式为<code>telnet [ip address][port]</code>：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost tmp]<span class=\"comment\"># telnet 192.168.199.141 873</span></span><br><span class=\"line\">Trying 192.168.199.141...</span><br><span class=\"line\">telnet: connect to address 192.168.199.141: No route to host</span><br></pre></td></tr></table></figure><ul><li>上面的输出表示对端端口无响应，然后我们需要检查对端机器的防火墙，可以关闭firewalld防火墙再重新telnet：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost tmp]<span class=\"comment\"># telnet 192.168.199.141 873</span></span><br><span class=\"line\">Trying 192.168.199.141...</span><br><span class=\"line\">Connected to 192.168.199.141.</span><br><span class=\"line\">Escape character is <span class=\"string\">'^]'</span>.</span><br><span class=\"line\">@RSYNCD: 31.0</span><br><span class=\"line\">^]</span><br><span class=\"line\">telnet&gt; quit</span><br><span class=\"line\">Connection closed.</span><br></pre></td></tr></table></figure><ul><li>上面的输出表示对端机器端口正常，这时候再重新执行<code>rsync</code>命令即可。</li></ul></li><li><p>使用命令<code>rsync -avP host::[module]/files DEST</code>的形式从远端机器上拉取文件；</p></li><li><p>如果对端机器的rsync更改了端口，那么再同步时需要使用<code>--port=[port]</code>指定端口进行同步。</p></li></ul><hr><h1 id=\"Linux系统日志\"><a href=\"#Linux系统日志\" class=\"headerlink\" title=\"Linux系统日志\"></a>Linux系统日志</h1><h2 id=\"messages日志及logrotate介绍\"><a href=\"#messages日志及logrotate介绍\" class=\"headerlink\" title=\"messages日志及logrotate介绍\"></a>messages日志及logrotate介绍</h2><ul><li><p>系统日志会记录与系统有关的所有信息，能够帮助我们排查错误和了解机器状态；</p></li><li><p><code>/var/log/messages</code>日志是Linux系统的总日志，没有单独定义日志的服务，都会将日志记录在内，当messages日志达到一定大小时，系统会使用<code>logrotate</code>服务对其进行切割，logrotate的配置文件为<code>/etc/logrotate.conf</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@evobot <span class=\"built_in\">log</span>]$ cat /etc/logrotate.conf</span><br><span class=\"line\"><span class=\"comment\"># see \"man logrotate\" for details</span></span><br><span class=\"line\"><span class=\"comment\"># rotate log files weekly</span></span><br><span class=\"line\">weekly\t<span class=\"comment\"># 表示每周切割一次</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># keep 4 weeks worth of backlogs</span></span><br><span class=\"line\">rotate 4\t<span class=\"comment\">#表示保留4个日志</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># create new (empty) log files after rotating old ones</span></span><br><span class=\"line\">create\t<span class=\"comment\">#切割完成时创建为新文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># use date as a suffix of the rotated file</span></span><br><span class=\"line\">dateext\t<span class=\"comment\">#新文件的后缀名，这里表示日期</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># uncomment this if you want your log files compressed</span></span><br><span class=\"line\"><span class=\"comment\">#compress\t#是否压缩</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># RPM packages drop log rotation information into this directory</span></span><br><span class=\"line\">include /etc/logrotate.d\t<span class=\"comment\">#包含指定目录下的其他配置文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># no packages own wtmp and btmp -- we'll rotate them here</span></span><br><span class=\"line\"><span class=\"comment\"># 对指定日志进行切割的配置</span></span><br><span class=\"line\">/var/<span class=\"built_in\">log</span>/wtmp &#123;\t</span><br><span class=\"line\">    monthly</span><br><span class=\"line\">    create 0664 root utmp\t<span class=\"comment\">#创建时指定权限属主属组</span></span><br><span class=\"line\">        minsize 1M\t<span class=\"comment\">#最小大小</span></span><br><span class=\"line\">    rotate 1\t<span class=\"comment\">#保留个数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/var/<span class=\"built_in\">log</span>/btmp &#123;</span><br><span class=\"line\">    missingok</span><br><span class=\"line\">    monthly</span><br><span class=\"line\">    create 0600 root utmp</span><br><span class=\"line\">    rotate 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># system-specific logs may be also be configured here.</span></span><br></pre></td></tr></table></figure></li><li><p>而在<code>/etc/logrotate.d</code>目录下，还有logrotate的其他配置文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@evobot <span class=\"built_in\">log</span>]$ ls /etc/logrotate.d/</span><br><span class=\"line\">bootlog  chrony  nginx  syslog  wpa_supplicant  yum</span><br><span class=\"line\"></span><br><span class=\"line\">[lux@evobot <span class=\"built_in\">log</span>]$ cat /etc/logrotate.d/syslog</span><br><span class=\"line\">/var/<span class=\"built_in\">log</span>/cron</span><br><span class=\"line\">/var/<span class=\"built_in\">log</span>/maillog</span><br><span class=\"line\">/var/<span class=\"built_in\">log</span>/messages</span><br><span class=\"line\">/var/<span class=\"built_in\">log</span>/secure</span><br><span class=\"line\">/var/<span class=\"built_in\">log</span>/spooler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        sharedscripts</span><br><span class=\"line\">        dateext</span><br><span class=\"line\">        rotate 25</span><br><span class=\"line\">        size 40M</span><br><span class=\"line\">        compress</span><br><span class=\"line\">        dateformat  -%Y%m%d%s</span><br><span class=\"line\">        postrotate</span><br><span class=\"line\">                /bin/<span class=\"built_in\">kill</span> -HUP `cat /var/run/syslogd.pid 2&gt; /dev/null` 2&gt; /dev/null || <span class=\"literal\">true</span>\t<span class=\"comment\">#由于新建了日志文件，需要重启服务让日志写入到新的文件中</span></span><br><span class=\"line\">        endscript</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关于logrotate的详细介绍，可以参考文章<a href=\"https://my.oschina.net/u/2000675/blog/908189\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">logrotate 使用详解</a></p></blockquote></li></ul><h2 id=\"logrotate示例\"><a href=\"#logrotate示例\" class=\"headerlink\" title=\"logrotate示例\"></a>logrotate示例</h2><h3 id=\"日志配置\"><a href=\"#日志配置\" class=\"headerlink\" title=\"日志配置\"></a>日志配置</h3><ul><li>通常不需要修改<strong>logrotate.conf</strong>文件，只需要将需要轮询的日志独立配置文件放在<code>/etc/logrotate.d/</code>目录下即可；</li><li><p>创建一个10MB的随机比特流数据日志文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /var/<span class=\"built_in\">log</span>/<span class=\"built_in\">test</span>-log</span><br><span class=\"line\">head -c 10M /dev/urandom &gt; /var/<span class=\"built_in\">log</span>/<span class=\"built_in\">test</span>-log</span><br></pre></td></tr></table></figure></li><li><p>在<code>/etc/logrotate.d/</code>目录下为日志文件创建同名配置文件：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/logrotate.d/<span class=\"built_in\">test</span>-log</span><br></pre></td></tr></table></figure><p>写入如下配置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/var/<span class=\"built_in\">log</span>/<span class=\"built_in\">test</span>-log &#123;</span><br><span class=\"line\">    monthly</span><br><span class=\"line\">    rotate 5</span><br><span class=\"line\">    compress</span><br><span class=\"line\">    delaycompress</span><br><span class=\"line\">    missingok</span><br><span class=\"line\">    notifempty</span><br><span class=\"line\">    create 644 root root</span><br><span class=\"line\">    postrotate</span><br><span class=\"line\">        /usr/bin/killall -HUP rsyslogd</span><br><span class=\"line\">    endscript</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>monthly: 日志文件将按月轮循。其它可用值为‘daily’，‘weekly’或者‘yearly’；</li><li>rotate 5: 一次将存储5个归档日志。对于第六个归档，时间最久的归档将被删除；</li><li>compress: 在轮循任务完成后，已轮循的归档将使用gzip进行压缩；</li><li>delaycompress: 总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用；</li><li>missingok: 在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误；</li><li>otifempty: 如果日志文件为空，轮循不会进行；</li><li>create 644 root root: 以指定的权限创建全新的日志文件，同时logrotate也会重命名原始日志文件；</li><li>postrotate/endscript: 在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。</li></ul><ul><li><p>日志增长到指定大小进行分割：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  /var/<span class=\"built_in\">log</span>/<span class=\"built_in\">test</span>-log &#123;</span><br><span class=\"line\">    size=50M</span><br><span class=\"line\">    rotate 5</span><br><span class=\"line\">    create 644 root root</span><br><span class=\"line\">    postrotate</span><br><span class=\"line\">        /usr/bin/killall -HUP rsyslogd</span><br><span class=\"line\">    endscript</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>分割的日志按照日期命名：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  /var/<span class=\"built_in\">log</span>/<span class=\"built_in\">test</span>-log &#123;</span><br><span class=\"line\">    monthly</span><br><span class=\"line\">    rotate 5</span><br><span class=\"line\">    dateext</span><br><span class=\"line\">    create 644 root root</span><br><span class=\"line\">    postrotate</span><br><span class=\"line\">        /usr/bin/killall -HUP rsyslogd</span><br><span class=\"line\">    endscript</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"logrotate操作\"><a href=\"#logrotate操作\" class=\"headerlink\" title=\"logrotate操作\"></a>logrotate操作</h3><ul><li><p>logrotate可以使用命令手动调用，如为<code>/etc/logrotate.d/</code>目录下所有配置调用logrotate:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># logrorate /etc/logrotate.conf</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>为某个特定配置调用：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># logrotate /etc/logrotate.d/test-log</span></span><br></pre></td></tr></table></figure></li><li><p>logrotate命令具有<code>-d</code>选项，可以运行logrotate，但实际不会真正去操作日志，只会模拟打印结果：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># logratatte -d /etc/logrotate.d/test-log</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>不满足日志轮询条件时，可以使用<code>-f</code>参数强制轮询,<code>-v</code>输出详细信息：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># logrotate -vf /etc/logrotate.d/test-log</span></span><br></pre></td></tr></table></figure></li><li><p>logrotate自身的日志位于<code>/var/lib/logrotate/status/</code>目录，如果需要临时指定日志输出路径，使用如下命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># logrotate -vf -s /var/log/logrotate-status /etc/logrotate.d/test-log</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"dmsg日志\"><a href=\"#dmsg日志\" class=\"headerlink\" title=\"dmsg日志\"></a>dmsg日志</h2><ul><li><code>dmesg</code>命令可以查看系统的硬件相关的日志，dmesg日志是保存在内存中的，例如服务器有硬件故障，就需要查看这个日志，<code>dmesg -c</code>可以清空日志。</li><li>而<code>/var/log/dmesg</code>日志与<code>dmesg</code>命令查看的日志是不同的，其记录的是系统启动的相关日志。</li></ul><h2 id=\"last-lastb命令\"><a href=\"#last-lastb命令\" class=\"headerlink\" title=\"last/lastb命令\"></a>last/lastb命令</h2><ul><li><code>last</code>命令会调用<code>/var/log/wtmp</code>文件，这个文件为二进制文件，记录了系统所有的登陆日志，内容包括用户名、tty、来源ip，登陆时间和注销时间；</li><li>而<code>lastb</code>命令则调用<code>/var/log/btmp</code>文件，同样是二进制文件，记录了登陆失败的日志。</li></ul><h2 id=\"secure日志\"><a href=\"#secure日志\" class=\"headerlink\" title=\"secure日志\"></a>secure日志</h2><ul><li><code>/var/log/secure</code>日志记录了登陆成功和登陆失败的详细日志，并会记录失败的具体原因。并且还记录了系统中其他一些安全相关的日志，如sudo命令、定时任务等等。</li></ul><hr><h1 id=\"screen工具\"><a href=\"#screen工具\" class=\"headerlink\" title=\"screen工具\"></a>screen工具</h1><ul><li><p>Screen是个终端的多路复用器。可以在一个终端内执行任意多个应用程序。简单来说screen解决了终端下两个问题：</p><ol><li>终端下工作有时会面临需要打开多个个终端，或者多个标签页的清空，每个里面运行一个应用或者完整某类功能。然后在终端之间需要经常切换切换，screen只需要一个终端就可以解决。</li><li>一般远程登录服务器，断网之后会使任务或命令中断，虽然可以使用<code>nohup command &amp;</code>使命令在后台执行，但是这样会看不到命令的输出。而screen即使断网，或者放在后台、退出，都可以随时恢复。</li></ol></li><li><p>使用screen之前需要安装<code>screen</code>软件包，直接执行<code>screen</code>命令就会创建一个虚拟终端，在其中可以任意执行任务，使用快捷键<code>ctrl+a+d</code>可以将screen虚拟终端放入后台，同时在虚拟终端中的任务不会终端，仍旧会继续执行；</p></li><li><p><code>screen -ls</code>可以查看所有的终端，Detached表示在后台运行，Attached表示在前台运行，每个终端最前面的数字为终端的ID：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># screen -ls</span></span><br><span class=\"line\">There is a screen on:</span><br><span class=\"line\">        17491.pts-0.evobot      (Detached)</span><br><span class=\"line\">1 Socket <span class=\"keyword\">in</span> /var/run/screen/S-root.</span><br></pre></td></tr></table></figure></li><li><p>恢复Detached的screen终端，使用<code>screen -r [id]</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># screen -r 17491</span></span><br></pre></td></tr></table></figure></li><li><p>结束一个screen终端，可以在终端内使用<code>exit</code>命令结束，或者使用<code>ctrl+k</code>杀死当前终端；</p></li><li><p>创建screen终端还可以使用<code>screen -S [name]</code>来指定一个名字创建终端，这样在恢复终端时可以使用<code>screen -r [name]</code>来恢复终端。</p></li></ul><hr><!-- rebuild by neat -->"},{"title":"windows10 & Arch 双系统安装指南【一】","abbrlink":"3fd6800f","date":"2016-02-14T08:02:53.000Z","_content":"![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamonarch_linux_flat_wallpaper_by_debasishpatra-d7gmn9w.jpg)\n\nArch Linux是一款简洁优雅的GNU/Linux发行版，采用滚动升级的形式，只提供最基础的系统，一切配置都需要用户根据需要自行解决。\n\n   Arch 的哲学：Keep It Simple, Stupid\n\nCinnamon是一款很适合上手的Linux桌面，桌面布局类似GNOME 2；然而，底层的技术又是基于GNOME Shell（GNOME 3）。目前Cinnamon是最流行的发行版LinuxMint的默认桌面环境。\n<!-- more -->\n\n---\n# 安装准备\n## 系统镜像\n　　到arch的官网可以下载到最新的[系统镜像](https://www.archlinux.org/download/)，然后使用[刻录软件](http://pan.baidu.com/s/1o6WG5yM)将镜像刻录到U盘中。\n## 引导安装\n　　我是使用的UEFI模式引导的安装镜像，并且需要创建Windows10和Arch双系统。引导启动后会进入到arch的命令行模式。\n## 网络配置\n### 有线网络\n　　进入系统后首先需要配置好网络才能继续后面的安装，arch的系统安装高度依赖网络，安装程序会在启动时自动运行**dhcpcd**守护进程以尝试有线连接。可以使用和**ping**命令检查网络是否正常，如果网络不通，可以参照[arch wiki](https://wiki.archlinux.org/index.php/Beginners%27_guide)解决。\n### 无线网络\n　　使用**iw dev**命令查看无线网卡的Interface名称，一般Interface名称为**wlp**开头，然后使用**wifi-menu [Interface]**连接wifi。\n## 磁盘分区\n　　因为我们采用UEFI启动并且硬盘已经安装了windows10系统，所以默认磁盘已经是GPT分区格式。执行命令：\n```bash\nfdisk -l\n```\n　　可以看到现在的硬盘分区情况，**/dev/sda**这就是我们的硬盘名称，如果有多块硬盘，则命名就是sdb、sdc等。\n　　安装windows10之后，在sda上会有四个分区，其中有个100M的sda2是EFI分区，也就是启动分区，这4个分区我们都不需要重新分区，我们只需要创建arch所需要的分区就可以了。\n　　我的分区方案是 **/** 分区20G，**swap** 分区4G，其余的分给 **home** 分区，我的windows分区中最后一个分区sda4的结束位置是41.9G,所以arch的分区就要从这里开始：\n```bash\nparted /dev/sda\nmkpart primary ext4 41.9G 62G\nmkpart primary linux-swap 62G 66G\nmkpart primart ext4 66G -1\n```\n### 格式化分区\n　　分区完成后退出parted分区，将分区格式化为指定的文件系统。\n```bash\n#查看所有分区，前4个分区都是windows的分区，我们格式化只针对后面几个分区。\nlsblk /dev/sda   \n```\n```bash\nmkfs.ext4 /dev/sda5\nmkfs.ext4 /dev/sda7\nmkswap /dev/sda6 #格式化swap分区\nswapon /dev/sda6 #激活swap分区\n```\n### 挂载分区\n　　先挂载 **/** (root)分区，其他目录都要在 **/** 分区中创建，然后再挂载。在安装环境中，使用 **/mnt** 目录挂载 **root** 分区：\n```bash\nmount /dev/sda5 /mnt  #挂载根分区\nmkdir -p /mnt/{home,boot}  #创建home目录\nmount /dev/sda7 /mnt/home  #挂载home分区到home目录\nmount /dev/sda2 /mnt/boot #将windows的EFI分区挂载到boot目录\n```\n# 安装\n## 配置安装镜像\n　　如果想要安装某个软件，必须先从 **/etc/pacman.d/mirrorlist** 中定义的镜像站中下载安装包到本地。在live系统里，该文件中所有的镜像站都默认开启，并且按照镜像系统被创建时各镜像站的与官方镜像站的同步状态和速度来排序。\n　　当系统在下载软件包的时候，列表中排的越靠前的镜像站优先级越高。所以我们需要将国内的镜像源放在前面，提高下载速度：\n```bash\nvi /etc/pacman.d/mirrorlist\n#将下面两个镜像源复制到最前面\nServer = http://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch\nServer = http://mirrors.163.com/archlinux/$repo/os/$arch\n```\n## 安装基础软件包\n　　现在可以使用**pacstrap**安装基本系统：\n```bash\npacstrap -i /mnt base base-devel\n```\n# 系统配置\n## 生成分区表\n```bash\ngenfstab -U -p /mnt > /mnt > /mnt/etc/fstab\n```\n## chroot\n```bash\narch-chroot /mnt /bin/bash\n```\n## 本地化配置\n```bash\nvi /etc/locale.gen\n#找到下面几项并去掉前面的＃号\nen_US.UTF-8 UTF-8\nzh_CN.UTF-8 UTF-8\nzh_TW.UTF-8 UTF-8\n```\n```bash\n#执行locale-gen生成locale信息\nlocale-gen\n```\n```bash\n#创建locale.conf并提交本地化选项\necho LANG=en_US.UTF-8 > /etc/locale.conf\n```\n## 时间配置\n```bash\nln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\nhwclock --systohc --utc\n```\n## 设置Root密码\n```bash\npasswd  #输入两次密码\n```\n## 设置主机名\n```bash\necho Arch > /etc/hostname\n#修改主机名与上面相同\nvi /etc/hosts \n\n#<ip-address>\t<hostname.domain.org>\t<hostname>\n127.0.0.1\t\t\tlocalhost.localdomain  \t\tarch\n::1\t\t\t\tlocalhost.localdomain  \t\tarch\n```\n## 安装引导程序\n　　因为我们使用的是UEFI+GPT分区表的形式，所以我们安装**systemd-boot**到EFI分区：\n```bash\n#安装systemd-boot\nbootctl install\n#使用示例配置文件创建引导入口\ncp /usr/share/systemd/bootctl/arch.conf /boot/loader/entries/\n#查看根分区的PARTUUID\nblkid -s PARTUUID -o value /dev/sda5\n```\n```bash\n#修改引导入口\nvi /boot/loader/entries/arch,conf\n#将文件中PARTUUID后的XXX修改为刚刚获取的根目录的PARTUUID，rootfstype=XXX修改为ext4\n  title   Arch Linux\n  linux   /vmlinuz-linux\n  initrd  /initramfs-linux.img\n  options root=PARTUUID=2c3931f1-9659-4ad0-aa50-0b54754472bb rootfstype=ext4 add_efi_memmap\n```\n```bash\n#修改启动等待时间，去掉timeout前面的#号\nvi /boot/loader/loader.conf\n  timeout 3\n```\n不需要配置windows的启动项，系统会自动读取windows的启动项并在开机时列出。\n## 网络配置\n　　前面已经配置过网络，这次我们是为新系统配置的网络，使得重启之后的新系统能够正常使用网络。\n### 无线网络\n安装**iw,dialog**和**wpa_supplicant**\n```bash\npacman -S iw wpa_supplicant dialog\n```\n### 有线网络\n有线网络只需要开机启动**dhcpcd**服务即可：\n```bash\nsystemctl enable dhcpcd.service\n```\n## 卸载分区并重启\n离开chroot环境然后就可以重启系统，进入我们的新系统了：\n```bash\nexit\nreboot\n```\n　　重启时可以看到我们启动选项有archlinux和windows，选择archlinux，就可以进入我们的新系统了，当然现在系统只有命令行模式，之后我们为系统安装图形界面。\n","source":"_posts/windows10-Arch-双系统安装指南【一】.md","raw":"---\ntitle: windows10 & Arch 双系统安装指南【一】\ntags:\n  - linux\n  - archlinux\n  - cinnamon\n  - windows10\ncategories: Linux\nabbrlink: 3fd6800f\ndate: 2016-02-14 16:02:53\n---\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamonarch_linux_flat_wallpaper_by_debasishpatra-d7gmn9w.jpg)\n\nArch Linux是一款简洁优雅的GNU/Linux发行版，采用滚动升级的形式，只提供最基础的系统，一切配置都需要用户根据需要自行解决。\n\n   Arch 的哲学：Keep It Simple, Stupid\n\nCinnamon是一款很适合上手的Linux桌面，桌面布局类似GNOME 2；然而，底层的技术又是基于GNOME Shell（GNOME 3）。目前Cinnamon是最流行的发行版LinuxMint的默认桌面环境。\n<!-- more -->\n\n---\n# 安装准备\n## 系统镜像\n　　到arch的官网可以下载到最新的[系统镜像](https://www.archlinux.org/download/)，然后使用[刻录软件](http://pan.baidu.com/s/1o6WG5yM)将镜像刻录到U盘中。\n## 引导安装\n　　我是使用的UEFI模式引导的安装镜像，并且需要创建Windows10和Arch双系统。引导启动后会进入到arch的命令行模式。\n## 网络配置\n### 有线网络\n　　进入系统后首先需要配置好网络才能继续后面的安装，arch的系统安装高度依赖网络，安装程序会在启动时自动运行**dhcpcd**守护进程以尝试有线连接。可以使用和**ping**命令检查网络是否正常，如果网络不通，可以参照[arch wiki](https://wiki.archlinux.org/index.php/Beginners%27_guide)解决。\n### 无线网络\n　　使用**iw dev**命令查看无线网卡的Interface名称，一般Interface名称为**wlp**开头，然后使用**wifi-menu [Interface]**连接wifi。\n## 磁盘分区\n　　因为我们采用UEFI启动并且硬盘已经安装了windows10系统，所以默认磁盘已经是GPT分区格式。执行命令：\n```bash\nfdisk -l\n```\n　　可以看到现在的硬盘分区情况，**/dev/sda**这就是我们的硬盘名称，如果有多块硬盘，则命名就是sdb、sdc等。\n　　安装windows10之后，在sda上会有四个分区，其中有个100M的sda2是EFI分区，也就是启动分区，这4个分区我们都不需要重新分区，我们只需要创建arch所需要的分区就可以了。\n　　我的分区方案是 **/** 分区20G，**swap** 分区4G，其余的分给 **home** 分区，我的windows分区中最后一个分区sda4的结束位置是41.9G,所以arch的分区就要从这里开始：\n```bash\nparted /dev/sda\nmkpart primary ext4 41.9G 62G\nmkpart primary linux-swap 62G 66G\nmkpart primart ext4 66G -1\n```\n### 格式化分区\n　　分区完成后退出parted分区，将分区格式化为指定的文件系统。\n```bash\n#查看所有分区，前4个分区都是windows的分区，我们格式化只针对后面几个分区。\nlsblk /dev/sda   \n```\n```bash\nmkfs.ext4 /dev/sda5\nmkfs.ext4 /dev/sda7\nmkswap /dev/sda6 #格式化swap分区\nswapon /dev/sda6 #激活swap分区\n```\n### 挂载分区\n　　先挂载 **/** (root)分区，其他目录都要在 **/** 分区中创建，然后再挂载。在安装环境中，使用 **/mnt** 目录挂载 **root** 分区：\n```bash\nmount /dev/sda5 /mnt  #挂载根分区\nmkdir -p /mnt/{home,boot}  #创建home目录\nmount /dev/sda7 /mnt/home  #挂载home分区到home目录\nmount /dev/sda2 /mnt/boot #将windows的EFI分区挂载到boot目录\n```\n# 安装\n## 配置安装镜像\n　　如果想要安装某个软件，必须先从 **/etc/pacman.d/mirrorlist** 中定义的镜像站中下载安装包到本地。在live系统里，该文件中所有的镜像站都默认开启，并且按照镜像系统被创建时各镜像站的与官方镜像站的同步状态和速度来排序。\n　　当系统在下载软件包的时候，列表中排的越靠前的镜像站优先级越高。所以我们需要将国内的镜像源放在前面，提高下载速度：\n```bash\nvi /etc/pacman.d/mirrorlist\n#将下面两个镜像源复制到最前面\nServer = http://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch\nServer = http://mirrors.163.com/archlinux/$repo/os/$arch\n```\n## 安装基础软件包\n　　现在可以使用**pacstrap**安装基本系统：\n```bash\npacstrap -i /mnt base base-devel\n```\n# 系统配置\n## 生成分区表\n```bash\ngenfstab -U -p /mnt > /mnt > /mnt/etc/fstab\n```\n## chroot\n```bash\narch-chroot /mnt /bin/bash\n```\n## 本地化配置\n```bash\nvi /etc/locale.gen\n#找到下面几项并去掉前面的＃号\nen_US.UTF-8 UTF-8\nzh_CN.UTF-8 UTF-8\nzh_TW.UTF-8 UTF-8\n```\n```bash\n#执行locale-gen生成locale信息\nlocale-gen\n```\n```bash\n#创建locale.conf并提交本地化选项\necho LANG=en_US.UTF-8 > /etc/locale.conf\n```\n## 时间配置\n```bash\nln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\nhwclock --systohc --utc\n```\n## 设置Root密码\n```bash\npasswd  #输入两次密码\n```\n## 设置主机名\n```bash\necho Arch > /etc/hostname\n#修改主机名与上面相同\nvi /etc/hosts \n\n#<ip-address>\t<hostname.domain.org>\t<hostname>\n127.0.0.1\t\t\tlocalhost.localdomain  \t\tarch\n::1\t\t\t\tlocalhost.localdomain  \t\tarch\n```\n## 安装引导程序\n　　因为我们使用的是UEFI+GPT分区表的形式，所以我们安装**systemd-boot**到EFI分区：\n```bash\n#安装systemd-boot\nbootctl install\n#使用示例配置文件创建引导入口\ncp /usr/share/systemd/bootctl/arch.conf /boot/loader/entries/\n#查看根分区的PARTUUID\nblkid -s PARTUUID -o value /dev/sda5\n```\n```bash\n#修改引导入口\nvi /boot/loader/entries/arch,conf\n#将文件中PARTUUID后的XXX修改为刚刚获取的根目录的PARTUUID，rootfstype=XXX修改为ext4\n  title   Arch Linux\n  linux   /vmlinuz-linux\n  initrd  /initramfs-linux.img\n  options root=PARTUUID=2c3931f1-9659-4ad0-aa50-0b54754472bb rootfstype=ext4 add_efi_memmap\n```\n```bash\n#修改启动等待时间，去掉timeout前面的#号\nvi /boot/loader/loader.conf\n  timeout 3\n```\n不需要配置windows的启动项，系统会自动读取windows的启动项并在开机时列出。\n## 网络配置\n　　前面已经配置过网络，这次我们是为新系统配置的网络，使得重启之后的新系统能够正常使用网络。\n### 无线网络\n安装**iw,dialog**和**wpa_supplicant**\n```bash\npacman -S iw wpa_supplicant dialog\n```\n### 有线网络\n有线网络只需要开机启动**dhcpcd**服务即可：\n```bash\nsystemctl enable dhcpcd.service\n```\n## 卸载分区并重启\n离开chroot环境然后就可以重启系统，进入我们的新系统了：\n```bash\nexit\nreboot\n```\n　　重启时可以看到我们启动选项有archlinux和windows，选择archlinux，就可以进入我们的新系统了，当然现在系统只有命令行模式，之后我们为系统安装图形界面。\n","slug":"windows10-Arch-双系统安装指南【一】","published":1,"updated":"2018-06-02T13:01:29.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazef0042u1jxqfx1bvtt","content":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamonarch_linux_flat_wallpaper_by_debasishpatra-d7gmn9w.jpg\" alt=\"\"></p><p>Arch Linux是一款简洁优雅的GNU/Linux发行版，采用滚动升级的形式，只提供最基础的系统，一切配置都需要用户根据需要自行解决。</p><p>Arch 的哲学：Keep It Simple, Stupid</p><p>Cinnamon是一款很适合上手的Linux桌面，桌面布局类似GNOME 2；然而，底层的技术又是基于GNOME Shell（GNOME 3）。目前Cinnamon是最流行的发行版LinuxMint的默认桌面环境。<br><a id=\"more\"></a></p><hr><h1 id=\"安装准备\"><a href=\"#安装准备\" class=\"headerlink\" title=\"安装准备\"></a>安装准备</h1><h2 id=\"系统镜像\"><a href=\"#系统镜像\" class=\"headerlink\" title=\"系统镜像\"></a>系统镜像</h2><p>到arch的官网可以下载到最新的<a href=\"https://www.archlinux.org/download/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">系统镜像</a>，然后使用<a href=\"http://pan.baidu.com/s/1o6WG5yM\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">刻录软件</a>将镜像刻录到U盘中。</p><h2 id=\"引导安装\"><a href=\"#引导安装\" class=\"headerlink\" title=\"引导安装\"></a>引导安装</h2><p>我是使用的UEFI模式引导的安装镜像，并且需要创建Windows10和Arch双系统。引导启动后会进入到arch的命令行模式。</p><h2 id=\"网络配置\"><a href=\"#网络配置\" class=\"headerlink\" title=\"网络配置\"></a>网络配置</h2><h3 id=\"有线网络\"><a href=\"#有线网络\" class=\"headerlink\" title=\"有线网络\"></a>有线网络</h3><p>进入系统后首先需要配置好网络才能继续后面的安装，arch的系统安装高度依赖网络，安装程序会在启动时自动运行<strong>dhcpcd</strong>守护进程以尝试有线连接。可以使用和<strong>ping</strong>命令检查网络是否正常，如果网络不通，可以参照<a href=\"https://wiki.archlinux.org/index.php/Beginners%27_guide\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">arch wiki</a>解决。</p><h3 id=\"无线网络\"><a href=\"#无线网络\" class=\"headerlink\" title=\"无线网络\"></a>无线网络</h3><p>使用<strong>iw dev</strong>命令查看无线网卡的Interface名称，一般Interface名称为<strong>wlp</strong>开头，然后使用<strong>wifi-menu [Interface]</strong>连接wifi。</p><h2 id=\"磁盘分区\"><a href=\"#磁盘分区\" class=\"headerlink\" title=\"磁盘分区\"></a>磁盘分区</h2><p>因为我们采用UEFI启动并且硬盘已经安装了windows10系统，所以默认磁盘已经是GPT分区格式。执行命令：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk -l</span><br></pre></td></tr></table></figure><p></p><p>可以看到现在的硬盘分区情况，<strong>/dev/sda</strong>这就是我们的硬盘名称，如果有多块硬盘，则命名就是sdb、sdc等。<br>安装windows10之后，在sda上会有四个分区，其中有个100M的sda2是EFI分区，也就是启动分区，这4个分区我们都不需要重新分区，我们只需要创建arch所需要的分区就可以了。<br>我的分区方案是 <strong>/</strong> 分区20G，<strong>swap</strong> 分区4G，其余的分给 <strong>home</strong> 分区，我的windows分区中最后一个分区sda4的结束位置是41.9G,所以arch的分区就要从这里开始：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parted /dev/sda</span><br><span class=\"line\">mkpart primary ext4 41.9G 62G</span><br><span class=\"line\">mkpart primary linux-swap 62G 66G</span><br><span class=\"line\">mkpart primart ext4 66G -1</span><br></pre></td></tr></table></figure><p></p><h3 id=\"格式化分区\"><a href=\"#格式化分区\" class=\"headerlink\" title=\"格式化分区\"></a>格式化分区</h3><p>分区完成后退出parted分区，将分区格式化为指定的文件系统。<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看所有分区，前4个分区都是windows的分区，我们格式化只针对后面几个分区。</span></span><br><span class=\"line\">lsblk /dev/sda</span><br></pre></td></tr></table></figure><p></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.ext4 /dev/sda5</span><br><span class=\"line\">mkfs.ext4 /dev/sda7</span><br><span class=\"line\">mkswap /dev/sda6 <span class=\"comment\">#格式化swap分区</span></span><br><span class=\"line\">swapon /dev/sda6 <span class=\"comment\">#激活swap分区</span></span><br></pre></td></tr></table></figure><h3 id=\"挂载分区\"><a href=\"#挂载分区\" class=\"headerlink\" title=\"挂载分区\"></a>挂载分区</h3><p>先挂载 <strong>/</strong> (root)分区，其他目录都要在 <strong>/</strong> 分区中创建，然后再挂载。在安装环境中，使用 <strong>/mnt</strong> 目录挂载 <strong>root</strong> 分区：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /dev/sda5 /mnt  <span class=\"comment\">#挂载根分区</span></span><br><span class=\"line\">mkdir -p /mnt/&#123;home,boot&#125;  <span class=\"comment\">#创建home目录</span></span><br><span class=\"line\">mount /dev/sda7 /mnt/home  <span class=\"comment\">#挂载home分区到home目录</span></span><br><span class=\"line\">mount /dev/sda2 /mnt/boot <span class=\"comment\">#将windows的EFI分区挂载到boot目录</span></span><br></pre></td></tr></table></figure><p></p><h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"配置安装镜像\"><a href=\"#配置安装镜像\" class=\"headerlink\" title=\"配置安装镜像\"></a>配置安装镜像</h2><p>如果想要安装某个软件，必须先从 <strong>/etc/pacman.d/mirrorlist</strong> 中定义的镜像站中下载安装包到本地。在live系统里，该文件中所有的镜像站都默认开启，并且按照镜像系统被创建时各镜像站的与官方镜像站的同步状态和速度来排序。<br>当系统在下载软件包的时候，列表中排的越靠前的镜像站优先级越高。所以我们需要将国内的镜像源放在前面，提高下载速度：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/pacman.d/mirrorlist</span><br><span class=\"line\"><span class=\"comment\">#将下面两个镜像源复制到最前面</span></span><br><span class=\"line\">Server = http://mirrors.ustc.edu.cn/archlinux/<span class=\"variable\">$repo</span>/os/<span class=\"variable\">$arch</span></span><br><span class=\"line\">Server = http://mirrors.163.com/archlinux/<span class=\"variable\">$repo</span>/os/<span class=\"variable\">$arch</span></span><br></pre></td></tr></table></figure><p></p><h2 id=\"安装基础软件包\"><a href=\"#安装基础软件包\" class=\"headerlink\" title=\"安装基础软件包\"></a>安装基础软件包</h2><p>现在可以使用<strong>pacstrap</strong>安装基本系统：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacstrap -i /mnt base base-devel</span><br></pre></td></tr></table></figure><p></p><h1 id=\"系统配置\"><a href=\"#系统配置\" class=\"headerlink\" title=\"系统配置\"></a>系统配置</h1><h2 id=\"生成分区表\"><a href=\"#生成分区表\" class=\"headerlink\" title=\"生成分区表\"></a>生成分区表</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">genfstab -U -p /mnt &gt; /mnt &gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure><h2 id=\"chroot\"><a href=\"#chroot\" class=\"headerlink\" title=\"chroot\"></a>chroot</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arch-chroot /mnt /bin/bash</span><br></pre></td></tr></table></figure><h2 id=\"本地化配置\"><a href=\"#本地化配置\" class=\"headerlink\" title=\"本地化配置\"></a>本地化配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/locale.gen</span><br><span class=\"line\"><span class=\"comment\">#找到下面几项并去掉前面的＃号</span></span><br><span class=\"line\">en_US.UTF-8 UTF-8</span><br><span class=\"line\">zh_CN.UTF-8 UTF-8</span><br><span class=\"line\">zh_TW.UTF-8 UTF-8</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#执行locale-gen生成locale信息</span></span><br><span class=\"line\">locale-gen</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建locale.conf并提交本地化选项</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> LANG=en_US.UTF-8 &gt; /etc/locale.conf</span><br></pre></td></tr></table></figure><h2 id=\"时间配置\"><a href=\"#时间配置\" class=\"headerlink\" title=\"时间配置\"></a>时间配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class=\"line\">hwclock --systohc --utc</span><br></pre></td></tr></table></figure><h2 id=\"设置Root密码\"><a href=\"#设置Root密码\" class=\"headerlink\" title=\"设置Root密码\"></a>设置Root密码</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd  <span class=\"comment\">#输入两次密码</span></span><br></pre></td></tr></table></figure><h2 id=\"设置主机名\"><a href=\"#设置主机名\" class=\"headerlink\" title=\"设置主机名\"></a>设置主机名</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> Arch &gt; /etc/hostname</span><br><span class=\"line\"><span class=\"comment\">#修改主机名与上面相同</span></span><br><span class=\"line\">vi /etc/hosts </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#&lt;ip-address&gt;\t&lt;hostname.domain.org&gt;\t&lt;hostname&gt;</span></span><br><span class=\"line\">127.0.0.1\t\t\tlocalhost.localdomain  \t\tarch</span><br><span class=\"line\">::1\t\t\t\tlocalhost.localdomain  \t\tarch</span><br></pre></td></tr></table></figure><h2 id=\"安装引导程序\"><a href=\"#安装引导程序\" class=\"headerlink\" title=\"安装引导程序\"></a>安装引导程序</h2><p>因为我们使用的是UEFI+GPT分区表的形式，所以我们安装<strong>systemd-boot</strong>到EFI分区：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#安装systemd-boot</span></span><br><span class=\"line\">bootctl install</span><br><span class=\"line\"><span class=\"comment\">#使用示例配置文件创建引导入口</span></span><br><span class=\"line\">cp /usr/share/systemd/bootctl/arch.conf /boot/loader/entries/</span><br><span class=\"line\"><span class=\"comment\">#查看根分区的PARTUUID</span></span><br><span class=\"line\">blkid -s PARTUUID -o value /dev/sda5</span><br></pre></td></tr></table></figure><p></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#修改引导入口</span></span><br><span class=\"line\">vi /boot/loader/entries/arch,conf</span><br><span class=\"line\"><span class=\"comment\">#将文件中PARTUUID后的XXX修改为刚刚获取的根目录的PARTUUID，rootfstype=XXX修改为ext4</span></span><br><span class=\"line\">  title   Arch Linux</span><br><span class=\"line\">  linux   /vmlinuz-linux</span><br><span class=\"line\">  initrd  /initramfs-linux.img</span><br><span class=\"line\">  options root=PARTUUID=2c3931f1-9659-4ad0-aa50-0b54754472bb rootfstype=ext4 add_efi_memmap</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#修改启动等待时间，去掉timeout前面的#号</span></span><br><span class=\"line\">vi /boot/loader/loader.conf</span><br><span class=\"line\">  timeout 3</span><br></pre></td></tr></table></figure><p>不需要配置windows的启动项，系统会自动读取windows的启动项并在开机时列出。</p><h2 id=\"网络配置-1\"><a href=\"#网络配置-1\" class=\"headerlink\" title=\"网络配置\"></a>网络配置</h2><p>前面已经配置过网络，这次我们是为新系统配置的网络，使得重启之后的新系统能够正常使用网络。</p><h3 id=\"无线网络-1\"><a href=\"#无线网络-1\" class=\"headerlink\" title=\"无线网络\"></a>无线网络</h3><p>安装<strong>iw,dialog</strong>和<strong>wpa_supplicant</strong><br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -S iw wpa_supplicant dialog</span><br></pre></td></tr></table></figure><p></p><h3 id=\"有线网络-1\"><a href=\"#有线网络-1\" class=\"headerlink\" title=\"有线网络\"></a>有线网络</h3><p>有线网络只需要开机启动<strong>dhcpcd</strong>服务即可：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> dhcpcd.service</span><br></pre></td></tr></table></figure><p></p><h2 id=\"卸载分区并重启\"><a href=\"#卸载分区并重启\" class=\"headerlink\" title=\"卸载分区并重启\"></a>卸载分区并重启</h2><p>离开chroot环境然后就可以重启系统，进入我们的新系统了：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure><p></p><p>重启时可以看到我们启动选项有archlinux和windows，选择archlinux，就可以进入我们的新系统了，当然现在系统只有命令行模式，之后我们为系统安装图形界面。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamonarch_linux_flat_wallpaper_by_debasishpatra-d7gmn9w.jpg\" alt=\"\"></p><p>Arch Linux是一款简洁优雅的GNU/Linux发行版，采用滚动升级的形式，只提供最基础的系统，一切配置都需要用户根据需要自行解决。</p><p>Arch 的哲学：Keep It Simple, Stupid</p><p>Cinnamon是一款很适合上手的Linux桌面，桌面布局类似GNOME 2；然而，底层的技术又是基于GNOME Shell（GNOME 3）。目前Cinnamon是最流行的发行版LinuxMint的默认桌面环境。<br>","more":"</p><hr><h1 id=\"安装准备\"><a href=\"#安装准备\" class=\"headerlink\" title=\"安装准备\"></a>安装准备</h1><h2 id=\"系统镜像\"><a href=\"#系统镜像\" class=\"headerlink\" title=\"系统镜像\"></a>系统镜像</h2><p>到arch的官网可以下载到最新的<a href=\"https://www.archlinux.org/download/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">系统镜像</a>，然后使用<a href=\"http://pan.baidu.com/s/1o6WG5yM\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">刻录软件</a>将镜像刻录到U盘中。</p><h2 id=\"引导安装\"><a href=\"#引导安装\" class=\"headerlink\" title=\"引导安装\"></a>引导安装</h2><p>我是使用的UEFI模式引导的安装镜像，并且需要创建Windows10和Arch双系统。引导启动后会进入到arch的命令行模式。</p><h2 id=\"网络配置\"><a href=\"#网络配置\" class=\"headerlink\" title=\"网络配置\"></a>网络配置</h2><h3 id=\"有线网络\"><a href=\"#有线网络\" class=\"headerlink\" title=\"有线网络\"></a>有线网络</h3><p>进入系统后首先需要配置好网络才能继续后面的安装，arch的系统安装高度依赖网络，安装程序会在启动时自动运行<strong>dhcpcd</strong>守护进程以尝试有线连接。可以使用和<strong>ping</strong>命令检查网络是否正常，如果网络不通，可以参照<a href=\"https://wiki.archlinux.org/index.php/Beginners%27_guide\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">arch wiki</a>解决。</p><h3 id=\"无线网络\"><a href=\"#无线网络\" class=\"headerlink\" title=\"无线网络\"></a>无线网络</h3><p>使用<strong>iw dev</strong>命令查看无线网卡的Interface名称，一般Interface名称为<strong>wlp</strong>开头，然后使用<strong>wifi-menu [Interface]</strong>连接wifi。</p><h2 id=\"磁盘分区\"><a href=\"#磁盘分区\" class=\"headerlink\" title=\"磁盘分区\"></a>磁盘分区</h2><p>因为我们采用UEFI启动并且硬盘已经安装了windows10系统，所以默认磁盘已经是GPT分区格式。执行命令：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk -l</span><br></pre></td></tr></table></figure><p></p><p>可以看到现在的硬盘分区情况，<strong>/dev/sda</strong>这就是我们的硬盘名称，如果有多块硬盘，则命名就是sdb、sdc等。<br>安装windows10之后，在sda上会有四个分区，其中有个100M的sda2是EFI分区，也就是启动分区，这4个分区我们都不需要重新分区，我们只需要创建arch所需要的分区就可以了。<br>我的分区方案是 <strong>/</strong> 分区20G，<strong>swap</strong> 分区4G，其余的分给 <strong>home</strong> 分区，我的windows分区中最后一个分区sda4的结束位置是41.9G,所以arch的分区就要从这里开始：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parted /dev/sda</span><br><span class=\"line\">mkpart primary ext4 41.9G 62G</span><br><span class=\"line\">mkpart primary linux-swap 62G 66G</span><br><span class=\"line\">mkpart primart ext4 66G -1</span><br></pre></td></tr></table></figure><p></p><h3 id=\"格式化分区\"><a href=\"#格式化分区\" class=\"headerlink\" title=\"格式化分区\"></a>格式化分区</h3><p>分区完成后退出parted分区，将分区格式化为指定的文件系统。<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看所有分区，前4个分区都是windows的分区，我们格式化只针对后面几个分区。</span></span><br><span class=\"line\">lsblk /dev/sda</span><br></pre></td></tr></table></figure><p></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.ext4 /dev/sda5</span><br><span class=\"line\">mkfs.ext4 /dev/sda7</span><br><span class=\"line\">mkswap /dev/sda6 <span class=\"comment\">#格式化swap分区</span></span><br><span class=\"line\">swapon /dev/sda6 <span class=\"comment\">#激活swap分区</span></span><br></pre></td></tr></table></figure><h3 id=\"挂载分区\"><a href=\"#挂载分区\" class=\"headerlink\" title=\"挂载分区\"></a>挂载分区</h3><p>先挂载 <strong>/</strong> (root)分区，其他目录都要在 <strong>/</strong> 分区中创建，然后再挂载。在安装环境中，使用 <strong>/mnt</strong> 目录挂载 <strong>root</strong> 分区：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /dev/sda5 /mnt  <span class=\"comment\">#挂载根分区</span></span><br><span class=\"line\">mkdir -p /mnt/&#123;home,boot&#125;  <span class=\"comment\">#创建home目录</span></span><br><span class=\"line\">mount /dev/sda7 /mnt/home  <span class=\"comment\">#挂载home分区到home目录</span></span><br><span class=\"line\">mount /dev/sda2 /mnt/boot <span class=\"comment\">#将windows的EFI分区挂载到boot目录</span></span><br></pre></td></tr></table></figure><p></p><h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"配置安装镜像\"><a href=\"#配置安装镜像\" class=\"headerlink\" title=\"配置安装镜像\"></a>配置安装镜像</h2><p>如果想要安装某个软件，必须先从 <strong>/etc/pacman.d/mirrorlist</strong> 中定义的镜像站中下载安装包到本地。在live系统里，该文件中所有的镜像站都默认开启，并且按照镜像系统被创建时各镜像站的与官方镜像站的同步状态和速度来排序。<br>当系统在下载软件包的时候，列表中排的越靠前的镜像站优先级越高。所以我们需要将国内的镜像源放在前面，提高下载速度：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/pacman.d/mirrorlist</span><br><span class=\"line\"><span class=\"comment\">#将下面两个镜像源复制到最前面</span></span><br><span class=\"line\">Server = http://mirrors.ustc.edu.cn/archlinux/<span class=\"variable\">$repo</span>/os/<span class=\"variable\">$arch</span></span><br><span class=\"line\">Server = http://mirrors.163.com/archlinux/<span class=\"variable\">$repo</span>/os/<span class=\"variable\">$arch</span></span><br></pre></td></tr></table></figure><p></p><h2 id=\"安装基础软件包\"><a href=\"#安装基础软件包\" class=\"headerlink\" title=\"安装基础软件包\"></a>安装基础软件包</h2><p>现在可以使用<strong>pacstrap</strong>安装基本系统：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacstrap -i /mnt base base-devel</span><br></pre></td></tr></table></figure><p></p><h1 id=\"系统配置\"><a href=\"#系统配置\" class=\"headerlink\" title=\"系统配置\"></a>系统配置</h1><h2 id=\"生成分区表\"><a href=\"#生成分区表\" class=\"headerlink\" title=\"生成分区表\"></a>生成分区表</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">genfstab -U -p /mnt &gt; /mnt &gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure><h2 id=\"chroot\"><a href=\"#chroot\" class=\"headerlink\" title=\"chroot\"></a>chroot</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arch-chroot /mnt /bin/bash</span><br></pre></td></tr></table></figure><h2 id=\"本地化配置\"><a href=\"#本地化配置\" class=\"headerlink\" title=\"本地化配置\"></a>本地化配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/locale.gen</span><br><span class=\"line\"><span class=\"comment\">#找到下面几项并去掉前面的＃号</span></span><br><span class=\"line\">en_US.UTF-8 UTF-8</span><br><span class=\"line\">zh_CN.UTF-8 UTF-8</span><br><span class=\"line\">zh_TW.UTF-8 UTF-8</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#执行locale-gen生成locale信息</span></span><br><span class=\"line\">locale-gen</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建locale.conf并提交本地化选项</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> LANG=en_US.UTF-8 &gt; /etc/locale.conf</span><br></pre></td></tr></table></figure><h2 id=\"时间配置\"><a href=\"#时间配置\" class=\"headerlink\" title=\"时间配置\"></a>时间配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class=\"line\">hwclock --systohc --utc</span><br></pre></td></tr></table></figure><h2 id=\"设置Root密码\"><a href=\"#设置Root密码\" class=\"headerlink\" title=\"设置Root密码\"></a>设置Root密码</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd  <span class=\"comment\">#输入两次密码</span></span><br></pre></td></tr></table></figure><h2 id=\"设置主机名\"><a href=\"#设置主机名\" class=\"headerlink\" title=\"设置主机名\"></a>设置主机名</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> Arch &gt; /etc/hostname</span><br><span class=\"line\"><span class=\"comment\">#修改主机名与上面相同</span></span><br><span class=\"line\">vi /etc/hosts </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#&lt;ip-address&gt;\t&lt;hostname.domain.org&gt;\t&lt;hostname&gt;</span></span><br><span class=\"line\">127.0.0.1\t\t\tlocalhost.localdomain  \t\tarch</span><br><span class=\"line\">::1\t\t\t\tlocalhost.localdomain  \t\tarch</span><br></pre></td></tr></table></figure><h2 id=\"安装引导程序\"><a href=\"#安装引导程序\" class=\"headerlink\" title=\"安装引导程序\"></a>安装引导程序</h2><p>因为我们使用的是UEFI+GPT分区表的形式，所以我们安装<strong>systemd-boot</strong>到EFI分区：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#安装systemd-boot</span></span><br><span class=\"line\">bootctl install</span><br><span class=\"line\"><span class=\"comment\">#使用示例配置文件创建引导入口</span></span><br><span class=\"line\">cp /usr/share/systemd/bootctl/arch.conf /boot/loader/entries/</span><br><span class=\"line\"><span class=\"comment\">#查看根分区的PARTUUID</span></span><br><span class=\"line\">blkid -s PARTUUID -o value /dev/sda5</span><br></pre></td></tr></table></figure><p></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#修改引导入口</span></span><br><span class=\"line\">vi /boot/loader/entries/arch,conf</span><br><span class=\"line\"><span class=\"comment\">#将文件中PARTUUID后的XXX修改为刚刚获取的根目录的PARTUUID，rootfstype=XXX修改为ext4</span></span><br><span class=\"line\">  title   Arch Linux</span><br><span class=\"line\">  linux   /vmlinuz-linux</span><br><span class=\"line\">  initrd  /initramfs-linux.img</span><br><span class=\"line\">  options root=PARTUUID=2c3931f1-9659-4ad0-aa50-0b54754472bb rootfstype=ext4 add_efi_memmap</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#修改启动等待时间，去掉timeout前面的#号</span></span><br><span class=\"line\">vi /boot/loader/loader.conf</span><br><span class=\"line\">  timeout 3</span><br></pre></td></tr></table></figure><p>不需要配置windows的启动项，系统会自动读取windows的启动项并在开机时列出。</p><h2 id=\"网络配置-1\"><a href=\"#网络配置-1\" class=\"headerlink\" title=\"网络配置\"></a>网络配置</h2><p>前面已经配置过网络，这次我们是为新系统配置的网络，使得重启之后的新系统能够正常使用网络。</p><h3 id=\"无线网络-1\"><a href=\"#无线网络-1\" class=\"headerlink\" title=\"无线网络\"></a>无线网络</h3><p>安装<strong>iw,dialog</strong>和<strong>wpa_supplicant</strong><br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -S iw wpa_supplicant dialog</span><br></pre></td></tr></table></figure><p></p><h3 id=\"有线网络-1\"><a href=\"#有线网络-1\" class=\"headerlink\" title=\"有线网络\"></a>有线网络</h3><p>有线网络只需要开机启动<strong>dhcpcd</strong>服务即可：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> dhcpcd.service</span><br></pre></td></tr></table></figure><p></p><h2 id=\"卸载分区并重启\"><a href=\"#卸载分区并重启\" class=\"headerlink\" title=\"卸载分区并重启\"></a>卸载分区并重启</h2><p>离开chroot环境然后就可以重启系统，进入我们的新系统了：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure><p></p><p>重启时可以看到我们启动选项有archlinux和windows，选择archlinux，就可以进入我们的新系统了，当然现在系统只有命令行模式，之后我们为系统安装图形界面。</p><!-- rebuild by neat -->"},{"title":"windows10 & Arch 双系统安装指南【三】","abbrlink":"42decf85","date":"2016-02-14T14:37:07.000Z","_content":"![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215002852.png)\n经过上一篇的配置，我们已经有了一个比较粗糙的Cinnamon桌面的Arch系统，但是还缺少很多基础的应用软件，桌面也不够美观，这一篇我们安装常用的应用软件。\n<!-- more -->\n\n---\n# 应用软件安装\n## 浏览器\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215001942.png)\n\n　　Linux上常用的浏览器有**google-chrome**和**firefox**，我们就装这两个浏览器就足够了,同时还需要安装**flash**插件：\n```bash\n$ sudo pacman -S google-chrome firefox firefox flashplugin\n```\n## 输入法\n　　输入法比较好用的有搜狗拼音和google拼音，我安装的是搜狗拼音：\n```bash\n$ sudo pacman -S fcitx-im fcitx-configtool\n#然后在家目录的.xprofile文件(没有就创建)写入以下内容\nexport GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=“@im=fcitx”\n#安装搜狗拼音\nyaourt -S fcitx-sogoupinyin\n```\n注销重新登陆后就可以使用输入法了。\n## 文本编辑\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215001818.png)\n\n图形界面的文本编辑器我们使用**gedit**，当然也可以使用GVIM。\n```bash\n$ sudo pacman -S gedit gedit-plugins\n#安装vim\n$ sudo pacman -S vim\n```\n## 办公软件\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215000454.png)\n\noffice我们使用wps office：\n```bash\nyaourt -S wps-office\n```\nwps会需要一些windows字体，可以从windows上复制过来。\n## 图片查看\n```bash\n$ sudo pacman -S gpicview\n```\n## 下载工具\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215000249.png)\n```bash\n$ sudo pacman -S uget aria2\n```\n## 压缩软件\n```bash\n$ sudo pacman -S file-roller unrar p7zip unzip\n```\n## 虚拟机\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215000050.png)\n\nLinux上的虚拟机软件有很多，这里安装的是virtualbox：\n```bash\n$ sudo pacman -S virtualbox\n#运行虚拟机之前需要加载模块\n$ sudo modprobe vboxdrv\n#也可以开机自动加载模块\necho \"/sbin/rcvboxdrv setup\" >> .profile\n```\n## 分区管理\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215000357.png)\n```bash\n$ sudo pacman -S gparted\n```\n## 截图软件\n　　截图软件我使用的是深度截图\n```bash\nyaourt -S deepin-screenshot\n```\n## 影音软件\n\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215001528.png)\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215001536.png)\n\n同样我使用的音乐播放器和电影播放器都是深度系列：\n```bash\nyaourt -S deepin-music deepin-movie\n```\n## 邮件软件\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215002302.png)\n\nThunderbird是一个强大的邮件客户端，可以方便的管理我们的邮件\n```bash\n$ sudo pacman -S thunderbird\n```\n基本上常用的软件就这么多，如果自己有其他的软件需求，可以直接使用**pacman**或者**yaourt**搜索安装。\n","source":"_posts/windows10-Arch-双系统安装指南【三】.md","raw":"---\ntitle: windows10 & Arch 双系统安装指南【三】\ntags:\n  - linux\n  - archlinux\n  - cinnamon\n  - windows10\ncategories: Linux\nabbrlink: 42decf85\ndate: 2016-02-14 22:37:07\n---\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215002852.png)\n经过上一篇的配置，我们已经有了一个比较粗糙的Cinnamon桌面的Arch系统，但是还缺少很多基础的应用软件，桌面也不够美观，这一篇我们安装常用的应用软件。\n<!-- more -->\n\n---\n# 应用软件安装\n## 浏览器\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215001942.png)\n\n　　Linux上常用的浏览器有**google-chrome**和**firefox**，我们就装这两个浏览器就足够了,同时还需要安装**flash**插件：\n```bash\n$ sudo pacman -S google-chrome firefox firefox flashplugin\n```\n## 输入法\n　　输入法比较好用的有搜狗拼音和google拼音，我安装的是搜狗拼音：\n```bash\n$ sudo pacman -S fcitx-im fcitx-configtool\n#然后在家目录的.xprofile文件(没有就创建)写入以下内容\nexport GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=“@im=fcitx”\n#安装搜狗拼音\nyaourt -S fcitx-sogoupinyin\n```\n注销重新登陆后就可以使用输入法了。\n## 文本编辑\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215001818.png)\n\n图形界面的文本编辑器我们使用**gedit**，当然也可以使用GVIM。\n```bash\n$ sudo pacman -S gedit gedit-plugins\n#安装vim\n$ sudo pacman -S vim\n```\n## 办公软件\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215000454.png)\n\noffice我们使用wps office：\n```bash\nyaourt -S wps-office\n```\nwps会需要一些windows字体，可以从windows上复制过来。\n## 图片查看\n```bash\n$ sudo pacman -S gpicview\n```\n## 下载工具\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215000249.png)\n```bash\n$ sudo pacman -S uget aria2\n```\n## 压缩软件\n```bash\n$ sudo pacman -S file-roller unrar p7zip unzip\n```\n## 虚拟机\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215000050.png)\n\nLinux上的虚拟机软件有很多，这里安装的是virtualbox：\n```bash\n$ sudo pacman -S virtualbox\n#运行虚拟机之前需要加载模块\n$ sudo modprobe vboxdrv\n#也可以开机自动加载模块\necho \"/sbin/rcvboxdrv setup\" >> .profile\n```\n## 分区管理\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215000357.png)\n```bash\n$ sudo pacman -S gparted\n```\n## 截图软件\n　　截图软件我使用的是深度截图\n```bash\nyaourt -S deepin-screenshot\n```\n## 影音软件\n\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215001528.png)\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215001536.png)\n\n同样我使用的音乐播放器和电影播放器都是深度系列：\n```bash\nyaourt -S deepin-music deepin-movie\n```\n## 邮件软件\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215002302.png)\n\nThunderbird是一个强大的邮件客户端，可以方便的管理我们的邮件\n```bash\n$ sudo pacman -S thunderbird\n```\n基本上常用的软件就这么多，如果自己有其他的软件需求，可以直接使用**pacman**或者**yaourt**搜索安装。\n","slug":"windows10-Arch-双系统安装指南【三】","published":1,"updated":"2018-06-02T13:01:29.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazel0045u1jxq2lhgcpx","content":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215002852.png\" alt=\"\"><br>经过上一篇的配置，我们已经有了一个比较粗糙的Cinnamon桌面的Arch系统，但是还缺少很多基础的应用软件，桌面也不够美观，这一篇我们安装常用的应用软件。<br><a id=\"more\"></a></p><hr><h1 id=\"应用软件安装\"><a href=\"#应用软件安装\" class=\"headerlink\" title=\"应用软件安装\"></a>应用软件安装</h1><h2 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h2><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215001942.png\" alt=\"\"></p><p>Linux上常用的浏览器有<strong>google-chrome</strong>和<strong>firefox</strong>，我们就装这两个浏览器就足够了,同时还需要安装<strong>flash</strong>插件：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S google-chrome firefox firefox flashplugin</span><br></pre></td></tr></table></figure><p></p><h2 id=\"输入法\"><a href=\"#输入法\" class=\"headerlink\" title=\"输入法\"></a>输入法</h2><p>输入法比较好用的有搜狗拼音和google拼音，我安装的是搜狗拼音：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S fcitx-im fcitx-configtool</span><br><span class=\"line\"><span class=\"comment\">#然后在家目录的.xprofile文件(没有就创建)写入以下内容</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GTK_IM_MODULE=fcitx</span><br><span class=\"line\"><span class=\"built_in\">export</span> QT_IM_MODULE=fcitx</span><br><span class=\"line\"><span class=\"built_in\">export</span> XMODIFIERS=“@im=fcitx”</span><br><span class=\"line\"><span class=\"comment\">#安装搜狗拼音</span></span><br><span class=\"line\">yaourt -S fcitx-sogoupinyin</span><br></pre></td></tr></table></figure><p></p><p>注销重新登陆后就可以使用输入法了。</p><h2 id=\"文本编辑\"><a href=\"#文本编辑\" class=\"headerlink\" title=\"文本编辑\"></a>文本编辑</h2><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215001818.png\" alt=\"\"></p><p>图形界面的文本编辑器我们使用<strong>gedit</strong>，当然也可以使用GVIM。<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S gedit gedit-plugins</span><br><span class=\"line\"><span class=\"comment\">#安装vim</span></span><br><span class=\"line\">$ sudo pacman -S vim</span><br></pre></td></tr></table></figure><p></p><h2 id=\"办公软件\"><a href=\"#办公软件\" class=\"headerlink\" title=\"办公软件\"></a>办公软件</h2><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215000454.png\" alt=\"\"></p><p>office我们使用wps office：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -S wps-office</span><br></pre></td></tr></table></figure><p></p><p>wps会需要一些windows字体，可以从windows上复制过来。</p><h2 id=\"图片查看\"><a href=\"#图片查看\" class=\"headerlink\" title=\"图片查看\"></a>图片查看</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S gpicview</span><br></pre></td></tr></table></figure><h2 id=\"下载工具\"><a href=\"#下载工具\" class=\"headerlink\" title=\"下载工具\"></a>下载工具</h2><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215000249.png\" alt=\"\"><br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S uget aria2</span><br></pre></td></tr></table></figure><p></p><h2 id=\"压缩软件\"><a href=\"#压缩软件\" class=\"headerlink\" title=\"压缩软件\"></a>压缩软件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S file-roller unrar p7zip unzip</span><br></pre></td></tr></table></figure><h2 id=\"虚拟机\"><a href=\"#虚拟机\" class=\"headerlink\" title=\"虚拟机\"></a>虚拟机</h2><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215000050.png\" alt=\"\"></p><p>Linux上的虚拟机软件有很多，这里安装的是virtualbox：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S virtualbox</span><br><span class=\"line\"><span class=\"comment\">#运行虚拟机之前需要加载模块</span></span><br><span class=\"line\">$ sudo modprobe vboxdrv</span><br><span class=\"line\"><span class=\"comment\">#也可以开机自动加载模块</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"/sbin/rcvboxdrv setup\"</span> &gt;&gt; .profile</span><br></pre></td></tr></table></figure><p></p><h2 id=\"分区管理\"><a href=\"#分区管理\" class=\"headerlink\" title=\"分区管理\"></a>分区管理</h2><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215000357.png\" alt=\"\"><br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S gparted</span><br></pre></td></tr></table></figure><p></p><h2 id=\"截图软件\"><a href=\"#截图软件\" class=\"headerlink\" title=\"截图软件\"></a>截图软件</h2><p>截图软件我使用的是深度截图<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -S deepin-screenshot</span><br></pre></td></tr></table></figure><p></p><h2 id=\"影音软件\"><a href=\"#影音软件\" class=\"headerlink\" title=\"影音软件\"></a>影音软件</h2><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215001528.png\" alt=\"\"><br><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215001536.png\" alt=\"\"></p><p>同样我使用的音乐播放器和电影播放器都是深度系列：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -S deepin-music deepin-movie</span><br></pre></td></tr></table></figure><p></p><h2 id=\"邮件软件\"><a href=\"#邮件软件\" class=\"headerlink\" title=\"邮件软件\"></a>邮件软件</h2><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215002302.png\" alt=\"\"></p><p>Thunderbird是一个强大的邮件客户端，可以方便的管理我们的邮件<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S thunderbird</span><br></pre></td></tr></table></figure><p></p><p>基本上常用的软件就这么多，如果自己有其他的软件需求，可以直接使用<strong>pacman</strong>或者<strong>yaourt</strong>搜索安装。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215002852.png\" alt=\"\"><br>经过上一篇的配置，我们已经有了一个比较粗糙的Cinnamon桌面的Arch系统，但是还缺少很多基础的应用软件，桌面也不够美观，这一篇我们安装常用的应用软件。<br>","more":"</p><hr><h1 id=\"应用软件安装\"><a href=\"#应用软件安装\" class=\"headerlink\" title=\"应用软件安装\"></a>应用软件安装</h1><h2 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h2><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215001942.png\" alt=\"\"></p><p>Linux上常用的浏览器有<strong>google-chrome</strong>和<strong>firefox</strong>，我们就装这两个浏览器就足够了,同时还需要安装<strong>flash</strong>插件：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S google-chrome firefox firefox flashplugin</span><br></pre></td></tr></table></figure><p></p><h2 id=\"输入法\"><a href=\"#输入法\" class=\"headerlink\" title=\"输入法\"></a>输入法</h2><p>输入法比较好用的有搜狗拼音和google拼音，我安装的是搜狗拼音：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S fcitx-im fcitx-configtool</span><br><span class=\"line\"><span class=\"comment\">#然后在家目录的.xprofile文件(没有就创建)写入以下内容</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GTK_IM_MODULE=fcitx</span><br><span class=\"line\"><span class=\"built_in\">export</span> QT_IM_MODULE=fcitx</span><br><span class=\"line\"><span class=\"built_in\">export</span> XMODIFIERS=“@im=fcitx”</span><br><span class=\"line\"><span class=\"comment\">#安装搜狗拼音</span></span><br><span class=\"line\">yaourt -S fcitx-sogoupinyin</span><br></pre></td></tr></table></figure><p></p><p>注销重新登陆后就可以使用输入法了。</p><h2 id=\"文本编辑\"><a href=\"#文本编辑\" class=\"headerlink\" title=\"文本编辑\"></a>文本编辑</h2><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215001818.png\" alt=\"\"></p><p>图形界面的文本编辑器我们使用<strong>gedit</strong>，当然也可以使用GVIM。<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S gedit gedit-plugins</span><br><span class=\"line\"><span class=\"comment\">#安装vim</span></span><br><span class=\"line\">$ sudo pacman -S vim</span><br></pre></td></tr></table></figure><p></p><h2 id=\"办公软件\"><a href=\"#办公软件\" class=\"headerlink\" title=\"办公软件\"></a>办公软件</h2><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215000454.png\" alt=\"\"></p><p>office我们使用wps office：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -S wps-office</span><br></pre></td></tr></table></figure><p></p><p>wps会需要一些windows字体，可以从windows上复制过来。</p><h2 id=\"图片查看\"><a href=\"#图片查看\" class=\"headerlink\" title=\"图片查看\"></a>图片查看</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S gpicview</span><br></pre></td></tr></table></figure><h2 id=\"下载工具\"><a href=\"#下载工具\" class=\"headerlink\" title=\"下载工具\"></a>下载工具</h2><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215000249.png\" alt=\"\"><br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S uget aria2</span><br></pre></td></tr></table></figure><p></p><h2 id=\"压缩软件\"><a href=\"#压缩软件\" class=\"headerlink\" title=\"压缩软件\"></a>压缩软件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S file-roller unrar p7zip unzip</span><br></pre></td></tr></table></figure><h2 id=\"虚拟机\"><a href=\"#虚拟机\" class=\"headerlink\" title=\"虚拟机\"></a>虚拟机</h2><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215000050.png\" alt=\"\"></p><p>Linux上的虚拟机软件有很多，这里安装的是virtualbox：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S virtualbox</span><br><span class=\"line\"><span class=\"comment\">#运行虚拟机之前需要加载模块</span></span><br><span class=\"line\">$ sudo modprobe vboxdrv</span><br><span class=\"line\"><span class=\"comment\">#也可以开机自动加载模块</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"/sbin/rcvboxdrv setup\"</span> &gt;&gt; .profile</span><br></pre></td></tr></table></figure><p></p><h2 id=\"分区管理\"><a href=\"#分区管理\" class=\"headerlink\" title=\"分区管理\"></a>分区管理</h2><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215000357.png\" alt=\"\"><br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S gparted</span><br></pre></td></tr></table></figure><p></p><h2 id=\"截图软件\"><a href=\"#截图软件\" class=\"headerlink\" title=\"截图软件\"></a>截图软件</h2><p>截图软件我使用的是深度截图<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -S deepin-screenshot</span><br></pre></td></tr></table></figure><p></p><h2 id=\"影音软件\"><a href=\"#影音软件\" class=\"headerlink\" title=\"影音软件\"></a>影音软件</h2><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215001528.png\" alt=\"\"><br><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215001536.png\" alt=\"\"></p><p>同样我使用的音乐播放器和电影播放器都是深度系列：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -S deepin-music deepin-movie</span><br></pre></td></tr></table></figure><p></p><h2 id=\"邮件软件\"><a href=\"#邮件软件\" class=\"headerlink\" title=\"邮件软件\"></a>邮件软件</h2><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160215002302.png\" alt=\"\"></p><p>Thunderbird是一个强大的邮件客户端，可以方便的管理我们的邮件<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S thunderbird</span><br></pre></td></tr></table></figure><p></p><p>基本上常用的软件就这么多，如果自己有其他的软件需求，可以直接使用<strong>pacman</strong>或者<strong>yaourt</strong>搜索安装。</p><!-- rebuild by neat -->"},{"title":"windows10 & Arch 双系统安装指南【二】","abbrlink":"fc06cd7","date":"2016-02-14T12:53:46.000Z","_content":"![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160214223028.png)\n\n在上一篇我们已经完成了基础系统的安装，目前开机archlinux只具有基础的命令行模式，本篇我们来完成一些基础配置和Cinnamon图形界面的安装。\n<!-- more -->\n\n---\n# 基础设置\n## 添加用户\n　　新安装的系统只有一个root用户，日常使用root用户登陆系统会带来很大的安全隐患，所以，我们要添加一个用户，使用这个用户日常登陆系统：\n```bash\n#添加arch用户并添加到wheel用户组\nuseradd -m -G wheel -s /bin/bash arch\n#为arch用户设置密码\npasswd arch\n#为wheel用户组配置sudo权限\nvisudo\n#找到下面这一行，并去掉前面的#号\n%wheel ALL=(ALL) ALL\n```\n```bash\n#退出登陆，使用arch用户重新登陆系统\nexit\n```\n## 添加Arch Linux中文社区仓库\nArch Linux 中文社区仓库 是由 Arch Linux 中文社区驱动的非官方用户仓库。包含中文用户常用软件、工具、字体/美化包等。\n```bash\n$ sudo vi /etc/pacman.conf\n#在末尾添加以下内容\n[archlinuxcn]\nSigLevel = Optional TrustAll\nServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\n```\n```bash\n#刷新pacman数据库\n$ sudo pacman -Syy\n#安装archlinuxcn-keyring 包以导入 GPG key\n$ sudo pacman -S archlinuxcn-keyring\n```\n# 基础软件安装\n　　现在我们安装一些基本的软件：\n```bash\n$ sudo pacman -S bash-completion yaourt \n```\n# Cinnamon图形界面安装\n## xorg、显卡驱动安装\n首先安装xorg-server和显卡驱动\n```bash\n$ sudo pacman -S xorg-server\n#nvidia显卡安装xf86-video-nouveau，Intel核心显卡安装xf86-video-intel \n$ sudo pacman -S  xf86-video-intel\n```\n## 字体安装\n```bash\n$ sudo pacman -S ttf-dejavu wqy-microhei \n```\n## 安装显示管理器\nLightDM 是一个跨桌面环境的显示管理器，具有代码轻量，跨桌面等特点。\n```bash\n$ sudo pacman -S  lightdm-gtk-greeter\n$ sudo systemctl enable lightdm\n```\n## Cinnamon安装\n正式安装cinnamon桌面\n```bash\n$ sudo pacman -S cinnamon\n```\n## 安装应用程序\n　　为了便于使用，我们需要安装一些应用软件：终端，触摸板驱动、声音驱动、蓝牙，语言模块等\n```bash\n$ sudo pacman -S gnome-terminal xf86-input-synaptics alsa-utils\n$ yaourt -S blueberry mintlocale\n```\n```bash\n# 开机启动网络服务\n$ sudo systemctl enable NetworkManager\n```\n　　现在重新启动系统，就可以进入我们的Cinnamon桌面啦，下一章我们进行桌面的软件安装和美化配置。","source":"_posts/windows10-Arch-双系统安装指南【二】.md","raw":"---\ntitle: windows10 & Arch 双系统安装指南【二】\ntags:\n  - linux\n  - archlinux\n  - cinnamon\n  - windows10\ncategories: Linux\nabbrlink: fc06cd7\ndate: 2016-02-14 20:53:46\n---\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160214223028.png)\n\n在上一篇我们已经完成了基础系统的安装，目前开机archlinux只具有基础的命令行模式，本篇我们来完成一些基础配置和Cinnamon图形界面的安装。\n<!-- more -->\n\n---\n# 基础设置\n## 添加用户\n　　新安装的系统只有一个root用户，日常使用root用户登陆系统会带来很大的安全隐患，所以，我们要添加一个用户，使用这个用户日常登陆系统：\n```bash\n#添加arch用户并添加到wheel用户组\nuseradd -m -G wheel -s /bin/bash arch\n#为arch用户设置密码\npasswd arch\n#为wheel用户组配置sudo权限\nvisudo\n#找到下面这一行，并去掉前面的#号\n%wheel ALL=(ALL) ALL\n```\n```bash\n#退出登陆，使用arch用户重新登陆系统\nexit\n```\n## 添加Arch Linux中文社区仓库\nArch Linux 中文社区仓库 是由 Arch Linux 中文社区驱动的非官方用户仓库。包含中文用户常用软件、工具、字体/美化包等。\n```bash\n$ sudo vi /etc/pacman.conf\n#在末尾添加以下内容\n[archlinuxcn]\nSigLevel = Optional TrustAll\nServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\n```\n```bash\n#刷新pacman数据库\n$ sudo pacman -Syy\n#安装archlinuxcn-keyring 包以导入 GPG key\n$ sudo pacman -S archlinuxcn-keyring\n```\n# 基础软件安装\n　　现在我们安装一些基本的软件：\n```bash\n$ sudo pacman -S bash-completion yaourt \n```\n# Cinnamon图形界面安装\n## xorg、显卡驱动安装\n首先安装xorg-server和显卡驱动\n```bash\n$ sudo pacman -S xorg-server\n#nvidia显卡安装xf86-video-nouveau，Intel核心显卡安装xf86-video-intel \n$ sudo pacman -S  xf86-video-intel\n```\n## 字体安装\n```bash\n$ sudo pacman -S ttf-dejavu wqy-microhei \n```\n## 安装显示管理器\nLightDM 是一个跨桌面环境的显示管理器，具有代码轻量，跨桌面等特点。\n```bash\n$ sudo pacman -S  lightdm-gtk-greeter\n$ sudo systemctl enable lightdm\n```\n## Cinnamon安装\n正式安装cinnamon桌面\n```bash\n$ sudo pacman -S cinnamon\n```\n## 安装应用程序\n　　为了便于使用，我们需要安装一些应用软件：终端，触摸板驱动、声音驱动、蓝牙，语言模块等\n```bash\n$ sudo pacman -S gnome-terminal xf86-input-synaptics alsa-utils\n$ yaourt -S blueberry mintlocale\n```\n```bash\n# 开机启动网络服务\n$ sudo systemctl enable NetworkManager\n```\n　　现在重新启动系统，就可以进入我们的Cinnamon桌面啦，下一章我们进行桌面的软件安装和美化配置。","slug":"windows10-Arch-双系统安装指南【二】","published":1,"updated":"2018-06-02T13:01:29.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazes0049u1jx83z643hd","content":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160214223028.png\" alt=\"\"></p><p>在上一篇我们已经完成了基础系统的安装，目前开机archlinux只具有基础的命令行模式，本篇我们来完成一些基础配置和Cinnamon图形界面的安装。<br><a id=\"more\"></a></p><hr><h1 id=\"基础设置\"><a href=\"#基础设置\" class=\"headerlink\" title=\"基础设置\"></a>基础设置</h1><h2 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h2><p>新安装的系统只有一个root用户，日常使用root用户登陆系统会带来很大的安全隐患，所以，我们要添加一个用户，使用这个用户日常登陆系统：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加arch用户并添加到wheel用户组</span></span><br><span class=\"line\">useradd -m -G wheel -s /bin/bash arch</span><br><span class=\"line\"><span class=\"comment\">#为arch用户设置密码</span></span><br><span class=\"line\">passwd arch</span><br><span class=\"line\"><span class=\"comment\">#为wheel用户组配置sudo权限</span></span><br><span class=\"line\">visudo</span><br><span class=\"line\"><span class=\"comment\">#找到下面这一行，并去掉前面的#号</span></span><br><span class=\"line\">%wheel ALL=(ALL) ALL</span><br></pre></td></tr></table></figure><p></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#退出登陆，使用arch用户重新登陆系统</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure><h2 id=\"添加Arch-Linux中文社区仓库\"><a href=\"#添加Arch-Linux中文社区仓库\" class=\"headerlink\" title=\"添加Arch Linux中文社区仓库\"></a>添加Arch Linux中文社区仓库</h2><p>Arch Linux 中文社区仓库 是由 Arch Linux 中文社区驱动的非官方用户仓库。包含中文用户常用软件、工具、字体/美化包等。<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vi /etc/pacman.conf</span><br><span class=\"line\"><span class=\"comment\">#在末尾添加以下内容</span></span><br><span class=\"line\">[archlinuxcn]</span><br><span class=\"line\">SigLevel = Optional TrustAll</span><br><span class=\"line\">Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class=\"variable\">$arch</span></span><br></pre></td></tr></table></figure><p></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#刷新pacman数据库</span></span><br><span class=\"line\">$ sudo pacman -Syy</span><br><span class=\"line\"><span class=\"comment\">#安装archlinuxcn-keyring 包以导入 GPG key</span></span><br><span class=\"line\">$ sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure><h1 id=\"基础软件安装\"><a href=\"#基础软件安装\" class=\"headerlink\" title=\"基础软件安装\"></a>基础软件安装</h1><p>现在我们安装一些基本的软件：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S bash-completion yaourt</span><br></pre></td></tr></table></figure><p></p><h1 id=\"Cinnamon图形界面安装\"><a href=\"#Cinnamon图形界面安装\" class=\"headerlink\" title=\"Cinnamon图形界面安装\"></a>Cinnamon图形界面安装</h1><h2 id=\"xorg、显卡驱动安装\"><a href=\"#xorg、显卡驱动安装\" class=\"headerlink\" title=\"xorg、显卡驱动安装\"></a>xorg、显卡驱动安装</h2><p>首先安装xorg-server和显卡驱动<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S xorg-server</span><br><span class=\"line\"><span class=\"comment\">#nvidia显卡安装xf86-video-nouveau，Intel核心显卡安装xf86-video-intel </span></span><br><span class=\"line\">$ sudo pacman -S  xf86-video-intel</span><br></pre></td></tr></table></figure><p></p><h2 id=\"字体安装\"><a href=\"#字体安装\" class=\"headerlink\" title=\"字体安装\"></a>字体安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S ttf-dejavu wqy-microhei</span><br></pre></td></tr></table></figure><h2 id=\"安装显示管理器\"><a href=\"#安装显示管理器\" class=\"headerlink\" title=\"安装显示管理器\"></a>安装显示管理器</h2><p>LightDM 是一个跨桌面环境的显示管理器，具有代码轻量，跨桌面等特点。<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S  lightdm-gtk-greeter</span><br><span class=\"line\">$ sudo systemctl <span class=\"built_in\">enable</span> lightdm</span><br></pre></td></tr></table></figure><p></p><h2 id=\"Cinnamon安装\"><a href=\"#Cinnamon安装\" class=\"headerlink\" title=\"Cinnamon安装\"></a>Cinnamon安装</h2><p>正式安装cinnamon桌面<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S cinnamon</span><br></pre></td></tr></table></figure><p></p><h2 id=\"安装应用程序\"><a href=\"#安装应用程序\" class=\"headerlink\" title=\"安装应用程序\"></a>安装应用程序</h2><p>为了便于使用，我们需要安装一些应用软件：终端，触摸板驱动、声音驱动、蓝牙，语言模块等<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S gnome-terminal xf86-input-synaptics alsa-utils</span><br><span class=\"line\">$ yaourt -S blueberry mintlocale</span><br></pre></td></tr></table></figure><p></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开机启动网络服务</span></span><br><span class=\"line\">$ sudo systemctl <span class=\"built_in\">enable</span> NetworkManager</span><br></pre></td></tr></table></figure><p>现在重新启动系统，就可以进入我们的Cinnamon桌面啦，下一章我们进行桌面的软件安装和美化配置。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160214223028.png\" alt=\"\"></p><p>在上一篇我们已经完成了基础系统的安装，目前开机archlinux只具有基础的命令行模式，本篇我们来完成一些基础配置和Cinnamon图形界面的安装。<br>","more":"</p><hr><h1 id=\"基础设置\"><a href=\"#基础设置\" class=\"headerlink\" title=\"基础设置\"></a>基础设置</h1><h2 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h2><p>新安装的系统只有一个root用户，日常使用root用户登陆系统会带来很大的安全隐患，所以，我们要添加一个用户，使用这个用户日常登陆系统：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加arch用户并添加到wheel用户组</span></span><br><span class=\"line\">useradd -m -G wheel -s /bin/bash arch</span><br><span class=\"line\"><span class=\"comment\">#为arch用户设置密码</span></span><br><span class=\"line\">passwd arch</span><br><span class=\"line\"><span class=\"comment\">#为wheel用户组配置sudo权限</span></span><br><span class=\"line\">visudo</span><br><span class=\"line\"><span class=\"comment\">#找到下面这一行，并去掉前面的#号</span></span><br><span class=\"line\">%wheel ALL=(ALL) ALL</span><br></pre></td></tr></table></figure><p></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#退出登陆，使用arch用户重新登陆系统</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure><h2 id=\"添加Arch-Linux中文社区仓库\"><a href=\"#添加Arch-Linux中文社区仓库\" class=\"headerlink\" title=\"添加Arch Linux中文社区仓库\"></a>添加Arch Linux中文社区仓库</h2><p>Arch Linux 中文社区仓库 是由 Arch Linux 中文社区驱动的非官方用户仓库。包含中文用户常用软件、工具、字体/美化包等。<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vi /etc/pacman.conf</span><br><span class=\"line\"><span class=\"comment\">#在末尾添加以下内容</span></span><br><span class=\"line\">[archlinuxcn]</span><br><span class=\"line\">SigLevel = Optional TrustAll</span><br><span class=\"line\">Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class=\"variable\">$arch</span></span><br></pre></td></tr></table></figure><p></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#刷新pacman数据库</span></span><br><span class=\"line\">$ sudo pacman -Syy</span><br><span class=\"line\"><span class=\"comment\">#安装archlinuxcn-keyring 包以导入 GPG key</span></span><br><span class=\"line\">$ sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure><h1 id=\"基础软件安装\"><a href=\"#基础软件安装\" class=\"headerlink\" title=\"基础软件安装\"></a>基础软件安装</h1><p>现在我们安装一些基本的软件：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S bash-completion yaourt</span><br></pre></td></tr></table></figure><p></p><h1 id=\"Cinnamon图形界面安装\"><a href=\"#Cinnamon图形界面安装\" class=\"headerlink\" title=\"Cinnamon图形界面安装\"></a>Cinnamon图形界面安装</h1><h2 id=\"xorg、显卡驱动安装\"><a href=\"#xorg、显卡驱动安装\" class=\"headerlink\" title=\"xorg、显卡驱动安装\"></a>xorg、显卡驱动安装</h2><p>首先安装xorg-server和显卡驱动<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S xorg-server</span><br><span class=\"line\"><span class=\"comment\">#nvidia显卡安装xf86-video-nouveau，Intel核心显卡安装xf86-video-intel </span></span><br><span class=\"line\">$ sudo pacman -S  xf86-video-intel</span><br></pre></td></tr></table></figure><p></p><h2 id=\"字体安装\"><a href=\"#字体安装\" class=\"headerlink\" title=\"字体安装\"></a>字体安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S ttf-dejavu wqy-microhei</span><br></pre></td></tr></table></figure><h2 id=\"安装显示管理器\"><a href=\"#安装显示管理器\" class=\"headerlink\" title=\"安装显示管理器\"></a>安装显示管理器</h2><p>LightDM 是一个跨桌面环境的显示管理器，具有代码轻量，跨桌面等特点。<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S  lightdm-gtk-greeter</span><br><span class=\"line\">$ sudo systemctl <span class=\"built_in\">enable</span> lightdm</span><br></pre></td></tr></table></figure><p></p><h2 id=\"Cinnamon安装\"><a href=\"#Cinnamon安装\" class=\"headerlink\" title=\"Cinnamon安装\"></a>Cinnamon安装</h2><p>正式安装cinnamon桌面<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S cinnamon</span><br></pre></td></tr></table></figure><p></p><h2 id=\"安装应用程序\"><a href=\"#安装应用程序\" class=\"headerlink\" title=\"安装应用程序\"></a>安装应用程序</h2><p>为了便于使用，我们需要安装一些应用软件：终端，触摸板驱动、声音驱动、蓝牙，语言模块等<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S gnome-terminal xf86-input-synaptics alsa-utils</span><br><span class=\"line\">$ yaourt -S blueberry mintlocale</span><br></pre></td></tr></table></figure><p></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开机启动网络服务</span></span><br><span class=\"line\">$ sudo systemctl <span class=\"built_in\">enable</span> NetworkManager</span><br></pre></td></tr></table></figure><p>现在重新启动系统，就可以进入我们的Cinnamon桌面啦，下一章我们进行桌面的软件安装和美化配置。</p><!-- rebuild by neat -->"},{"title":"windows10 & Arch 双系统安装指南【四】","abbrlink":"f5f3d6e0","date":"2016-02-18T14:05:11.000Z","_content":"![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160214155947.png)\n经过前一篇的步骤，我们完成了常用的应用软件的安装，可以说现在arch已经完全不影响使用了，但是，我们都希望自己的系统环境比较美观，所以，这一篇，我们来对系统进行美化，具体包括主题安装，扩展设置，字体配置等等。\n<!-- more -->\n\n---\n# 字体配置\n## 字体安装\n　　我们之前安装了文泉驿字体，我平时使用的还有ubuntu字体，所以我们再安装一个ubuntu字体包：\n```bash\n$ sudo pacman -S ttf-ubuntu-font-family\n```\n## 字体配置\n　　现在即使切换到中文，我们也会发现整个系统的字体发虚，所以我们需要对系统的字体配置作一些改动：\n　　[点击此处](http://pan.baidu.com/s/1bnYDy8J)下载字体配置文件。\n```bash\n#备份系统原来的字体配置文件\n$ sudo mv /etc/fonts /etc/fonts.bak\n#将下载的字体配置解压过去\n$ sudo tar zxvf fonts.tar.gz -C /etc/\n```\n## 安装gnome优化工具\n```bash\nsudo pacman -S gnome-tweak-tool\n```\n打开优化工具，将字体设置为自己喜欢的，下面是我的配置：\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160225212027.png)\n在系统的字体设置里面也使用同样的配置。\n\n# 主题配置\n## 安装numix图标\n```bash\n$ sudo pacman -S numix-circle-icon-theme-git\n```\n## 安装主题\n[点击此处](http://pan.baidu.com/s/1hrwjM3y)下载Yosemite主题\n```bash\n#将主题解压到系统目录\n$ sudo tar zxvf Yosemite Light.0.3.tar.gz -C /usr/share/themes\n```\n## 安装鼠标主题\n[点击此处](http://pan.baidu.com/s/1jHuJTZ4)下载鼠标主题\n```bash\n#解压鼠标主题到系统目录\ntar zxvf OpenZone.tar.gz -C /usr/share/icons\n```\n现在我们的主题就全部安装完成了，剩下的只需要在系统设置里的主题里设置一下就可以了，在主题设置里，下载Numix桌面主题，下面是我的配置：\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160225214812.png)\n# VIM配置\n## 命令别名\n设置命令vi为vim\n```bash\nvi ～/.bashrc\n#添加一行：\nalias vi='vim'\n#编辑vimrc文件\nvi ~/.vimrc\n```\n在.vimrc中写入以下内容\n> syntax on\nset tabstop=4\nfiletype on\nset nocp\nset mouse=a\nset selection=exclusive\nset selectmode=mouse,key\nset showcmd\nset laststatus=2\nset ruler\nset ignorecase\nset hlsearch\nset incsearch\nfiletype plugin on\nfiletype plugin indent on\nset completeopt=longest,menu\nset wildmenu\nautocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete\nautocmd FileType python set omnifunc=pythoncomplete#Complete\nautocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS\nautocmd FileType html set omnifunc=htmlcomplete#CompleteTags\nautocmd FileType css set omnifunc=csscomplete#CompleteCSS\nautocmd FileType xml set omnifunc=xmlcomplete#CompleteTags\nautocmd FileType java set omnifunc=javacomplete#Complet\n\n为了让我们在使用`sudo vi`命令时的vi也能调用vim，我们还需要在**.bashrc**里添加一个命令别名：`alias sudo='sudo '`，注意，后面的sudo之后有一个空格\n# lightdm美化\n安装lightdm-gtk-greeter-settings\n```bash\n$ sudo pacman -S lightdm-gtk-greeter-settings\n```\n打开lightdm-gtk-greeter-settings，可以配置登陆界面的背景图片，头像等。\n# 其他配置\n安装docky:\n```bash\n$ sudo pacman -S docky\n```\n最后换个壁纸，按照自己的喜好配置一下，就可以了。\n送上壁纸:\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamonu2oPC.jpg)","source":"_posts/windows10-Arch-双系统安装指南【四】.md","raw":"---\ntitle: windows10 & Arch 双系统安装指南【四】\ntags:\n  - linux\n  - archlinux\n  - cinnamon\n  - windows10\ncategories: Linux\nabbrlink: f5f3d6e0\ndate: 2016-02-18 22:05:11\n---\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160214155947.png)\n经过前一篇的步骤，我们完成了常用的应用软件的安装，可以说现在arch已经完全不影响使用了，但是，我们都希望自己的系统环境比较美观，所以，这一篇，我们来对系统进行美化，具体包括主题安装，扩展设置，字体配置等等。\n<!-- more -->\n\n---\n# 字体配置\n## 字体安装\n　　我们之前安装了文泉驿字体，我平时使用的还有ubuntu字体，所以我们再安装一个ubuntu字体包：\n```bash\n$ sudo pacman -S ttf-ubuntu-font-family\n```\n## 字体配置\n　　现在即使切换到中文，我们也会发现整个系统的字体发虚，所以我们需要对系统的字体配置作一些改动：\n　　[点击此处](http://pan.baidu.com/s/1bnYDy8J)下载字体配置文件。\n```bash\n#备份系统原来的字体配置文件\n$ sudo mv /etc/fonts /etc/fonts.bak\n#将下载的字体配置解压过去\n$ sudo tar zxvf fonts.tar.gz -C /etc/\n```\n## 安装gnome优化工具\n```bash\nsudo pacman -S gnome-tweak-tool\n```\n打开优化工具，将字体设置为自己喜欢的，下面是我的配置：\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160225212027.png)\n在系统的字体设置里面也使用同样的配置。\n\n# 主题配置\n## 安装numix图标\n```bash\n$ sudo pacman -S numix-circle-icon-theme-git\n```\n## 安装主题\n[点击此处](http://pan.baidu.com/s/1hrwjM3y)下载Yosemite主题\n```bash\n#将主题解压到系统目录\n$ sudo tar zxvf Yosemite Light.0.3.tar.gz -C /usr/share/themes\n```\n## 安装鼠标主题\n[点击此处](http://pan.baidu.com/s/1jHuJTZ4)下载鼠标主题\n```bash\n#解压鼠标主题到系统目录\ntar zxvf OpenZone.tar.gz -C /usr/share/icons\n```\n现在我们的主题就全部安装完成了，剩下的只需要在系统设置里的主题里设置一下就可以了，在主题设置里，下载Numix桌面主题，下面是我的配置：\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160225214812.png)\n# VIM配置\n## 命令别名\n设置命令vi为vim\n```bash\nvi ～/.bashrc\n#添加一行：\nalias vi='vim'\n#编辑vimrc文件\nvi ~/.vimrc\n```\n在.vimrc中写入以下内容\n> syntax on\nset tabstop=4\nfiletype on\nset nocp\nset mouse=a\nset selection=exclusive\nset selectmode=mouse,key\nset showcmd\nset laststatus=2\nset ruler\nset ignorecase\nset hlsearch\nset incsearch\nfiletype plugin on\nfiletype plugin indent on\nset completeopt=longest,menu\nset wildmenu\nautocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete\nautocmd FileType python set omnifunc=pythoncomplete#Complete\nautocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS\nautocmd FileType html set omnifunc=htmlcomplete#CompleteTags\nautocmd FileType css set omnifunc=csscomplete#CompleteCSS\nautocmd FileType xml set omnifunc=xmlcomplete#CompleteTags\nautocmd FileType java set omnifunc=javacomplete#Complet\n\n为了让我们在使用`sudo vi`命令时的vi也能调用vim，我们还需要在**.bashrc**里添加一个命令别名：`alias sudo='sudo '`，注意，后面的sudo之后有一个空格\n# lightdm美化\n安装lightdm-gtk-greeter-settings\n```bash\n$ sudo pacman -S lightdm-gtk-greeter-settings\n```\n打开lightdm-gtk-greeter-settings，可以配置登陆界面的背景图片，头像等。\n# 其他配置\n安装docky:\n```bash\n$ sudo pacman -S docky\n```\n最后换个壁纸，按照自己的喜好配置一下，就可以了。\n送上壁纸:\n![](http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamonu2oPC.jpg)","slug":"windows10-Arch-双系统安装指南【四】","published":1,"updated":"2018-06-02T13:01:29.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazex004cu1jxkgf9lxom","content":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160214155947.png\" alt=\"\"><br>经过前一篇的步骤，我们完成了常用的应用软件的安装，可以说现在arch已经完全不影响使用了，但是，我们都希望自己的系统环境比较美观，所以，这一篇，我们来对系统进行美化，具体包括主题安装，扩展设置，字体配置等等。<br><a id=\"more\"></a></p><hr><h1 id=\"字体配置\"><a href=\"#字体配置\" class=\"headerlink\" title=\"字体配置\"></a>字体配置</h1><h2 id=\"字体安装\"><a href=\"#字体安装\" class=\"headerlink\" title=\"字体安装\"></a>字体安装</h2><p>我们之前安装了文泉驿字体，我平时使用的还有ubuntu字体，所以我们再安装一个ubuntu字体包：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S ttf-ubuntu-font-family</span><br></pre></td></tr></table></figure><p></p><h2 id=\"字体配置-1\"><a href=\"#字体配置-1\" class=\"headerlink\" title=\"字体配置\"></a>字体配置</h2><p>现在即使切换到中文，我们也会发现整个系统的字体发虚，所以我们需要对系统的字体配置作一些改动：<br><a href=\"http://pan.baidu.com/s/1bnYDy8J\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">点击此处</a>下载字体配置文件。<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#备份系统原来的字体配置文件</span></span><br><span class=\"line\">$ sudo mv /etc/fonts /etc/fonts.bak</span><br><span class=\"line\"><span class=\"comment\">#将下载的字体配置解压过去</span></span><br><span class=\"line\">$ sudo tar zxvf fonts.tar.gz -C /etc/</span><br></pre></td></tr></table></figure><p></p><h2 id=\"安装gnome优化工具\"><a href=\"#安装gnome优化工具\" class=\"headerlink\" title=\"安装gnome优化工具\"></a>安装gnome优化工具</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S gnome-tweak-tool</span><br></pre></td></tr></table></figure><p>打开优化工具，将字体设置为自己喜欢的，下面是我的配置：<br><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160225212027.png\" alt=\"\"><br>在系统的字体设置里面也使用同样的配置。</p><h1 id=\"主题配置\"><a href=\"#主题配置\" class=\"headerlink\" title=\"主题配置\"></a>主题配置</h1><h2 id=\"安装numix图标\"><a href=\"#安装numix图标\" class=\"headerlink\" title=\"安装numix图标\"></a>安装numix图标</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S numix-circle-icon-theme-git</span><br></pre></td></tr></table></figure><h2 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h2><p><a href=\"http://pan.baidu.com/s/1hrwjM3y\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">点击此处</a>下载Yosemite主题<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将主题解压到系统目录</span></span><br><span class=\"line\">$ sudo tar zxvf Yosemite Light.0.3.tar.gz -C /usr/share/themes</span><br></pre></td></tr></table></figure><p></p><h2 id=\"安装鼠标主题\"><a href=\"#安装鼠标主题\" class=\"headerlink\" title=\"安装鼠标主题\"></a>安装鼠标主题</h2><p><a href=\"http://pan.baidu.com/s/1jHuJTZ4\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">点击此处</a>下载鼠标主题<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#解压鼠标主题到系统目录</span></span><br><span class=\"line\">tar zxvf OpenZone.tar.gz -C /usr/share/icons</span><br></pre></td></tr></table></figure><p></p><p>现在我们的主题就全部安装完成了，剩下的只需要在系统设置里的主题里设置一下就可以了，在主题设置里，下载Numix桌面主题，下面是我的配置：<br><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160225214812.png\" alt=\"\"></p><h1 id=\"VIM配置\"><a href=\"#VIM配置\" class=\"headerlink\" title=\"VIM配置\"></a>VIM配置</h1><h2 id=\"命令别名\"><a href=\"#命令别名\" class=\"headerlink\" title=\"命令别名\"></a>命令别名</h2><p>设置命令vi为vim<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ～/.bashrc</span><br><span class=\"line\"><span class=\"comment\">#添加一行：</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> vi=<span class=\"string\">'vim'</span></span><br><span class=\"line\"><span class=\"comment\">#编辑vimrc文件</span></span><br><span class=\"line\">vi ~/.vimrc</span><br></pre></td></tr></table></figure><p></p><p>在.vimrc中写入以下内容</p><blockquote><p>syntax on<br>set tabstop=4<br>filetype on<br>set nocp<br>set mouse=a<br>set selection=exclusive<br>set selectmode=mouse,key<br>set showcmd<br>set laststatus=2<br>set ruler<br>set ignorecase<br>set hlsearch<br>set incsearch<br>filetype plugin on<br>filetype plugin indent on<br>set completeopt=longest,menu<br>set wildmenu<br>autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete<br>autocmd FileType python set omnifunc=pythoncomplete#Complete<br>autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS<br>autocmd FileType html set omnifunc=htmlcomplete#CompleteTags<br>autocmd FileType css set omnifunc=csscomplete#CompleteCSS<br>autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags<br>autocmd FileType java set omnifunc=javacomplete#Complet</p></blockquote><p>为了让我们在使用<code>sudo vi</code>命令时的vi也能调用vim，我们还需要在<strong>.bashrc</strong>里添加一个命令别名：<code>alias sudo=&#39;sudo &#39;</code>，注意，后面的sudo之后有一个空格</p><h1 id=\"lightdm美化\"><a href=\"#lightdm美化\" class=\"headerlink\" title=\"lightdm美化\"></a>lightdm美化</h1><p>安装lightdm-gtk-greeter-settings<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S lightdm-gtk-greeter-settings</span><br></pre></td></tr></table></figure><p></p><p>打开lightdm-gtk-greeter-settings，可以配置登陆界面的背景图片，头像等。</p><h1 id=\"其他配置\"><a href=\"#其他配置\" class=\"headerlink\" title=\"其他配置\"></a>其他配置</h1><p>安装docky:<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S docky</span><br></pre></td></tr></table></figure><p></p><p>最后换个壁纸，按照自己的喜好配置一下，就可以了。<br>送上壁纸:<br><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamonu2oPC.jpg\" alt=\"\"></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160214155947.png\" alt=\"\"><br>经过前一篇的步骤，我们完成了常用的应用软件的安装，可以说现在arch已经完全不影响使用了，但是，我们都希望自己的系统环境比较美观，所以，这一篇，我们来对系统进行美化，具体包括主题安装，扩展设置，字体配置等等。<br>","more":"</p><hr><h1 id=\"字体配置\"><a href=\"#字体配置\" class=\"headerlink\" title=\"字体配置\"></a>字体配置</h1><h2 id=\"字体安装\"><a href=\"#字体安装\" class=\"headerlink\" title=\"字体安装\"></a>字体安装</h2><p>我们之前安装了文泉驿字体，我平时使用的还有ubuntu字体，所以我们再安装一个ubuntu字体包：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S ttf-ubuntu-font-family</span><br></pre></td></tr></table></figure><p></p><h2 id=\"字体配置-1\"><a href=\"#字体配置-1\" class=\"headerlink\" title=\"字体配置\"></a>字体配置</h2><p>现在即使切换到中文，我们也会发现整个系统的字体发虚，所以我们需要对系统的字体配置作一些改动：<br><a href=\"http://pan.baidu.com/s/1bnYDy8J\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">点击此处</a>下载字体配置文件。<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#备份系统原来的字体配置文件</span></span><br><span class=\"line\">$ sudo mv /etc/fonts /etc/fonts.bak</span><br><span class=\"line\"><span class=\"comment\">#将下载的字体配置解压过去</span></span><br><span class=\"line\">$ sudo tar zxvf fonts.tar.gz -C /etc/</span><br></pre></td></tr></table></figure><p></p><h2 id=\"安装gnome优化工具\"><a href=\"#安装gnome优化工具\" class=\"headerlink\" title=\"安装gnome优化工具\"></a>安装gnome优化工具</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S gnome-tweak-tool</span><br></pre></td></tr></table></figure><p>打开优化工具，将字体设置为自己喜欢的，下面是我的配置：<br><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160225212027.png\" alt=\"\"><br>在系统的字体设置里面也使用同样的配置。</p><h1 id=\"主题配置\"><a href=\"#主题配置\" class=\"headerlink\" title=\"主题配置\"></a>主题配置</h1><h2 id=\"安装numix图标\"><a href=\"#安装numix图标\" class=\"headerlink\" title=\"安装numix图标\"></a>安装numix图标</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S numix-circle-icon-theme-git</span><br></pre></td></tr></table></figure><h2 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h2><p><a href=\"http://pan.baidu.com/s/1hrwjM3y\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">点击此处</a>下载Yosemite主题<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将主题解压到系统目录</span></span><br><span class=\"line\">$ sudo tar zxvf Yosemite Light.0.3.tar.gz -C /usr/share/themes</span><br></pre></td></tr></table></figure><p></p><h2 id=\"安装鼠标主题\"><a href=\"#安装鼠标主题\" class=\"headerlink\" title=\"安装鼠标主题\"></a>安装鼠标主题</h2><p><a href=\"http://pan.baidu.com/s/1jHuJTZ4\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">点击此处</a>下载鼠标主题<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#解压鼠标主题到系统目录</span></span><br><span class=\"line\">tar zxvf OpenZone.tar.gz -C /usr/share/icons</span><br></pre></td></tr></table></figure><p></p><p>现在我们的主题就全部安装完成了，剩下的只需要在系统设置里的主题里设置一下就可以了，在主题设置里，下载Numix桌面主题，下面是我的配置：<br><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamon%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160225214812.png\" alt=\"\"></p><h1 id=\"VIM配置\"><a href=\"#VIM配置\" class=\"headerlink\" title=\"VIM配置\"></a>VIM配置</h1><h2 id=\"命令别名\"><a href=\"#命令别名\" class=\"headerlink\" title=\"命令别名\"></a>命令别名</h2><p>设置命令vi为vim<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ～/.bashrc</span><br><span class=\"line\"><span class=\"comment\">#添加一行：</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> vi=<span class=\"string\">'vim'</span></span><br><span class=\"line\"><span class=\"comment\">#编辑vimrc文件</span></span><br><span class=\"line\">vi ~/.vimrc</span><br></pre></td></tr></table></figure><p></p><p>在.vimrc中写入以下内容</p><blockquote><p>syntax on<br>set tabstop=4<br>filetype on<br>set nocp<br>set mouse=a<br>set selection=exclusive<br>set selectmode=mouse,key<br>set showcmd<br>set laststatus=2<br>set ruler<br>set ignorecase<br>set hlsearch<br>set incsearch<br>filetype plugin on<br>filetype plugin indent on<br>set completeopt=longest,menu<br>set wildmenu<br>autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete<br>autocmd FileType python set omnifunc=pythoncomplete#Complete<br>autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS<br>autocmd FileType html set omnifunc=htmlcomplete#CompleteTags<br>autocmd FileType css set omnifunc=csscomplete#CompleteCSS<br>autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags<br>autocmd FileType java set omnifunc=javacomplete#Complet</p></blockquote><p>为了让我们在使用<code>sudo vi</code>命令时的vi也能调用vim，我们还需要在<strong>.bashrc</strong>里添加一个命令别名：<code>alias sudo=&#39;sudo &#39;</code>，注意，后面的sudo之后有一个空格</p><h1 id=\"lightdm美化\"><a href=\"#lightdm美化\" class=\"headerlink\" title=\"lightdm美化\"></a>lightdm美化</h1><p>安装lightdm-gtk-greeter-settings<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S lightdm-gtk-greeter-settings</span><br></pre></td></tr></table></figure><p></p><p>打开lightdm-gtk-greeter-settings，可以配置登陆界面的背景图片，头像等。</p><h1 id=\"其他配置\"><a href=\"#其他配置\" class=\"headerlink\" title=\"其他配置\"></a>其他配置</h1><p>安装docky:<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S docky</span><br></pre></td></tr></table></figure><p></p><p>最后换个壁纸，按照自己的喜好配置一下，就可以了。<br>送上壁纸:<br><img src=\"http://7xqo9u.com1.z0.glb.clouddn.com/arch%20cinnamonu2oPC.jpg\" alt=\"\"></p><!-- rebuild by neat -->"},{"title":"Linux文件压缩工具","author":"Evobot","image":"http://p5qynomrl.bkt.clouddn.com/1523810699086ylm0327m.png?imageslim","abbrlink":"701184ad","date":"2018-04-14T14:17:14.000Z","_content":"\n\n\nLinux中常见的压缩文件有**.gz**、**.bz2**、**.xz**、**tar.gz**、**.tar.bz2**、**.tar.xz**、**.zip**等等，对于服务器来说，对文件进行压缩，能够节省带宽资源，所以在Linux命令行下，也有相对应的命令工具来对文件进行压缩和解压缩操作。\n\n<!--more-->\n\n---\n\n# **gzip**压缩工具\n\n## 压缩操作\n\n- `gzip`压缩工具压缩后的文件后缀名为`.gz`，对一个文件进行压缩操作时，可以使用命令`gzip [/path/to/filename]`：\n\n```bash\n[root@evobot compress]# du -sh conf.txt \n5.0M\tconf.txt\n[root@evobot compress]# gzip conf.txt \n[root@evobot compress]# ls\nconf.txt.gz\n[root@evobot compress]# du -sh conf.txt.gz \n1.3M\tconf.txt.gz\n```\n\n- `gzip`在压缩时可以调整压缩级别，一共有9个级别，默认为`6`级别，压缩率最高的时`9`，相应的压缩率越高，越耗费CPU资源：\n\n```bash\n[root@evobot compress]# gzip -9 conf.txt \n[root@evobot compress]# du -sh conf.txt.gz \n1.3M\tconf.txt.gz\n[root@evobot compress]# gzip -d conf.txt.gz \n[root@evobot compress]# gzip -1 conf.txt \n[root@evobot compress]# du -sh conf.txt.gz \n1.5M\tconf.txt.gz\n```\n\n- 默认直接使用`gzip`压缩文件时，不会保留源文件，也不能指定压缩文件的名字，想要保留源文件并指定新文件名，可以使用`gzip -c`选项，命令用法为`gzip -c [filename] > [/path/to/new.gz]`:\n\n```bash\n[root@evobot compress]# gzip -c conf.txt > /tmp/conf.gz\n[root@evobot compress]# ls /tmp/\ncompress  conf.gz\n[root@evobot compress]# ls\nconf.txt\n```\n\n> gzip不可以对目录进行压缩。\n\n## 解压操作\n\n- 解压操作则使用`gzip -d`选项：\n\n```bash\n[root@evobot compress]# gzip -d conf.txt.gz \n[root@evobot compress]# ls\nconf.txt\n[root@evobot compress]# du -sh conf.txt \n5.0M\tconf.txt\n```\n\n- `.gz`压缩包也可以使用`gunzip`命令进行解压缩：\n\n```bash\n[root@evobot compress]# gunzip conf.txt.gz \n[root@evobot compress]# ls -lh conf.txt \n-rw-r--r-- 1 root root 5.0M 4月  14 22:31 conf.txt\n```\n\n- `file`命令可以查看文件的格式，而使用命令`zcat`可以查看压缩包里的文档内容并在屏幕输出文件内容：\n\n```bash\n[root@evobot compress]# file conf.txt.gz \nconf.txt.gz: gzip compressed data, was \"conf.txt\", from Unix, last modified: Sat Apr 14 22:31:15 2018\n```\n\n- 与压缩相同，在解压缩的时候，使用`gzip -d -c`选项同样也可以保留压缩包，并将解压出的文件重命名:\n\n```bash\n[root@evobot compress]# gzip -d -c /tmp/conf.gz > conf2.txt\n[root@evobot compress]# ls\nconf2.txt  conf.txt\n[root@evobot compress]# ls /tmp/\ncompress  conf.gz\n```\n\n---\n\n# **bzip2**压缩工具\n\n- `bzip2`相比`gzip`压缩率更高，压缩的后缀名是`bz2`，同样不支持压缩目录，基本操作基本与`gzip`加压缩相同。\n\n\n- 使用`bzip2 [filename]`进行压缩操作，选项`-d`进行解压操作，压缩解压缩时也可以使用`-c`选项，作用与`gzip`的命令选项作用相同，也可以使用`-[num]`指定压缩级别：\n\n```bash\n[root@evobot compress]# bzip2 conf2.txt \n[root@evobot compress]# ls\nconf2.txt.bz2  conf.txt\n\n[root@evobot compress]# bzip2 -d conf2.txt.bz2 \n[root@evobot compress]# ls\nconf2.txt  conf.txt\n\n[root@evobot compress]# bzip2 -c conf.txt > /tmp/bzip2_conf.bz2\n[root@evobot compress]# ls\nconf2.txt  conf.txt\n[root@evobot compress]# ls -lh /tmp/bzip2_conf.bz2 \n-rw-r--r-- 1 root root 528K 4月  14 23:06 /tmp/bzip2_conf.bz2\n\n[root@evobot compress]# bzip2 -d -c /tmp/bzip2_conf.bz2 > conf3.txt\n[root@evobot compress]# ls\nconf2.txt  conf3.txt  conf.txt\n\n[root@evobot compress]# bzip2 -9 conf.txt \n[root@evobot compress]# ls -lh conf\nconf2.txt     conf3.txt     conf.txt.bz2  \n[root@evobot compress]# ls -lh conf.txt.bz2 \n-rw-r--r-- 1 root root 528K 4月  14 22:31 conf.txt.bz2\n\n[root@evobot compress]# bzip2 -1 conf2.txt \n[root@evobot compress]# ls -lh conf2.txt.bz2 \n-rw-r--r-- 1 root root 1.3M 4月  14 22:55 conf2.txt.bz2\n\n```\n\n- 同样的，`bz2`压缩包也有一个`bzcat`命令，可以用来查看压缩包内的文件内容。\n\n---\n\n# **xz**压缩工具\n\n- `xz`压缩工具的压缩率相比其他两个更高，后缀名为`xz`，同样也不能够压缩目录，并且基本的命令操作也与`gzip`、`bzip2`相同。\n\n```bash\n[root@evobot compress]# xz conf.txt \n[root@evobot compress]# ls -lh\n总用量 68K\n-rw-r--r-- 1 root root 61K 4月  14 22:31 conf.txt.xz\n\n[root@evobot compress]# xz -d conf.txt.xz \n[root@evobot compress]# ls -lh\n总用量 5.0M\n-rw-r--r-- 1 root root 5.0M 4月  14 22:31 conf.txt\n\n[root@evobot compress]# xz -c conf.txt > /tmp/xz_conf.xz\n[root@evobot compress]# ls -lh /tmp/\n总用量 76K\ndrwxrwxr-x 2 lux  lux  4.0K 4月  14 23:25 compress\n-rw-r--r-- 1 root root  61K 4月  14 23:26 xz_conf.xz\n\n[root@evobot compress]# xz -d -c /tmp/xz_conf.xz > conf2.txt\n[root@evobot compress]# ls -lh\n总用量 10M\n-rw-r--r-- 1 root root 5.0M 4月  14 23:26 conf2.txt\n-rw-r--r-- 1 root root 5.0M 4月  14 22:31 conf.txt\n[root@evobot compress]# ls -lh /tmp/\n总用量 76K\ndrwxrwxr-x 2 lux  lux  4.0K 4月  14 23:26 compress\n-rw-r--r-- 1 root root  61K 4月  14 23:26 xz_conf.xz\n\n[root@evobot compress]# xz -9 conf.txt \n[root@evobot compress]# ls -lh\n总用量 5.1M\n-rw-r--r-- 1 root root 5.0M 4月  14 23:26 conf2.txt\n-rw-r--r-- 1 root root  61K 4月  14 22:31 conf.txt.xz\n\n[root@evobot compress]# xz -1 conf2.txt\n[root@evobot compress]# ls -lh\n总用量 140K\n-rw-r--r-- 1 root root 67K 4月  14 23:26 conf2.txt.xz\n-rw-r--r-- 1 root root 61K 4月  14 22:31 conf.txt.xz\n```\n\n- 解压`.xz`压缩包还可以使用`unxz [filename]`，查看压缩包内的文件，则使用`xzcat`命令。\n\n```bash\n[root@evobot compress]# unxz conf2.txt.xz \n[root@evobot compress]# ls -lh\n总用量 5.1M\n-rw-r--r-- 1 root root 5.0M 4月  14 23:26 conf2.txt\n-rw-r--r-- 1 root root  61K 4月  14 22:31 conf.txt.xz\n```\n\n---\n\n","source":"_posts/Linux文件压缩工具.md","raw":"---\ntitle: Linux文件压缩工具\nauthor: Evobot\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\nimage: 'http://p5qynomrl.bkt.clouddn.com/1523810699086ylm0327m.png?imageslim'\nabbrlink: 701184ad\ndate: 2018-04-14 22:17:14\n---\n\n\n\nLinux中常见的压缩文件有**.gz**、**.bz2**、**.xz**、**tar.gz**、**.tar.bz2**、**.tar.xz**、**.zip**等等，对于服务器来说，对文件进行压缩，能够节省带宽资源，所以在Linux命令行下，也有相对应的命令工具来对文件进行压缩和解压缩操作。\n\n<!--more-->\n\n---\n\n# **gzip**压缩工具\n\n## 压缩操作\n\n- `gzip`压缩工具压缩后的文件后缀名为`.gz`，对一个文件进行压缩操作时，可以使用命令`gzip [/path/to/filename]`：\n\n```bash\n[root@evobot compress]# du -sh conf.txt \n5.0M\tconf.txt\n[root@evobot compress]# gzip conf.txt \n[root@evobot compress]# ls\nconf.txt.gz\n[root@evobot compress]# du -sh conf.txt.gz \n1.3M\tconf.txt.gz\n```\n\n- `gzip`在压缩时可以调整压缩级别，一共有9个级别，默认为`6`级别，压缩率最高的时`9`，相应的压缩率越高，越耗费CPU资源：\n\n```bash\n[root@evobot compress]# gzip -9 conf.txt \n[root@evobot compress]# du -sh conf.txt.gz \n1.3M\tconf.txt.gz\n[root@evobot compress]# gzip -d conf.txt.gz \n[root@evobot compress]# gzip -1 conf.txt \n[root@evobot compress]# du -sh conf.txt.gz \n1.5M\tconf.txt.gz\n```\n\n- 默认直接使用`gzip`压缩文件时，不会保留源文件，也不能指定压缩文件的名字，想要保留源文件并指定新文件名，可以使用`gzip -c`选项，命令用法为`gzip -c [filename] > [/path/to/new.gz]`:\n\n```bash\n[root@evobot compress]# gzip -c conf.txt > /tmp/conf.gz\n[root@evobot compress]# ls /tmp/\ncompress  conf.gz\n[root@evobot compress]# ls\nconf.txt\n```\n\n> gzip不可以对目录进行压缩。\n\n## 解压操作\n\n- 解压操作则使用`gzip -d`选项：\n\n```bash\n[root@evobot compress]# gzip -d conf.txt.gz \n[root@evobot compress]# ls\nconf.txt\n[root@evobot compress]# du -sh conf.txt \n5.0M\tconf.txt\n```\n\n- `.gz`压缩包也可以使用`gunzip`命令进行解压缩：\n\n```bash\n[root@evobot compress]# gunzip conf.txt.gz \n[root@evobot compress]# ls -lh conf.txt \n-rw-r--r-- 1 root root 5.0M 4月  14 22:31 conf.txt\n```\n\n- `file`命令可以查看文件的格式，而使用命令`zcat`可以查看压缩包里的文档内容并在屏幕输出文件内容：\n\n```bash\n[root@evobot compress]# file conf.txt.gz \nconf.txt.gz: gzip compressed data, was \"conf.txt\", from Unix, last modified: Sat Apr 14 22:31:15 2018\n```\n\n- 与压缩相同，在解压缩的时候，使用`gzip -d -c`选项同样也可以保留压缩包，并将解压出的文件重命名:\n\n```bash\n[root@evobot compress]# gzip -d -c /tmp/conf.gz > conf2.txt\n[root@evobot compress]# ls\nconf2.txt  conf.txt\n[root@evobot compress]# ls /tmp/\ncompress  conf.gz\n```\n\n---\n\n# **bzip2**压缩工具\n\n- `bzip2`相比`gzip`压缩率更高，压缩的后缀名是`bz2`，同样不支持压缩目录，基本操作基本与`gzip`加压缩相同。\n\n\n- 使用`bzip2 [filename]`进行压缩操作，选项`-d`进行解压操作，压缩解压缩时也可以使用`-c`选项，作用与`gzip`的命令选项作用相同，也可以使用`-[num]`指定压缩级别：\n\n```bash\n[root@evobot compress]# bzip2 conf2.txt \n[root@evobot compress]# ls\nconf2.txt.bz2  conf.txt\n\n[root@evobot compress]# bzip2 -d conf2.txt.bz2 \n[root@evobot compress]# ls\nconf2.txt  conf.txt\n\n[root@evobot compress]# bzip2 -c conf.txt > /tmp/bzip2_conf.bz2\n[root@evobot compress]# ls\nconf2.txt  conf.txt\n[root@evobot compress]# ls -lh /tmp/bzip2_conf.bz2 \n-rw-r--r-- 1 root root 528K 4月  14 23:06 /tmp/bzip2_conf.bz2\n\n[root@evobot compress]# bzip2 -d -c /tmp/bzip2_conf.bz2 > conf3.txt\n[root@evobot compress]# ls\nconf2.txt  conf3.txt  conf.txt\n\n[root@evobot compress]# bzip2 -9 conf.txt \n[root@evobot compress]# ls -lh conf\nconf2.txt     conf3.txt     conf.txt.bz2  \n[root@evobot compress]# ls -lh conf.txt.bz2 \n-rw-r--r-- 1 root root 528K 4月  14 22:31 conf.txt.bz2\n\n[root@evobot compress]# bzip2 -1 conf2.txt \n[root@evobot compress]# ls -lh conf2.txt.bz2 \n-rw-r--r-- 1 root root 1.3M 4月  14 22:55 conf2.txt.bz2\n\n```\n\n- 同样的，`bz2`压缩包也有一个`bzcat`命令，可以用来查看压缩包内的文件内容。\n\n---\n\n# **xz**压缩工具\n\n- `xz`压缩工具的压缩率相比其他两个更高，后缀名为`xz`，同样也不能够压缩目录，并且基本的命令操作也与`gzip`、`bzip2`相同。\n\n```bash\n[root@evobot compress]# xz conf.txt \n[root@evobot compress]# ls -lh\n总用量 68K\n-rw-r--r-- 1 root root 61K 4月  14 22:31 conf.txt.xz\n\n[root@evobot compress]# xz -d conf.txt.xz \n[root@evobot compress]# ls -lh\n总用量 5.0M\n-rw-r--r-- 1 root root 5.0M 4月  14 22:31 conf.txt\n\n[root@evobot compress]# xz -c conf.txt > /tmp/xz_conf.xz\n[root@evobot compress]# ls -lh /tmp/\n总用量 76K\ndrwxrwxr-x 2 lux  lux  4.0K 4月  14 23:25 compress\n-rw-r--r-- 1 root root  61K 4月  14 23:26 xz_conf.xz\n\n[root@evobot compress]# xz -d -c /tmp/xz_conf.xz > conf2.txt\n[root@evobot compress]# ls -lh\n总用量 10M\n-rw-r--r-- 1 root root 5.0M 4月  14 23:26 conf2.txt\n-rw-r--r-- 1 root root 5.0M 4月  14 22:31 conf.txt\n[root@evobot compress]# ls -lh /tmp/\n总用量 76K\ndrwxrwxr-x 2 lux  lux  4.0K 4月  14 23:26 compress\n-rw-r--r-- 1 root root  61K 4月  14 23:26 xz_conf.xz\n\n[root@evobot compress]# xz -9 conf.txt \n[root@evobot compress]# ls -lh\n总用量 5.1M\n-rw-r--r-- 1 root root 5.0M 4月  14 23:26 conf2.txt\n-rw-r--r-- 1 root root  61K 4月  14 22:31 conf.txt.xz\n\n[root@evobot compress]# xz -1 conf2.txt\n[root@evobot compress]# ls -lh\n总用量 140K\n-rw-r--r-- 1 root root 67K 4月  14 23:26 conf2.txt.xz\n-rw-r--r-- 1 root root 61K 4月  14 22:31 conf.txt.xz\n```\n\n- 解压`.xz`压缩包还可以使用`unxz [filename]`，查看压缩包内的文件，则使用`xzcat`命令。\n\n```bash\n[root@evobot compress]# unxz conf2.txt.xz \n[root@evobot compress]# ls -lh\n总用量 5.1M\n-rw-r--r-- 1 root root 5.0M 4月  14 23:26 conf2.txt\n-rw-r--r-- 1 root root  61K 4月  14 22:31 conf.txt.xz\n```\n\n---\n\n","slug":"Linux文件压缩工具","published":1,"updated":"2018-06-02T13:01:29.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazf3004gu1jxjuppekw4","content":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p>Linux中常见的压缩文件有<strong>.gz</strong>、<strong>.bz2</strong>、<strong>.xz</strong>、<strong>tar.gz</strong>、<strong>.tar.bz2</strong>、<strong>.tar.xz</strong>、<strong>.zip</strong>等等，对于服务器来说，对文件进行压缩，能够节省带宽资源，所以在Linux命令行下，也有相对应的命令工具来对文件进行压缩和解压缩操作。</p><a id=\"more\"></a><hr><h1 id=\"gzip压缩工具\"><a href=\"#gzip压缩工具\" class=\"headerlink\" title=\"gzip压缩工具\"></a><strong>gzip</strong>压缩工具</h1><h2 id=\"压缩操作\"><a href=\"#压缩操作\" class=\"headerlink\" title=\"压缩操作\"></a>压缩操作</h2><ul><li><code>gzip</code>压缩工具压缩后的文件后缀名为<code>.gz</code>，对一个文件进行压缩操作时，可以使用命令<code>gzip [/path/to/filename]</code>：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># du -sh conf.txt </span></span><br><span class=\"line\">5.0M\tconf.txt</span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># gzip conf.txt </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls</span></span><br><span class=\"line\">conf.txt.gz</span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># du -sh conf.txt.gz </span></span><br><span class=\"line\">1.3M\tconf.txt.gz</span><br></pre></td></tr></table></figure><ul><li><code>gzip</code>在压缩时可以调整压缩级别，一共有9个级别，默认为<code>6</code>级别，压缩率最高的时<code>9</code>，相应的压缩率越高，越耗费CPU资源：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># gzip -9 conf.txt </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># du -sh conf.txt.gz </span></span><br><span class=\"line\">1.3M\tconf.txt.gz</span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># gzip -d conf.txt.gz </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># gzip -1 conf.txt </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># du -sh conf.txt.gz </span></span><br><span class=\"line\">1.5M\tconf.txt.gz</span><br></pre></td></tr></table></figure><ul><li>默认直接使用<code>gzip</code>压缩文件时，不会保留源文件，也不能指定压缩文件的名字，想要保留源文件并指定新文件名，可以使用<code>gzip -c</code>选项，命令用法为<code>gzip -c [filename] &gt; [/path/to/new.gz]</code>:</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># gzip -c conf.txt &gt; /tmp/conf.gz</span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls /tmp/</span></span><br><span class=\"line\">compress  conf.gz</span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls</span></span><br><span class=\"line\">conf.txt</span><br></pre></td></tr></table></figure><blockquote><p>gzip不可以对目录进行压缩。</p></blockquote><h2 id=\"解压操作\"><a href=\"#解压操作\" class=\"headerlink\" title=\"解压操作\"></a>解压操作</h2><ul><li>解压操作则使用<code>gzip -d</code>选项：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># gzip -d conf.txt.gz </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls</span></span><br><span class=\"line\">conf.txt</span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># du -sh conf.txt </span></span><br><span class=\"line\">5.0M\tconf.txt</span><br></pre></td></tr></table></figure><ul><li><code>.gz</code>压缩包也可以使用<code>gunzip</code>命令进行解压缩：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># gunzip conf.txt.gz </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh conf.txt </span></span><br><span class=\"line\">-rw-r--r-- 1 root root 5.0M 4月  14 22:31 conf.txt</span><br></pre></td></tr></table></figure><ul><li><code>file</code>命令可以查看文件的格式，而使用命令<code>zcat</code>可以查看压缩包里的文档内容并在屏幕输出文件内容：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># file conf.txt.gz </span></span><br><span class=\"line\">conf.txt.gz: gzip compressed data, was <span class=\"string\">\"conf.txt\"</span>, from Unix, last modified: Sat Apr 14 22:31:15 2018</span><br></pre></td></tr></table></figure><ul><li>与压缩相同，在解压缩的时候，使用<code>gzip -d -c</code>选项同样也可以保留压缩包，并将解压出的文件重命名:</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># gzip -d -c /tmp/conf.gz &gt; conf2.txt</span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls</span></span><br><span class=\"line\">conf2.txt  conf.txt</span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls /tmp/</span></span><br><span class=\"line\">compress  conf.gz</span><br></pre></td></tr></table></figure><hr><h1 id=\"bzip2压缩工具\"><a href=\"#bzip2压缩工具\" class=\"headerlink\" title=\"bzip2压缩工具\"></a><strong>bzip2</strong>压缩工具</h1><ul><li><code>bzip2</code>相比<code>gzip</code>压缩率更高，压缩的后缀名是<code>bz2</code>，同样不支持压缩目录，基本操作基本与<code>gzip</code>加压缩相同。</li></ul><ul><li>使用<code>bzip2 [filename]</code>进行压缩操作，选项<code>-d</code>进行解压操作，压缩解压缩时也可以使用<code>-c</code>选项，作用与<code>gzip</code>的命令选项作用相同，也可以使用<code>-[num]</code>指定压缩级别：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># bzip2 conf2.txt </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls</span></span><br><span class=\"line\">conf2.txt.bz2  conf.txt</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># bzip2 -d conf2.txt.bz2 </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls</span></span><br><span class=\"line\">conf2.txt  conf.txt</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># bzip2 -c conf.txt &gt; /tmp/bzip2_conf.bz2</span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls</span></span><br><span class=\"line\">conf2.txt  conf.txt</span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh /tmp/bzip2_conf.bz2 </span></span><br><span class=\"line\">-rw-r--r-- 1 root root 528K 4月  14 23:06 /tmp/bzip2_conf.bz2</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># bzip2 -d -c /tmp/bzip2_conf.bz2 &gt; conf3.txt</span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls</span></span><br><span class=\"line\">conf2.txt  conf3.txt  conf.txt</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># bzip2 -9 conf.txt </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh conf</span></span><br><span class=\"line\">conf2.txt     conf3.txt     conf.txt.bz2  </span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh conf.txt.bz2 </span></span><br><span class=\"line\">-rw-r--r-- 1 root root 528K 4月  14 22:31 conf.txt.bz2</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># bzip2 -1 conf2.txt </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh conf2.txt.bz2 </span></span><br><span class=\"line\">-rw-r--r-- 1 root root 1.3M 4月  14 22:55 conf2.txt.bz2</span><br></pre></td></tr></table></figure><ul><li>同样的，<code>bz2</code>压缩包也有一个<code>bzcat</code>命令，可以用来查看压缩包内的文件内容。</li></ul><hr><h1 id=\"xz压缩工具\"><a href=\"#xz压缩工具\" class=\"headerlink\" title=\"xz压缩工具\"></a><strong>xz</strong>压缩工具</h1><ul><li><code>xz</code>压缩工具的压缩率相比其他两个更高，后缀名为<code>xz</code>，同样也不能够压缩目录，并且基本的命令操作也与<code>gzip</code>、<code>bzip2</code>相同。</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># xz conf.txt </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh</span></span><br><span class=\"line\">总用量 68K</span><br><span class=\"line\">-rw-r--r-- 1 root root 61K 4月  14 22:31 conf.txt.xz</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># xz -d conf.txt.xz </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh</span></span><br><span class=\"line\">总用量 5.0M</span><br><span class=\"line\">-rw-r--r-- 1 root root 5.0M 4月  14 22:31 conf.txt</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># xz -c conf.txt &gt; /tmp/xz_conf.xz</span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh /tmp/</span></span><br><span class=\"line\">总用量 76K</span><br><span class=\"line\">drwxrwxr-x 2 lux  lux  4.0K 4月  14 23:25 compress</span><br><span class=\"line\">-rw-r--r-- 1 root root  61K 4月  14 23:26 xz_conf.xz</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># xz -d -c /tmp/xz_conf.xz &gt; conf2.txt</span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh</span></span><br><span class=\"line\">总用量 10M</span><br><span class=\"line\">-rw-r--r-- 1 root root 5.0M 4月  14 23:26 conf2.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root 5.0M 4月  14 22:31 conf.txt</span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh /tmp/</span></span><br><span class=\"line\">总用量 76K</span><br><span class=\"line\">drwxrwxr-x 2 lux  lux  4.0K 4月  14 23:26 compress</span><br><span class=\"line\">-rw-r--r-- 1 root root  61K 4月  14 23:26 xz_conf.xz</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># xz -9 conf.txt </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh</span></span><br><span class=\"line\">总用量 5.1M</span><br><span class=\"line\">-rw-r--r-- 1 root root 5.0M 4月  14 23:26 conf2.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root  61K 4月  14 22:31 conf.txt.xz</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># xz -1 conf2.txt</span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh</span></span><br><span class=\"line\">总用量 140K</span><br><span class=\"line\">-rw-r--r-- 1 root root 67K 4月  14 23:26 conf2.txt.xz</span><br><span class=\"line\">-rw-r--r-- 1 root root 61K 4月  14 22:31 conf.txt.xz</span><br></pre></td></tr></table></figure><ul><li>解压<code>.xz</code>压缩包还可以使用<code>unxz [filename]</code>，查看压缩包内的文件，则使用<code>xzcat</code>命令。</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># unxz conf2.txt.xz </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh</span></span><br><span class=\"line\">总用量 5.1M</span><br><span class=\"line\">-rw-r--r-- 1 root root 5.0M 4月  14 23:26 conf2.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root  61K 4月  14 22:31 conf.txt.xz</span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p>Linux中常见的压缩文件有<strong>.gz</strong>、<strong>.bz2</strong>、<strong>.xz</strong>、<strong>tar.gz</strong>、<strong>.tar.bz2</strong>、<strong>.tar.xz</strong>、<strong>.zip</strong>等等，对于服务器来说，对文件进行压缩，能够节省带宽资源，所以在Linux命令行下，也有相对应的命令工具来对文件进行压缩和解压缩操作。</p>","more":"<hr><h1 id=\"gzip压缩工具\"><a href=\"#gzip压缩工具\" class=\"headerlink\" title=\"gzip压缩工具\"></a><strong>gzip</strong>压缩工具</h1><h2 id=\"压缩操作\"><a href=\"#压缩操作\" class=\"headerlink\" title=\"压缩操作\"></a>压缩操作</h2><ul><li><code>gzip</code>压缩工具压缩后的文件后缀名为<code>.gz</code>，对一个文件进行压缩操作时，可以使用命令<code>gzip [/path/to/filename]</code>：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># du -sh conf.txt </span></span><br><span class=\"line\">5.0M\tconf.txt</span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># gzip conf.txt </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls</span></span><br><span class=\"line\">conf.txt.gz</span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># du -sh conf.txt.gz </span></span><br><span class=\"line\">1.3M\tconf.txt.gz</span><br></pre></td></tr></table></figure><ul><li><code>gzip</code>在压缩时可以调整压缩级别，一共有9个级别，默认为<code>6</code>级别，压缩率最高的时<code>9</code>，相应的压缩率越高，越耗费CPU资源：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># gzip -9 conf.txt </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># du -sh conf.txt.gz </span></span><br><span class=\"line\">1.3M\tconf.txt.gz</span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># gzip -d conf.txt.gz </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># gzip -1 conf.txt </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># du -sh conf.txt.gz </span></span><br><span class=\"line\">1.5M\tconf.txt.gz</span><br></pre></td></tr></table></figure><ul><li>默认直接使用<code>gzip</code>压缩文件时，不会保留源文件，也不能指定压缩文件的名字，想要保留源文件并指定新文件名，可以使用<code>gzip -c</code>选项，命令用法为<code>gzip -c [filename] &gt; [/path/to/new.gz]</code>:</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># gzip -c conf.txt &gt; /tmp/conf.gz</span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls /tmp/</span></span><br><span class=\"line\">compress  conf.gz</span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls</span></span><br><span class=\"line\">conf.txt</span><br></pre></td></tr></table></figure><blockquote><p>gzip不可以对目录进行压缩。</p></blockquote><h2 id=\"解压操作\"><a href=\"#解压操作\" class=\"headerlink\" title=\"解压操作\"></a>解压操作</h2><ul><li>解压操作则使用<code>gzip -d</code>选项：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># gzip -d conf.txt.gz </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls</span></span><br><span class=\"line\">conf.txt</span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># du -sh conf.txt </span></span><br><span class=\"line\">5.0M\tconf.txt</span><br></pre></td></tr></table></figure><ul><li><code>.gz</code>压缩包也可以使用<code>gunzip</code>命令进行解压缩：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># gunzip conf.txt.gz </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh conf.txt </span></span><br><span class=\"line\">-rw-r--r-- 1 root root 5.0M 4月  14 22:31 conf.txt</span><br></pre></td></tr></table></figure><ul><li><code>file</code>命令可以查看文件的格式，而使用命令<code>zcat</code>可以查看压缩包里的文档内容并在屏幕输出文件内容：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># file conf.txt.gz </span></span><br><span class=\"line\">conf.txt.gz: gzip compressed data, was <span class=\"string\">\"conf.txt\"</span>, from Unix, last modified: Sat Apr 14 22:31:15 2018</span><br></pre></td></tr></table></figure><ul><li>与压缩相同，在解压缩的时候，使用<code>gzip -d -c</code>选项同样也可以保留压缩包，并将解压出的文件重命名:</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># gzip -d -c /tmp/conf.gz &gt; conf2.txt</span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls</span></span><br><span class=\"line\">conf2.txt  conf.txt</span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls /tmp/</span></span><br><span class=\"line\">compress  conf.gz</span><br></pre></td></tr></table></figure><hr><h1 id=\"bzip2压缩工具\"><a href=\"#bzip2压缩工具\" class=\"headerlink\" title=\"bzip2压缩工具\"></a><strong>bzip2</strong>压缩工具</h1><ul><li><code>bzip2</code>相比<code>gzip</code>压缩率更高，压缩的后缀名是<code>bz2</code>，同样不支持压缩目录，基本操作基本与<code>gzip</code>加压缩相同。</li></ul><ul><li>使用<code>bzip2 [filename]</code>进行压缩操作，选项<code>-d</code>进行解压操作，压缩解压缩时也可以使用<code>-c</code>选项，作用与<code>gzip</code>的命令选项作用相同，也可以使用<code>-[num]</code>指定压缩级别：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># bzip2 conf2.txt </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls</span></span><br><span class=\"line\">conf2.txt.bz2  conf.txt</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># bzip2 -d conf2.txt.bz2 </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls</span></span><br><span class=\"line\">conf2.txt  conf.txt</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># bzip2 -c conf.txt &gt; /tmp/bzip2_conf.bz2</span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls</span></span><br><span class=\"line\">conf2.txt  conf.txt</span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh /tmp/bzip2_conf.bz2 </span></span><br><span class=\"line\">-rw-r--r-- 1 root root 528K 4月  14 23:06 /tmp/bzip2_conf.bz2</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># bzip2 -d -c /tmp/bzip2_conf.bz2 &gt; conf3.txt</span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls</span></span><br><span class=\"line\">conf2.txt  conf3.txt  conf.txt</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># bzip2 -9 conf.txt </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh conf</span></span><br><span class=\"line\">conf2.txt     conf3.txt     conf.txt.bz2  </span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh conf.txt.bz2 </span></span><br><span class=\"line\">-rw-r--r-- 1 root root 528K 4月  14 22:31 conf.txt.bz2</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># bzip2 -1 conf2.txt </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh conf2.txt.bz2 </span></span><br><span class=\"line\">-rw-r--r-- 1 root root 1.3M 4月  14 22:55 conf2.txt.bz2</span><br></pre></td></tr></table></figure><ul><li>同样的，<code>bz2</code>压缩包也有一个<code>bzcat</code>命令，可以用来查看压缩包内的文件内容。</li></ul><hr><h1 id=\"xz压缩工具\"><a href=\"#xz压缩工具\" class=\"headerlink\" title=\"xz压缩工具\"></a><strong>xz</strong>压缩工具</h1><ul><li><code>xz</code>压缩工具的压缩率相比其他两个更高，后缀名为<code>xz</code>，同样也不能够压缩目录，并且基本的命令操作也与<code>gzip</code>、<code>bzip2</code>相同。</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># xz conf.txt </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh</span></span><br><span class=\"line\">总用量 68K</span><br><span class=\"line\">-rw-r--r-- 1 root root 61K 4月  14 22:31 conf.txt.xz</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># xz -d conf.txt.xz </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh</span></span><br><span class=\"line\">总用量 5.0M</span><br><span class=\"line\">-rw-r--r-- 1 root root 5.0M 4月  14 22:31 conf.txt</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># xz -c conf.txt &gt; /tmp/xz_conf.xz</span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh /tmp/</span></span><br><span class=\"line\">总用量 76K</span><br><span class=\"line\">drwxrwxr-x 2 lux  lux  4.0K 4月  14 23:25 compress</span><br><span class=\"line\">-rw-r--r-- 1 root root  61K 4月  14 23:26 xz_conf.xz</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># xz -d -c /tmp/xz_conf.xz &gt; conf2.txt</span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh</span></span><br><span class=\"line\">总用量 10M</span><br><span class=\"line\">-rw-r--r-- 1 root root 5.0M 4月  14 23:26 conf2.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root 5.0M 4月  14 22:31 conf.txt</span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh /tmp/</span></span><br><span class=\"line\">总用量 76K</span><br><span class=\"line\">drwxrwxr-x 2 lux  lux  4.0K 4月  14 23:26 compress</span><br><span class=\"line\">-rw-r--r-- 1 root root  61K 4月  14 23:26 xz_conf.xz</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># xz -9 conf.txt </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh</span></span><br><span class=\"line\">总用量 5.1M</span><br><span class=\"line\">-rw-r--r-- 1 root root 5.0M 4月  14 23:26 conf2.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root  61K 4月  14 22:31 conf.txt.xz</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># xz -1 conf2.txt</span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh</span></span><br><span class=\"line\">总用量 140K</span><br><span class=\"line\">-rw-r--r-- 1 root root 67K 4月  14 23:26 conf2.txt.xz</span><br><span class=\"line\">-rw-r--r-- 1 root root 61K 4月  14 22:31 conf.txt.xz</span><br></pre></td></tr></table></figure><ul><li>解压<code>.xz</code>压缩包还可以使用<code>unxz [filename]</code>，查看压缩包内的文件，则使用<code>xzcat</code>命令。</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># unxz conf2.txt.xz </span></span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -lh</span></span><br><span class=\"line\">总用量 5.1M</span><br><span class=\"line\">-rw-r--r-- 1 root root 5.0M 4月  14 23:26 conf2.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root  61K 4月  14 22:31 conf.txt.xz</span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->"},{"title":"firewalld使用介绍","author":"Evobot","abbrlink":"79e258ff","date":"2018-05-10T14:10:06.000Z","image":null,"_content":"\n# iptables规则备份与恢复\n\n- 命令`service iptables save`会将我们shell中配置的iptables规则保存到**/etc/sysconfig/iptables**配置文件中；\n- 如果想将规则保存到指定的文件中，可以使用命令`iptables-save > /path/to/file`；\n- 从备份文件恢复规则则使用命令`iptables-restore < /path/to/file`即可；\n- 如果想要开机启动自动加载iptables规则，建议规则还是保存在iptables的配置文件中。\n\n# firewalld操作配置\n\n## 启用firewalld\n\n- 由于之前使用的iptables服务，所以需要重新关闭iptables服务并打开firewalld服务：\n\n  ```bash\n  [root@www ~]# systemctl disable iptables\n  [root@www ~]# systemctl is-enabled iptables.service \n  disabled\n  [root@www ~]# systemctl stop iptables\n  [root@www ~]# systemctl enable firewalld.service \n  Created symlink from /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service to /usr/lib/systemd/system/firewalld.service.\n  Created symlink from /etc/systemd/system/basic.target.wants/firewalld.service to /usr/lib/systemd/system/firewalld.service.\n  [root@www ~]# systemctl start firewalld.service \n  ```\n\n- 启动后执行`iptables -nvL`可以看到系统多了非常多规则，这些规则就是firewalld自带的规则。\n\n## firewalld的zone介绍\n\n- firewalld默认有9个zone，一个zone相当于一个规则集，默认的zone为**public**；\n\n- 查看所有的zone使用命令`firewalld-cmd --get-zones`：\n\n  ```bash\n  [root@www ~]# firewall-cmd --get-zones\n  work drop internal external trusted home dmz public block\n  ```\n\n- 查看默认的zone使用命令`firewalld-cmd --get-default-zone`：\n\n  ```bash\n  [root@www ~]# firewall-cmd --get-default-zone \n  public\n  ```\n\n- firewalld的9个zone之间的区别见下表：\n\n<style>\ntable th {\n    text-align: center;\n}\ntable th:first-of-type {\n    width: 120px;\n}\n</style>\n\n|     zone     | 作用                                       |\n| :----------: | --------------------------------------- |\n|   drop(丢弃)   | 任何接收的网络数据包都被丢弃，没有任何回复。仅能有发送出去的网络连接。      |\n|  block(限制)   | 任何接收的网络连接都被IPv4的**icmp-host-prohibited**信息和IPv6的**icmp6-adm-prohibited**信息所拒绝。 |\n|  public(公共)  | 在公共区域内使用，不能相信网络内其他计算机不会对你的计算机造成危害，只能接收经过选取的连接，即部分数据包放行。 |\n| external(外部) | 特别是为路由器启用了伪装功能的外部网，不能信任来自网络其他计算机不会对我方计算机造成危害，只接收经过选择的连接。 |\n|  dmz(非军事区)   | 用于非军事区内的电脑，次区域内可公开访问，可以有限的进入我们的内部网络，仅接收经选择的连接。 |\n|   work(工作)   | 用于工作区，即可以基本相信网络内的其他电脑不会危害我的电脑。仅接收经过选择的连接。 |\n|   home(家庭)   | 用于家庭网络，基本信任网络内其他计算机不会危害我的计算机，仅接收经过选择的连接。 |\n| internal(内部) | 用于内部网络，基本上信任网络内其他计算机不会威胁我的计算机。仅接收经过选择的连接。 |\n| trusted(信任)  | 可接受所以的网络连接。                              |\n\n## zone的操作\n\n- 命令`firewall-cmd --set-default-zone=work`可以更改默认的zone:\n\n  ```bash\n  [root@www ~]# firewall-cmd --set-default-zone=work\n  success\n  [root@www ~]# firewall-cmd --get-default-zone \n  work\n  ```\n\n- firewalld可以针对网卡操作，命令`firewall-cmd --get-zone-of-interface=[网卡名]`可以查看指定网卡的默认zone：\n\n  ```bash\n  [root@www ~]# firewall-cmd --get-zone-of-interface=enp0s3\n  work\n  [root@www ~]# firewall-cmd --get-zone-of-interface=enp0s8\n  no zone\n  [root@www ~]# firewall-cmd --get-zone-of-interface=lo\n  no zone\n  ```\n\n- 如果查看新网卡的zone时结果是`no zone`，那么需要将**/etc/sysconfig/network-scripts/**下的原网卡配置文件复制一份并改成新的网卡名，然后重启网络服务和firewalld服务，再查看时就能看到新的网卡的默认zone：\n\n  ```bash\n  [root@www network-scripts]# systemctl restart network.service\n  [root@www network-scripts]# systemctl restart firewalld.service \n  [root@www network-scripts]# firewall-cmd --get-zone-of-interface=enp0s8\n  work\n  ```\n\n- 给指定的网卡设置zone，命令为`firewall-cmd --zone=public --add-interface=enp0s8`:\n\n  ```bash\n  [root@www ~]# firewall-cmd --zone=public --add-interface=enp0s8\n  The interface is under control of NetworkManager, setting zone to 'public'.\n  success\n  [root@www ~]# firewall-cmd --get-zone-of-interface=enp0s8\n  public\n  ```\n\n- 更改指定网卡的zone，命令为`firewall-cmd --zone=dmz --change-interface=enp0s8`\n\n  ```bash\n  [root@www ~]# firewall-cmd --zone=dmz --change-interface=enp0s8\n  The interface is under control of NetworkManager, setting zone to 'dmz'.\n  success\n  [root@www ~]# firewall-cmd --get-zone-of-interface=enp0s8\n  dmz\n  ```\n\n- 删除指定网卡的zone，命令为`firewall-cmd --zone=dmz --remove-interface=enp0s8`:\n\n  ```bash\n  [root@www ~]# firewall-cmd --zone=dmz --remove-interface=enp0s8\n  The interface is under control of NetworkManager, setting zone to default.\n  success\n  [root@www ~]# firewall-cmd --get-zone-of-interface=enp0s8\n  work\n  ```\n\n  > 删除网卡的zone之后，网卡的zone会恢复到默认的zone设置。\n\n- 查看系统所以网卡所在的zone，命令为`firewall-cmd --get-active-zones`：\n\n  ```bash\n  [root@www ~]# firewall-cmd --get-active-zones \n  work\n    interfaces: enp0s3 enp0s8\n  ```\n\n## firewalld的service\n\n- firewalld的service就是zone下面的子单元，可以理解为一个端口；\n\n- 查看所有的service使用命令`firewall-cmd --get-services`：\n\n  ```bash\n  [root@www ~]# firewall-cmd --get-services \n  RH-Satellite-6 amanda-client amanda-k5-client bacula bacula-client ceph ceph-mon dhcp dhcpv6 dhcpv6-client dns docker-registry dropbox-lansync freeipa-ldap freeipa-ldaps freeipa-replication ftp high-availability http https imap imaps ipp ipp-client ipsec iscsi-target kadmin kerberos kpasswd ldap ldaps libvirt libvirt-tls mdns mosh mountd ms-wbt mysql nfs ntp openvpn pmcd pmproxy pmwebapi pmwebapis pop3 pop3s postgresql privoxy proxy-dhcp ptp pulseaudio puppetmaster radius rpc-bind rsyncd samba samba-client sane smtp smtps snmp snmptrap squid ssh synergy syslog syslog-tls telnet tftp tftp-client tinc tor-socks transmission-client vdsm vnc-server wbem-https xmpp-bosh xmpp-client xmpp-local xmpp-server\n  ```\n\n- 查看当前的zone的service使用命令`firewall-cmd --get-default-zone`：\n\n  ```bash\n  [root@www ~]# firewall-cmd --get-default-zone \n  work\n  [root@www ~]# firewall-cmd --list-services \n  ssh dhcpv6-client\n  ```\n\n- 而查看指定的zone的service，则使用命令`firewall-cmd --zone=public --list-services`：\n\n  ```bash\n  [root@www ~]# firewall-cmd --zone=public --list-services \n  dhcpv6-client ssh\n  [root@www ~]# firewall-cmd --zone=dmz --list-services \n  ssh\n  ```\n\n- 给指定的zone添加service，使用命令`firewall-cmd --zone=public --add-service=http`，这里添加的http实际上表示http服务对应的端口80：\n\n  ```bash\n  [root@www ~]# firewall-cmd --zone=public --add-service=http\n  success\n  [root@www ~]# firewall-cmd --zone=public --list-services \n  dhcpv6-client ssh http\n  [root@www ~]# firewall-cmd --zone=public --add-service=ftp\n  success\n  [root@www ~]# firewall-cmd --zone=public --list-services \n  dhcpv6-client ssh http ftp\n  ```\n\n- 在shell中为zone添加了service之后，只是保存在内存中，想要将配置保存到配置文件中，则在添加service时使用下面的命令：\n\n  ```bash\n  [root@www ~]# firewall-cmd --zone=public --add-service=https --permanent\n  success\n  ```\n\n- firewalld的配置文件在目录`/etc/firewalld/zones/`下：\n\n  ```bash\n  [root@www ~]# ls /etc/firewalld/zones/\n  public.xml  public.xml.old\n  [root@www ~]# cat /etc/firewalld/zones/public.xml\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <zone>\n    <short>Public</short>\n    <description>For use in public areas. You do not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted.</description>\n    <service name=\"dhcpv6-client\"/>\n    <service name=\"ssh\"/>\n    <service name=\"https\"/>\n  </zone>\n  ```\n\n  可以看到https服务已经添加到public zone里了。\n\n- firewalld的zone在保存新的配置时，会将旧的配置文件后缀名加上**.old**保存，同样的service配置文件则在`/etc/firewalld/services/`目录下；而zone和service的配置文件都有一个模板文件，位于`/usr/lib/firewalld/[zone|services]`目录下：\n\n  ```bash\n  [root@www ~]# ls /usr/lib/firewalld/zones/\n  block.xml  dmz.xml  drop.xml  external.xml  home.xml  internal.xml  public.xml  trusted.xml  work.xml\n  [root@www ~]# ls /usr/lib/firewalld/services/\n  amanda-client.xml        https.xml         mountd.xml      puppetmaster.xml    telnet.xml\n  amanda-k5-client.xml     http.xml          ms-wbt.xml      radius.xml          tftp-client.xml\n  bacula-client.xml        imaps.xml         mysql.xml       RH-Satellite-6.xml  tftp.xml\n  bacula.xml               imap.xml          nfs.xml         rpc-bind.xml        tinc.xml\n  ceph-mon.xml             ipp-client.xml    ntp.xml         rsyncd.xml          tor-socks.xml\n  ceph.xml                 ipp.xml           openvpn.xml     samba-client.xml    transmission-client.xml\n  dhcpv6-client.xml        ipsec.xml         pmcd.xml        samba.xml           vdsm.xml\n  dhcpv6.xml               iscsi-target.xml  pmproxy.xml     sane.xml            vnc-server.xml\n  dhcp.xml                 kadmin.xml        pmwebapis.xml   smtps.xml           wbem-https.xml\n  dns.xml                  kerberos.xml      pmwebapi.xml    smtp.xml            xmpp-bosh.xml\n  docker-registry.xml      kpasswd.xml       pop3s.xml       snmptrap.xml        xmpp-client.xml\n  dropbox-lansync.xml      ldaps.xml         pop3.xml        snmp.xml            xmpp-local.xml\n  freeipa-ldaps.xml        ldap.xml          postgresql.xml  squid.xml           xmpp-server.xml\n  freeipa-ldap.xml         libvirt-tls.xml   privoxy.xml     ssh.xml\n  freeipa-replication.xml  libvirt.xml       proxy-dhcp.xml  synergy.xml\n  ftp.xml                  mdns.xml          ptp.xml         syslog-tls.xml\n  high-availability.xml    mosh.xml          pulseaudio.xml  syslog.xml\n  ```\n\n## firewalld配置案例\n\n- 需求：将FTP服务端口改为1121，并且在work zone下放行ftp：\n\n  - 拷贝ftp的配置文件到`/etc/firewalld/services/`目录下：\n\n  ```bash\n  [root@www ~]# cp /usr/lib/firewalld/services/ftp.xml /etc/firewalld/services/\n  ```\n\n  - 修改复制过来的FTP配置文件，将其中的端口配置改为1121：\n\n  ![ftp-service](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/ftp_service.png)\n\n  - 复制work zone的配置文件到`/etc/firewalld/zones/`目录下：\n\n  ```bash\n  [root@www ~]# cp /usr/lib/firewalld/zones/work.xml /etc/firewalld/zones/\n  ```\n\n  - 修改复制来的work zone配置文件，将ftp服务添加进去：\n\n  ![work-zone](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/workzone.png)\n\n  - 然后使用`firewall-cmd --reload`命令重新加载firewalld服务；并查看work zone的service列表ftp服务是否添加进去：\n\n  ```bash\n  [root@www ~]# firewall-cmd --reload \n  success\n  [root@www ~]# firewall-cmd --zone=work --list-services \n  ssh dhcpv6-client ftp\n  ```\n\n---\n\n","source":"_posts/firewalld使用介绍.md","raw":"---\ntitle: firewalld使用介绍\nauthor: Evobot\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\nabbrlink: 79e258ff\ndate: 2018-05-10 22:10:06\nimage:\n---\n\n# iptables规则备份与恢复\n\n- 命令`service iptables save`会将我们shell中配置的iptables规则保存到**/etc/sysconfig/iptables**配置文件中；\n- 如果想将规则保存到指定的文件中，可以使用命令`iptables-save > /path/to/file`；\n- 从备份文件恢复规则则使用命令`iptables-restore < /path/to/file`即可；\n- 如果想要开机启动自动加载iptables规则，建议规则还是保存在iptables的配置文件中。\n\n# firewalld操作配置\n\n## 启用firewalld\n\n- 由于之前使用的iptables服务，所以需要重新关闭iptables服务并打开firewalld服务：\n\n  ```bash\n  [root@www ~]# systemctl disable iptables\n  [root@www ~]# systemctl is-enabled iptables.service \n  disabled\n  [root@www ~]# systemctl stop iptables\n  [root@www ~]# systemctl enable firewalld.service \n  Created symlink from /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service to /usr/lib/systemd/system/firewalld.service.\n  Created symlink from /etc/systemd/system/basic.target.wants/firewalld.service to /usr/lib/systemd/system/firewalld.service.\n  [root@www ~]# systemctl start firewalld.service \n  ```\n\n- 启动后执行`iptables -nvL`可以看到系统多了非常多规则，这些规则就是firewalld自带的规则。\n\n## firewalld的zone介绍\n\n- firewalld默认有9个zone，一个zone相当于一个规则集，默认的zone为**public**；\n\n- 查看所有的zone使用命令`firewalld-cmd --get-zones`：\n\n  ```bash\n  [root@www ~]# firewall-cmd --get-zones\n  work drop internal external trusted home dmz public block\n  ```\n\n- 查看默认的zone使用命令`firewalld-cmd --get-default-zone`：\n\n  ```bash\n  [root@www ~]# firewall-cmd --get-default-zone \n  public\n  ```\n\n- firewalld的9个zone之间的区别见下表：\n\n<style>\ntable th {\n    text-align: center;\n}\ntable th:first-of-type {\n    width: 120px;\n}\n</style>\n\n|     zone     | 作用                                       |\n| :----------: | --------------------------------------- |\n|   drop(丢弃)   | 任何接收的网络数据包都被丢弃，没有任何回复。仅能有发送出去的网络连接。      |\n|  block(限制)   | 任何接收的网络连接都被IPv4的**icmp-host-prohibited**信息和IPv6的**icmp6-adm-prohibited**信息所拒绝。 |\n|  public(公共)  | 在公共区域内使用，不能相信网络内其他计算机不会对你的计算机造成危害，只能接收经过选取的连接，即部分数据包放行。 |\n| external(外部) | 特别是为路由器启用了伪装功能的外部网，不能信任来自网络其他计算机不会对我方计算机造成危害，只接收经过选择的连接。 |\n|  dmz(非军事区)   | 用于非军事区内的电脑，次区域内可公开访问，可以有限的进入我们的内部网络，仅接收经选择的连接。 |\n|   work(工作)   | 用于工作区，即可以基本相信网络内的其他电脑不会危害我的电脑。仅接收经过选择的连接。 |\n|   home(家庭)   | 用于家庭网络，基本信任网络内其他计算机不会危害我的计算机，仅接收经过选择的连接。 |\n| internal(内部) | 用于内部网络，基本上信任网络内其他计算机不会威胁我的计算机。仅接收经过选择的连接。 |\n| trusted(信任)  | 可接受所以的网络连接。                              |\n\n## zone的操作\n\n- 命令`firewall-cmd --set-default-zone=work`可以更改默认的zone:\n\n  ```bash\n  [root@www ~]# firewall-cmd --set-default-zone=work\n  success\n  [root@www ~]# firewall-cmd --get-default-zone \n  work\n  ```\n\n- firewalld可以针对网卡操作，命令`firewall-cmd --get-zone-of-interface=[网卡名]`可以查看指定网卡的默认zone：\n\n  ```bash\n  [root@www ~]# firewall-cmd --get-zone-of-interface=enp0s3\n  work\n  [root@www ~]# firewall-cmd --get-zone-of-interface=enp0s8\n  no zone\n  [root@www ~]# firewall-cmd --get-zone-of-interface=lo\n  no zone\n  ```\n\n- 如果查看新网卡的zone时结果是`no zone`，那么需要将**/etc/sysconfig/network-scripts/**下的原网卡配置文件复制一份并改成新的网卡名，然后重启网络服务和firewalld服务，再查看时就能看到新的网卡的默认zone：\n\n  ```bash\n  [root@www network-scripts]# systemctl restart network.service\n  [root@www network-scripts]# systemctl restart firewalld.service \n  [root@www network-scripts]# firewall-cmd --get-zone-of-interface=enp0s8\n  work\n  ```\n\n- 给指定的网卡设置zone，命令为`firewall-cmd --zone=public --add-interface=enp0s8`:\n\n  ```bash\n  [root@www ~]# firewall-cmd --zone=public --add-interface=enp0s8\n  The interface is under control of NetworkManager, setting zone to 'public'.\n  success\n  [root@www ~]# firewall-cmd --get-zone-of-interface=enp0s8\n  public\n  ```\n\n- 更改指定网卡的zone，命令为`firewall-cmd --zone=dmz --change-interface=enp0s8`\n\n  ```bash\n  [root@www ~]# firewall-cmd --zone=dmz --change-interface=enp0s8\n  The interface is under control of NetworkManager, setting zone to 'dmz'.\n  success\n  [root@www ~]# firewall-cmd --get-zone-of-interface=enp0s8\n  dmz\n  ```\n\n- 删除指定网卡的zone，命令为`firewall-cmd --zone=dmz --remove-interface=enp0s8`:\n\n  ```bash\n  [root@www ~]# firewall-cmd --zone=dmz --remove-interface=enp0s8\n  The interface is under control of NetworkManager, setting zone to default.\n  success\n  [root@www ~]# firewall-cmd --get-zone-of-interface=enp0s8\n  work\n  ```\n\n  > 删除网卡的zone之后，网卡的zone会恢复到默认的zone设置。\n\n- 查看系统所以网卡所在的zone，命令为`firewall-cmd --get-active-zones`：\n\n  ```bash\n  [root@www ~]# firewall-cmd --get-active-zones \n  work\n    interfaces: enp0s3 enp0s8\n  ```\n\n## firewalld的service\n\n- firewalld的service就是zone下面的子单元，可以理解为一个端口；\n\n- 查看所有的service使用命令`firewall-cmd --get-services`：\n\n  ```bash\n  [root@www ~]# firewall-cmd --get-services \n  RH-Satellite-6 amanda-client amanda-k5-client bacula bacula-client ceph ceph-mon dhcp dhcpv6 dhcpv6-client dns docker-registry dropbox-lansync freeipa-ldap freeipa-ldaps freeipa-replication ftp high-availability http https imap imaps ipp ipp-client ipsec iscsi-target kadmin kerberos kpasswd ldap ldaps libvirt libvirt-tls mdns mosh mountd ms-wbt mysql nfs ntp openvpn pmcd pmproxy pmwebapi pmwebapis pop3 pop3s postgresql privoxy proxy-dhcp ptp pulseaudio puppetmaster radius rpc-bind rsyncd samba samba-client sane smtp smtps snmp snmptrap squid ssh synergy syslog syslog-tls telnet tftp tftp-client tinc tor-socks transmission-client vdsm vnc-server wbem-https xmpp-bosh xmpp-client xmpp-local xmpp-server\n  ```\n\n- 查看当前的zone的service使用命令`firewall-cmd --get-default-zone`：\n\n  ```bash\n  [root@www ~]# firewall-cmd --get-default-zone \n  work\n  [root@www ~]# firewall-cmd --list-services \n  ssh dhcpv6-client\n  ```\n\n- 而查看指定的zone的service，则使用命令`firewall-cmd --zone=public --list-services`：\n\n  ```bash\n  [root@www ~]# firewall-cmd --zone=public --list-services \n  dhcpv6-client ssh\n  [root@www ~]# firewall-cmd --zone=dmz --list-services \n  ssh\n  ```\n\n- 给指定的zone添加service，使用命令`firewall-cmd --zone=public --add-service=http`，这里添加的http实际上表示http服务对应的端口80：\n\n  ```bash\n  [root@www ~]# firewall-cmd --zone=public --add-service=http\n  success\n  [root@www ~]# firewall-cmd --zone=public --list-services \n  dhcpv6-client ssh http\n  [root@www ~]# firewall-cmd --zone=public --add-service=ftp\n  success\n  [root@www ~]# firewall-cmd --zone=public --list-services \n  dhcpv6-client ssh http ftp\n  ```\n\n- 在shell中为zone添加了service之后，只是保存在内存中，想要将配置保存到配置文件中，则在添加service时使用下面的命令：\n\n  ```bash\n  [root@www ~]# firewall-cmd --zone=public --add-service=https --permanent\n  success\n  ```\n\n- firewalld的配置文件在目录`/etc/firewalld/zones/`下：\n\n  ```bash\n  [root@www ~]# ls /etc/firewalld/zones/\n  public.xml  public.xml.old\n  [root@www ~]# cat /etc/firewalld/zones/public.xml\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <zone>\n    <short>Public</short>\n    <description>For use in public areas. You do not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted.</description>\n    <service name=\"dhcpv6-client\"/>\n    <service name=\"ssh\"/>\n    <service name=\"https\"/>\n  </zone>\n  ```\n\n  可以看到https服务已经添加到public zone里了。\n\n- firewalld的zone在保存新的配置时，会将旧的配置文件后缀名加上**.old**保存，同样的service配置文件则在`/etc/firewalld/services/`目录下；而zone和service的配置文件都有一个模板文件，位于`/usr/lib/firewalld/[zone|services]`目录下：\n\n  ```bash\n  [root@www ~]# ls /usr/lib/firewalld/zones/\n  block.xml  dmz.xml  drop.xml  external.xml  home.xml  internal.xml  public.xml  trusted.xml  work.xml\n  [root@www ~]# ls /usr/lib/firewalld/services/\n  amanda-client.xml        https.xml         mountd.xml      puppetmaster.xml    telnet.xml\n  amanda-k5-client.xml     http.xml          ms-wbt.xml      radius.xml          tftp-client.xml\n  bacula-client.xml        imaps.xml         mysql.xml       RH-Satellite-6.xml  tftp.xml\n  bacula.xml               imap.xml          nfs.xml         rpc-bind.xml        tinc.xml\n  ceph-mon.xml             ipp-client.xml    ntp.xml         rsyncd.xml          tor-socks.xml\n  ceph.xml                 ipp.xml           openvpn.xml     samba-client.xml    transmission-client.xml\n  dhcpv6-client.xml        ipsec.xml         pmcd.xml        samba.xml           vdsm.xml\n  dhcpv6.xml               iscsi-target.xml  pmproxy.xml     sane.xml            vnc-server.xml\n  dhcp.xml                 kadmin.xml        pmwebapis.xml   smtps.xml           wbem-https.xml\n  dns.xml                  kerberos.xml      pmwebapi.xml    smtp.xml            xmpp-bosh.xml\n  docker-registry.xml      kpasswd.xml       pop3s.xml       snmptrap.xml        xmpp-client.xml\n  dropbox-lansync.xml      ldaps.xml         pop3.xml        snmp.xml            xmpp-local.xml\n  freeipa-ldaps.xml        ldap.xml          postgresql.xml  squid.xml           xmpp-server.xml\n  freeipa-ldap.xml         libvirt-tls.xml   privoxy.xml     ssh.xml\n  freeipa-replication.xml  libvirt.xml       proxy-dhcp.xml  synergy.xml\n  ftp.xml                  mdns.xml          ptp.xml         syslog-tls.xml\n  high-availability.xml    mosh.xml          pulseaudio.xml  syslog.xml\n  ```\n\n## firewalld配置案例\n\n- 需求：将FTP服务端口改为1121，并且在work zone下放行ftp：\n\n  - 拷贝ftp的配置文件到`/etc/firewalld/services/`目录下：\n\n  ```bash\n  [root@www ~]# cp /usr/lib/firewalld/services/ftp.xml /etc/firewalld/services/\n  ```\n\n  - 修改复制过来的FTP配置文件，将其中的端口配置改为1121：\n\n  ![ftp-service](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/ftp_service.png)\n\n  - 复制work zone的配置文件到`/etc/firewalld/zones/`目录下：\n\n  ```bash\n  [root@www ~]# cp /usr/lib/firewalld/zones/work.xml /etc/firewalld/zones/\n  ```\n\n  - 修改复制来的work zone配置文件，将ftp服务添加进去：\n\n  ![work-zone](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/workzone.png)\n\n  - 然后使用`firewall-cmd --reload`命令重新加载firewalld服务；并查看work zone的service列表ftp服务是否添加进去：\n\n  ```bash\n  [root@www ~]# firewall-cmd --reload \n  success\n  [root@www ~]# firewall-cmd --zone=work --list-services \n  ssh dhcpv6-client ftp\n  ```\n\n---\n\n","slug":"firewalld使用介绍","published":1,"updated":"2018-06-02T13:01:29.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazf9004ju1jx0ae1quoc","content":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><h1 id=\"iptables规则备份与恢复\"><a href=\"#iptables规则备份与恢复\" class=\"headerlink\" title=\"iptables规则备份与恢复\"></a>iptables规则备份与恢复</h1><ul><li>命令<code>service iptables save</code>会将我们shell中配置的iptables规则保存到<strong>/etc/sysconfig/iptables</strong>配置文件中；</li><li>如果想将规则保存到指定的文件中，可以使用命令<code>iptables-save &gt; /path/to/file</code>；</li><li>从备份文件恢复规则则使用命令<code>iptables-restore &lt; /path/to/file</code>即可；</li><li>如果想要开机启动自动加载iptables规则，建议规则还是保存在iptables的配置文件中。</li></ul><h1 id=\"firewalld操作配置\"><a href=\"#firewalld操作配置\" class=\"headerlink\" title=\"firewalld操作配置\"></a>firewalld操作配置</h1><h2 id=\"启用firewalld\"><a href=\"#启用firewalld\" class=\"headerlink\" title=\"启用firewalld\"></a>启用firewalld</h2><ul><li><p>由于之前使用的iptables服务，所以需要重新关闭iptables服务并打开firewalld服务：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># systemctl disable iptables</span></span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># systemctl is-enabled iptables.service </span></span><br><span class=\"line\">disabled</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># systemctl stop iptables</span></span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># systemctl enable firewalld.service </span></span><br><span class=\"line\">Created symlink from /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service to /usr/lib/systemd/system/firewalld.service.</span><br><span class=\"line\">Created symlink from /etc/systemd/system/basic.target.wants/firewalld.service to /usr/lib/systemd/system/firewalld.service.</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># systemctl start firewalld.service</span></span><br></pre></td></tr></table></figure></li><li><p>启动后执行<code>iptables -nvL</code>可以看到系统多了非常多规则，这些规则就是firewalld自带的规则。</p></li></ul><h2 id=\"firewalld的zone介绍\"><a href=\"#firewalld的zone介绍\" class=\"headerlink\" title=\"firewalld的zone介绍\"></a>firewalld的zone介绍</h2><ul><li><p>firewalld默认有9个zone，一个zone相当于一个规则集，默认的zone为<strong>public</strong>；</p></li><li><p>查看所有的zone使用命令<code>firewalld-cmd --get-zones</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-zones</span></span><br><span class=\"line\">work drop internal external trusted home dmz public block</span><br></pre></td></tr></table></figure></li><li><p>查看默认的zone使用命令<code>firewalld-cmd --get-default-zone</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-default-zone </span></span><br><span class=\"line\">public</span><br></pre></td></tr></table></figure></li><li><p>firewalld的9个zone之间的区别见下表：</p></li></ul><style>table th{text-align:center}table th:first-of-type{width:120px}</style><table><thead><tr><th style=\"text-align:center\">zone</th><th>作用</th></tr></thead><tbody><tr><td style=\"text-align:center\">drop(丢弃)</td><td>任何接收的网络数据包都被丢弃，没有任何回复。仅能有发送出去的网络连接。</td></tr><tr><td style=\"text-align:center\">block(限制)</td><td>任何接收的网络连接都被IPv4的<strong>icmp-host-prohibited</strong>信息和IPv6的<strong>icmp6-adm-prohibited</strong>信息所拒绝。</td></tr><tr><td style=\"text-align:center\">public(公共)</td><td>在公共区域内使用，不能相信网络内其他计算机不会对你的计算机造成危害，只能接收经过选取的连接，即部分数据包放行。</td></tr><tr><td style=\"text-align:center\">external(外部)</td><td>特别是为路由器启用了伪装功能的外部网，不能信任来自网络其他计算机不会对我方计算机造成危害，只接收经过选择的连接。</td></tr><tr><td style=\"text-align:center\">dmz(非军事区)</td><td>用于非军事区内的电脑，次区域内可公开访问，可以有限的进入我们的内部网络，仅接收经选择的连接。</td></tr><tr><td style=\"text-align:center\">work(工作)</td><td>用于工作区，即可以基本相信网络内的其他电脑不会危害我的电脑。仅接收经过选择的连接。</td></tr><tr><td style=\"text-align:center\">home(家庭)</td><td>用于家庭网络，基本信任网络内其他计算机不会危害我的计算机，仅接收经过选择的连接。</td></tr><tr><td style=\"text-align:center\">internal(内部)</td><td>用于内部网络，基本上信任网络内其他计算机不会威胁我的计算机。仅接收经过选择的连接。</td></tr><tr><td style=\"text-align:center\">trusted(信任)</td><td>可接受所以的网络连接。</td></tr></tbody></table><h2 id=\"zone的操作\"><a href=\"#zone的操作\" class=\"headerlink\" title=\"zone的操作\"></a>zone的操作</h2><ul><li><p>命令<code>firewall-cmd --set-default-zone=work</code>可以更改默认的zone:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --set-default-zone=work</span></span><br><span class=\"line\">success</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-default-zone </span></span><br><span class=\"line\">work</span><br></pre></td></tr></table></figure></li><li><p>firewalld可以针对网卡操作，命令<code>firewall-cmd --get-zone-of-interface=[网卡名]</code>可以查看指定网卡的默认zone：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-zone-of-interface=enp0s3</span></span><br><span class=\"line\">work</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-zone-of-interface=enp0s8</span></span><br><span class=\"line\">no zone</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-zone-of-interface=lo</span></span><br><span class=\"line\">no zone</span><br></pre></td></tr></table></figure></li><li><p>如果查看新网卡的zone时结果是<code>no zone</code>，那么需要将<strong>/etc/sysconfig/network-scripts/</strong>下的原网卡配置文件复制一份并改成新的网卡名，然后重启网络服务和firewalld服务，再查看时就能看到新的网卡的默认zone：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www network-scripts]<span class=\"comment\"># systemctl restart network.service</span></span><br><span class=\"line\">[root@www network-scripts]<span class=\"comment\"># systemctl restart firewalld.service </span></span><br><span class=\"line\">[root@www network-scripts]<span class=\"comment\"># firewall-cmd --get-zone-of-interface=enp0s8</span></span><br><span class=\"line\">work</span><br></pre></td></tr></table></figure></li><li><p>给指定的网卡设置zone，命令为<code>firewall-cmd --zone=public --add-interface=enp0s8</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=public --add-interface=enp0s8</span></span><br><span class=\"line\">The interface is under control of NetworkManager, setting zone to <span class=\"string\">'public'</span>.</span><br><span class=\"line\">success</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-zone-of-interface=enp0s8</span></span><br><span class=\"line\">public</span><br></pre></td></tr></table></figure></li><li><p>更改指定网卡的zone，命令为<code>firewall-cmd --zone=dmz --change-interface=enp0s8</code></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=dmz --change-interface=enp0s8</span></span><br><span class=\"line\">The interface is under control of NetworkManager, setting zone to <span class=\"string\">'dmz'</span>.</span><br><span class=\"line\">success</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-zone-of-interface=enp0s8</span></span><br><span class=\"line\">dmz</span><br></pre></td></tr></table></figure></li><li><p>删除指定网卡的zone，命令为<code>firewall-cmd --zone=dmz --remove-interface=enp0s8</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=dmz --remove-interface=enp0s8</span></span><br><span class=\"line\">The interface is under control of NetworkManager, setting zone to default.</span><br><span class=\"line\">success</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-zone-of-interface=enp0s8</span></span><br><span class=\"line\">work</span><br></pre></td></tr></table></figure><blockquote><p>删除网卡的zone之后，网卡的zone会恢复到默认的zone设置。</p></blockquote></li><li><p>查看系统所以网卡所在的zone，命令为<code>firewall-cmd --get-active-zones</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-active-zones </span></span><br><span class=\"line\">work</span><br><span class=\"line\">  interfaces: enp0s3 enp0s8</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"firewalld的service\"><a href=\"#firewalld的service\" class=\"headerlink\" title=\"firewalld的service\"></a>firewalld的service</h2><ul><li><p>firewalld的service就是zone下面的子单元，可以理解为一个端口；</p></li><li><p>查看所有的service使用命令<code>firewall-cmd --get-services</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-services </span></span><br><span class=\"line\">RH-Satellite-6 amanda-client amanda-k5-client bacula bacula-client ceph ceph-mon dhcp dhcpv6 dhcpv6-client dns docker-registry dropbox-lansync freeipa-ldap freeipa-ldaps freeipa-replication ftp high-availability http https imap imaps ipp ipp-client ipsec iscsi-target kadmin kerberos kpasswd ldap ldaps libvirt libvirt-tls mdns mosh mountd ms-wbt mysql nfs ntp openvpn pmcd pmproxy pmwebapi pmwebapis pop3 pop3s postgresql privoxy proxy-dhcp ptp pulseaudio puppetmaster radius rpc-bind rsyncd samba samba-client sane smtp smtps snmp snmptrap squid ssh synergy syslog syslog-tls telnet tftp tftp-client tinc tor-socks transmission-client vdsm vnc-server wbem-https xmpp-bosh xmpp-client xmpp-local xmpp-server</span><br></pre></td></tr></table></figure></li><li><p>查看当前的zone的service使用命令<code>firewall-cmd --get-default-zone</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-default-zone </span></span><br><span class=\"line\">work</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --list-services </span></span><br><span class=\"line\">ssh dhcpv6-client</span><br></pre></td></tr></table></figure></li><li><p>而查看指定的zone的service，则使用命令<code>firewall-cmd --zone=public --list-services</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=public --list-services </span></span><br><span class=\"line\">dhcpv6-client ssh</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=dmz --list-services </span></span><br><span class=\"line\">ssh</span><br></pre></td></tr></table></figure></li><li><p>给指定的zone添加service，使用命令<code>firewall-cmd --zone=public --add-service=http</code>，这里添加的http实际上表示http服务对应的端口80：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=public --add-service=http</span></span><br><span class=\"line\">success</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=public --list-services </span></span><br><span class=\"line\">dhcpv6-client ssh http</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=public --add-service=ftp</span></span><br><span class=\"line\">success</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=public --list-services </span></span><br><span class=\"line\">dhcpv6-client ssh http ftp</span><br></pre></td></tr></table></figure></li><li><p>在shell中为zone添加了service之后，只是保存在内存中，想要将配置保存到配置文件中，则在添加service时使用下面的命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=public --add-service=https --permanent</span></span><br><span class=\"line\">success</span><br></pre></td></tr></table></figure></li><li><p>firewalld的配置文件在目录<code>/etc/firewalld/zones/</code>下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># ls /etc/firewalld/zones/</span></span><br><span class=\"line\">public.xml  public.xml.old</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># cat /etc/firewalld/zones/public.xml</span></span><br><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span>?&gt;</span><br><span class=\"line\">&lt;zone&gt;</span><br><span class=\"line\">  &lt;short&gt;Public&lt;/short&gt;</span><br><span class=\"line\">  &lt;description&gt;For use <span class=\"keyword\">in</span> public areas. You <span class=\"keyword\">do</span> not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted.&lt;/description&gt;</span><br><span class=\"line\">  &lt;service name=<span class=\"string\">\"dhcpv6-client\"</span>/&gt;</span><br><span class=\"line\">  &lt;service name=<span class=\"string\">\"ssh\"</span>/&gt;</span><br><span class=\"line\">  &lt;service name=<span class=\"string\">\"https\"</span>/&gt;</span><br><span class=\"line\">&lt;/zone&gt;</span><br></pre></td></tr></table></figure><p>可以看到https服务已经添加到public zone里了。</p></li><li><p>firewalld的zone在保存新的配置时，会将旧的配置文件后缀名加上<strong>.old</strong>保存，同样的service配置文件则在<code>/etc/firewalld/services/</code>目录下；而zone和service的配置文件都有一个模板文件，位于<code>/usr/lib/firewalld/[zone|services]</code>目录下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># ls /usr/lib/firewalld/zones/</span></span><br><span class=\"line\">block.xml  dmz.xml  drop.xml  external.xml  home.xml  internal.xml  public.xml  trusted.xml  work.xml</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># ls /usr/lib/firewalld/services/</span></span><br><span class=\"line\">amanda-client.xml        https.xml         mountd.xml      puppetmaster.xml    telnet.xml</span><br><span class=\"line\">amanda-k5-client.xml     http.xml          ms-wbt.xml      radius.xml          tftp-client.xml</span><br><span class=\"line\">bacula-client.xml        imaps.xml         mysql.xml       RH-Satellite-6.xml  tftp.xml</span><br><span class=\"line\">bacula.xml               imap.xml          nfs.xml         rpc-bind.xml        tinc.xml</span><br><span class=\"line\">ceph-mon.xml             ipp-client.xml    ntp.xml         rsyncd.xml          tor-socks.xml</span><br><span class=\"line\">ceph.xml                 ipp.xml           openvpn.xml     samba-client.xml    transmission-client.xml</span><br><span class=\"line\">dhcpv6-client.xml        ipsec.xml         pmcd.xml        samba.xml           vdsm.xml</span><br><span class=\"line\">dhcpv6.xml               iscsi-target.xml  pmproxy.xml     sane.xml            vnc-server.xml</span><br><span class=\"line\">dhcp.xml                 kadmin.xml        pmwebapis.xml   smtps.xml           wbem-https.xml</span><br><span class=\"line\">dns.xml                  kerberos.xml      pmwebapi.xml    smtp.xml            xmpp-bosh.xml</span><br><span class=\"line\">docker-registry.xml      kpasswd.xml       pop3s.xml       snmptrap.xml        xmpp-client.xml</span><br><span class=\"line\">dropbox-lansync.xml      ldaps.xml         pop3.xml        snmp.xml            xmpp-local.xml</span><br><span class=\"line\">freeipa-ldaps.xml        ldap.xml          postgresql.xml  squid.xml           xmpp-server.xml</span><br><span class=\"line\">freeipa-ldap.xml         libvirt-tls.xml   privoxy.xml     ssh.xml</span><br><span class=\"line\">freeipa-replication.xml  libvirt.xml       proxy-dhcp.xml  synergy.xml</span><br><span class=\"line\">ftp.xml                  mdns.xml          ptp.xml         syslog-tls.xml</span><br><span class=\"line\">high-availability.xml    mosh.xml          pulseaudio.xml  syslog.xml</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"firewalld配置案例\"><a href=\"#firewalld配置案例\" class=\"headerlink\" title=\"firewalld配置案例\"></a>firewalld配置案例</h2><ul><li><p>需求：将FTP服务端口改为1121，并且在work zone下放行ftp：</p><ul><li>拷贝ftp的配置文件到<code>/etc/firewalld/services/</code>目录下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># cp /usr/lib/firewalld/services/ftp.xml /etc/firewalld/services/</span></span><br></pre></td></tr></table></figure><ul><li>修改复制过来的FTP配置文件，将其中的端口配置改为1121：</li></ul><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/ftp_service.png\" alt=\"ftp-service\"></p><ul><li>复制work zone的配置文件到<code>/etc/firewalld/zones/</code>目录下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># cp /usr/lib/firewalld/zones/work.xml /etc/firewalld/zones/</span></span><br></pre></td></tr></table></figure><ul><li>修改复制来的work zone配置文件，将ftp服务添加进去：</li></ul><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/workzone.png\" alt=\"work-zone\"></p><ul><li>然后使用<code>firewall-cmd --reload</code>命令重新加载firewalld服务；并查看work zone的service列表ftp服务是否添加进去：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --reload </span></span><br><span class=\"line\">success</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=work --list-services </span></span><br><span class=\"line\">ssh dhcpv6-client ftp</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><h1 id=\"iptables规则备份与恢复\"><a href=\"#iptables规则备份与恢复\" class=\"headerlink\" title=\"iptables规则备份与恢复\"></a>iptables规则备份与恢复</h1><ul><li>命令<code>service iptables save</code>会将我们shell中配置的iptables规则保存到<strong>/etc/sysconfig/iptables</strong>配置文件中；</li><li>如果想将规则保存到指定的文件中，可以使用命令<code>iptables-save &gt; /path/to/file</code>；</li><li>从备份文件恢复规则则使用命令<code>iptables-restore &lt; /path/to/file</code>即可；</li><li>如果想要开机启动自动加载iptables规则，建议规则还是保存在iptables的配置文件中。</li></ul><h1 id=\"firewalld操作配置\"><a href=\"#firewalld操作配置\" class=\"headerlink\" title=\"firewalld操作配置\"></a>firewalld操作配置</h1><h2 id=\"启用firewalld\"><a href=\"#启用firewalld\" class=\"headerlink\" title=\"启用firewalld\"></a>启用firewalld</h2><ul><li><p>由于之前使用的iptables服务，所以需要重新关闭iptables服务并打开firewalld服务：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># systemctl disable iptables</span></span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># systemctl is-enabled iptables.service </span></span><br><span class=\"line\">disabled</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># systemctl stop iptables</span></span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># systemctl enable firewalld.service </span></span><br><span class=\"line\">Created symlink from /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service to /usr/lib/systemd/system/firewalld.service.</span><br><span class=\"line\">Created symlink from /etc/systemd/system/basic.target.wants/firewalld.service to /usr/lib/systemd/system/firewalld.service.</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># systemctl start firewalld.service</span></span><br></pre></td></tr></table></figure></li><li><p>启动后执行<code>iptables -nvL</code>可以看到系统多了非常多规则，这些规则就是firewalld自带的规则。</p></li></ul><h2 id=\"firewalld的zone介绍\"><a href=\"#firewalld的zone介绍\" class=\"headerlink\" title=\"firewalld的zone介绍\"></a>firewalld的zone介绍</h2><ul><li><p>firewalld默认有9个zone，一个zone相当于一个规则集，默认的zone为<strong>public</strong>；</p></li><li><p>查看所有的zone使用命令<code>firewalld-cmd --get-zones</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-zones</span></span><br><span class=\"line\">work drop internal external trusted home dmz public block</span><br></pre></td></tr></table></figure></li><li><p>查看默认的zone使用命令<code>firewalld-cmd --get-default-zone</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-default-zone </span></span><br><span class=\"line\">public</span><br></pre></td></tr></table></figure></li><li><p>firewalld的9个zone之间的区别见下表：</p></li></ul><style>table th{text-align:center}table th:first-of-type{width:120px}</style><table><thead><tr><th style=\"text-align:center\">zone</th><th>作用</th></tr></thead><tbody><tr><td style=\"text-align:center\">drop(丢弃)</td><td>任何接收的网络数据包都被丢弃，没有任何回复。仅能有发送出去的网络连接。</td></tr><tr><td style=\"text-align:center\">block(限制)</td><td>任何接收的网络连接都被IPv4的<strong>icmp-host-prohibited</strong>信息和IPv6的<strong>icmp6-adm-prohibited</strong>信息所拒绝。</td></tr><tr><td style=\"text-align:center\">public(公共)</td><td>在公共区域内使用，不能相信网络内其他计算机不会对你的计算机造成危害，只能接收经过选取的连接，即部分数据包放行。</td></tr><tr><td style=\"text-align:center\">external(外部)</td><td>特别是为路由器启用了伪装功能的外部网，不能信任来自网络其他计算机不会对我方计算机造成危害，只接收经过选择的连接。</td></tr><tr><td style=\"text-align:center\">dmz(非军事区)</td><td>用于非军事区内的电脑，次区域内可公开访问，可以有限的进入我们的内部网络，仅接收经选择的连接。</td></tr><tr><td style=\"text-align:center\">work(工作)</td><td>用于工作区，即可以基本相信网络内的其他电脑不会危害我的电脑。仅接收经过选择的连接。</td></tr><tr><td style=\"text-align:center\">home(家庭)</td><td>用于家庭网络，基本信任网络内其他计算机不会危害我的计算机，仅接收经过选择的连接。</td></tr><tr><td style=\"text-align:center\">internal(内部)</td><td>用于内部网络，基本上信任网络内其他计算机不会威胁我的计算机。仅接收经过选择的连接。</td></tr><tr><td style=\"text-align:center\">trusted(信任)</td><td>可接受所以的网络连接。</td></tr></tbody></table><h2 id=\"zone的操作\"><a href=\"#zone的操作\" class=\"headerlink\" title=\"zone的操作\"></a>zone的操作</h2><ul><li><p>命令<code>firewall-cmd --set-default-zone=work</code>可以更改默认的zone:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --set-default-zone=work</span></span><br><span class=\"line\">success</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-default-zone </span></span><br><span class=\"line\">work</span><br></pre></td></tr></table></figure></li><li><p>firewalld可以针对网卡操作，命令<code>firewall-cmd --get-zone-of-interface=[网卡名]</code>可以查看指定网卡的默认zone：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-zone-of-interface=enp0s3</span></span><br><span class=\"line\">work</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-zone-of-interface=enp0s8</span></span><br><span class=\"line\">no zone</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-zone-of-interface=lo</span></span><br><span class=\"line\">no zone</span><br></pre></td></tr></table></figure></li><li><p>如果查看新网卡的zone时结果是<code>no zone</code>，那么需要将<strong>/etc/sysconfig/network-scripts/</strong>下的原网卡配置文件复制一份并改成新的网卡名，然后重启网络服务和firewalld服务，再查看时就能看到新的网卡的默认zone：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www network-scripts]<span class=\"comment\"># systemctl restart network.service</span></span><br><span class=\"line\">[root@www network-scripts]<span class=\"comment\"># systemctl restart firewalld.service </span></span><br><span class=\"line\">[root@www network-scripts]<span class=\"comment\"># firewall-cmd --get-zone-of-interface=enp0s8</span></span><br><span class=\"line\">work</span><br></pre></td></tr></table></figure></li><li><p>给指定的网卡设置zone，命令为<code>firewall-cmd --zone=public --add-interface=enp0s8</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=public --add-interface=enp0s8</span></span><br><span class=\"line\">The interface is under control of NetworkManager, setting zone to <span class=\"string\">'public'</span>.</span><br><span class=\"line\">success</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-zone-of-interface=enp0s8</span></span><br><span class=\"line\">public</span><br></pre></td></tr></table></figure></li><li><p>更改指定网卡的zone，命令为<code>firewall-cmd --zone=dmz --change-interface=enp0s8</code></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=dmz --change-interface=enp0s8</span></span><br><span class=\"line\">The interface is under control of NetworkManager, setting zone to <span class=\"string\">'dmz'</span>.</span><br><span class=\"line\">success</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-zone-of-interface=enp0s8</span></span><br><span class=\"line\">dmz</span><br></pre></td></tr></table></figure></li><li><p>删除指定网卡的zone，命令为<code>firewall-cmd --zone=dmz --remove-interface=enp0s8</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=dmz --remove-interface=enp0s8</span></span><br><span class=\"line\">The interface is under control of NetworkManager, setting zone to default.</span><br><span class=\"line\">success</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-zone-of-interface=enp0s8</span></span><br><span class=\"line\">work</span><br></pre></td></tr></table></figure><blockquote><p>删除网卡的zone之后，网卡的zone会恢复到默认的zone设置。</p></blockquote></li><li><p>查看系统所以网卡所在的zone，命令为<code>firewall-cmd --get-active-zones</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-active-zones </span></span><br><span class=\"line\">work</span><br><span class=\"line\">  interfaces: enp0s3 enp0s8</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"firewalld的service\"><a href=\"#firewalld的service\" class=\"headerlink\" title=\"firewalld的service\"></a>firewalld的service</h2><ul><li><p>firewalld的service就是zone下面的子单元，可以理解为一个端口；</p></li><li><p>查看所有的service使用命令<code>firewall-cmd --get-services</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-services </span></span><br><span class=\"line\">RH-Satellite-6 amanda-client amanda-k5-client bacula bacula-client ceph ceph-mon dhcp dhcpv6 dhcpv6-client dns docker-registry dropbox-lansync freeipa-ldap freeipa-ldaps freeipa-replication ftp high-availability http https imap imaps ipp ipp-client ipsec iscsi-target kadmin kerberos kpasswd ldap ldaps libvirt libvirt-tls mdns mosh mountd ms-wbt mysql nfs ntp openvpn pmcd pmproxy pmwebapi pmwebapis pop3 pop3s postgresql privoxy proxy-dhcp ptp pulseaudio puppetmaster radius rpc-bind rsyncd samba samba-client sane smtp smtps snmp snmptrap squid ssh synergy syslog syslog-tls telnet tftp tftp-client tinc tor-socks transmission-client vdsm vnc-server wbem-https xmpp-bosh xmpp-client xmpp-local xmpp-server</span><br></pre></td></tr></table></figure></li><li><p>查看当前的zone的service使用命令<code>firewall-cmd --get-default-zone</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --get-default-zone </span></span><br><span class=\"line\">work</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --list-services </span></span><br><span class=\"line\">ssh dhcpv6-client</span><br></pre></td></tr></table></figure></li><li><p>而查看指定的zone的service，则使用命令<code>firewall-cmd --zone=public --list-services</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=public --list-services </span></span><br><span class=\"line\">dhcpv6-client ssh</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=dmz --list-services </span></span><br><span class=\"line\">ssh</span><br></pre></td></tr></table></figure></li><li><p>给指定的zone添加service，使用命令<code>firewall-cmd --zone=public --add-service=http</code>，这里添加的http实际上表示http服务对应的端口80：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=public --add-service=http</span></span><br><span class=\"line\">success</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=public --list-services </span></span><br><span class=\"line\">dhcpv6-client ssh http</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=public --add-service=ftp</span></span><br><span class=\"line\">success</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=public --list-services </span></span><br><span class=\"line\">dhcpv6-client ssh http ftp</span><br></pre></td></tr></table></figure></li><li><p>在shell中为zone添加了service之后，只是保存在内存中，想要将配置保存到配置文件中，则在添加service时使用下面的命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=public --add-service=https --permanent</span></span><br><span class=\"line\">success</span><br></pre></td></tr></table></figure></li><li><p>firewalld的配置文件在目录<code>/etc/firewalld/zones/</code>下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># ls /etc/firewalld/zones/</span></span><br><span class=\"line\">public.xml  public.xml.old</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># cat /etc/firewalld/zones/public.xml</span></span><br><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span>?&gt;</span><br><span class=\"line\">&lt;zone&gt;</span><br><span class=\"line\">  &lt;short&gt;Public&lt;/short&gt;</span><br><span class=\"line\">  &lt;description&gt;For use <span class=\"keyword\">in</span> public areas. You <span class=\"keyword\">do</span> not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted.&lt;/description&gt;</span><br><span class=\"line\">  &lt;service name=<span class=\"string\">\"dhcpv6-client\"</span>/&gt;</span><br><span class=\"line\">  &lt;service name=<span class=\"string\">\"ssh\"</span>/&gt;</span><br><span class=\"line\">  &lt;service name=<span class=\"string\">\"https\"</span>/&gt;</span><br><span class=\"line\">&lt;/zone&gt;</span><br></pre></td></tr></table></figure><p>可以看到https服务已经添加到public zone里了。</p></li><li><p>firewalld的zone在保存新的配置时，会将旧的配置文件后缀名加上<strong>.old</strong>保存，同样的service配置文件则在<code>/etc/firewalld/services/</code>目录下；而zone和service的配置文件都有一个模板文件，位于<code>/usr/lib/firewalld/[zone|services]</code>目录下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># ls /usr/lib/firewalld/zones/</span></span><br><span class=\"line\">block.xml  dmz.xml  drop.xml  external.xml  home.xml  internal.xml  public.xml  trusted.xml  work.xml</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># ls /usr/lib/firewalld/services/</span></span><br><span class=\"line\">amanda-client.xml        https.xml         mountd.xml      puppetmaster.xml    telnet.xml</span><br><span class=\"line\">amanda-k5-client.xml     http.xml          ms-wbt.xml      radius.xml          tftp-client.xml</span><br><span class=\"line\">bacula-client.xml        imaps.xml         mysql.xml       RH-Satellite-6.xml  tftp.xml</span><br><span class=\"line\">bacula.xml               imap.xml          nfs.xml         rpc-bind.xml        tinc.xml</span><br><span class=\"line\">ceph-mon.xml             ipp-client.xml    ntp.xml         rsyncd.xml          tor-socks.xml</span><br><span class=\"line\">ceph.xml                 ipp.xml           openvpn.xml     samba-client.xml    transmission-client.xml</span><br><span class=\"line\">dhcpv6-client.xml        ipsec.xml         pmcd.xml        samba.xml           vdsm.xml</span><br><span class=\"line\">dhcpv6.xml               iscsi-target.xml  pmproxy.xml     sane.xml            vnc-server.xml</span><br><span class=\"line\">dhcp.xml                 kadmin.xml        pmwebapis.xml   smtps.xml           wbem-https.xml</span><br><span class=\"line\">dns.xml                  kerberos.xml      pmwebapi.xml    smtp.xml            xmpp-bosh.xml</span><br><span class=\"line\">docker-registry.xml      kpasswd.xml       pop3s.xml       snmptrap.xml        xmpp-client.xml</span><br><span class=\"line\">dropbox-lansync.xml      ldaps.xml         pop3.xml        snmp.xml            xmpp-local.xml</span><br><span class=\"line\">freeipa-ldaps.xml        ldap.xml          postgresql.xml  squid.xml           xmpp-server.xml</span><br><span class=\"line\">freeipa-ldap.xml         libvirt-tls.xml   privoxy.xml     ssh.xml</span><br><span class=\"line\">freeipa-replication.xml  libvirt.xml       proxy-dhcp.xml  synergy.xml</span><br><span class=\"line\">ftp.xml                  mdns.xml          ptp.xml         syslog-tls.xml</span><br><span class=\"line\">high-availability.xml    mosh.xml          pulseaudio.xml  syslog.xml</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"firewalld配置案例\"><a href=\"#firewalld配置案例\" class=\"headerlink\" title=\"firewalld配置案例\"></a>firewalld配置案例</h2><ul><li><p>需求：将FTP服务端口改为1121，并且在work zone下放行ftp：</p><ul><li>拷贝ftp的配置文件到<code>/etc/firewalld/services/</code>目录下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># cp /usr/lib/firewalld/services/ftp.xml /etc/firewalld/services/</span></span><br></pre></td></tr></table></figure><ul><li>修改复制过来的FTP配置文件，将其中的端口配置改为1121：</li></ul><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/ftp_service.png\" alt=\"ftp-service\"></p><ul><li>复制work zone的配置文件到<code>/etc/firewalld/zones/</code>目录下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># cp /usr/lib/firewalld/zones/work.xml /etc/firewalld/zones/</span></span><br></pre></td></tr></table></figure><ul><li>修改复制来的work zone配置文件，将ftp服务添加进去：</li></ul><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/workzone.png\" alt=\"work-zone\"></p><ul><li>然后使用<code>firewall-cmd --reload</code>命令重新加载firewalld服务；并查看work zone的service列表ftp服务是否添加进去：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --reload </span></span><br><span class=\"line\">success</span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># firewall-cmd --zone=work --list-services </span></span><br><span class=\"line\">ssh dhcpv6-client ftp</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->"},{"title":"Linux文件打包工具","author":"Evobot","abbrlink":"b9ebaad1","date":"2018-04-15T15:10:03.000Z","image":"http://p5qynomrl.bkt.clouddn.com/15238112046500szvwym3.png?imageslim","_content":"\n\n\n本文介绍了**zip**压缩工具的压缩解压缩操作，并且介绍Linux文件打包工具，由于压缩工具不支持对目录的压缩，所以实际使用中，常常会先进行文件或目录的打包，然后再进行压缩，本文将介绍LInux中的`tar`工具，能够实现对文件或目录的打包并压缩操作。\n\n<!--more-->\n\n---\n\n# **zip**压缩工具\n\n## 压缩操作\n\n- 使用`zip`命令，需要先进行安装`zip`软件包，使用`yum install -y zip`进行安装；\n- 对文件进行压缩，命令格式为`zip [压缩文件名] [源文件或目录]`:\n\n```bash\n[root@evobot compress]# zip conf.zip conf2.txt \n  adding: conf2.txt (deflated 75%)\n  \n[root@evobot compress]# ls -l\n总用量 6448\n-rw-r--r-- 1 root root 5195265 4月  14 23:26 conf2.txt\n-rw-r--r-- 1 root root 1318260 4月  15 23:21 conf.zip\n```\n\n- zip压缩工具的`zip -r`选项能够实现对目录的压缩操作：\n\n```bash\n[root@evobot ~]# ls -l\n总用量 4\ndrwxr-xr-x 2 lux root 4096 4月  15 23:20 source\n\n[root@evobot ~]# zip -r source.zip source/\n  adding: source/ (stored 0%)\n  adding: source/go1.9.2.linux-amd64.zip (stored 0%)\n  adding: source/test.txt (deflated 93%)\n  adding: source/go.zip (stored 0%)\n  \n[root@evobot ~]# ls -l\n总用量 492\ndrwxr-xr-x 2 lux  root   4096 4月  15 23:20 source\n-rw-r--r-- 1 root root 492989 4月  15 23:23 source.zip\n```\n\n- `zip`压缩会自动保留压缩的源文件和目录。\n\n## 解压缩操作\n\n- 对**.zip**压缩文件进行解压缩操作，需要安装`unzip`软件包，使用`yum install -y unzip`安装；\n- 解压文件直接使用`unzip [zip压缩文件]`即可，但是在目录下存在与压缩包内相同的文件，解压时会询问用户是否覆盖、替换或重命名操作：\n\n```bash\n[root@evobot ~]# unzip source.zip \nArchive:  source.zip\nreplace source/go1.9.2.linux-amd64.zip? [y]es, [n]o, [A]ll, [N]one, [r]ename: A\t# 选择A则是全部替换文件\n extracting: source/go1.9.2.linux-amd64.zip  \n  inflating: source/test.txt         \n extracting: source/go.zip           \n```\n\n- 如果想要在解压时不提示是否覆盖，可以使用`unzip -n`不覆盖原有文件选项，或者`unzip -o`直接覆盖原有文件选项：\n\n```bash\n[root@evobot ~]# unzip -n source.zip \nArchive:  source.zip\n[root@evobot ~]# unzip -o source.zip \nArchive:  source.zip\n extracting: source/go1.9.2.linux-amd64.zip  \n  inflating: source/test.txt         \n extracting: source/go.zip           \n```\n\n- `unzip`在解压时，可以指定解压的路径，使用`unzip [zip压缩文件] -d [解压目录]`，指定的目录不存在时，`unzip`会自动创建目录，这也表示在指定目录压缩时，无法对解压文件进行重命名操作：\n\n```bash\n[root@evobot ~]# unzip source.zip -d /tmp/\nArchive:  source.zip\n   creating: /tmp/source/\n extracting: /tmp/source/go1.9.2.linux-amd64.zip  \n  inflating: /tmp/source/test.txt    \n extracting: /tmp/source/go.zip\n \n[root@evobot ~]# unzip source.zip -d /tmp/newdir\nArchive:  source.zip\n   creating: /tmp/newdir/source/\n extracting: /tmp/newdir/source/go1.9.2.linux-amd64.zip \n  inflating: /tmp/newdir/source/test.txt  \n extracting: /tmp/newdir/source/go.zip  \n```\n\n- `.zip`压缩包无法查看压缩包内的文件内容，但是可以查看压缩包内的文件列表，使用`unzip -l [zip压缩包]`命令查看：\n\n```bash\n[root@evobot ~]# unzip -l source.zip \nArchive:  source.zip\n  Length      Date    Time    Name\n---------  ---------- -----   ----\n        0  04-15-2018 23:20   source/\n   245760  03-12-2018 17:41   source/go1.9.2.linux-amd64.zip\n     9051  03-27-2018 23:40   source/test.txt\n   245956  04-15-2018 23:20   source/go.zip\n---------                     -------\n   500767                     4 files\n```\n\n---\n\n# **tar**打包工具\n\n- 打包是指将一大堆文件或目录变成一个总的文件，利用**tar**，可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件，也可以把一大堆的文件和目录全部打包成一个文件，这对于备份文件或将几个文件组合成为一个文件以便于网络传输是非常有用的\n- Linux中很多压缩程序只能针对一个文件进行压缩，当想要压缩一大堆文件时，需要先将这一大堆文件先打成一个包（tar命令），然后再用压缩程序进行压缩（gzip，bzip2命令）。\n\n## 打包操作\n\n- 对目录进行打包，使用`tar -cvf [包名.tar] [目录]`，其中选项`-c`表示创建，`-v`表示显示打包过程，`-f`表示指定包名：\n\n```bash\n[root@evobot ~]# tar -cvf source.tar source\nsource/\nsource/go1.9.2.linux-amd64.zip\nsource/test.txt\nsource/go.zip\n\n[root@evobot ~]# ls -l\n总用量 996\ndrwxr-xr-x 2 lux  root   4096 4月  15 23:37 source\n-rw-r--r-- 1 root root 512000 4月  15 23:53 source.tar\n\n# 不使用-v选项\n[root@evobot ~]# tar -cf source2.tar source\n[root@evobot ~]# ls -l\n总用量 1012\ndrwxr-xr-x 2 lux  root   4096 4月  15 23:37 source\n-rw-r--r-- 1 root root 512000 4月  15 23:54 source2.tar\n-rw-r--r-- 1 root root 512000 4月  15 23:53 source.tar\n```\n\n- 需要注意，如果打包时存在同名的包，则会不提示直接覆盖已存在的包；\n- `tar`打包可以实现对目录、文件或者目录与文件一起的打包操作，只需要在打包时指定多个文件或目录即可：\n\n```bash\n[root@evobot log]# tar -cvf tmplog.tar anaconda/ dmesg lastlog maillog secure \nanaconda/\nanaconda/packaging.log\nanaconda/storage.log\nanaconda/anaconda.log\nanaconda/ks-script-KKMRDG.log\nanaconda/ks-script-P2r9iH.log\nanaconda/program.log\nanaconda/ks-script-ixRdPZ.log\nanaconda/journal.log\nanaconda/syslog\nanaconda/ifcfg.log\ndmesg\nlastlog\nmaillog\nsecure\n[root@evobot log]# ls -l tmplog.tar \n-rw-r--r-- 1 root root 19834880 4月  16 00:02 tmplog.tar\n```\n\n- 在打包时，如果希望忽略部分文件，不对其进行打包，则使用`--exclude`选项，忽略多个文件时，需要添加多个`--exclude`选项，每个选项后跟一个文件名，另外忽略的文件也可以使用通配符匹配来忽略一类文件，具体用法如下：\n\n```bash\n[root@evobot log]# tar -cvf tmplog2.tar  --exclude anaconda/anaconda.log --exclude audit/audit.log.1 anaconda/ audit/\nanaconda/\nanaconda/packaging.log\nanaconda/storage.log\nanaconda/ks-script-KKMRDG.log\nanaconda/ks-script-P2r9iH.log\nanaconda/program.log\nanaconda/ks-script-ixRdPZ.log\nanaconda/journal.log\nanaconda/syslog\nanaconda/ifcfg.log\naudit/\naudit/audit.log\naudit/audit.log.3\naudit/audit.log.2\naudit/audit.log.4\n\n# 使用通配符忽略文件\n[root@evobot log]# tar -cvf tmplog.tar --exclude anaconda/\"*.log\" --exclude audit/\"audit.log.*\" anaconda/ audit/\nanaconda/\nanaconda/syslog\naudit/\naudit/audit.log\n```\n\n\n\n## 解包操作\n\n- 解包操作使用`tar -xvf [tar包]`命令，其中`-x`选项的作用是解包，解包时会直接覆盖原有文件：\n\n```bash\n[root@evobot ~]# tar -xvf source.tar \nsource/\nsource/go1.9.2.linux-amd64.zip\nsource/test.txt\nsource/go.zip\n```\n\n- 查看tar包内的文件列表，使用`tar -tf [tar包]`命令：\n\n```bash\n[root@evobot log]# tar -tf tmplog.tar \nanaconda/\nanaconda/packaging.log\nanaconda/storage.log\nanaconda/anaconda.log\nanaconda/ks-script-KKMRDG.log\nanaconda/ks-script-P2r9iH.log\nanaconda/program.log\nanaconda/ks-script-ixRdPZ.log\nanaconda/journal.log\nanaconda/syslog\nanaconda/ifcfg.log\ndmesg\nlastlog\nmaillog\nsecure\n```\n\n- 解压时可以指定解压的路径，使用`-C`选项：\n\n```bash\n[root@evobot ~]# tar -xvf source.tar -C /tmp/\nsource/\nsource/go1.9.2.linux-amd64.zip\nsource/test.txt\n[root@evobot ~]# ls -lhd /tmp/source/\ndrwxr-xr-x 2 lux root 4.0K 4月  16 00:20 /tmp/source/\n```\n\n\n\n## 打包并压缩\n\n- `tar`在打包时，支持压缩操作，并且支持`.gz`、`.bz2`、`.xz`压缩格式，命令如下表：\n\n<style>\ntable th:first-of-type {\n    width: 180px;\n}\n</style>\n\n\n|   压缩格式    |                   压缩命令                   |\n| :-------: | :--------------------------------------: |\n| **gzip**  | `tar -zcvf [filename.tar.gz] [file1] [file2] ...` |\n| **bzip2** | `tar -jcvf [filename.tar.bz2] [file1] [file2] ...` |\n|  **xz**   | `tar -Jcvf [filename.tar.xz][file1] [file2] ...` |\n\n```bash\n[root@evobot ~]# tar -zcvf source.tar.gz source/\nsource/\nsource/go1.9.2.linux-amd64.zip\nsource/test.txt\n[root@evobot ~]# ls -lh source.tar.gz \n-rw-r--r-- 1 root root 241K 4月  16 00:26 source.tar.gz\n[root@evobot ~]# file source.tar.gz \nsource.tar.gz: gzip compressed data, from Unix, last modified: Mon Apr 16 00:26:05 2018\n\n[root@evobot ~]# tar -jcvf source.tar.bz2 source\nsource/\nsource/go1.9.2.linux-amd64.zip\nsource/test.txt\n[root@evobot ~]# ls -lh source.tar.bz2 \n-rw-r--r-- 1 root root 244K 4月  16 00:27 source.tar.bz2\n[root@evobot ~]# file source.tar.bz2 \nsource.tar.bz2: bzip2 compressed data, block size = 900k\n\n[root@evobot ~]# tar -Jcvf source.tar.xz source\nsource/\nsource/go1.9.2.linux-amd64.zip\nsource/test.txt\n[root@evobot ~]# ls -lh source.tar.xz \n-rw-r--r-- 1 root root 242K 4月  16 00:28 source.tar.xz\n[root@evobot ~]# file source.tar.xz \nsource.tar.xz: XZ compressed data\n\n```\n\n- 对压缩的tar包进行解压缩，只需要将压缩命令的`-c`选项替换为`-x`选项即可：\n\n|   压缩格式    |              解压命令              |\n| :-------: | :----------------------------: |\n| **gzip**  | `tar -zxvf [filename.tar.gz]`  |\n| **bzip2** | `tar -jxvf [filename.tar.bz2]` |\n|  **xz**   | `tar -Jxvf [filename.tar.xz]`  |\n\n```bash\n[root@evobot ~]# tar -zxvf source.tar.gz \nsource/\nsource/go1.9.2.linux-amd64.zip\nsource/test.txt\n\n[root@evobot ~]# tar -jxvf source.tar.bz2 \nsource/\nsource/go1.9.2.linux-amd64.zip\nsource/test.txt\n\n[root@evobot ~]# tar -Jxvf source.tar.xz \nsource/\nsource/go1.9.2.linux-amd64.zip\nsource/test.txt\n```\n\n- 对压缩的tar包，查看包内的文件列表，依然使用`tar -tf [filename]`命令查看：\n\n```bash\n[root@evobot ~]# tar -tf source.tar.gz \nsource/\nsource/go1.9.2.linux-amd64.zip\nsource/test.txt\n```\n\n---\n\n","source":"_posts/Linux文件打包工具.md","raw":"---\ntitle: Linux文件打包工具\nauthor: Evobot\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\nabbrlink: b9ebaad1\ndate: 2018-04-15 23:10:03\nimage: http://p5qynomrl.bkt.clouddn.com/15238112046500szvwym3.png?imageslim\n---\n\n\n\n本文介绍了**zip**压缩工具的压缩解压缩操作，并且介绍Linux文件打包工具，由于压缩工具不支持对目录的压缩，所以实际使用中，常常会先进行文件或目录的打包，然后再进行压缩，本文将介绍LInux中的`tar`工具，能够实现对文件或目录的打包并压缩操作。\n\n<!--more-->\n\n---\n\n# **zip**压缩工具\n\n## 压缩操作\n\n- 使用`zip`命令，需要先进行安装`zip`软件包，使用`yum install -y zip`进行安装；\n- 对文件进行压缩，命令格式为`zip [压缩文件名] [源文件或目录]`:\n\n```bash\n[root@evobot compress]# zip conf.zip conf2.txt \n  adding: conf2.txt (deflated 75%)\n  \n[root@evobot compress]# ls -l\n总用量 6448\n-rw-r--r-- 1 root root 5195265 4月  14 23:26 conf2.txt\n-rw-r--r-- 1 root root 1318260 4月  15 23:21 conf.zip\n```\n\n- zip压缩工具的`zip -r`选项能够实现对目录的压缩操作：\n\n```bash\n[root@evobot ~]# ls -l\n总用量 4\ndrwxr-xr-x 2 lux root 4096 4月  15 23:20 source\n\n[root@evobot ~]# zip -r source.zip source/\n  adding: source/ (stored 0%)\n  adding: source/go1.9.2.linux-amd64.zip (stored 0%)\n  adding: source/test.txt (deflated 93%)\n  adding: source/go.zip (stored 0%)\n  \n[root@evobot ~]# ls -l\n总用量 492\ndrwxr-xr-x 2 lux  root   4096 4月  15 23:20 source\n-rw-r--r-- 1 root root 492989 4月  15 23:23 source.zip\n```\n\n- `zip`压缩会自动保留压缩的源文件和目录。\n\n## 解压缩操作\n\n- 对**.zip**压缩文件进行解压缩操作，需要安装`unzip`软件包，使用`yum install -y unzip`安装；\n- 解压文件直接使用`unzip [zip压缩文件]`即可，但是在目录下存在与压缩包内相同的文件，解压时会询问用户是否覆盖、替换或重命名操作：\n\n```bash\n[root@evobot ~]# unzip source.zip \nArchive:  source.zip\nreplace source/go1.9.2.linux-amd64.zip? [y]es, [n]o, [A]ll, [N]one, [r]ename: A\t# 选择A则是全部替换文件\n extracting: source/go1.9.2.linux-amd64.zip  \n  inflating: source/test.txt         \n extracting: source/go.zip           \n```\n\n- 如果想要在解压时不提示是否覆盖，可以使用`unzip -n`不覆盖原有文件选项，或者`unzip -o`直接覆盖原有文件选项：\n\n```bash\n[root@evobot ~]# unzip -n source.zip \nArchive:  source.zip\n[root@evobot ~]# unzip -o source.zip \nArchive:  source.zip\n extracting: source/go1.9.2.linux-amd64.zip  \n  inflating: source/test.txt         \n extracting: source/go.zip           \n```\n\n- `unzip`在解压时，可以指定解压的路径，使用`unzip [zip压缩文件] -d [解压目录]`，指定的目录不存在时，`unzip`会自动创建目录，这也表示在指定目录压缩时，无法对解压文件进行重命名操作：\n\n```bash\n[root@evobot ~]# unzip source.zip -d /tmp/\nArchive:  source.zip\n   creating: /tmp/source/\n extracting: /tmp/source/go1.9.2.linux-amd64.zip  \n  inflating: /tmp/source/test.txt    \n extracting: /tmp/source/go.zip\n \n[root@evobot ~]# unzip source.zip -d /tmp/newdir\nArchive:  source.zip\n   creating: /tmp/newdir/source/\n extracting: /tmp/newdir/source/go1.9.2.linux-amd64.zip \n  inflating: /tmp/newdir/source/test.txt  \n extracting: /tmp/newdir/source/go.zip  \n```\n\n- `.zip`压缩包无法查看压缩包内的文件内容，但是可以查看压缩包内的文件列表，使用`unzip -l [zip压缩包]`命令查看：\n\n```bash\n[root@evobot ~]# unzip -l source.zip \nArchive:  source.zip\n  Length      Date    Time    Name\n---------  ---------- -----   ----\n        0  04-15-2018 23:20   source/\n   245760  03-12-2018 17:41   source/go1.9.2.linux-amd64.zip\n     9051  03-27-2018 23:40   source/test.txt\n   245956  04-15-2018 23:20   source/go.zip\n---------                     -------\n   500767                     4 files\n```\n\n---\n\n# **tar**打包工具\n\n- 打包是指将一大堆文件或目录变成一个总的文件，利用**tar**，可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件，也可以把一大堆的文件和目录全部打包成一个文件，这对于备份文件或将几个文件组合成为一个文件以便于网络传输是非常有用的\n- Linux中很多压缩程序只能针对一个文件进行压缩，当想要压缩一大堆文件时，需要先将这一大堆文件先打成一个包（tar命令），然后再用压缩程序进行压缩（gzip，bzip2命令）。\n\n## 打包操作\n\n- 对目录进行打包，使用`tar -cvf [包名.tar] [目录]`，其中选项`-c`表示创建，`-v`表示显示打包过程，`-f`表示指定包名：\n\n```bash\n[root@evobot ~]# tar -cvf source.tar source\nsource/\nsource/go1.9.2.linux-amd64.zip\nsource/test.txt\nsource/go.zip\n\n[root@evobot ~]# ls -l\n总用量 996\ndrwxr-xr-x 2 lux  root   4096 4月  15 23:37 source\n-rw-r--r-- 1 root root 512000 4月  15 23:53 source.tar\n\n# 不使用-v选项\n[root@evobot ~]# tar -cf source2.tar source\n[root@evobot ~]# ls -l\n总用量 1012\ndrwxr-xr-x 2 lux  root   4096 4月  15 23:37 source\n-rw-r--r-- 1 root root 512000 4月  15 23:54 source2.tar\n-rw-r--r-- 1 root root 512000 4月  15 23:53 source.tar\n```\n\n- 需要注意，如果打包时存在同名的包，则会不提示直接覆盖已存在的包；\n- `tar`打包可以实现对目录、文件或者目录与文件一起的打包操作，只需要在打包时指定多个文件或目录即可：\n\n```bash\n[root@evobot log]# tar -cvf tmplog.tar anaconda/ dmesg lastlog maillog secure \nanaconda/\nanaconda/packaging.log\nanaconda/storage.log\nanaconda/anaconda.log\nanaconda/ks-script-KKMRDG.log\nanaconda/ks-script-P2r9iH.log\nanaconda/program.log\nanaconda/ks-script-ixRdPZ.log\nanaconda/journal.log\nanaconda/syslog\nanaconda/ifcfg.log\ndmesg\nlastlog\nmaillog\nsecure\n[root@evobot log]# ls -l tmplog.tar \n-rw-r--r-- 1 root root 19834880 4月  16 00:02 tmplog.tar\n```\n\n- 在打包时，如果希望忽略部分文件，不对其进行打包，则使用`--exclude`选项，忽略多个文件时，需要添加多个`--exclude`选项，每个选项后跟一个文件名，另外忽略的文件也可以使用通配符匹配来忽略一类文件，具体用法如下：\n\n```bash\n[root@evobot log]# tar -cvf tmplog2.tar  --exclude anaconda/anaconda.log --exclude audit/audit.log.1 anaconda/ audit/\nanaconda/\nanaconda/packaging.log\nanaconda/storage.log\nanaconda/ks-script-KKMRDG.log\nanaconda/ks-script-P2r9iH.log\nanaconda/program.log\nanaconda/ks-script-ixRdPZ.log\nanaconda/journal.log\nanaconda/syslog\nanaconda/ifcfg.log\naudit/\naudit/audit.log\naudit/audit.log.3\naudit/audit.log.2\naudit/audit.log.4\n\n# 使用通配符忽略文件\n[root@evobot log]# tar -cvf tmplog.tar --exclude anaconda/\"*.log\" --exclude audit/\"audit.log.*\" anaconda/ audit/\nanaconda/\nanaconda/syslog\naudit/\naudit/audit.log\n```\n\n\n\n## 解包操作\n\n- 解包操作使用`tar -xvf [tar包]`命令，其中`-x`选项的作用是解包，解包时会直接覆盖原有文件：\n\n```bash\n[root@evobot ~]# tar -xvf source.tar \nsource/\nsource/go1.9.2.linux-amd64.zip\nsource/test.txt\nsource/go.zip\n```\n\n- 查看tar包内的文件列表，使用`tar -tf [tar包]`命令：\n\n```bash\n[root@evobot log]# tar -tf tmplog.tar \nanaconda/\nanaconda/packaging.log\nanaconda/storage.log\nanaconda/anaconda.log\nanaconda/ks-script-KKMRDG.log\nanaconda/ks-script-P2r9iH.log\nanaconda/program.log\nanaconda/ks-script-ixRdPZ.log\nanaconda/journal.log\nanaconda/syslog\nanaconda/ifcfg.log\ndmesg\nlastlog\nmaillog\nsecure\n```\n\n- 解压时可以指定解压的路径，使用`-C`选项：\n\n```bash\n[root@evobot ~]# tar -xvf source.tar -C /tmp/\nsource/\nsource/go1.9.2.linux-amd64.zip\nsource/test.txt\n[root@evobot ~]# ls -lhd /tmp/source/\ndrwxr-xr-x 2 lux root 4.0K 4月  16 00:20 /tmp/source/\n```\n\n\n\n## 打包并压缩\n\n- `tar`在打包时，支持压缩操作，并且支持`.gz`、`.bz2`、`.xz`压缩格式，命令如下表：\n\n<style>\ntable th:first-of-type {\n    width: 180px;\n}\n</style>\n\n\n|   压缩格式    |                   压缩命令                   |\n| :-------: | :--------------------------------------: |\n| **gzip**  | `tar -zcvf [filename.tar.gz] [file1] [file2] ...` |\n| **bzip2** | `tar -jcvf [filename.tar.bz2] [file1] [file2] ...` |\n|  **xz**   | `tar -Jcvf [filename.tar.xz][file1] [file2] ...` |\n\n```bash\n[root@evobot ~]# tar -zcvf source.tar.gz source/\nsource/\nsource/go1.9.2.linux-amd64.zip\nsource/test.txt\n[root@evobot ~]# ls -lh source.tar.gz \n-rw-r--r-- 1 root root 241K 4月  16 00:26 source.tar.gz\n[root@evobot ~]# file source.tar.gz \nsource.tar.gz: gzip compressed data, from Unix, last modified: Mon Apr 16 00:26:05 2018\n\n[root@evobot ~]# tar -jcvf source.tar.bz2 source\nsource/\nsource/go1.9.2.linux-amd64.zip\nsource/test.txt\n[root@evobot ~]# ls -lh source.tar.bz2 \n-rw-r--r-- 1 root root 244K 4月  16 00:27 source.tar.bz2\n[root@evobot ~]# file source.tar.bz2 \nsource.tar.bz2: bzip2 compressed data, block size = 900k\n\n[root@evobot ~]# tar -Jcvf source.tar.xz source\nsource/\nsource/go1.9.2.linux-amd64.zip\nsource/test.txt\n[root@evobot ~]# ls -lh source.tar.xz \n-rw-r--r-- 1 root root 242K 4月  16 00:28 source.tar.xz\n[root@evobot ~]# file source.tar.xz \nsource.tar.xz: XZ compressed data\n\n```\n\n- 对压缩的tar包进行解压缩，只需要将压缩命令的`-c`选项替换为`-x`选项即可：\n\n|   压缩格式    |              解压命令              |\n| :-------: | :----------------------------: |\n| **gzip**  | `tar -zxvf [filename.tar.gz]`  |\n| **bzip2** | `tar -jxvf [filename.tar.bz2]` |\n|  **xz**   | `tar -Jxvf [filename.tar.xz]`  |\n\n```bash\n[root@evobot ~]# tar -zxvf source.tar.gz \nsource/\nsource/go1.9.2.linux-amd64.zip\nsource/test.txt\n\n[root@evobot ~]# tar -jxvf source.tar.bz2 \nsource/\nsource/go1.9.2.linux-amd64.zip\nsource/test.txt\n\n[root@evobot ~]# tar -Jxvf source.tar.xz \nsource/\nsource/go1.9.2.linux-amd64.zip\nsource/test.txt\n```\n\n- 对压缩的tar包，查看包内的文件列表，依然使用`tar -tf [filename]`命令查看：\n\n```bash\n[root@evobot ~]# tar -tf source.tar.gz \nsource/\nsource/go1.9.2.linux-amd64.zip\nsource/test.txt\n```\n\n---\n\n","slug":"Linux文件打包工具","published":1,"updated":"2018-06-02T13:01:29.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazff004nu1jxoanq07oa","content":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p>本文介绍了<strong>zip</strong>压缩工具的压缩解压缩操作，并且介绍Linux文件打包工具，由于压缩工具不支持对目录的压缩，所以实际使用中，常常会先进行文件或目录的打包，然后再进行压缩，本文将介绍LInux中的<code>tar</code>工具，能够实现对文件或目录的打包并压缩操作。</p><a id=\"more\"></a><hr><h1 id=\"zip压缩工具\"><a href=\"#zip压缩工具\" class=\"headerlink\" title=\"zip压缩工具\"></a><strong>zip</strong>压缩工具</h1><h2 id=\"压缩操作\"><a href=\"#压缩操作\" class=\"headerlink\" title=\"压缩操作\"></a>压缩操作</h2><ul><li>使用<code>zip</code>命令，需要先进行安装<code>zip</code>软件包，使用<code>yum install -y zip</code>进行安装；</li><li>对文件进行压缩，命令格式为<code>zip [压缩文件名] [源文件或目录]</code>:</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># zip conf.zip conf2.txt </span></span><br><span class=\"line\">  adding: conf2.txt (deflated 75%)</span><br><span class=\"line\">  </span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -l</span></span><br><span class=\"line\">总用量 6448</span><br><span class=\"line\">-rw-r--r-- 1 root root 5195265 4月  14 23:26 conf2.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root 1318260 4月  15 23:21 conf.zip</span><br></pre></td></tr></table></figure><ul><li>zip压缩工具的<code>zip -r</code>选项能够实现对目录的压缩操作：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -l</span></span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">drwxr-xr-x 2 lux root 4096 4月  15 23:20 <span class=\"built_in\">source</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># zip -r source.zip source/</span></span><br><span class=\"line\">  adding: <span class=\"built_in\">source</span>/ (stored 0%)</span><br><span class=\"line\">  adding: <span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip (stored 0%)</span><br><span class=\"line\">  adding: <span class=\"built_in\">source</span>/test.txt (deflated 93%)</span><br><span class=\"line\">  adding: <span class=\"built_in\">source</span>/go.zip (stored 0%)</span><br><span class=\"line\">  </span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -l</span></span><br><span class=\"line\">总用量 492</span><br><span class=\"line\">drwxr-xr-x 2 lux  root   4096 4月  15 23:20 <span class=\"built_in\">source</span></span><br><span class=\"line\">-rw-r--r-- 1 root root 492989 4月  15 23:23 source.zip</span><br></pre></td></tr></table></figure><ul><li><code>zip</code>压缩会自动保留压缩的源文件和目录。</li></ul><h2 id=\"解压缩操作\"><a href=\"#解压缩操作\" class=\"headerlink\" title=\"解压缩操作\"></a>解压缩操作</h2><ul><li>对<strong>.zip</strong>压缩文件进行解压缩操作，需要安装<code>unzip</code>软件包，使用<code>yum install -y unzip</code>安装；</li><li>解压文件直接使用<code>unzip [zip压缩文件]</code>即可，但是在目录下存在与压缩包内相同的文件，解压时会询问用户是否覆盖、替换或重命名操作：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># unzip source.zip </span></span><br><span class=\"line\">Archive:  source.zip</span><br><span class=\"line\">replace <span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip? [y]es, [n]o, [A]ll, [N]one, [r]ename: A\t<span class=\"comment\"># 选择A则是全部替换文件</span></span><br><span class=\"line\"> extracting: <span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip  </span><br><span class=\"line\">  inflating: <span class=\"built_in\">source</span>/test.txt         </span><br><span class=\"line\"> extracting: <span class=\"built_in\">source</span>/go.zip</span><br></pre></td></tr></table></figure><ul><li>如果想要在解压时不提示是否覆盖，可以使用<code>unzip -n</code>不覆盖原有文件选项，或者<code>unzip -o</code>直接覆盖原有文件选项：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># unzip -n source.zip </span></span><br><span class=\"line\">Archive:  source.zip</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># unzip -o source.zip </span></span><br><span class=\"line\">Archive:  source.zip</span><br><span class=\"line\"> extracting: <span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip  </span><br><span class=\"line\">  inflating: <span class=\"built_in\">source</span>/test.txt         </span><br><span class=\"line\"> extracting: <span class=\"built_in\">source</span>/go.zip</span><br></pre></td></tr></table></figure><ul><li><code>unzip</code>在解压时，可以指定解压的路径，使用<code>unzip [zip压缩文件] -d [解压目录]</code>，指定的目录不存在时，<code>unzip</code>会自动创建目录，这也表示在指定目录压缩时，无法对解压文件进行重命名操作：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># unzip source.zip -d /tmp/</span></span><br><span class=\"line\">Archive:  source.zip</span><br><span class=\"line\">   creating: /tmp/<span class=\"built_in\">source</span>/</span><br><span class=\"line\"> extracting: /tmp/<span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip  </span><br><span class=\"line\">  inflating: /tmp/<span class=\"built_in\">source</span>/test.txt    </span><br><span class=\"line\"> extracting: /tmp/<span class=\"built_in\">source</span>/go.zip</span><br><span class=\"line\"> </span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># unzip source.zip -d /tmp/newdir</span></span><br><span class=\"line\">Archive:  source.zip</span><br><span class=\"line\">   creating: /tmp/newdir/<span class=\"built_in\">source</span>/</span><br><span class=\"line\"> extracting: /tmp/newdir/<span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip </span><br><span class=\"line\">  inflating: /tmp/newdir/<span class=\"built_in\">source</span>/test.txt  </span><br><span class=\"line\"> extracting: /tmp/newdir/<span class=\"built_in\">source</span>/go.zip</span><br></pre></td></tr></table></figure><ul><li><code>.zip</code>压缩包无法查看压缩包内的文件内容，但是可以查看压缩包内的文件列表，使用<code>unzip -l [zip压缩包]</code>命令查看：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># unzip -l source.zip </span></span><br><span class=\"line\">Archive:  source.zip</span><br><span class=\"line\">  Length      Date    Time    Name</span><br><span class=\"line\">---------  ---------- -----   ----</span><br><span class=\"line\">        0  04-15-2018 23:20   <span class=\"built_in\">source</span>/</span><br><span class=\"line\">   245760  03-12-2018 17:41   <span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\">     9051  03-27-2018 23:40   <span class=\"built_in\">source</span>/test.txt</span><br><span class=\"line\">   245956  04-15-2018 23:20   <span class=\"built_in\">source</span>/go.zip</span><br><span class=\"line\">---------                     -------</span><br><span class=\"line\">   500767                     4 files</span><br></pre></td></tr></table></figure><hr><h1 id=\"tar打包工具\"><a href=\"#tar打包工具\" class=\"headerlink\" title=\"tar打包工具\"></a><strong>tar</strong>打包工具</h1><ul><li>打包是指将一大堆文件或目录变成一个总的文件，利用<strong>tar</strong>，可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件，也可以把一大堆的文件和目录全部打包成一个文件，这对于备份文件或将几个文件组合成为一个文件以便于网络传输是非常有用的</li><li>Linux中很多压缩程序只能针对一个文件进行压缩，当想要压缩一大堆文件时，需要先将这一大堆文件先打成一个包（tar命令），然后再用压缩程序进行压缩（gzip，bzip2命令）。</li></ul><h2 id=\"打包操作\"><a href=\"#打包操作\" class=\"headerlink\" title=\"打包操作\"></a>打包操作</h2><ul><li>对目录进行打包，使用<code>tar -cvf [包名.tar] [目录]</code>，其中选项<code>-c</code>表示创建，<code>-v</code>表示显示打包过程，<code>-f</code>表示指定包名：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -cvf source.tar source</span></span><br><span class=\"line\"><span class=\"built_in\">source</span>/</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\"><span class=\"built_in\">source</span>/test.txt</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go.zip</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -l</span></span><br><span class=\"line\">总用量 996</span><br><span class=\"line\">drwxr-xr-x 2 lux  root   4096 4月  15 23:37 <span class=\"built_in\">source</span></span><br><span class=\"line\">-rw-r--r-- 1 root root 512000 4月  15 23:53 source.tar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不使用-v选项</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -cf source2.tar source</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -l</span></span><br><span class=\"line\">总用量 1012</span><br><span class=\"line\">drwxr-xr-x 2 lux  root   4096 4月  15 23:37 <span class=\"built_in\">source</span></span><br><span class=\"line\">-rw-r--r-- 1 root root 512000 4月  15 23:54 source2.tar</span><br><span class=\"line\">-rw-r--r-- 1 root root 512000 4月  15 23:53 source.tar</span><br></pre></td></tr></table></figure><ul><li>需要注意，如果打包时存在同名的包，则会不提示直接覆盖已存在的包；</li><li><code>tar</code>打包可以实现对目录、文件或者目录与文件一起的打包操作，只需要在打包时指定多个文件或目录即可：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">log</span>]<span class=\"comment\"># tar -cvf tmplog.tar anaconda/ dmesg lastlog maillog secure </span></span><br><span class=\"line\">anaconda/</span><br><span class=\"line\">anaconda/packaging.log</span><br><span class=\"line\">anaconda/storage.log</span><br><span class=\"line\">anaconda/anaconda.log</span><br><span class=\"line\">anaconda/ks-script-KKMRDG.log</span><br><span class=\"line\">anaconda/ks-script-P2r9iH.log</span><br><span class=\"line\">anaconda/program.log</span><br><span class=\"line\">anaconda/ks-script-ixRdPZ.log</span><br><span class=\"line\">anaconda/journal.log</span><br><span class=\"line\">anaconda/syslog</span><br><span class=\"line\">anaconda/ifcfg.log</span><br><span class=\"line\">dmesg</span><br><span class=\"line\">lastlog</span><br><span class=\"line\">maillog</span><br><span class=\"line\">secure</span><br><span class=\"line\">[root@evobot <span class=\"built_in\">log</span>]<span class=\"comment\"># ls -l tmplog.tar </span></span><br><span class=\"line\">-rw-r--r-- 1 root root 19834880 4月  16 00:02 tmplog.tar</span><br></pre></td></tr></table></figure><ul><li>在打包时，如果希望忽略部分文件，不对其进行打包，则使用<code>--exclude</code>选项，忽略多个文件时，需要添加多个<code>--exclude</code>选项，每个选项后跟一个文件名，另外忽略的文件也可以使用通配符匹配来忽略一类文件，具体用法如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">log</span>]<span class=\"comment\"># tar -cvf tmplog2.tar  --exclude anaconda/anaconda.log --exclude audit/audit.log.1 anaconda/ audit/</span></span><br><span class=\"line\">anaconda/</span><br><span class=\"line\">anaconda/packaging.log</span><br><span class=\"line\">anaconda/storage.log</span><br><span class=\"line\">anaconda/ks-script-KKMRDG.log</span><br><span class=\"line\">anaconda/ks-script-P2r9iH.log</span><br><span class=\"line\">anaconda/program.log</span><br><span class=\"line\">anaconda/ks-script-ixRdPZ.log</span><br><span class=\"line\">anaconda/journal.log</span><br><span class=\"line\">anaconda/syslog</span><br><span class=\"line\">anaconda/ifcfg.log</span><br><span class=\"line\">audit/</span><br><span class=\"line\">audit/audit.log</span><br><span class=\"line\">audit/audit.log.3</span><br><span class=\"line\">audit/audit.log.2</span><br><span class=\"line\">audit/audit.log.4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用通配符忽略文件</span></span><br><span class=\"line\">[root@evobot <span class=\"built_in\">log</span>]<span class=\"comment\"># tar -cvf tmplog.tar --exclude anaconda/\"*.log\" --exclude audit/\"audit.log.*\" anaconda/ audit/</span></span><br><span class=\"line\">anaconda/</span><br><span class=\"line\">anaconda/syslog</span><br><span class=\"line\">audit/</span><br><span class=\"line\">audit/audit.log</span><br></pre></td></tr></table></figure><h2 id=\"解包操作\"><a href=\"#解包操作\" class=\"headerlink\" title=\"解包操作\"></a>解包操作</h2><ul><li>解包操作使用<code>tar -xvf [tar包]</code>命令，其中<code>-x</code>选项的作用是解包，解包时会直接覆盖原有文件：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -xvf source.tar </span></span><br><span class=\"line\"><span class=\"built_in\">source</span>/</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\"><span class=\"built_in\">source</span>/test.txt</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go.zip</span><br></pre></td></tr></table></figure><ul><li>查看tar包内的文件列表，使用<code>tar -tf [tar包]</code>命令：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">log</span>]<span class=\"comment\"># tar -tf tmplog.tar </span></span><br><span class=\"line\">anaconda/</span><br><span class=\"line\">anaconda/packaging.log</span><br><span class=\"line\">anaconda/storage.log</span><br><span class=\"line\">anaconda/anaconda.log</span><br><span class=\"line\">anaconda/ks-script-KKMRDG.log</span><br><span class=\"line\">anaconda/ks-script-P2r9iH.log</span><br><span class=\"line\">anaconda/program.log</span><br><span class=\"line\">anaconda/ks-script-ixRdPZ.log</span><br><span class=\"line\">anaconda/journal.log</span><br><span class=\"line\">anaconda/syslog</span><br><span class=\"line\">anaconda/ifcfg.log</span><br><span class=\"line\">dmesg</span><br><span class=\"line\">lastlog</span><br><span class=\"line\">maillog</span><br><span class=\"line\">secure</span><br></pre></td></tr></table></figure><ul><li>解压时可以指定解压的路径，使用<code>-C</code>选项：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -xvf source.tar -C /tmp/</span></span><br><span class=\"line\"><span class=\"built_in\">source</span>/</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\"><span class=\"built_in\">source</span>/test.txt</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -lhd /tmp/source/</span></span><br><span class=\"line\">drwxr-xr-x 2 lux root 4.0K 4月  16 00:20 /tmp/<span class=\"built_in\">source</span>/</span><br></pre></td></tr></table></figure><h2 id=\"打包并压缩\"><a href=\"#打包并压缩\" class=\"headerlink\" title=\"打包并压缩\"></a>打包并压缩</h2><ul><li><code>tar</code>在打包时，支持压缩操作，并且支持<code>.gz</code>、<code>.bz2</code>、<code>.xz</code>压缩格式，命令如下表：</li></ul><style>table th:first-of-type{width:180px}</style><table><thead><tr><th style=\"text-align:center\">压缩格式</th><th style=\"text-align:center\">压缩命令</th></tr></thead><tbody><tr><td style=\"text-align:center\"><strong>gzip</strong></td><td style=\"text-align:center\"><code>tar -zcvf [filename.tar.gz] [file1] [file2] ...</code></td></tr><tr><td style=\"text-align:center\"><strong>bzip2</strong></td><td style=\"text-align:center\"><code>tar -jcvf [filename.tar.bz2] [file1] [file2] ...</code></td></tr><tr><td style=\"text-align:center\"><strong>xz</strong></td><td style=\"text-align:center\"><code>tar -Jcvf [filename.tar.xz][file1] [file2] ...</code></td></tr></tbody></table><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -zcvf source.tar.gz source/</span></span><br><span class=\"line\"><span class=\"built_in\">source</span>/</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\"><span class=\"built_in\">source</span>/test.txt</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -lh source.tar.gz </span></span><br><span class=\"line\">-rw-r--r-- 1 root root 241K 4月  16 00:26 source.tar.gz</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># file source.tar.gz </span></span><br><span class=\"line\">source.tar.gz: gzip compressed data, from Unix, last modified: Mon Apr 16 00:26:05 2018</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -jcvf source.tar.bz2 source</span></span><br><span class=\"line\"><span class=\"built_in\">source</span>/</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\"><span class=\"built_in\">source</span>/test.txt</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -lh source.tar.bz2 </span></span><br><span class=\"line\">-rw-r--r-- 1 root root 244K 4月  16 00:27 source.tar.bz2</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># file source.tar.bz2 </span></span><br><span class=\"line\">source.tar.bz2: bzip2 compressed data, block size = 900k</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -Jcvf source.tar.xz source</span></span><br><span class=\"line\"><span class=\"built_in\">source</span>/</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\"><span class=\"built_in\">source</span>/test.txt</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -lh source.tar.xz </span></span><br><span class=\"line\">-rw-r--r-- 1 root root 242K 4月  16 00:28 source.tar.xz</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># file source.tar.xz </span></span><br><span class=\"line\">source.tar.xz: XZ compressed data</span><br></pre></td></tr></table></figure><ul><li>对压缩的tar包进行解压缩，只需要将压缩命令的<code>-c</code>选项替换为<code>-x</code>选项即可：</li></ul><table><thead><tr><th style=\"text-align:center\">压缩格式</th><th style=\"text-align:center\">解压命令</th></tr></thead><tbody><tr><td style=\"text-align:center\"><strong>gzip</strong></td><td style=\"text-align:center\"><code>tar -zxvf [filename.tar.gz]</code></td></tr><tr><td style=\"text-align:center\"><strong>bzip2</strong></td><td style=\"text-align:center\"><code>tar -jxvf [filename.tar.bz2]</code></td></tr><tr><td style=\"text-align:center\"><strong>xz</strong></td><td style=\"text-align:center\"><code>tar -Jxvf [filename.tar.xz]</code></td></tr></tbody></table><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -zxvf source.tar.gz </span></span><br><span class=\"line\"><span class=\"built_in\">source</span>/</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\"><span class=\"built_in\">source</span>/test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -jxvf source.tar.bz2 </span></span><br><span class=\"line\"><span class=\"built_in\">source</span>/</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\"><span class=\"built_in\">source</span>/test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -Jxvf source.tar.xz </span></span><br><span class=\"line\"><span class=\"built_in\">source</span>/</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\"><span class=\"built_in\">source</span>/test.txt</span><br></pre></td></tr></table></figure><ul><li>对压缩的tar包，查看包内的文件列表，依然使用<code>tar -tf [filename]</code>命令查看：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -tf source.tar.gz </span></span><br><span class=\"line\"><span class=\"built_in\">source</span>/</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\"><span class=\"built_in\">source</span>/test.txt</span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p>本文介绍了<strong>zip</strong>压缩工具的压缩解压缩操作，并且介绍Linux文件打包工具，由于压缩工具不支持对目录的压缩，所以实际使用中，常常会先进行文件或目录的打包，然后再进行压缩，本文将介绍LInux中的<code>tar</code>工具，能够实现对文件或目录的打包并压缩操作。</p>","more":"<hr><h1 id=\"zip压缩工具\"><a href=\"#zip压缩工具\" class=\"headerlink\" title=\"zip压缩工具\"></a><strong>zip</strong>压缩工具</h1><h2 id=\"压缩操作\"><a href=\"#压缩操作\" class=\"headerlink\" title=\"压缩操作\"></a>压缩操作</h2><ul><li>使用<code>zip</code>命令，需要先进行安装<code>zip</code>软件包，使用<code>yum install -y zip</code>进行安装；</li><li>对文件进行压缩，命令格式为<code>zip [压缩文件名] [源文件或目录]</code>:</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot compress]<span class=\"comment\"># zip conf.zip conf2.txt </span></span><br><span class=\"line\">  adding: conf2.txt (deflated 75%)</span><br><span class=\"line\">  </span><br><span class=\"line\">[root@evobot compress]<span class=\"comment\"># ls -l</span></span><br><span class=\"line\">总用量 6448</span><br><span class=\"line\">-rw-r--r-- 1 root root 5195265 4月  14 23:26 conf2.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root 1318260 4月  15 23:21 conf.zip</span><br></pre></td></tr></table></figure><ul><li>zip压缩工具的<code>zip -r</code>选项能够实现对目录的压缩操作：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -l</span></span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">drwxr-xr-x 2 lux root 4096 4月  15 23:20 <span class=\"built_in\">source</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># zip -r source.zip source/</span></span><br><span class=\"line\">  adding: <span class=\"built_in\">source</span>/ (stored 0%)</span><br><span class=\"line\">  adding: <span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip (stored 0%)</span><br><span class=\"line\">  adding: <span class=\"built_in\">source</span>/test.txt (deflated 93%)</span><br><span class=\"line\">  adding: <span class=\"built_in\">source</span>/go.zip (stored 0%)</span><br><span class=\"line\">  </span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -l</span></span><br><span class=\"line\">总用量 492</span><br><span class=\"line\">drwxr-xr-x 2 lux  root   4096 4月  15 23:20 <span class=\"built_in\">source</span></span><br><span class=\"line\">-rw-r--r-- 1 root root 492989 4月  15 23:23 source.zip</span><br></pre></td></tr></table></figure><ul><li><code>zip</code>压缩会自动保留压缩的源文件和目录。</li></ul><h2 id=\"解压缩操作\"><a href=\"#解压缩操作\" class=\"headerlink\" title=\"解压缩操作\"></a>解压缩操作</h2><ul><li>对<strong>.zip</strong>压缩文件进行解压缩操作，需要安装<code>unzip</code>软件包，使用<code>yum install -y unzip</code>安装；</li><li>解压文件直接使用<code>unzip [zip压缩文件]</code>即可，但是在目录下存在与压缩包内相同的文件，解压时会询问用户是否覆盖、替换或重命名操作：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># unzip source.zip </span></span><br><span class=\"line\">Archive:  source.zip</span><br><span class=\"line\">replace <span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip? [y]es, [n]o, [A]ll, [N]one, [r]ename: A\t<span class=\"comment\"># 选择A则是全部替换文件</span></span><br><span class=\"line\"> extracting: <span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip  </span><br><span class=\"line\">  inflating: <span class=\"built_in\">source</span>/test.txt         </span><br><span class=\"line\"> extracting: <span class=\"built_in\">source</span>/go.zip</span><br></pre></td></tr></table></figure><ul><li>如果想要在解压时不提示是否覆盖，可以使用<code>unzip -n</code>不覆盖原有文件选项，或者<code>unzip -o</code>直接覆盖原有文件选项：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># unzip -n source.zip </span></span><br><span class=\"line\">Archive:  source.zip</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># unzip -o source.zip </span></span><br><span class=\"line\">Archive:  source.zip</span><br><span class=\"line\"> extracting: <span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip  </span><br><span class=\"line\">  inflating: <span class=\"built_in\">source</span>/test.txt         </span><br><span class=\"line\"> extracting: <span class=\"built_in\">source</span>/go.zip</span><br></pre></td></tr></table></figure><ul><li><code>unzip</code>在解压时，可以指定解压的路径，使用<code>unzip [zip压缩文件] -d [解压目录]</code>，指定的目录不存在时，<code>unzip</code>会自动创建目录，这也表示在指定目录压缩时，无法对解压文件进行重命名操作：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># unzip source.zip -d /tmp/</span></span><br><span class=\"line\">Archive:  source.zip</span><br><span class=\"line\">   creating: /tmp/<span class=\"built_in\">source</span>/</span><br><span class=\"line\"> extracting: /tmp/<span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip  </span><br><span class=\"line\">  inflating: /tmp/<span class=\"built_in\">source</span>/test.txt    </span><br><span class=\"line\"> extracting: /tmp/<span class=\"built_in\">source</span>/go.zip</span><br><span class=\"line\"> </span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># unzip source.zip -d /tmp/newdir</span></span><br><span class=\"line\">Archive:  source.zip</span><br><span class=\"line\">   creating: /tmp/newdir/<span class=\"built_in\">source</span>/</span><br><span class=\"line\"> extracting: /tmp/newdir/<span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip </span><br><span class=\"line\">  inflating: /tmp/newdir/<span class=\"built_in\">source</span>/test.txt  </span><br><span class=\"line\"> extracting: /tmp/newdir/<span class=\"built_in\">source</span>/go.zip</span><br></pre></td></tr></table></figure><ul><li><code>.zip</code>压缩包无法查看压缩包内的文件内容，但是可以查看压缩包内的文件列表，使用<code>unzip -l [zip压缩包]</code>命令查看：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># unzip -l source.zip </span></span><br><span class=\"line\">Archive:  source.zip</span><br><span class=\"line\">  Length      Date    Time    Name</span><br><span class=\"line\">---------  ---------- -----   ----</span><br><span class=\"line\">        0  04-15-2018 23:20   <span class=\"built_in\">source</span>/</span><br><span class=\"line\">   245760  03-12-2018 17:41   <span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\">     9051  03-27-2018 23:40   <span class=\"built_in\">source</span>/test.txt</span><br><span class=\"line\">   245956  04-15-2018 23:20   <span class=\"built_in\">source</span>/go.zip</span><br><span class=\"line\">---------                     -------</span><br><span class=\"line\">   500767                     4 files</span><br></pre></td></tr></table></figure><hr><h1 id=\"tar打包工具\"><a href=\"#tar打包工具\" class=\"headerlink\" title=\"tar打包工具\"></a><strong>tar</strong>打包工具</h1><ul><li>打包是指将一大堆文件或目录变成一个总的文件，利用<strong>tar</strong>，可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件，也可以把一大堆的文件和目录全部打包成一个文件，这对于备份文件或将几个文件组合成为一个文件以便于网络传输是非常有用的</li><li>Linux中很多压缩程序只能针对一个文件进行压缩，当想要压缩一大堆文件时，需要先将这一大堆文件先打成一个包（tar命令），然后再用压缩程序进行压缩（gzip，bzip2命令）。</li></ul><h2 id=\"打包操作\"><a href=\"#打包操作\" class=\"headerlink\" title=\"打包操作\"></a>打包操作</h2><ul><li>对目录进行打包，使用<code>tar -cvf [包名.tar] [目录]</code>，其中选项<code>-c</code>表示创建，<code>-v</code>表示显示打包过程，<code>-f</code>表示指定包名：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -cvf source.tar source</span></span><br><span class=\"line\"><span class=\"built_in\">source</span>/</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\"><span class=\"built_in\">source</span>/test.txt</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go.zip</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -l</span></span><br><span class=\"line\">总用量 996</span><br><span class=\"line\">drwxr-xr-x 2 lux  root   4096 4月  15 23:37 <span class=\"built_in\">source</span></span><br><span class=\"line\">-rw-r--r-- 1 root root 512000 4月  15 23:53 source.tar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不使用-v选项</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -cf source2.tar source</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -l</span></span><br><span class=\"line\">总用量 1012</span><br><span class=\"line\">drwxr-xr-x 2 lux  root   4096 4月  15 23:37 <span class=\"built_in\">source</span></span><br><span class=\"line\">-rw-r--r-- 1 root root 512000 4月  15 23:54 source2.tar</span><br><span class=\"line\">-rw-r--r-- 1 root root 512000 4月  15 23:53 source.tar</span><br></pre></td></tr></table></figure><ul><li>需要注意，如果打包时存在同名的包，则会不提示直接覆盖已存在的包；</li><li><code>tar</code>打包可以实现对目录、文件或者目录与文件一起的打包操作，只需要在打包时指定多个文件或目录即可：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">log</span>]<span class=\"comment\"># tar -cvf tmplog.tar anaconda/ dmesg lastlog maillog secure </span></span><br><span class=\"line\">anaconda/</span><br><span class=\"line\">anaconda/packaging.log</span><br><span class=\"line\">anaconda/storage.log</span><br><span class=\"line\">anaconda/anaconda.log</span><br><span class=\"line\">anaconda/ks-script-KKMRDG.log</span><br><span class=\"line\">anaconda/ks-script-P2r9iH.log</span><br><span class=\"line\">anaconda/program.log</span><br><span class=\"line\">anaconda/ks-script-ixRdPZ.log</span><br><span class=\"line\">anaconda/journal.log</span><br><span class=\"line\">anaconda/syslog</span><br><span class=\"line\">anaconda/ifcfg.log</span><br><span class=\"line\">dmesg</span><br><span class=\"line\">lastlog</span><br><span class=\"line\">maillog</span><br><span class=\"line\">secure</span><br><span class=\"line\">[root@evobot <span class=\"built_in\">log</span>]<span class=\"comment\"># ls -l tmplog.tar </span></span><br><span class=\"line\">-rw-r--r-- 1 root root 19834880 4月  16 00:02 tmplog.tar</span><br></pre></td></tr></table></figure><ul><li>在打包时，如果希望忽略部分文件，不对其进行打包，则使用<code>--exclude</code>选项，忽略多个文件时，需要添加多个<code>--exclude</code>选项，每个选项后跟一个文件名，另外忽略的文件也可以使用通配符匹配来忽略一类文件，具体用法如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">log</span>]<span class=\"comment\"># tar -cvf tmplog2.tar  --exclude anaconda/anaconda.log --exclude audit/audit.log.1 anaconda/ audit/</span></span><br><span class=\"line\">anaconda/</span><br><span class=\"line\">anaconda/packaging.log</span><br><span class=\"line\">anaconda/storage.log</span><br><span class=\"line\">anaconda/ks-script-KKMRDG.log</span><br><span class=\"line\">anaconda/ks-script-P2r9iH.log</span><br><span class=\"line\">anaconda/program.log</span><br><span class=\"line\">anaconda/ks-script-ixRdPZ.log</span><br><span class=\"line\">anaconda/journal.log</span><br><span class=\"line\">anaconda/syslog</span><br><span class=\"line\">anaconda/ifcfg.log</span><br><span class=\"line\">audit/</span><br><span class=\"line\">audit/audit.log</span><br><span class=\"line\">audit/audit.log.3</span><br><span class=\"line\">audit/audit.log.2</span><br><span class=\"line\">audit/audit.log.4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用通配符忽略文件</span></span><br><span class=\"line\">[root@evobot <span class=\"built_in\">log</span>]<span class=\"comment\"># tar -cvf tmplog.tar --exclude anaconda/\"*.log\" --exclude audit/\"audit.log.*\" anaconda/ audit/</span></span><br><span class=\"line\">anaconda/</span><br><span class=\"line\">anaconda/syslog</span><br><span class=\"line\">audit/</span><br><span class=\"line\">audit/audit.log</span><br></pre></td></tr></table></figure><h2 id=\"解包操作\"><a href=\"#解包操作\" class=\"headerlink\" title=\"解包操作\"></a>解包操作</h2><ul><li>解包操作使用<code>tar -xvf [tar包]</code>命令，其中<code>-x</code>选项的作用是解包，解包时会直接覆盖原有文件：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -xvf source.tar </span></span><br><span class=\"line\"><span class=\"built_in\">source</span>/</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\"><span class=\"built_in\">source</span>/test.txt</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go.zip</span><br></pre></td></tr></table></figure><ul><li>查看tar包内的文件列表，使用<code>tar -tf [tar包]</code>命令：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot <span class=\"built_in\">log</span>]<span class=\"comment\"># tar -tf tmplog.tar </span></span><br><span class=\"line\">anaconda/</span><br><span class=\"line\">anaconda/packaging.log</span><br><span class=\"line\">anaconda/storage.log</span><br><span class=\"line\">anaconda/anaconda.log</span><br><span class=\"line\">anaconda/ks-script-KKMRDG.log</span><br><span class=\"line\">anaconda/ks-script-P2r9iH.log</span><br><span class=\"line\">anaconda/program.log</span><br><span class=\"line\">anaconda/ks-script-ixRdPZ.log</span><br><span class=\"line\">anaconda/journal.log</span><br><span class=\"line\">anaconda/syslog</span><br><span class=\"line\">anaconda/ifcfg.log</span><br><span class=\"line\">dmesg</span><br><span class=\"line\">lastlog</span><br><span class=\"line\">maillog</span><br><span class=\"line\">secure</span><br></pre></td></tr></table></figure><ul><li>解压时可以指定解压的路径，使用<code>-C</code>选项：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -xvf source.tar -C /tmp/</span></span><br><span class=\"line\"><span class=\"built_in\">source</span>/</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\"><span class=\"built_in\">source</span>/test.txt</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -lhd /tmp/source/</span></span><br><span class=\"line\">drwxr-xr-x 2 lux root 4.0K 4月  16 00:20 /tmp/<span class=\"built_in\">source</span>/</span><br></pre></td></tr></table></figure><h2 id=\"打包并压缩\"><a href=\"#打包并压缩\" class=\"headerlink\" title=\"打包并压缩\"></a>打包并压缩</h2><ul><li><code>tar</code>在打包时，支持压缩操作，并且支持<code>.gz</code>、<code>.bz2</code>、<code>.xz</code>压缩格式，命令如下表：</li></ul><style>table th:first-of-type{width:180px}</style><table><thead><tr><th style=\"text-align:center\">压缩格式</th><th style=\"text-align:center\">压缩命令</th></tr></thead><tbody><tr><td style=\"text-align:center\"><strong>gzip</strong></td><td style=\"text-align:center\"><code>tar -zcvf [filename.tar.gz] [file1] [file2] ...</code></td></tr><tr><td style=\"text-align:center\"><strong>bzip2</strong></td><td style=\"text-align:center\"><code>tar -jcvf [filename.tar.bz2] [file1] [file2] ...</code></td></tr><tr><td style=\"text-align:center\"><strong>xz</strong></td><td style=\"text-align:center\"><code>tar -Jcvf [filename.tar.xz][file1] [file2] ...</code></td></tr></tbody></table><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -zcvf source.tar.gz source/</span></span><br><span class=\"line\"><span class=\"built_in\">source</span>/</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\"><span class=\"built_in\">source</span>/test.txt</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -lh source.tar.gz </span></span><br><span class=\"line\">-rw-r--r-- 1 root root 241K 4月  16 00:26 source.tar.gz</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># file source.tar.gz </span></span><br><span class=\"line\">source.tar.gz: gzip compressed data, from Unix, last modified: Mon Apr 16 00:26:05 2018</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -jcvf source.tar.bz2 source</span></span><br><span class=\"line\"><span class=\"built_in\">source</span>/</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\"><span class=\"built_in\">source</span>/test.txt</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -lh source.tar.bz2 </span></span><br><span class=\"line\">-rw-r--r-- 1 root root 244K 4月  16 00:27 source.tar.bz2</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># file source.tar.bz2 </span></span><br><span class=\"line\">source.tar.bz2: bzip2 compressed data, block size = 900k</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -Jcvf source.tar.xz source</span></span><br><span class=\"line\"><span class=\"built_in\">source</span>/</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\"><span class=\"built_in\">source</span>/test.txt</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls -lh source.tar.xz </span></span><br><span class=\"line\">-rw-r--r-- 1 root root 242K 4月  16 00:28 source.tar.xz</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># file source.tar.xz </span></span><br><span class=\"line\">source.tar.xz: XZ compressed data</span><br></pre></td></tr></table></figure><ul><li>对压缩的tar包进行解压缩，只需要将压缩命令的<code>-c</code>选项替换为<code>-x</code>选项即可：</li></ul><table><thead><tr><th style=\"text-align:center\">压缩格式</th><th style=\"text-align:center\">解压命令</th></tr></thead><tbody><tr><td style=\"text-align:center\"><strong>gzip</strong></td><td style=\"text-align:center\"><code>tar -zxvf [filename.tar.gz]</code></td></tr><tr><td style=\"text-align:center\"><strong>bzip2</strong></td><td style=\"text-align:center\"><code>tar -jxvf [filename.tar.bz2]</code></td></tr><tr><td style=\"text-align:center\"><strong>xz</strong></td><td style=\"text-align:center\"><code>tar -Jxvf [filename.tar.xz]</code></td></tr></tbody></table><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -zxvf source.tar.gz </span></span><br><span class=\"line\"><span class=\"built_in\">source</span>/</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\"><span class=\"built_in\">source</span>/test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -jxvf source.tar.bz2 </span></span><br><span class=\"line\"><span class=\"built_in\">source</span>/</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\"><span class=\"built_in\">source</span>/test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -Jxvf source.tar.xz </span></span><br><span class=\"line\"><span class=\"built_in\">source</span>/</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\"><span class=\"built_in\">source</span>/test.txt</span><br></pre></td></tr></table></figure><ul><li>对压缩的tar包，查看包内的文件列表，依然使用<code>tar -tf [filename]</code>命令查看：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># tar -tf source.tar.gz </span></span><br><span class=\"line\"><span class=\"built_in\">source</span>/</span><br><span class=\"line\"><span class=\"built_in\">source</span>/go1.9.2.linux-amd64.zip</span><br><span class=\"line\"><span class=\"built_in\">source</span>/test.txt</span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->"},{"title":"Linux磁盘管理——分区格式化与挂载","author":"Evobot","abbrlink":"aa04cc87","date":"2018-04-10T15:33:44.000Z","image":null,"_content":"\n\n\n![磁盘分区](http://p5qynomrl.bkt.clouddn.com/1523378473666fges139o.png?imageslim)\n\n本文主要介绍如何格式化新增的磁盘分区，并介绍怎样将新分区挂载到系统目录，以及如何增加swap空间。\n\n<!-- more -->\n\n---\n\n# 磁盘格式化\n\n- 磁盘分区之后必须进行格式化才能够使用，Centos7支持的文件系统可以通过命令`cat /etc/filesystems`进行查看：\n\n  ```bash\n  [lux@evobot ~]$ cat /etc/filesystems \n  xfs\n  ext4\n  ext3\n  ext2\n  nodev proc\n  nodev devpts\n  iso9660\n  vfat\n  hfs\n  hfsplus\n  *\n  ```\n\n- Centos7默认的文件系统为`xfs`，查看已挂载的分区的文件系统，可以使用`mount`命令查看，执行命令后结果输出比较多，只需要关注`/dev/sdx`这样的分区即可，如果查看未挂载的分区文件系统，使用`blkid`命令：\n\n  ```bash\n  [root@localhost ~]# mount | column -t\t# column -t可以使输出内容比较整齐\n  sysfs       on  /sys                             type  sysfs       (rw,nosuid,nodev,noexec,relatime,seclabel)\n  proc        on  /proc                            type  proc        (rw,nosuid,nodev,noexec,relatime)\n  devtmpfs    on  /dev                             type  devtmpfs    (rw,nosuid,seclabel,size=498656k,nr_inodes=124664,mode=755)\n  securityfs  on  /sys/kernel/security             type  securityfs  (rw,nosuid,nodev,noexec,relatime)\n  tmpfs       on  /dev/shm                         type  tmpfs       (rw,nosuid,nodev,seclabel)\n  devpts      on  /dev/pts                         type  devpts      (rw,nosuid,noexec,relatime,seclabel,gid=5,mode=620,ptmxmode=000)\n  tmpfs       on  /run                             type  tmpfs       (rw,nosuid,nodev,seclabel,mode=755)\n  /dev/sda3   on  /                                type  xfs         (rw,relatime,seclabel,attr2,inode64,noquota)\n  selinuxfs   on  /sys/fs/selinux                  type  selinuxfs   (rw,relatime)\n  /dev/sda1   on  /boot                            type  xfs         (rw,relatime,seclabel,attr2,inode64,noquota)\n\n  [root@localhost ~]# blkid /dev/sdb1\n  /dev/sdb1: UUID=\"708dbd6b-e75f-4196-98b0-0457525b8e97\" TYPE=\"ext4\" PARTUUID=\"fa0fcddc-d811-44e8-bfe0-d8f38384bbc5\" \n\n  ```\n\n## mke2fs命令\n\n- 格式化分区使用`mke2fs`命令，此命令不支持`xfs`文件系统的格式化，常用选项如下：\n<style>\ntable th:first-of-type {\n\n    width: 70px;\n}\ntable th {\n    text-align: center;\n}\n</style>\n\n| 命令选项 | 作用                                       |\n| :----: | ---------------------------------------- |\n| `-t` | 指定文件系统类型，如ext3、ext4，不指定时默认为ext2          |\n| `-b` | 指定分区块大小，默认为4KB，支持1024B、2048B等，使用`du -sb`可以查看文件实际大小 |\n| `-m` | 指定分区预留空间大小，默认预留5%，可以指定为1、0.1等            |\n| `-i` | 指定多少字节对应inode大小，默认4个块对应一个inode，即16K对应一个inode，可以指定为8192，即2个块对应一个inode |\n\n```bash\n[root@localhost ~]# mke2fs -t ext3 -b 2048 -m 1 /dev/sdb1\nmke2fs 1.42.9 (28-Dec-2013)\n文件系统标签=\nOS type: Linux\n块大小=2048 (log=1)\n分块大小=2048 (log=1)\nStride=0 blocks, Stripe width=0 blocks\n122400 inodes, 975872 blocks\n9758 blocks (1.00%) reserved for the super user\n第一个数据块=0\nMaximum filesystem blocks=537919488\n60 block groups\n16384 blocks per group, 16384 fragments per group\n2040 inodes per group\nSuperblock backups stored on blocks: \n\t16384, 49152, 81920, 114688, 147456, 409600, 442368, 802816\n\nAllocating group tables: 完成                            \n正在写入inode表: 完成                            \nCreating journal (16384 blocks): 完成\nWriting superblocks and filesystem accounting information: 完成 \n\n[root@localhost ~]# mke2fs -t ext3  -m 1 -i 8192 /dev/sdb1\nmke2fs 1.42.9 (28-Dec-2013)\n文件系统标签=\nOS type: Linux\n块大小=4096 (log=2)\n分块大小=4096 (log=2)\nStride=0 blocks, Stripe width=0 blocks\n244080 inodes, 487936 blocks\n4879 blocks (1.00%) reserved for the super user\n第一个数据块=0\nMaximum filesystem blocks=503316480\n15 block groups\n32768 blocks per group, 32768 fragments per group\n16272 inodes per group\nSuperblock backups stored on blocks: \n\t32768, 98304, 163840, 229376, 294912\n\nAllocating group tables: 完成                            \n正在写入inode表: 完成                            \nCreating journal (8192 blocks): 完成\nWriting superblocks and filesystem accounting information: 完成\n```\n\n## mkfs.xfs命令\n\n- 格式化为`xfs`文件系统，使用`mkfs.xfs`命令，当分区已经存在文件系统时，需要加`-f`选项：\n\n  ```bash\n  [root@localhost ~]# mkfs.xfs /dev/sdb1\n  mkfs.xfs: /dev/sdb1 appears to contain an existing filesystem (ext3).\n  mkfs.xfs: Use the -f option to force overwrite.\n\n  [root@localhost ~]# mkfs.xfs -f /dev/sdb1\n  meta-data=/dev/sdb1              isize=512    agcount=4, agsize=121984 blks\n           =                       sectsz=512   attr=2, projid32bit=1\n           =                       crc=1        finobt=0, sparse=0\n  data     =                       bsize=4096   blocks=487936, imaxpct=25\n           =                       sunit=0      swidth=0 blks\n  naming   =version 2              bsize=4096   ascii-ci=0 ftype=1\n  log      =internal log           bsize=4096   blocks=2560, version=2\n           =                       sectsz=512   sunit=0 blks, lazy-count=1\n  realtime =none                   extsz=4096   blocks=0, rtextents=0\n\n  ```\n\n- `mkfs.xfs`同样也可以指定文件系统的块大小，使用`-b size=(num)`选项：\n\n  ```bash\n  [root@localhost ~]# mkfs.xfs -b size=2048 -f /dev/sdb1\n  meta-data=/dev/sdb1              isize=512    agcount=4, agsize=243968 blks\n           =                       sectsz=512   attr=2, projid32bit=1\n           =                       crc=1        finobt=0, sparse=0\n  data     =                       bsize=2048   blocks=975872, imaxpct=25\n           =                       sunit=0      swidth=0 blks\n  naming   =version 2              bsize=4096   ascii-ci=0 ftype=1\n  log      =internal log           bsize=2048   blocks=5120, version=2\n           =                       sectsz=512   sunit=0 blks, lazy-count=1\n  realtime =none                   extsz=4096   blocks=0, rtextents=0\n\n  ```\n\n---\n\n# 磁盘挂载\n## mount命令\n- `mount`命令用来对分区进行挂载，命令用法为`mount [-o] /dev/sdx`,`-o`参数可以指定挂载的选项，如`rw`,`exec`.`async`等\n```bash\n[root@localhost ~]# mount /dev/sdb /mnt/\n[root@localhost ~]# df -h\n文件系统        容量  已用  可用 已用% 挂载点\n/dev/sda3        48G  1.3G   47G    3% /\ndevtmpfs        479M     0  479M    0% /dev\ntmpfs           489M     0  489M    0% /dev/shm\ntmpfs           489M  6.7M  482M    2% /run\ntmpfs           489M     0  489M    0% /sys/fs/cgroup\n/dev/sda1       197M  109M   88M   56% /boot\ntmpfs            98M     0   98M    0% /run/user/0\n#/dev/sdb就是我们所挂载的磁盘\n/dev/sdb         10G   33M   10G    1% /mnt\n```\n## umount命令\n- `umount`命令用来卸载已挂载的磁盘，命令用法为`umount [-l] [disk|dir]`，可以使用`/dev/`下的磁盘路径卸载，也可以使用磁盘挂载的目录卸载：\n```bash\n[root@localhost mnt]# umount /dev/sdb \numount: /mnt：目标忙。\n        (有些情况下通过 lsof(8) 或 fuser(1) 可以\n         找到有关使用该设备的进程的有用信息)\n[root@localhost mnt]# umount -l /mnt/\n[root@localhost mnt]# df -h\n文件系统        容量  已用  可用 已用% 挂载点\n/dev/sda3        48G  1.3G   47G    3% /\ndevtmpfs        479M     0  479M    0% /dev\ntmpfs           489M     0  489M    0% /dev/shm\ntmpfs           489M  6.7M  482M    2% /run\ntmpfs           489M     0  489M    0% /sys/fs/cgroup\n/dev/sda1       197M  109M   88M   56% /boot\ntmpfs            98M     0   98M    0% /run/user/0\n```\n## fstab文件\n- `/etc/fstab`文件是用来开机挂载磁盘的文件，文件内容分为5列，分别是UUID,挂载点，挂载选项，dump备份，开机启动优先级，其中dump和优先级默认为0，若开启优先级，则根分区为1，其他分区为2：\n```bash\n[root@localhost mnt]# cat /etc/fstab \n#\n# /etc/fstab\n# Created by anaconda on Sat Aug 19 07:18:38 2017\n#\n# Accessible filesystems, by reference, are maintained under '/dev/disk'\n# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info\n#\nUUID=e54aee54-8247-4abd-a51b-ae2d89416133 /                       xfs     defaults        0 0\nUUID=8916b3db-57d9-4c03-831e-542d7550b1a2 /boot                   xfs     defaults        0 0\nUUID=9670b2c4-e1e1-4214-9b4e-7e840a36deb2 swap                    swap    defaults        0 0\n```\n- 查看磁盘的UUID,使用`blkid`命令查看,除了使用UUID,也可以使用磁盘路径`/dev/sdx`写入`fstab`文件.\n```bash\n[root@localhost mnt]# cat /etc/fstab\n#\n# /etc/fstab\n# Created by anaconda on Sat Aug 19 07:18:38 2017\n#\n# Accessible filesystems, by reference, are maintained under '/dev/disk'\n# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info\n#\nUUID=e54aee54-8247-4abd-a51b-ae2d89416133 /                       xfs     defaults        0 0\nUUID=8916b3db-57d9-4c03-831e-542d7550b1a2 /boot                   xfs     defaults        0 0\nUUID=9670b2c4-e1e1-4214-9b4e-7e840a36deb2 swap                    swap    defaults        0 0\n#下面就是我们自己添加的需要挂载的磁盘\nUUID=5b0de14c-5a26-43ec-9d13-fa4440072c82    /mnt        xfs    defaults    0 0\n```\n- 写入`fstab`文件之后,使用命令`mount -a`来检查`fstab`文件的挂载内容是否有错误,如果没有问题,则磁盘会被顺利挂载。\n\n\n------------\n\n# 创建swap分区\n- `swap`分区是系统的虚拟内存,一般来说为内存的2倍,但是一般最大8G即可,当系统需要较大的swap空间时,可以手动增加swap分区。\n## 创建虚拟磁盘\n- 创建虚拟磁盘使用`dd`命令,命令格式为`dd if=/dev/zero of=/tmp/tmpimage.img bs=1M count=100`\n```bash\n[root@localhost mnt]# dd if=/dev/zero of=/tmp/virtual.img bs=1M count=100\n记录了100+0 的读入\n记录了100+0 的写出\n104857600字节(105 MB)已复制，2.72497 秒，38.5 MB/秒\n```\n## 设置swap分区\n- 格式化`swap`分区使用`mkswap`命令:\n```bash\n[root@localhost mnt]# mkswap -f /tmp/virtual.img \n正在设置交换空间版本 1，大小 = 102396 KiB\n无标签，UUID=cf9a3f57-1ddc-4e5a-9766-bb11aa7d526b\n```\n- 使用`swapon`命令将新的`swap`挂载到系统:\n```bash\n[root@localhost mnt]# free -h\n              total        used        free      shared  buff/cache   available\nMem:           976M        109M        608M        6.6M        258M        690M\nSwap:          2.0G          0B        2.0G\n[root@localhost mnt]# swapon /tmp/virtual.img \nswapon: /tmp/virtual.img：不安全的权限 0644，建议使用 0600。\n[root@localhost mnt]# free -h    #查看swap空间已经增加\n              total        used        free      shared  buff/cache   available\nMem:           976M        109M        608M        6.6M        258M        690M\nSwap:          2.1G          0B        2.1G\n```\n- 卸载swap分区,使用`swapoff`命令:\n```bash\n[root@localhost mnt]# swapoff /tmp/virtual.img \n[root@localhost mnt]# free -h\n              total        used        free      shared  buff/cache   available\nMem:           976M        109M        608M        6.6M        258M        690M\nSwap:          2.0G          0B        2.0G\n```\n---\n\n","source":"_posts/Linux磁盘管理—分区格式化与挂载.md","raw":"---\ntitle: Linux磁盘管理——分区格式化与挂载\nauthor: Evobot\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\nabbrlink: aa04cc87\ndate: 2018-04-10 23:33:44\nimage:\n---\n\n\n\n![磁盘分区](http://p5qynomrl.bkt.clouddn.com/1523378473666fges139o.png?imageslim)\n\n本文主要介绍如何格式化新增的磁盘分区，并介绍怎样将新分区挂载到系统目录，以及如何增加swap空间。\n\n<!-- more -->\n\n---\n\n# 磁盘格式化\n\n- 磁盘分区之后必须进行格式化才能够使用，Centos7支持的文件系统可以通过命令`cat /etc/filesystems`进行查看：\n\n  ```bash\n  [lux@evobot ~]$ cat /etc/filesystems \n  xfs\n  ext4\n  ext3\n  ext2\n  nodev proc\n  nodev devpts\n  iso9660\n  vfat\n  hfs\n  hfsplus\n  *\n  ```\n\n- Centos7默认的文件系统为`xfs`，查看已挂载的分区的文件系统，可以使用`mount`命令查看，执行命令后结果输出比较多，只需要关注`/dev/sdx`这样的分区即可，如果查看未挂载的分区文件系统，使用`blkid`命令：\n\n  ```bash\n  [root@localhost ~]# mount | column -t\t# column -t可以使输出内容比较整齐\n  sysfs       on  /sys                             type  sysfs       (rw,nosuid,nodev,noexec,relatime,seclabel)\n  proc        on  /proc                            type  proc        (rw,nosuid,nodev,noexec,relatime)\n  devtmpfs    on  /dev                             type  devtmpfs    (rw,nosuid,seclabel,size=498656k,nr_inodes=124664,mode=755)\n  securityfs  on  /sys/kernel/security             type  securityfs  (rw,nosuid,nodev,noexec,relatime)\n  tmpfs       on  /dev/shm                         type  tmpfs       (rw,nosuid,nodev,seclabel)\n  devpts      on  /dev/pts                         type  devpts      (rw,nosuid,noexec,relatime,seclabel,gid=5,mode=620,ptmxmode=000)\n  tmpfs       on  /run                             type  tmpfs       (rw,nosuid,nodev,seclabel,mode=755)\n  /dev/sda3   on  /                                type  xfs         (rw,relatime,seclabel,attr2,inode64,noquota)\n  selinuxfs   on  /sys/fs/selinux                  type  selinuxfs   (rw,relatime)\n  /dev/sda1   on  /boot                            type  xfs         (rw,relatime,seclabel,attr2,inode64,noquota)\n\n  [root@localhost ~]# blkid /dev/sdb1\n  /dev/sdb1: UUID=\"708dbd6b-e75f-4196-98b0-0457525b8e97\" TYPE=\"ext4\" PARTUUID=\"fa0fcddc-d811-44e8-bfe0-d8f38384bbc5\" \n\n  ```\n\n## mke2fs命令\n\n- 格式化分区使用`mke2fs`命令，此命令不支持`xfs`文件系统的格式化，常用选项如下：\n<style>\ntable th:first-of-type {\n\n    width: 70px;\n}\ntable th {\n    text-align: center;\n}\n</style>\n\n| 命令选项 | 作用                                       |\n| :----: | ---------------------------------------- |\n| `-t` | 指定文件系统类型，如ext3、ext4，不指定时默认为ext2          |\n| `-b` | 指定分区块大小，默认为4KB，支持1024B、2048B等，使用`du -sb`可以查看文件实际大小 |\n| `-m` | 指定分区预留空间大小，默认预留5%，可以指定为1、0.1等            |\n| `-i` | 指定多少字节对应inode大小，默认4个块对应一个inode，即16K对应一个inode，可以指定为8192，即2个块对应一个inode |\n\n```bash\n[root@localhost ~]# mke2fs -t ext3 -b 2048 -m 1 /dev/sdb1\nmke2fs 1.42.9 (28-Dec-2013)\n文件系统标签=\nOS type: Linux\n块大小=2048 (log=1)\n分块大小=2048 (log=1)\nStride=0 blocks, Stripe width=0 blocks\n122400 inodes, 975872 blocks\n9758 blocks (1.00%) reserved for the super user\n第一个数据块=0\nMaximum filesystem blocks=537919488\n60 block groups\n16384 blocks per group, 16384 fragments per group\n2040 inodes per group\nSuperblock backups stored on blocks: \n\t16384, 49152, 81920, 114688, 147456, 409600, 442368, 802816\n\nAllocating group tables: 完成                            \n正在写入inode表: 完成                            \nCreating journal (16384 blocks): 完成\nWriting superblocks and filesystem accounting information: 完成 \n\n[root@localhost ~]# mke2fs -t ext3  -m 1 -i 8192 /dev/sdb1\nmke2fs 1.42.9 (28-Dec-2013)\n文件系统标签=\nOS type: Linux\n块大小=4096 (log=2)\n分块大小=4096 (log=2)\nStride=0 blocks, Stripe width=0 blocks\n244080 inodes, 487936 blocks\n4879 blocks (1.00%) reserved for the super user\n第一个数据块=0\nMaximum filesystem blocks=503316480\n15 block groups\n32768 blocks per group, 32768 fragments per group\n16272 inodes per group\nSuperblock backups stored on blocks: \n\t32768, 98304, 163840, 229376, 294912\n\nAllocating group tables: 完成                            \n正在写入inode表: 完成                            \nCreating journal (8192 blocks): 完成\nWriting superblocks and filesystem accounting information: 完成\n```\n\n## mkfs.xfs命令\n\n- 格式化为`xfs`文件系统，使用`mkfs.xfs`命令，当分区已经存在文件系统时，需要加`-f`选项：\n\n  ```bash\n  [root@localhost ~]# mkfs.xfs /dev/sdb1\n  mkfs.xfs: /dev/sdb1 appears to contain an existing filesystem (ext3).\n  mkfs.xfs: Use the -f option to force overwrite.\n\n  [root@localhost ~]# mkfs.xfs -f /dev/sdb1\n  meta-data=/dev/sdb1              isize=512    agcount=4, agsize=121984 blks\n           =                       sectsz=512   attr=2, projid32bit=1\n           =                       crc=1        finobt=0, sparse=0\n  data     =                       bsize=4096   blocks=487936, imaxpct=25\n           =                       sunit=0      swidth=0 blks\n  naming   =version 2              bsize=4096   ascii-ci=0 ftype=1\n  log      =internal log           bsize=4096   blocks=2560, version=2\n           =                       sectsz=512   sunit=0 blks, lazy-count=1\n  realtime =none                   extsz=4096   blocks=0, rtextents=0\n\n  ```\n\n- `mkfs.xfs`同样也可以指定文件系统的块大小，使用`-b size=(num)`选项：\n\n  ```bash\n  [root@localhost ~]# mkfs.xfs -b size=2048 -f /dev/sdb1\n  meta-data=/dev/sdb1              isize=512    agcount=4, agsize=243968 blks\n           =                       sectsz=512   attr=2, projid32bit=1\n           =                       crc=1        finobt=0, sparse=0\n  data     =                       bsize=2048   blocks=975872, imaxpct=25\n           =                       sunit=0      swidth=0 blks\n  naming   =version 2              bsize=4096   ascii-ci=0 ftype=1\n  log      =internal log           bsize=2048   blocks=5120, version=2\n           =                       sectsz=512   sunit=0 blks, lazy-count=1\n  realtime =none                   extsz=4096   blocks=0, rtextents=0\n\n  ```\n\n---\n\n# 磁盘挂载\n## mount命令\n- `mount`命令用来对分区进行挂载，命令用法为`mount [-o] /dev/sdx`,`-o`参数可以指定挂载的选项，如`rw`,`exec`.`async`等\n```bash\n[root@localhost ~]# mount /dev/sdb /mnt/\n[root@localhost ~]# df -h\n文件系统        容量  已用  可用 已用% 挂载点\n/dev/sda3        48G  1.3G   47G    3% /\ndevtmpfs        479M     0  479M    0% /dev\ntmpfs           489M     0  489M    0% /dev/shm\ntmpfs           489M  6.7M  482M    2% /run\ntmpfs           489M     0  489M    0% /sys/fs/cgroup\n/dev/sda1       197M  109M   88M   56% /boot\ntmpfs            98M     0   98M    0% /run/user/0\n#/dev/sdb就是我们所挂载的磁盘\n/dev/sdb         10G   33M   10G    1% /mnt\n```\n## umount命令\n- `umount`命令用来卸载已挂载的磁盘，命令用法为`umount [-l] [disk|dir]`，可以使用`/dev/`下的磁盘路径卸载，也可以使用磁盘挂载的目录卸载：\n```bash\n[root@localhost mnt]# umount /dev/sdb \numount: /mnt：目标忙。\n        (有些情况下通过 lsof(8) 或 fuser(1) 可以\n         找到有关使用该设备的进程的有用信息)\n[root@localhost mnt]# umount -l /mnt/\n[root@localhost mnt]# df -h\n文件系统        容量  已用  可用 已用% 挂载点\n/dev/sda3        48G  1.3G   47G    3% /\ndevtmpfs        479M     0  479M    0% /dev\ntmpfs           489M     0  489M    0% /dev/shm\ntmpfs           489M  6.7M  482M    2% /run\ntmpfs           489M     0  489M    0% /sys/fs/cgroup\n/dev/sda1       197M  109M   88M   56% /boot\ntmpfs            98M     0   98M    0% /run/user/0\n```\n## fstab文件\n- `/etc/fstab`文件是用来开机挂载磁盘的文件，文件内容分为5列，分别是UUID,挂载点，挂载选项，dump备份，开机启动优先级，其中dump和优先级默认为0，若开启优先级，则根分区为1，其他分区为2：\n```bash\n[root@localhost mnt]# cat /etc/fstab \n#\n# /etc/fstab\n# Created by anaconda on Sat Aug 19 07:18:38 2017\n#\n# Accessible filesystems, by reference, are maintained under '/dev/disk'\n# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info\n#\nUUID=e54aee54-8247-4abd-a51b-ae2d89416133 /                       xfs     defaults        0 0\nUUID=8916b3db-57d9-4c03-831e-542d7550b1a2 /boot                   xfs     defaults        0 0\nUUID=9670b2c4-e1e1-4214-9b4e-7e840a36deb2 swap                    swap    defaults        0 0\n```\n- 查看磁盘的UUID,使用`blkid`命令查看,除了使用UUID,也可以使用磁盘路径`/dev/sdx`写入`fstab`文件.\n```bash\n[root@localhost mnt]# cat /etc/fstab\n#\n# /etc/fstab\n# Created by anaconda on Sat Aug 19 07:18:38 2017\n#\n# Accessible filesystems, by reference, are maintained under '/dev/disk'\n# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info\n#\nUUID=e54aee54-8247-4abd-a51b-ae2d89416133 /                       xfs     defaults        0 0\nUUID=8916b3db-57d9-4c03-831e-542d7550b1a2 /boot                   xfs     defaults        0 0\nUUID=9670b2c4-e1e1-4214-9b4e-7e840a36deb2 swap                    swap    defaults        0 0\n#下面就是我们自己添加的需要挂载的磁盘\nUUID=5b0de14c-5a26-43ec-9d13-fa4440072c82    /mnt        xfs    defaults    0 0\n```\n- 写入`fstab`文件之后,使用命令`mount -a`来检查`fstab`文件的挂载内容是否有错误,如果没有问题,则磁盘会被顺利挂载。\n\n\n------------\n\n# 创建swap分区\n- `swap`分区是系统的虚拟内存,一般来说为内存的2倍,但是一般最大8G即可,当系统需要较大的swap空间时,可以手动增加swap分区。\n## 创建虚拟磁盘\n- 创建虚拟磁盘使用`dd`命令,命令格式为`dd if=/dev/zero of=/tmp/tmpimage.img bs=1M count=100`\n```bash\n[root@localhost mnt]# dd if=/dev/zero of=/tmp/virtual.img bs=1M count=100\n记录了100+0 的读入\n记录了100+0 的写出\n104857600字节(105 MB)已复制，2.72497 秒，38.5 MB/秒\n```\n## 设置swap分区\n- 格式化`swap`分区使用`mkswap`命令:\n```bash\n[root@localhost mnt]# mkswap -f /tmp/virtual.img \n正在设置交换空间版本 1，大小 = 102396 KiB\n无标签，UUID=cf9a3f57-1ddc-4e5a-9766-bb11aa7d526b\n```\n- 使用`swapon`命令将新的`swap`挂载到系统:\n```bash\n[root@localhost mnt]# free -h\n              total        used        free      shared  buff/cache   available\nMem:           976M        109M        608M        6.6M        258M        690M\nSwap:          2.0G          0B        2.0G\n[root@localhost mnt]# swapon /tmp/virtual.img \nswapon: /tmp/virtual.img：不安全的权限 0644，建议使用 0600。\n[root@localhost mnt]# free -h    #查看swap空间已经增加\n              total        used        free      shared  buff/cache   available\nMem:           976M        109M        608M        6.6M        258M        690M\nSwap:          2.1G          0B        2.1G\n```\n- 卸载swap分区,使用`swapoff`命令:\n```bash\n[root@localhost mnt]# swapoff /tmp/virtual.img \n[root@localhost mnt]# free -h\n              total        used        free      shared  buff/cache   available\nMem:           976M        109M        608M        6.6M        258M        690M\nSwap:          2.0G          0B        2.0G\n```\n---\n\n","slug":"Linux磁盘管理—分区格式化与挂载","published":1,"updated":"2018-06-02T13:01:29.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazfo004qu1jxq7darwgc","content":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1523378473666fges139o.png?imageslim\" alt=\"磁盘分区\"></p><p>本文主要介绍如何格式化新增的磁盘分区，并介绍怎样将新分区挂载到系统目录，以及如何增加swap空间。</p><a id=\"more\"></a><hr><h1 id=\"磁盘格式化\"><a href=\"#磁盘格式化\" class=\"headerlink\" title=\"磁盘格式化\"></a>磁盘格式化</h1><ul><li><p>磁盘分区之后必须进行格式化才能够使用，Centos7支持的文件系统可以通过命令<code>cat /etc/filesystems</code>进行查看：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@evobot ~]$ cat /etc/filesystems </span><br><span class=\"line\">xfs</span><br><span class=\"line\">ext4</span><br><span class=\"line\">ext3</span><br><span class=\"line\">ext2</span><br><span class=\"line\">nodev proc</span><br><span class=\"line\">nodev devpts</span><br><span class=\"line\">iso9660</span><br><span class=\"line\">vfat</span><br><span class=\"line\">hfs</span><br><span class=\"line\">hfsplus</span><br><span class=\"line\">*</span><br></pre></td></tr></table></figure></li><li><p>Centos7默认的文件系统为<code>xfs</code>，查看已挂载的分区的文件系统，可以使用<code>mount</code>命令查看，执行命令后结果输出比较多，只需要关注<code>/dev/sdx</code>这样的分区即可，如果查看未挂载的分区文件系统，使用<code>blkid</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mount | column -t\t# column -t可以使输出内容比较整齐</span></span><br><span class=\"line\">sysfs       on  /sys                             <span class=\"built_in\">type</span>  sysfs       (rw,nosuid,nodev,noexec,relatime,seclabel)</span><br><span class=\"line\">proc        on  /proc                            <span class=\"built_in\">type</span>  proc        (rw,nosuid,nodev,noexec,relatime)</span><br><span class=\"line\">devtmpfs    on  /dev                             <span class=\"built_in\">type</span>  devtmpfs    (rw,nosuid,seclabel,size=498656k,nr_inodes=124664,mode=755)</span><br><span class=\"line\">securityfs  on  /sys/kernel/security             <span class=\"built_in\">type</span>  securityfs  (rw,nosuid,nodev,noexec,relatime)</span><br><span class=\"line\">tmpfs       on  /dev/shm                         <span class=\"built_in\">type</span>  tmpfs       (rw,nosuid,nodev,seclabel)</span><br><span class=\"line\">devpts      on  /dev/pts                         <span class=\"built_in\">type</span>  devpts      (rw,nosuid,noexec,relatime,seclabel,gid=5,mode=620,ptmxmode=000)</span><br><span class=\"line\">tmpfs       on  /run                             <span class=\"built_in\">type</span>  tmpfs       (rw,nosuid,nodev,seclabel,mode=755)</span><br><span class=\"line\">/dev/sda3   on  /                                <span class=\"built_in\">type</span>  xfs         (rw,relatime,seclabel,attr2,inode64,noquota)</span><br><span class=\"line\">selinuxfs   on  /sys/fs/selinux                  <span class=\"built_in\">type</span>  selinuxfs   (rw,relatime)</span><br><span class=\"line\">/dev/sda1   on  /boot                            <span class=\"built_in\">type</span>  xfs         (rw,relatime,seclabel,attr2,inode64,noquota)</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># blkid /dev/sdb1</span></span><br><span class=\"line\">/dev/sdb1: UUID=<span class=\"string\">\"708dbd6b-e75f-4196-98b0-0457525b8e97\"</span> TYPE=<span class=\"string\">\"ext4\"</span> PARTUUID=<span class=\"string\">\"fa0fcddc-d811-44e8-bfe0-d8f38384bbc5\"</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"mke2fs命令\"><a href=\"#mke2fs命令\" class=\"headerlink\" title=\"mke2fs命令\"></a>mke2fs命令</h2><ul><li><p>格式化分区使用<code>mke2fs</code>命令，此命令不支持<code>xfs</code>文件系统的格式化，常用选项如下：</p><style>table th:first-of-type{width:70px}table th{text-align:center}</style></li></ul><table><thead><tr><th style=\"text-align:center\">命令选项</th><th>作用</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>-t</code></td><td>指定文件系统类型，如ext3、ext4，不指定时默认为ext2</td></tr><tr><td style=\"text-align:center\"><code>-b</code></td><td>指定分区块大小，默认为4KB，支持1024B、2048B等，使用<code>du -sb</code>可以查看文件实际大小</td></tr><tr><td style=\"text-align:center\"><code>-m</code></td><td>指定分区预留空间大小，默认预留5%，可以指定为1、0.1等</td></tr><tr><td style=\"text-align:center\"><code>-i</code></td><td>指定多少字节对应inode大小，默认4个块对应一个inode，即16K对应一个inode，可以指定为8192，即2个块对应一个inode</td></tr></tbody></table><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mke2fs -t ext3 -b 2048 -m 1 /dev/sdb1</span></span><br><span class=\"line\">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">文件系统标签=</span><br><span class=\"line\">OS <span class=\"built_in\">type</span>: Linux</span><br><span class=\"line\">块大小=2048 (<span class=\"built_in\">log</span>=1)</span><br><span class=\"line\">分块大小=2048 (<span class=\"built_in\">log</span>=1)</span><br><span class=\"line\">Stride=0 blocks, Stripe width=0 blocks</span><br><span class=\"line\">122400 inodes, 975872 blocks</span><br><span class=\"line\">9758 blocks (1.00%) reserved <span class=\"keyword\">for</span> the super user</span><br><span class=\"line\">第一个数据块=0</span><br><span class=\"line\">Maximum filesystem blocks=537919488</span><br><span class=\"line\">60 block groups</span><br><span class=\"line\">16384 blocks per group, 16384 fragments per group</span><br><span class=\"line\">2040 inodes per group</span><br><span class=\"line\">Superblock backups stored on blocks: </span><br><span class=\"line\">\t16384, 49152, 81920, 114688, 147456, 409600, 442368, 802816</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: 完成                            </span><br><span class=\"line\">正在写入inode表: 完成                            </span><br><span class=\"line\">Creating journal (16384 blocks): 完成</span><br><span class=\"line\">Writing superblocks and filesystem accounting information: 完成 </span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mke2fs -t ext3  -m 1 -i 8192 /dev/sdb1</span></span><br><span class=\"line\">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">文件系统标签=</span><br><span class=\"line\">OS <span class=\"built_in\">type</span>: Linux</span><br><span class=\"line\">块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">分块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">Stride=0 blocks, Stripe width=0 blocks</span><br><span class=\"line\">244080 inodes, 487936 blocks</span><br><span class=\"line\">4879 blocks (1.00%) reserved <span class=\"keyword\">for</span> the super user</span><br><span class=\"line\">第一个数据块=0</span><br><span class=\"line\">Maximum filesystem blocks=503316480</span><br><span class=\"line\">15 block groups</span><br><span class=\"line\">32768 blocks per group, 32768 fragments per group</span><br><span class=\"line\">16272 inodes per group</span><br><span class=\"line\">Superblock backups stored on blocks: </span><br><span class=\"line\">\t32768, 98304, 163840, 229376, 294912</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: 完成                            </span><br><span class=\"line\">正在写入inode表: 完成                            </span><br><span class=\"line\">Creating journal (8192 blocks): 完成</span><br><span class=\"line\">Writing superblocks and filesystem accounting information: 完成</span><br></pre></td></tr></table></figure><h2 id=\"mkfs-xfs命令\"><a href=\"#mkfs-xfs命令\" class=\"headerlink\" title=\"mkfs.xfs命令\"></a>mkfs.xfs命令</h2><ul><li><p>格式化为<code>xfs</code>文件系统，使用<code>mkfs.xfs</code>命令，当分区已经存在文件系统时，需要加<code>-f</code>选项：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkfs.xfs /dev/sdb1</span></span><br><span class=\"line\">mkfs.xfs: /dev/sdb1 appears to contain an existing filesystem (ext3).</span><br><span class=\"line\">mkfs.xfs: Use the -f option to force overwrite.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkfs.xfs -f /dev/sdb1</span></span><br><span class=\"line\">meta-data=/dev/sdb1              isize=512    agcount=4, agsize=121984 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=0, sparse=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=487936, imaxpct=25</span><br><span class=\"line\">         =                       sunit=0      swidth=0 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=4096   blocks=2560, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br></pre></td></tr></table></figure></li><li><p><code>mkfs.xfs</code>同样也可以指定文件系统的块大小，使用<code>-b size=(num)</code>选项：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkfs.xfs -b size=2048 -f /dev/sdb1</span></span><br><span class=\"line\">meta-data=/dev/sdb1              isize=512    agcount=4, agsize=243968 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=0, sparse=0</span><br><span class=\"line\">data     =                       bsize=2048   blocks=975872, imaxpct=25</span><br><span class=\"line\">         =                       sunit=0      swidth=0 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=2048   blocks=5120, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id=\"磁盘挂载\"><a href=\"#磁盘挂载\" class=\"headerlink\" title=\"磁盘挂载\"></a>磁盘挂载</h1><h2 id=\"mount命令\"><a href=\"#mount命令\" class=\"headerlink\" title=\"mount命令\"></a>mount命令</h2><ul><li><code>mount</code>命令用来对分区进行挂载，命令用法为<code>mount [-o] /dev/sdx</code>,<code>-o</code>参数可以指定挂载的选项，如<code>rw</code>,<code>exec</code>.<code>async</code>等<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mount /dev/sdb /mnt/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># df -h</span></span><br><span class=\"line\">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">/dev/sda3        48G  1.3G   47G    3% /</span><br><span class=\"line\">devtmpfs        479M     0  479M    0% /dev</span><br><span class=\"line\">tmpfs           489M     0  489M    0% /dev/shm</span><br><span class=\"line\">tmpfs           489M  6.7M  482M    2% /run</span><br><span class=\"line\">tmpfs           489M     0  489M    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/sda1       197M  109M   88M   56% /boot</span><br><span class=\"line\">tmpfs            98M     0   98M    0% /run/user/0</span><br><span class=\"line\"><span class=\"comment\">#/dev/sdb就是我们所挂载的磁盘</span></span><br><span class=\"line\">/dev/sdb         10G   33M   10G    1% /mnt</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"umount命令\"><a href=\"#umount命令\" class=\"headerlink\" title=\"umount命令\"></a>umount命令</h2><ul><li><code>umount</code>命令用来卸载已挂载的磁盘，命令用法为<code>umount [-l] [disk|dir]</code>，可以使用<code>/dev/</code>下的磁盘路径卸载，也可以使用磁盘挂载的目录卸载：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># umount /dev/sdb </span></span><br><span class=\"line\">umount: /mnt：目标忙。</span><br><span class=\"line\">        (有些情况下通过 lsof(8) 或 fuser(1) 可以</span><br><span class=\"line\">         找到有关使用该设备的进程的有用信息)</span><br><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># umount -l /mnt/</span></span><br><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># df -h</span></span><br><span class=\"line\">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">/dev/sda3        48G  1.3G   47G    3% /</span><br><span class=\"line\">devtmpfs        479M     0  479M    0% /dev</span><br><span class=\"line\">tmpfs           489M     0  489M    0% /dev/shm</span><br><span class=\"line\">tmpfs           489M  6.7M  482M    2% /run</span><br><span class=\"line\">tmpfs           489M     0  489M    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/sda1       197M  109M   88M   56% /boot</span><br><span class=\"line\">tmpfs            98M     0   98M    0% /run/user/0</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"fstab文件\"><a href=\"#fstab文件\" class=\"headerlink\" title=\"fstab文件\"></a>fstab文件</h2><ul><li><p><code>/etc/fstab</code>文件是用来开机挂载磁盘的文件，文件内容分为5列，分别是UUID,挂载点，挂载选项，dump备份，开机启动优先级，其中dump和优先级默认为0，若开启优先级，则根分区为1，其他分区为2：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># cat /etc/fstab </span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># /etc/fstab</span></span><br><span class=\"line\"><span class=\"comment\"># Created by anaconda on Sat Aug 19 07:18:38 2017</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Accessible filesystems, by reference, are maintained under '/dev/disk'</span></span><br><span class=\"line\"><span class=\"comment\"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">UUID=e54aee54-8247-4abd-a51b-ae2d89416133 /                       xfs     defaults        0 0</span><br><span class=\"line\">UUID=8916b3db-57d9-4c03-831e-542d7550b1a2 /boot                   xfs     defaults        0 0</span><br><span class=\"line\">UUID=9670b2c4-e1e1-4214-9b4e-7e840a36deb2 swap                    swap    defaults        0 0</span><br></pre></td></tr></table></figure></li><li><p>查看磁盘的UUID,使用<code>blkid</code>命令查看,除了使用UUID,也可以使用磁盘路径<code>/dev/sdx</code>写入<code>fstab</code>文件.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># cat /etc/fstab</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># /etc/fstab</span></span><br><span class=\"line\"><span class=\"comment\"># Created by anaconda on Sat Aug 19 07:18:38 2017</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Accessible filesystems, by reference, are maintained under '/dev/disk'</span></span><br><span class=\"line\"><span class=\"comment\"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">UUID=e54aee54-8247-4abd-a51b-ae2d89416133 /                       xfs     defaults        0 0</span><br><span class=\"line\">UUID=8916b3db-57d9-4c03-831e-542d7550b1a2 /boot                   xfs     defaults        0 0</span><br><span class=\"line\">UUID=9670b2c4-e1e1-4214-9b4e-7e840a36deb2 swap                    swap    defaults        0 0</span><br><span class=\"line\"><span class=\"comment\">#下面就是我们自己添加的需要挂载的磁盘</span></span><br><span class=\"line\">UUID=5b0de14c-5a26-43ec-9d13-fa4440072c82    /mnt        xfs    defaults    0 0</span><br></pre></td></tr></table></figure></li><li><p>写入<code>fstab</code>文件之后,使用命令<code>mount -a</code>来检查<code>fstab</code>文件的挂载内容是否有错误,如果没有问题,则磁盘会被顺利挂载。</p></li></ul><hr><h1 id=\"创建swap分区\"><a href=\"#创建swap分区\" class=\"headerlink\" title=\"创建swap分区\"></a>创建swap分区</h1><ul><li><code>swap</code>分区是系统的虚拟内存,一般来说为内存的2倍,但是一般最大8G即可,当系统需要较大的swap空间时,可以手动增加swap分区。<h2 id=\"创建虚拟磁盘\"><a href=\"#创建虚拟磁盘\" class=\"headerlink\" title=\"创建虚拟磁盘\"></a>创建虚拟磁盘</h2></li><li>创建虚拟磁盘使用<code>dd</code>命令,命令格式为<code>dd if=/dev/zero of=/tmp/tmpimage.img bs=1M count=100</code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># dd if=/dev/zero of=/tmp/virtual.img bs=1M count=100</span></span><br><span class=\"line\">记录了100+0 的读入</span><br><span class=\"line\">记录了100+0 的写出</span><br><span class=\"line\">104857600字节(105 MB)已复制，2.72497 秒，38.5 MB/秒</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"设置swap分区\"><a href=\"#设置swap分区\" class=\"headerlink\" title=\"设置swap分区\"></a>设置swap分区</h2><ul><li><p>格式化<code>swap</code>分区使用<code>mkswap</code>命令:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># mkswap -f /tmp/virtual.img </span></span><br><span class=\"line\">正在设置交换空间版本 1，大小 = 102396 KiB</span><br><span class=\"line\">无标签，UUID=cf9a3f57-1ddc-4e5a-9766-bb11aa7d526b</span><br></pre></td></tr></table></figure></li><li><p>使用<code>swapon</code>命令将新的<code>swap</code>挂载到系统:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># free -h</span></span><br><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\">Mem:           976M        109M        608M        6.6M        258M        690M</span><br><span class=\"line\">Swap:          2.0G          0B        2.0G</span><br><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># swapon /tmp/virtual.img </span></span><br><span class=\"line\">swapon: /tmp/virtual.img：不安全的权限 0644，建议使用 0600。</span><br><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># free -h    #查看swap空间已经增加</span></span><br><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\">Mem:           976M        109M        608M        6.6M        258M        690M</span><br><span class=\"line\">Swap:          2.1G          0B        2.1G</span><br></pre></td></tr></table></figure></li><li><p>卸载swap分区,使用<code>swapoff</code>命令:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># swapoff /tmp/virtual.img </span></span><br><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># free -h</span></span><br><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\">Mem:           976M        109M        608M        6.6M        258M        690M</span><br><span class=\"line\">Swap:          2.0G          0B        2.0G</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p><img src=\"http://p5qynomrl.bkt.clouddn.com/1523378473666fges139o.png?imageslim\" alt=\"磁盘分区\"></p><p>本文主要介绍如何格式化新增的磁盘分区，并介绍怎样将新分区挂载到系统目录，以及如何增加swap空间。</p>","more":"<hr><h1 id=\"磁盘格式化\"><a href=\"#磁盘格式化\" class=\"headerlink\" title=\"磁盘格式化\"></a>磁盘格式化</h1><ul><li><p>磁盘分区之后必须进行格式化才能够使用，Centos7支持的文件系统可以通过命令<code>cat /etc/filesystems</code>进行查看：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lux@evobot ~]$ cat /etc/filesystems </span><br><span class=\"line\">xfs</span><br><span class=\"line\">ext4</span><br><span class=\"line\">ext3</span><br><span class=\"line\">ext2</span><br><span class=\"line\">nodev proc</span><br><span class=\"line\">nodev devpts</span><br><span class=\"line\">iso9660</span><br><span class=\"line\">vfat</span><br><span class=\"line\">hfs</span><br><span class=\"line\">hfsplus</span><br><span class=\"line\">*</span><br></pre></td></tr></table></figure></li><li><p>Centos7默认的文件系统为<code>xfs</code>，查看已挂载的分区的文件系统，可以使用<code>mount</code>命令查看，执行命令后结果输出比较多，只需要关注<code>/dev/sdx</code>这样的分区即可，如果查看未挂载的分区文件系统，使用<code>blkid</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mount | column -t\t# column -t可以使输出内容比较整齐</span></span><br><span class=\"line\">sysfs       on  /sys                             <span class=\"built_in\">type</span>  sysfs       (rw,nosuid,nodev,noexec,relatime,seclabel)</span><br><span class=\"line\">proc        on  /proc                            <span class=\"built_in\">type</span>  proc        (rw,nosuid,nodev,noexec,relatime)</span><br><span class=\"line\">devtmpfs    on  /dev                             <span class=\"built_in\">type</span>  devtmpfs    (rw,nosuid,seclabel,size=498656k,nr_inodes=124664,mode=755)</span><br><span class=\"line\">securityfs  on  /sys/kernel/security             <span class=\"built_in\">type</span>  securityfs  (rw,nosuid,nodev,noexec,relatime)</span><br><span class=\"line\">tmpfs       on  /dev/shm                         <span class=\"built_in\">type</span>  tmpfs       (rw,nosuid,nodev,seclabel)</span><br><span class=\"line\">devpts      on  /dev/pts                         <span class=\"built_in\">type</span>  devpts      (rw,nosuid,noexec,relatime,seclabel,gid=5,mode=620,ptmxmode=000)</span><br><span class=\"line\">tmpfs       on  /run                             <span class=\"built_in\">type</span>  tmpfs       (rw,nosuid,nodev,seclabel,mode=755)</span><br><span class=\"line\">/dev/sda3   on  /                                <span class=\"built_in\">type</span>  xfs         (rw,relatime,seclabel,attr2,inode64,noquota)</span><br><span class=\"line\">selinuxfs   on  /sys/fs/selinux                  <span class=\"built_in\">type</span>  selinuxfs   (rw,relatime)</span><br><span class=\"line\">/dev/sda1   on  /boot                            <span class=\"built_in\">type</span>  xfs         (rw,relatime,seclabel,attr2,inode64,noquota)</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># blkid /dev/sdb1</span></span><br><span class=\"line\">/dev/sdb1: UUID=<span class=\"string\">\"708dbd6b-e75f-4196-98b0-0457525b8e97\"</span> TYPE=<span class=\"string\">\"ext4\"</span> PARTUUID=<span class=\"string\">\"fa0fcddc-d811-44e8-bfe0-d8f38384bbc5\"</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"mke2fs命令\"><a href=\"#mke2fs命令\" class=\"headerlink\" title=\"mke2fs命令\"></a>mke2fs命令</h2><ul><li><p>格式化分区使用<code>mke2fs</code>命令，此命令不支持<code>xfs</code>文件系统的格式化，常用选项如下：</p><style>table th:first-of-type{width:70px}table th{text-align:center}</style></li></ul><table><thead><tr><th style=\"text-align:center\">命令选项</th><th>作用</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>-t</code></td><td>指定文件系统类型，如ext3、ext4，不指定时默认为ext2</td></tr><tr><td style=\"text-align:center\"><code>-b</code></td><td>指定分区块大小，默认为4KB，支持1024B、2048B等，使用<code>du -sb</code>可以查看文件实际大小</td></tr><tr><td style=\"text-align:center\"><code>-m</code></td><td>指定分区预留空间大小，默认预留5%，可以指定为1、0.1等</td></tr><tr><td style=\"text-align:center\"><code>-i</code></td><td>指定多少字节对应inode大小，默认4个块对应一个inode，即16K对应一个inode，可以指定为8192，即2个块对应一个inode</td></tr></tbody></table><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mke2fs -t ext3 -b 2048 -m 1 /dev/sdb1</span></span><br><span class=\"line\">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">文件系统标签=</span><br><span class=\"line\">OS <span class=\"built_in\">type</span>: Linux</span><br><span class=\"line\">块大小=2048 (<span class=\"built_in\">log</span>=1)</span><br><span class=\"line\">分块大小=2048 (<span class=\"built_in\">log</span>=1)</span><br><span class=\"line\">Stride=0 blocks, Stripe width=0 blocks</span><br><span class=\"line\">122400 inodes, 975872 blocks</span><br><span class=\"line\">9758 blocks (1.00%) reserved <span class=\"keyword\">for</span> the super user</span><br><span class=\"line\">第一个数据块=0</span><br><span class=\"line\">Maximum filesystem blocks=537919488</span><br><span class=\"line\">60 block groups</span><br><span class=\"line\">16384 blocks per group, 16384 fragments per group</span><br><span class=\"line\">2040 inodes per group</span><br><span class=\"line\">Superblock backups stored on blocks: </span><br><span class=\"line\">\t16384, 49152, 81920, 114688, 147456, 409600, 442368, 802816</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: 完成                            </span><br><span class=\"line\">正在写入inode表: 完成                            </span><br><span class=\"line\">Creating journal (16384 blocks): 完成</span><br><span class=\"line\">Writing superblocks and filesystem accounting information: 完成 </span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mke2fs -t ext3  -m 1 -i 8192 /dev/sdb1</span></span><br><span class=\"line\">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">文件系统标签=</span><br><span class=\"line\">OS <span class=\"built_in\">type</span>: Linux</span><br><span class=\"line\">块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">分块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">Stride=0 blocks, Stripe width=0 blocks</span><br><span class=\"line\">244080 inodes, 487936 blocks</span><br><span class=\"line\">4879 blocks (1.00%) reserved <span class=\"keyword\">for</span> the super user</span><br><span class=\"line\">第一个数据块=0</span><br><span class=\"line\">Maximum filesystem blocks=503316480</span><br><span class=\"line\">15 block groups</span><br><span class=\"line\">32768 blocks per group, 32768 fragments per group</span><br><span class=\"line\">16272 inodes per group</span><br><span class=\"line\">Superblock backups stored on blocks: </span><br><span class=\"line\">\t32768, 98304, 163840, 229376, 294912</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: 完成                            </span><br><span class=\"line\">正在写入inode表: 完成                            </span><br><span class=\"line\">Creating journal (8192 blocks): 完成</span><br><span class=\"line\">Writing superblocks and filesystem accounting information: 完成</span><br></pre></td></tr></table></figure><h2 id=\"mkfs-xfs命令\"><a href=\"#mkfs-xfs命令\" class=\"headerlink\" title=\"mkfs.xfs命令\"></a>mkfs.xfs命令</h2><ul><li><p>格式化为<code>xfs</code>文件系统，使用<code>mkfs.xfs</code>命令，当分区已经存在文件系统时，需要加<code>-f</code>选项：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkfs.xfs /dev/sdb1</span></span><br><span class=\"line\">mkfs.xfs: /dev/sdb1 appears to contain an existing filesystem (ext3).</span><br><span class=\"line\">mkfs.xfs: Use the -f option to force overwrite.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkfs.xfs -f /dev/sdb1</span></span><br><span class=\"line\">meta-data=/dev/sdb1              isize=512    agcount=4, agsize=121984 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=0, sparse=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=487936, imaxpct=25</span><br><span class=\"line\">         =                       sunit=0      swidth=0 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=4096   blocks=2560, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br></pre></td></tr></table></figure></li><li><p><code>mkfs.xfs</code>同样也可以指定文件系统的块大小，使用<code>-b size=(num)</code>选项：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkfs.xfs -b size=2048 -f /dev/sdb1</span></span><br><span class=\"line\">meta-data=/dev/sdb1              isize=512    agcount=4, agsize=243968 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=0, sparse=0</span><br><span class=\"line\">data     =                       bsize=2048   blocks=975872, imaxpct=25</span><br><span class=\"line\">         =                       sunit=0      swidth=0 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=2048   blocks=5120, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id=\"磁盘挂载\"><a href=\"#磁盘挂载\" class=\"headerlink\" title=\"磁盘挂载\"></a>磁盘挂载</h1><h2 id=\"mount命令\"><a href=\"#mount命令\" class=\"headerlink\" title=\"mount命令\"></a>mount命令</h2><ul><li><code>mount</code>命令用来对分区进行挂载，命令用法为<code>mount [-o] /dev/sdx</code>,<code>-o</code>参数可以指定挂载的选项，如<code>rw</code>,<code>exec</code>.<code>async</code>等<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mount /dev/sdb /mnt/</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># df -h</span></span><br><span class=\"line\">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">/dev/sda3        48G  1.3G   47G    3% /</span><br><span class=\"line\">devtmpfs        479M     0  479M    0% /dev</span><br><span class=\"line\">tmpfs           489M     0  489M    0% /dev/shm</span><br><span class=\"line\">tmpfs           489M  6.7M  482M    2% /run</span><br><span class=\"line\">tmpfs           489M     0  489M    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/sda1       197M  109M   88M   56% /boot</span><br><span class=\"line\">tmpfs            98M     0   98M    0% /run/user/0</span><br><span class=\"line\"><span class=\"comment\">#/dev/sdb就是我们所挂载的磁盘</span></span><br><span class=\"line\">/dev/sdb         10G   33M   10G    1% /mnt</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"umount命令\"><a href=\"#umount命令\" class=\"headerlink\" title=\"umount命令\"></a>umount命令</h2><ul><li><code>umount</code>命令用来卸载已挂载的磁盘，命令用法为<code>umount [-l] [disk|dir]</code>，可以使用<code>/dev/</code>下的磁盘路径卸载，也可以使用磁盘挂载的目录卸载：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># umount /dev/sdb </span></span><br><span class=\"line\">umount: /mnt：目标忙。</span><br><span class=\"line\">        (有些情况下通过 lsof(8) 或 fuser(1) 可以</span><br><span class=\"line\">         找到有关使用该设备的进程的有用信息)</span><br><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># umount -l /mnt/</span></span><br><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># df -h</span></span><br><span class=\"line\">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">/dev/sda3        48G  1.3G   47G    3% /</span><br><span class=\"line\">devtmpfs        479M     0  479M    0% /dev</span><br><span class=\"line\">tmpfs           489M     0  489M    0% /dev/shm</span><br><span class=\"line\">tmpfs           489M  6.7M  482M    2% /run</span><br><span class=\"line\">tmpfs           489M     0  489M    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/sda1       197M  109M   88M   56% /boot</span><br><span class=\"line\">tmpfs            98M     0   98M    0% /run/user/0</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"fstab文件\"><a href=\"#fstab文件\" class=\"headerlink\" title=\"fstab文件\"></a>fstab文件</h2><ul><li><p><code>/etc/fstab</code>文件是用来开机挂载磁盘的文件，文件内容分为5列，分别是UUID,挂载点，挂载选项，dump备份，开机启动优先级，其中dump和优先级默认为0，若开启优先级，则根分区为1，其他分区为2：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># cat /etc/fstab </span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># /etc/fstab</span></span><br><span class=\"line\"><span class=\"comment\"># Created by anaconda on Sat Aug 19 07:18:38 2017</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Accessible filesystems, by reference, are maintained under '/dev/disk'</span></span><br><span class=\"line\"><span class=\"comment\"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">UUID=e54aee54-8247-4abd-a51b-ae2d89416133 /                       xfs     defaults        0 0</span><br><span class=\"line\">UUID=8916b3db-57d9-4c03-831e-542d7550b1a2 /boot                   xfs     defaults        0 0</span><br><span class=\"line\">UUID=9670b2c4-e1e1-4214-9b4e-7e840a36deb2 swap                    swap    defaults        0 0</span><br></pre></td></tr></table></figure></li><li><p>查看磁盘的UUID,使用<code>blkid</code>命令查看,除了使用UUID,也可以使用磁盘路径<code>/dev/sdx</code>写入<code>fstab</code>文件.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># cat /etc/fstab</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># /etc/fstab</span></span><br><span class=\"line\"><span class=\"comment\"># Created by anaconda on Sat Aug 19 07:18:38 2017</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Accessible filesystems, by reference, are maintained under '/dev/disk'</span></span><br><span class=\"line\"><span class=\"comment\"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">UUID=e54aee54-8247-4abd-a51b-ae2d89416133 /                       xfs     defaults        0 0</span><br><span class=\"line\">UUID=8916b3db-57d9-4c03-831e-542d7550b1a2 /boot                   xfs     defaults        0 0</span><br><span class=\"line\">UUID=9670b2c4-e1e1-4214-9b4e-7e840a36deb2 swap                    swap    defaults        0 0</span><br><span class=\"line\"><span class=\"comment\">#下面就是我们自己添加的需要挂载的磁盘</span></span><br><span class=\"line\">UUID=5b0de14c-5a26-43ec-9d13-fa4440072c82    /mnt        xfs    defaults    0 0</span><br></pre></td></tr></table></figure></li><li><p>写入<code>fstab</code>文件之后,使用命令<code>mount -a</code>来检查<code>fstab</code>文件的挂载内容是否有错误,如果没有问题,则磁盘会被顺利挂载。</p></li></ul><hr><h1 id=\"创建swap分区\"><a href=\"#创建swap分区\" class=\"headerlink\" title=\"创建swap分区\"></a>创建swap分区</h1><ul><li><code>swap</code>分区是系统的虚拟内存,一般来说为内存的2倍,但是一般最大8G即可,当系统需要较大的swap空间时,可以手动增加swap分区。<h2 id=\"创建虚拟磁盘\"><a href=\"#创建虚拟磁盘\" class=\"headerlink\" title=\"创建虚拟磁盘\"></a>创建虚拟磁盘</h2></li><li>创建虚拟磁盘使用<code>dd</code>命令,命令格式为<code>dd if=/dev/zero of=/tmp/tmpimage.img bs=1M count=100</code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># dd if=/dev/zero of=/tmp/virtual.img bs=1M count=100</span></span><br><span class=\"line\">记录了100+0 的读入</span><br><span class=\"line\">记录了100+0 的写出</span><br><span class=\"line\">104857600字节(105 MB)已复制，2.72497 秒，38.5 MB/秒</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"设置swap分区\"><a href=\"#设置swap分区\" class=\"headerlink\" title=\"设置swap分区\"></a>设置swap分区</h2><ul><li><p>格式化<code>swap</code>分区使用<code>mkswap</code>命令:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># mkswap -f /tmp/virtual.img </span></span><br><span class=\"line\">正在设置交换空间版本 1，大小 = 102396 KiB</span><br><span class=\"line\">无标签，UUID=cf9a3f57-1ddc-4e5a-9766-bb11aa7d526b</span><br></pre></td></tr></table></figure></li><li><p>使用<code>swapon</code>命令将新的<code>swap</code>挂载到系统:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># free -h</span></span><br><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\">Mem:           976M        109M        608M        6.6M        258M        690M</span><br><span class=\"line\">Swap:          2.0G          0B        2.0G</span><br><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># swapon /tmp/virtual.img </span></span><br><span class=\"line\">swapon: /tmp/virtual.img：不安全的权限 0644，建议使用 0600。</span><br><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># free -h    #查看swap空间已经增加</span></span><br><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\">Mem:           976M        109M        608M        6.6M        258M        690M</span><br><span class=\"line\">Swap:          2.1G          0B        2.1G</span><br></pre></td></tr></table></figure></li><li><p>卸载swap分区,使用<code>swapoff</code>命令:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># swapoff /tmp/virtual.img </span></span><br><span class=\"line\">[root@localhost mnt]<span class=\"comment\"># free -h</span></span><br><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\">Mem:           976M        109M        608M        6.6M        258M        690M</span><br><span class=\"line\">Swap:          2.0G          0B        2.0G</span><br></pre></td></tr></table></figure></li></ul><hr><!-- rebuild by neat -->"},{"title":"Linux计划任务与服务管理","author":"Evobot","abbrlink":"5540efdf","date":"2018-05-11T16:18:11.000Z","image":null,"_content":"\n# Linux计划任务\n\n- Linux中需要定时执行一个程序或者脚本，使用crontab工具，可以查看**/etc/crontab**配置文件的内容：\n\n  ```bash\n  SHELL=/bin/bash\n  PATH=/sbin:/bin:/usr/sbin:/usr/bin\n  MAILTO=root\n\n  # For details see man 4 crontabs\n\n  # Example of job definition:\n  # .---------------- minute (0 - 59)\n  # |  .------------- hour (0 - 23)\n  # |  |  .---------- day of month (1 - 31)\n  # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...\n  # |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat\n  # |  |  |  |  |\n  # *  *  *  *  * user-name  command to be executed\n  ```\n\n- 这里定义了三个变量，分别是`SHELL`环境、`PATH`环境变量、`MAILTO`发送邮件到某个用户，配置文件下半部分则是crontab的格式，5个`*`分别表示：分、时、日、月、每周哪一天，然后则是执行命令的用户，默认是配置定时任务的用户，最后则是要执行的命令；\n\n- 定义crontab定时任务，使用`crontab -e`命令，然后的操作与vim相同，例如凌晨3点执行一个任务，则写入下面的内容：\n\n  ```bash\n  0 3 * * * /bin/bash /use/local/sbin/xx.sh >> /tmp/123.log 2>> /tmp/123.log\n  ```\n\n  - crontab的时间设置，除了指定一个时刻，还可以指定时间段或者多个时间，如每两个月1-10号周二和周五执行：`0 3 1-10 */2 2,5 command`。\n  - 如果需要定义一个只需要今年执行的命令，则使用星期来确定，因为年份中指定日期的星期与其他年份是不想同的。\n\n- 启动crontab服务使用命令`systemctl start crond`，然后可以使用`systemctl status crond`查看服务状态：\n\n  ```bash\n  [root@evobot ~]# systemctl start crond\n  [root@evobot ~]# ps -aux | grep cron\n  root       605  0.0  0.0 126260  1644 ?        Ss   4月19   0:12 /usr/sbin/crond -n\n  root     19401  0.0  0.0 112676   984 pts/0    R+   00:44   0:00 grep --color=auto cron\n  [root@evobot ~]# systemctl status crond\n  ● crond.service - Command Scheduler\n     Loaded: loaded (/usr/lib/systemd/system/crond.service; enabled; vendor preset: enabled)\n     Active: active (running) since 四 2018-04-19 00:35:50 CST; 3 weeks 2 days ago\n   Main PID: 605 (crond)\n     CGroup: /system.slice/crond.service\n             └─605 /usr/sbin/crond -n\n\n  4月 19 00:35:50 evobot systemd[1]: Started Command Scheduler.\n  4月 19 00:35:50 evobot systemd[1]: Starting Command Scheduler...\n  4月 19 00:35:50 evobot crond[605]: (CRON) INFO (RANDOM_DELAY will be scale....)\n  4月 19 00:35:50 evobot crond[605]: (CRON) INFO (running with inotify support)\n  5月 12 00:44:01 evobot crond[605]: (root) RELOAD (/var/spool/cron/root)\n  Hint: Some lines were ellipsized, use -l to show in full.\n  ```\n\n- 如果遇到定时任务不执行的问题，首先查看命令路径是否在crontab配置文件的PATH变量，或者使用命令的绝对路径执行；\n\n- `crontab -l`可以列出当前用户的计划任务，而每个用户的计划任务文件则是在**/var/spool/cron/[username]**文件内：\n\n  ```bash\n  [root@evobot ~]# cat /var/spool/cron/root \n  */1 * * * * /usr/local/qcloud/stargate/admin/start.sh > /dev/null 2>&1 &\n  0 3 1-10 */2 */2 ls\n  ```\n\n  - 所以要备份用户的crontab任务，直接将上面的文件拷贝即可。\n\n- `crontab -r`是删除当前用户配置的计划任务，`crontab -u root -l`则是查看指定用户的计划任务列表。\n\n\n \n\n# 服务管理\n\n##  chkconfig\n\n### 查看管理服务列表\n\n- chkconfig能够管理服务的启动、开机自启动和指定级别启动，chkconfig是Centos6的服务管理工具，在Centos7中则使用的是systemd；\n\n- `chkconfig --list`可以查看当前使用chkconfig管理的服务：\n\n  ```bash\n  [root@evobot ~]# chkconfig --list\n\n  netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关\n  network        \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关\n  ```\n\n- chkconfig管理的服务的启动脚本在**/etc/init.d/**目录下：\n\n  ```bash\n  [root@evobot ~]# ls /etc/init.d/\n  functions  netconsole  network  README\n  ```\n\n- 在`chkconfig --list`命令的输出中，可以看到network服务在2、3、4、5级别的状态都是开，即表示在这几个运行级别服务会自启动，如果想要将各级别的服务自启动关闭，则使用命令`chkconfig network off`:\n\n  ```bash\n  [root@www ~]# chkconfig network off\n  [root@www ~]# chkconfig --list\n\n  netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关\n  network        \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关\n  ```\n\n- 重新打开服务状态则使用`chkconfig network on`：\n\n  ```bash\n  [root@www ~]# chkconfig network on\n  [root@www ~]# chkconfig --list\n\n  netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关\n  network        \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关\n  ```\n\n### 系统运行级别\n\n- 这里的6个级别表示开机系统进入的状态，具体的含义如下表：\n\n|  级别  |         作用          |\n| :--: | :-----------------: |\n|  0   |         关机          |\n|  1   |         单用户         |\n|  2   | 无NFS服务，无GUI的正常多用户状态 |\n|  3   |    无GUI的正常多用户状态     |\n|  4   |      保留级别，未使用       |\n|  5   |      图形界面多用户状态      |\n|  6   |         重启          |\n\n- 在Centos6中可以修改**/etc/inittab**文件改变系统的运行级别；\n\n### 更改指定级别服务状态\n\n- 使用命令`chkconfig --level 24 network off`可以关闭指定级别服务自启：\n\n  ```bash\n  [root@www ~]# chkconfig --level 24 network off\n  [root@www ~]# chkconfig --list\n\n  netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关\n  network        \t0:关\t1:关\t2:关\t3:开\t4:关\t5:开\t6:关\n  ```\n\n- 使用`chkconfig --level 24 network on`可以重新打开指定级别服务自启，**不能打开服务在0,1,6级别的自启开关，否则会导致服务启动异常。**\n\n### 增加删除服务\n\n- 如果要给chkconfig增加新的服务进行管理，需要先将服务的启动脚本放到**/etc/init.d/**目录下：\n\n  ```bash\n  [root@www init.d]# ls\n  functions  myservice  netconsole  network  README\n  ```\n\n- 启动脚本的格式如下，首先启动脚本是shell脚本，然后`#chkconfig： 2345 10 90`指定服务运行级别和启动关闭顺序，这里分别是第10位启动和第90位关闭，然后描述`description`也必须存在：\n\n  ```bash\n  #! /bin/bash\n  #\n  # network       Bring up/down networking\n  #\n  # chkconfig: 2345 10 90\n  # description: Activates/Deactivates all network interfaces configured to \\\n  #              start at boot time.\n  #\n  ### BEGIN INIT INFO\n  # Provides: $network\n  # Should-Start: iptables ip6tables NetworkManager-wait-online NetworkManager $network-pre\n  # Short-Description: Bring up/down networking\n  # Description: Bring up/down networking\n  ### END INIT INFO\n\n  # Source function library.\n  . /etc/init.d/functions\n\n  if [ ! -f /etc/sysconfig/network ]; then\n      exit 6\n  fi\n\n  . /etc/sysconfig/network\n\n  if [ -f /etc/sysconfig/pcmcia ]; then\n          . /etc/sysconfig/pcmcia\n  fi\n  ```\n\n- 然后使用命令`chkconfig --add myservice`将服务添加到chkconfig：\n\n  ```bash\n  [root@www init.d]# chkconfig --add myservice\n  [root@www init.d]# chkconfig --list\n\n  myservice      \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关\n  netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关\n  network        \t0:关\t1:关\t2:关\t3:开\t4:关\t5:开\t6:关\n  ```\n\n\n- 要删除服务使用`chkconfig --del myservice`即可：\n\n  ```bash\n  [root@www init.d]# chkconfig --del myservice \n  [root@www init.d]# chkconfig --list\n\n  netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关\n  network        \t0:关\t1:关\t2:关\t3:开\t4:关\t5:开\t6:关\n  ```\n\n\n## systemd\n\n- systemd是Centos7默认的服务管理工具，查看systemd的所有unit使用命令`systemctl list-unit-files`，命令的输出结果不仅包括service，还有target、socket等等；\n\n### 服务管理相关命令\n\n- 查看systemd管理的所有服务，命令为`systemctl list-units --all --type=service`，输出内容只包含service，并且会显示服务状态、描述信息等，如果命令中不加`--all`，则只显示active和failed状态的服务，不显示inactive状态的服务：\n\n  ![systemd-service](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/systemd-service.png)\n\n- 让服务开机自启动，使用命令`systemctl enable crond.service`，服务名后面的`.service`可以不写：\n\n  ```bash\n  [root@www init.d]# systemctl enable crond.service\n  Created symlink from /etc/systemd/system/multi-user.target.wants/crond.service to /usr/lib/systemd/system/crond.service.\n  ```\n\n  - 这里的输出也可以看到服务的启动脚本路径，实际上启动脚本是一个软连接文件，可以查看到启动脚本的具体内容，设置服务开机自启动实际上就是创建了启动脚本的软连接到**/etc/systemd/system/multi-user.target.wants/**目录下：\n\n  ```bash\n  [root@www init.d]# ls -l /etc/systemd/system/multi-user.target.wants/crond.service \n  lrwxrwxrwx 1 root root 37 5月  11 01:40 /etc/systemd/system/multi-user.target.wants/crond.service -> /usr/lib/systemd/system/crond.service\n\n  [root@www init.d]# cat !$\n  cat /etc/systemd/system/multi-user.target.wants/crond.service\n  [Unit]\n  Description=Command Scheduler\n  After=auditd.service systemd-user-sessions.service time-sync.target\n\n  [Service]\n  EnvironmentFile=/etc/sysconfig/crond\n  ExecStart=/usr/sbin/crond -n $CRONDARGS\n  ExecReload=/bin/kill -HUP $MAINPID\n  KillMode=process\n\n  [Install]\n  WantedBy=multi-user.target\n  ```\n\n- 关闭服务开机自启则使用`systemctl disable crond.service`命令：\n\n  ```bash\n  [root@www init.d]# systemctl disable crond.service \n  Removed symlink /etc/systemd/system/multi-user.target.wants/crond.service.\n  ```\n\n  - 关闭服务的自启动则会将启动脚本的软连接文件删除。\n\n- 查看服务状态使用`systemctl status crond.service`：\n\n  ![systemctl status](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/systemd-status.png)\n\n- `systemctl [start|stop|restart] crond.service`则分别表示启动服务、停止服务和重启服务：  ![start|stop|restart](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/systemctl-stop.png)\n\n\n- 命令`systemdctl is-enabled crond`可以查看服务是否是开机启动：\n\n  ```bash\n  [root@www init.d]# systemctl is-enabled crond.service \n  enabled\n  ```\n\n### unit介绍\n\n- 设置服务自启动时从**/usr/lib/systemd/system/**目录创建了启动脚本的软连接，而这个目录下除了service之外还有其他文件，这些文件都被称为**unit**：\n\n  ![systemd unit](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/systemd-unit.png)\n\n- unit分为以下几种类型：\n\n  service：系统服务\n\n  target：多个unit组成的组，Centos6的7个运行级别对应的target如下：\n\n  ![target](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/systemd-target.png)\n\n  **device**：硬件设备\n\n  **mount**：文件系统挂载点\n\n  **automount**：自动挂载点\n\n  **path**：文件或路径\n\n  **scope**：不是由systemd启动的外部进程\n\n  **slice**：进程组\n\n  **snapshot**：systemd快照\n\n  **socket**：进程间通信套接字\n\n  **swap**：swap文件\n\n  **timer**：定时器\n\n\n### unit相关命令\n\n- `systemctl list-units`列出正在运行的unit：\n\n  ![list-units](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/list-units.png )\n\n\n- `systemctl list-units --all`列出所有，包括失败或inactive的unit：\n\n  ![units-all](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/units-all.png)\n\n- `systemctl list-units --all --states=inactive`列出所有状态为**inactive**的unit，如果命令中不加`--all`，使用`systemctl list-units --type=service`可以查看状态为**active**的service：\n\n  ![inactive-unit](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/inactive-units.png)\n\n  ![active-service](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/active-service.png)\n\n- `systemctl is-active crond.service`命令可以查看服务是否是**active**状态：\n\n  ```bash\n  [root@www system]# systemctl is-active crond.service \n  active\n  ```\n\n### target介绍\n\n- 系统为了方便管理，使用**target**来管理**unit**；\n\n- `systemctl list-unit-files --type=target`命令可以列出所有的target：\n\n  ![target-list](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/target-list.png)\n\n- 命令`systemctl list-dependencies multi-user-target`,可以查看指定的target中包括哪些unit：\n\n  ![multi-user](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/multi-user.png)\n\n  - target中同样也可以包含其他的target，形成嵌套的形式：\n\n  ![resuce-target](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/resuce-target.png)\n\n- 查看系统默认的target使用命令`systemctl get-default`:\n\n  ```bash\n  [root@www system]# systemctl get-default \n  multi-user.target\n  ```\n\n- Centos6中可以更改系统运行级别，而在Centos7中，更改运行级别是通过更改默认target来实现，使用命令`systemctl set-default multi-user.target`更改：\n\n  ```bash\n  [root@www system]# systemctl set-default multi-user.target \n  Removed symlink /etc/systemd/system/default.target.\n  Created symlink from /etc/systemd/system/default.target to /usr/lib/systemd/system/multi-user.target.\n  ```\n\n  - 可以看到，设置默认target同样也是使用创建软连接的形式实现。\n\n> 实际上，systemd中，一个service属于一种类型的unit，而多个unit又组成一个target；所以在target中包含了多个service。\n>\n> 查看service属于哪个target，可以在**/usr/lib/systemd/system/**目录下查看service的配置文件的**[install]**部分，如sshd服务：\n\n![service-target](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/service-target.png)\n\n---","source":"_posts/Linux计划任务与服务管理.md","raw":"---\ntitle: Linux计划任务与服务管理\nauthor: Evobot\ncategories: Centos7\ntags:\n  - Linux\n  - Centos\nabbrlink: 5540efdf\ndate: 2018-05-12 00:18:11\nimage:\n---\n\n# Linux计划任务\n\n- Linux中需要定时执行一个程序或者脚本，使用crontab工具，可以查看**/etc/crontab**配置文件的内容：\n\n  ```bash\n  SHELL=/bin/bash\n  PATH=/sbin:/bin:/usr/sbin:/usr/bin\n  MAILTO=root\n\n  # For details see man 4 crontabs\n\n  # Example of job definition:\n  # .---------------- minute (0 - 59)\n  # |  .------------- hour (0 - 23)\n  # |  |  .---------- day of month (1 - 31)\n  # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...\n  # |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat\n  # |  |  |  |  |\n  # *  *  *  *  * user-name  command to be executed\n  ```\n\n- 这里定义了三个变量，分别是`SHELL`环境、`PATH`环境变量、`MAILTO`发送邮件到某个用户，配置文件下半部分则是crontab的格式，5个`*`分别表示：分、时、日、月、每周哪一天，然后则是执行命令的用户，默认是配置定时任务的用户，最后则是要执行的命令；\n\n- 定义crontab定时任务，使用`crontab -e`命令，然后的操作与vim相同，例如凌晨3点执行一个任务，则写入下面的内容：\n\n  ```bash\n  0 3 * * * /bin/bash /use/local/sbin/xx.sh >> /tmp/123.log 2>> /tmp/123.log\n  ```\n\n  - crontab的时间设置，除了指定一个时刻，还可以指定时间段或者多个时间，如每两个月1-10号周二和周五执行：`0 3 1-10 */2 2,5 command`。\n  - 如果需要定义一个只需要今年执行的命令，则使用星期来确定，因为年份中指定日期的星期与其他年份是不想同的。\n\n- 启动crontab服务使用命令`systemctl start crond`，然后可以使用`systemctl status crond`查看服务状态：\n\n  ```bash\n  [root@evobot ~]# systemctl start crond\n  [root@evobot ~]# ps -aux | grep cron\n  root       605  0.0  0.0 126260  1644 ?        Ss   4月19   0:12 /usr/sbin/crond -n\n  root     19401  0.0  0.0 112676   984 pts/0    R+   00:44   0:00 grep --color=auto cron\n  [root@evobot ~]# systemctl status crond\n  ● crond.service - Command Scheduler\n     Loaded: loaded (/usr/lib/systemd/system/crond.service; enabled; vendor preset: enabled)\n     Active: active (running) since 四 2018-04-19 00:35:50 CST; 3 weeks 2 days ago\n   Main PID: 605 (crond)\n     CGroup: /system.slice/crond.service\n             └─605 /usr/sbin/crond -n\n\n  4月 19 00:35:50 evobot systemd[1]: Started Command Scheduler.\n  4月 19 00:35:50 evobot systemd[1]: Starting Command Scheduler...\n  4月 19 00:35:50 evobot crond[605]: (CRON) INFO (RANDOM_DELAY will be scale....)\n  4月 19 00:35:50 evobot crond[605]: (CRON) INFO (running with inotify support)\n  5月 12 00:44:01 evobot crond[605]: (root) RELOAD (/var/spool/cron/root)\n  Hint: Some lines were ellipsized, use -l to show in full.\n  ```\n\n- 如果遇到定时任务不执行的问题，首先查看命令路径是否在crontab配置文件的PATH变量，或者使用命令的绝对路径执行；\n\n- `crontab -l`可以列出当前用户的计划任务，而每个用户的计划任务文件则是在**/var/spool/cron/[username]**文件内：\n\n  ```bash\n  [root@evobot ~]# cat /var/spool/cron/root \n  */1 * * * * /usr/local/qcloud/stargate/admin/start.sh > /dev/null 2>&1 &\n  0 3 1-10 */2 */2 ls\n  ```\n\n  - 所以要备份用户的crontab任务，直接将上面的文件拷贝即可。\n\n- `crontab -r`是删除当前用户配置的计划任务，`crontab -u root -l`则是查看指定用户的计划任务列表。\n\n\n \n\n# 服务管理\n\n##  chkconfig\n\n### 查看管理服务列表\n\n- chkconfig能够管理服务的启动、开机自启动和指定级别启动，chkconfig是Centos6的服务管理工具，在Centos7中则使用的是systemd；\n\n- `chkconfig --list`可以查看当前使用chkconfig管理的服务：\n\n  ```bash\n  [root@evobot ~]# chkconfig --list\n\n  netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关\n  network        \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关\n  ```\n\n- chkconfig管理的服务的启动脚本在**/etc/init.d/**目录下：\n\n  ```bash\n  [root@evobot ~]# ls /etc/init.d/\n  functions  netconsole  network  README\n  ```\n\n- 在`chkconfig --list`命令的输出中，可以看到network服务在2、3、4、5级别的状态都是开，即表示在这几个运行级别服务会自启动，如果想要将各级别的服务自启动关闭，则使用命令`chkconfig network off`:\n\n  ```bash\n  [root@www ~]# chkconfig network off\n  [root@www ~]# chkconfig --list\n\n  netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关\n  network        \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关\n  ```\n\n- 重新打开服务状态则使用`chkconfig network on`：\n\n  ```bash\n  [root@www ~]# chkconfig network on\n  [root@www ~]# chkconfig --list\n\n  netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关\n  network        \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关\n  ```\n\n### 系统运行级别\n\n- 这里的6个级别表示开机系统进入的状态，具体的含义如下表：\n\n|  级别  |         作用          |\n| :--: | :-----------------: |\n|  0   |         关机          |\n|  1   |         单用户         |\n|  2   | 无NFS服务，无GUI的正常多用户状态 |\n|  3   |    无GUI的正常多用户状态     |\n|  4   |      保留级别，未使用       |\n|  5   |      图形界面多用户状态      |\n|  6   |         重启          |\n\n- 在Centos6中可以修改**/etc/inittab**文件改变系统的运行级别；\n\n### 更改指定级别服务状态\n\n- 使用命令`chkconfig --level 24 network off`可以关闭指定级别服务自启：\n\n  ```bash\n  [root@www ~]# chkconfig --level 24 network off\n  [root@www ~]# chkconfig --list\n\n  netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关\n  network        \t0:关\t1:关\t2:关\t3:开\t4:关\t5:开\t6:关\n  ```\n\n- 使用`chkconfig --level 24 network on`可以重新打开指定级别服务自启，**不能打开服务在0,1,6级别的自启开关，否则会导致服务启动异常。**\n\n### 增加删除服务\n\n- 如果要给chkconfig增加新的服务进行管理，需要先将服务的启动脚本放到**/etc/init.d/**目录下：\n\n  ```bash\n  [root@www init.d]# ls\n  functions  myservice  netconsole  network  README\n  ```\n\n- 启动脚本的格式如下，首先启动脚本是shell脚本，然后`#chkconfig： 2345 10 90`指定服务运行级别和启动关闭顺序，这里分别是第10位启动和第90位关闭，然后描述`description`也必须存在：\n\n  ```bash\n  #! /bin/bash\n  #\n  # network       Bring up/down networking\n  #\n  # chkconfig: 2345 10 90\n  # description: Activates/Deactivates all network interfaces configured to \\\n  #              start at boot time.\n  #\n  ### BEGIN INIT INFO\n  # Provides: $network\n  # Should-Start: iptables ip6tables NetworkManager-wait-online NetworkManager $network-pre\n  # Short-Description: Bring up/down networking\n  # Description: Bring up/down networking\n  ### END INIT INFO\n\n  # Source function library.\n  . /etc/init.d/functions\n\n  if [ ! -f /etc/sysconfig/network ]; then\n      exit 6\n  fi\n\n  . /etc/sysconfig/network\n\n  if [ -f /etc/sysconfig/pcmcia ]; then\n          . /etc/sysconfig/pcmcia\n  fi\n  ```\n\n- 然后使用命令`chkconfig --add myservice`将服务添加到chkconfig：\n\n  ```bash\n  [root@www init.d]# chkconfig --add myservice\n  [root@www init.d]# chkconfig --list\n\n  myservice      \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关\n  netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关\n  network        \t0:关\t1:关\t2:关\t3:开\t4:关\t5:开\t6:关\n  ```\n\n\n- 要删除服务使用`chkconfig --del myservice`即可：\n\n  ```bash\n  [root@www init.d]# chkconfig --del myservice \n  [root@www init.d]# chkconfig --list\n\n  netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关\n  network        \t0:关\t1:关\t2:关\t3:开\t4:关\t5:开\t6:关\n  ```\n\n\n## systemd\n\n- systemd是Centos7默认的服务管理工具，查看systemd的所有unit使用命令`systemctl list-unit-files`，命令的输出结果不仅包括service，还有target、socket等等；\n\n### 服务管理相关命令\n\n- 查看systemd管理的所有服务，命令为`systemctl list-units --all --type=service`，输出内容只包含service，并且会显示服务状态、描述信息等，如果命令中不加`--all`，则只显示active和failed状态的服务，不显示inactive状态的服务：\n\n  ![systemd-service](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/systemd-service.png)\n\n- 让服务开机自启动，使用命令`systemctl enable crond.service`，服务名后面的`.service`可以不写：\n\n  ```bash\n  [root@www init.d]# systemctl enable crond.service\n  Created symlink from /etc/systemd/system/multi-user.target.wants/crond.service to /usr/lib/systemd/system/crond.service.\n  ```\n\n  - 这里的输出也可以看到服务的启动脚本路径，实际上启动脚本是一个软连接文件，可以查看到启动脚本的具体内容，设置服务开机自启动实际上就是创建了启动脚本的软连接到**/etc/systemd/system/multi-user.target.wants/**目录下：\n\n  ```bash\n  [root@www init.d]# ls -l /etc/systemd/system/multi-user.target.wants/crond.service \n  lrwxrwxrwx 1 root root 37 5月  11 01:40 /etc/systemd/system/multi-user.target.wants/crond.service -> /usr/lib/systemd/system/crond.service\n\n  [root@www init.d]# cat !$\n  cat /etc/systemd/system/multi-user.target.wants/crond.service\n  [Unit]\n  Description=Command Scheduler\n  After=auditd.service systemd-user-sessions.service time-sync.target\n\n  [Service]\n  EnvironmentFile=/etc/sysconfig/crond\n  ExecStart=/usr/sbin/crond -n $CRONDARGS\n  ExecReload=/bin/kill -HUP $MAINPID\n  KillMode=process\n\n  [Install]\n  WantedBy=multi-user.target\n  ```\n\n- 关闭服务开机自启则使用`systemctl disable crond.service`命令：\n\n  ```bash\n  [root@www init.d]# systemctl disable crond.service \n  Removed symlink /etc/systemd/system/multi-user.target.wants/crond.service.\n  ```\n\n  - 关闭服务的自启动则会将启动脚本的软连接文件删除。\n\n- 查看服务状态使用`systemctl status crond.service`：\n\n  ![systemctl status](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/systemd-status.png)\n\n- `systemctl [start|stop|restart] crond.service`则分别表示启动服务、停止服务和重启服务：  ![start|stop|restart](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/systemctl-stop.png)\n\n\n- 命令`systemdctl is-enabled crond`可以查看服务是否是开机启动：\n\n  ```bash\n  [root@www init.d]# systemctl is-enabled crond.service \n  enabled\n  ```\n\n### unit介绍\n\n- 设置服务自启动时从**/usr/lib/systemd/system/**目录创建了启动脚本的软连接，而这个目录下除了service之外还有其他文件，这些文件都被称为**unit**：\n\n  ![systemd unit](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/systemd-unit.png)\n\n- unit分为以下几种类型：\n\n  service：系统服务\n\n  target：多个unit组成的组，Centos6的7个运行级别对应的target如下：\n\n  ![target](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/systemd-target.png)\n\n  **device**：硬件设备\n\n  **mount**：文件系统挂载点\n\n  **automount**：自动挂载点\n\n  **path**：文件或路径\n\n  **scope**：不是由systemd启动的外部进程\n\n  **slice**：进程组\n\n  **snapshot**：systemd快照\n\n  **socket**：进程间通信套接字\n\n  **swap**：swap文件\n\n  **timer**：定时器\n\n\n### unit相关命令\n\n- `systemctl list-units`列出正在运行的unit：\n\n  ![list-units](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/list-units.png )\n\n\n- `systemctl list-units --all`列出所有，包括失败或inactive的unit：\n\n  ![units-all](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/units-all.png)\n\n- `systemctl list-units --all --states=inactive`列出所有状态为**inactive**的unit，如果命令中不加`--all`，使用`systemctl list-units --type=service`可以查看状态为**active**的service：\n\n  ![inactive-unit](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/inactive-units.png)\n\n  ![active-service](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/active-service.png)\n\n- `systemctl is-active crond.service`命令可以查看服务是否是**active**状态：\n\n  ```bash\n  [root@www system]# systemctl is-active crond.service \n  active\n  ```\n\n### target介绍\n\n- 系统为了方便管理，使用**target**来管理**unit**；\n\n- `systemctl list-unit-files --type=target`命令可以列出所有的target：\n\n  ![target-list](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/target-list.png)\n\n- 命令`systemctl list-dependencies multi-user-target`,可以查看指定的target中包括哪些unit：\n\n  ![multi-user](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/multi-user.png)\n\n  - target中同样也可以包含其他的target，形成嵌套的形式：\n\n  ![resuce-target](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/resuce-target.png)\n\n- 查看系统默认的target使用命令`systemctl get-default`:\n\n  ```bash\n  [root@www system]# systemctl get-default \n  multi-user.target\n  ```\n\n- Centos6中可以更改系统运行级别，而在Centos7中，更改运行级别是通过更改默认target来实现，使用命令`systemctl set-default multi-user.target`更改：\n\n  ```bash\n  [root@www system]# systemctl set-default multi-user.target \n  Removed symlink /etc/systemd/system/default.target.\n  Created symlink from /etc/systemd/system/default.target to /usr/lib/systemd/system/multi-user.target.\n  ```\n\n  - 可以看到，设置默认target同样也是使用创建软连接的形式实现。\n\n> 实际上，systemd中，一个service属于一种类型的unit，而多个unit又组成一个target；所以在target中包含了多个service。\n>\n> 查看service属于哪个target，可以在**/usr/lib/systemd/system/**目录下查看service的配置文件的**[install]**部分，如sshd服务：\n\n![service-target](https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/service-target.png)\n\n---","slug":"Linux计划任务与服务管理","published":1,"updated":"2018-06-02T13:01:29.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazfu004tu1jxsmfxg85q","content":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><h1 id=\"Linux计划任务\"><a href=\"#Linux计划任务\" class=\"headerlink\" title=\"Linux计划任务\"></a>Linux计划任务</h1><ul><li><p>Linux中需要定时执行一个程序或者脚本，使用crontab工具，可以查看<strong>/etc/crontab</strong>配置文件的内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHELL=/bin/bash</span><br><span class=\"line\">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class=\"line\">MAILTO=root</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For details see man 4 crontabs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example of job definition:</span></span><br><span class=\"line\"><span class=\"comment\"># .---------------- minute (0 - 59)</span></span><br><span class=\"line\"><span class=\"comment\"># |  .------------- hour (0 - 23)</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  .---------- day of month (1 - 31)</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  |</span></span><br><span class=\"line\"><span class=\"comment\"># *  *  *  *  * user-name  command to be executed</span></span><br></pre></td></tr></table></figure></li><li><p>这里定义了三个变量，分别是<code>SHELL</code>环境、<code>PATH</code>环境变量、<code>MAILTO</code>发送邮件到某个用户，配置文件下半部分则是crontab的格式，5个<code>*</code>分别表示：分、时、日、月、每周哪一天，然后则是执行命令的用户，默认是配置定时任务的用户，最后则是要执行的命令；</p></li><li><p>定义crontab定时任务，使用<code>crontab -e</code>命令，然后的操作与vim相同，例如凌晨3点执行一个任务，则写入下面的内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 3 * * * /bin/bash /use/<span class=\"built_in\">local</span>/sbin/xx.sh &gt;&gt; /tmp/123.log 2&gt;&gt; /tmp/123.log</span><br></pre></td></tr></table></figure><ul><li>crontab的时间设置，除了指定一个时刻，还可以指定时间段或者多个时间，如每两个月1-10号周二和周五执行：<code>0 3 1-10 */2 2,5 command</code>。</li><li>如果需要定义一个只需要今年执行的命令，则使用星期来确定，因为年份中指定日期的星期与其他年份是不想同的。</li></ul></li><li><p>启动crontab服务使用命令<code>systemctl start crond</code>，然后可以使用<code>systemctl status crond</code>查看服务状态：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># systemctl start crond</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ps -aux | grep cron</span></span><br><span class=\"line\">root       605  0.0  0.0 126260  1644 ?        Ss   4月19   0:12 /usr/sbin/crond -n</span><br><span class=\"line\">root     19401  0.0  0.0 112676   984 pts/0    R+   00:44   0:00 grep --color=auto cron</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># systemctl status crond</span></span><br><span class=\"line\">● crond.service - Command Scheduler</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/crond.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since 四 2018-04-19 00:35:50 CST; 3 weeks 2 days ago</span><br><span class=\"line\"> Main PID: 605 (crond)</span><br><span class=\"line\">   CGroup: /system.slice/crond.service</span><br><span class=\"line\">           └─605 /usr/sbin/crond -n</span><br><span class=\"line\"></span><br><span class=\"line\">4月 19 00:35:50 evobot systemd[1]: Started Command Scheduler.</span><br><span class=\"line\">4月 19 00:35:50 evobot systemd[1]: Starting Command Scheduler...</span><br><span class=\"line\">4月 19 00:35:50 evobot crond[605]: (CRON) INFO (RANDOM_DELAY will be scale....)</span><br><span class=\"line\">4月 19 00:35:50 evobot crond[605]: (CRON) INFO (running with inotify support)</span><br><span class=\"line\">5月 12 00:44:01 evobot crond[605]: (root) RELOAD (/var/spool/cron/root)</span><br><span class=\"line\">Hint: Some lines were ellipsized, use -l to show <span class=\"keyword\">in</span> full.</span><br></pre></td></tr></table></figure></li><li><p>如果遇到定时任务不执行的问题，首先查看命令路径是否在crontab配置文件的PATH变量，或者使用命令的绝对路径执行；</p></li><li><p><code>crontab -l</code>可以列出当前用户的计划任务，而每个用户的计划任务文件则是在<strong>/var/spool/cron/[username]</strong>文件内：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat /var/spool/cron/root </span></span><br><span class=\"line\">*/1 * * * * /usr/<span class=\"built_in\">local</span>/qcloud/stargate/admin/start.sh &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class=\"line\">0 3 1-10 */2 */2 ls</span><br></pre></td></tr></table></figure><ul><li>所以要备份用户的crontab任务，直接将上面的文件拷贝即可。</li></ul></li><li><p><code>crontab -r</code>是删除当前用户配置的计划任务，<code>crontab -u root -l</code>则是查看指定用户的计划任务列表。</p></li></ul><h1 id=\"服务管理\"><a href=\"#服务管理\" class=\"headerlink\" title=\"服务管理\"></a>服务管理</h1><h2 id=\"chkconfig\"><a href=\"#chkconfig\" class=\"headerlink\" title=\"chkconfig\"></a>chkconfig</h2><h3 id=\"查看管理服务列表\"><a href=\"#查看管理服务列表\" class=\"headerlink\" title=\"查看管理服务列表\"></a>查看管理服务列表</h3><ul><li><p>chkconfig能够管理服务的启动、开机自启动和指定级别启动，chkconfig是Centos6的服务管理工具，在Centos7中则使用的是systemd；</p></li><li><p><code>chkconfig --list</code>可以查看当前使用chkconfig管理的服务：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># chkconfig --list</span></span><br><span class=\"line\"></span><br><span class=\"line\">netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关</span><br><span class=\"line\">network        \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关</span><br></pre></td></tr></table></figure></li><li><p>chkconfig管理的服务的启动脚本在<strong>/etc/init.d/</strong>目录下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls /etc/init.d/</span></span><br><span class=\"line\"><span class=\"built_in\">functions</span>  netconsole  network  README</span><br></pre></td></tr></table></figure></li><li><p>在<code>chkconfig --list</code>命令的输出中，可以看到network服务在2、3、4、5级别的状态都是开，即表示在这几个运行级别服务会自启动，如果想要将各级别的服务自启动关闭，则使用命令<code>chkconfig network off</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># chkconfig network off</span></span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># chkconfig --list</span></span><br><span class=\"line\"></span><br><span class=\"line\">netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关</span><br><span class=\"line\">network        \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关</span><br></pre></td></tr></table></figure></li><li><p>重新打开服务状态则使用<code>chkconfig network on</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># chkconfig network on</span></span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># chkconfig --list</span></span><br><span class=\"line\"></span><br><span class=\"line\">netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关</span><br><span class=\"line\">network        \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"系统运行级别\"><a href=\"#系统运行级别\" class=\"headerlink\" title=\"系统运行级别\"></a>系统运行级别</h3><ul><li>这里的6个级别表示开机系统进入的状态，具体的含义如下表：</li></ul><table><thead><tr><th style=\"text-align:center\">级别</th><th style=\"text-align:center\">作用</th></tr></thead><tbody><tr><td style=\"text-align:center\">0</td><td style=\"text-align:center\">关机</td></tr><tr><td style=\"text-align:center\">1</td><td style=\"text-align:center\">单用户</td></tr><tr><td style=\"text-align:center\">2</td><td style=\"text-align:center\">无NFS服务，无GUI的正常多用户状态</td></tr><tr><td style=\"text-align:center\">3</td><td style=\"text-align:center\">无GUI的正常多用户状态</td></tr><tr><td style=\"text-align:center\">4</td><td style=\"text-align:center\">保留级别，未使用</td></tr><tr><td style=\"text-align:center\">5</td><td style=\"text-align:center\">图形界面多用户状态</td></tr><tr><td style=\"text-align:center\">6</td><td style=\"text-align:center\">重启</td></tr></tbody></table><ul><li>在Centos6中可以修改<strong>/etc/inittab</strong>文件改变系统的运行级别；</li></ul><h3 id=\"更改指定级别服务状态\"><a href=\"#更改指定级别服务状态\" class=\"headerlink\" title=\"更改指定级别服务状态\"></a>更改指定级别服务状态</h3><ul><li><p>使用命令<code>chkconfig --level 24 network off</code>可以关闭指定级别服务自启：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># chkconfig --level 24 network off</span></span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># chkconfig --list</span></span><br><span class=\"line\"></span><br><span class=\"line\">netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关</span><br><span class=\"line\">network        \t0:关\t1:关\t2:关\t3:开\t4:关\t5:开\t6:关</span><br></pre></td></tr></table></figure></li><li><p>使用<code>chkconfig --level 24 network on</code>可以重新打开指定级别服务自启，<strong>不能打开服务在0,1,6级别的自启开关，否则会导致服务启动异常。</strong></p></li></ul><h3 id=\"增加删除服务\"><a href=\"#增加删除服务\" class=\"headerlink\" title=\"增加删除服务\"></a>增加删除服务</h3><ul><li><p>如果要给chkconfig增加新的服务进行管理，需要先将服务的启动脚本放到<strong>/etc/init.d/</strong>目录下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www init.d]<span class=\"comment\"># ls</span></span><br><span class=\"line\"><span class=\"built_in\">functions</span>  myservice  netconsole  network  README</span><br></pre></td></tr></table></figure></li><li><p>启动脚本的格式如下，首先启动脚本是shell脚本，然后<code>#chkconfig： 2345 10 90</code>指定服务运行级别和启动关闭顺序，这里分别是第10位启动和第90位关闭，然后描述<code>description</code>也必须存在：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># network       Bring up/down networking</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># chkconfig: 2345 10 90</span></span><br><span class=\"line\"><span class=\"comment\"># description: Activates/Deactivates all network interfaces configured to \\</span></span><br><span class=\"line\"><span class=\"comment\">#              start at boot time.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">### BEGIN INIT INFO</span></span><br><span class=\"line\"><span class=\"comment\"># Provides: $network</span></span><br><span class=\"line\"><span class=\"comment\"># Should-Start: iptables ip6tables NetworkManager-wait-online NetworkManager $network-pre</span></span><br><span class=\"line\"><span class=\"comment\"># Short-Description: Bring up/down networking</span></span><br><span class=\"line\"><span class=\"comment\"># Description: Bring up/down networking</span></span><br><span class=\"line\"><span class=\"comment\">### END INIT INFO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Source function library.</span></span><br><span class=\"line\">. /etc/init.d/<span class=\"built_in\">functions</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -f /etc/sysconfig/network ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 6</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">. /etc/sysconfig/network</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f /etc/sysconfig/pcmcia ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        . /etc/sysconfig/pcmcia</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></li><li><p>然后使用命令<code>chkconfig --add myservice</code>将服务添加到chkconfig：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www init.d]<span class=\"comment\"># chkconfig --add myservice</span></span><br><span class=\"line\">[root@www init.d]<span class=\"comment\"># chkconfig --list</span></span><br><span class=\"line\"></span><br><span class=\"line\">myservice      \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关</span><br><span class=\"line\">netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关</span><br><span class=\"line\">network        \t0:关\t1:关\t2:关\t3:开\t4:关\t5:开\t6:关</span><br></pre></td></tr></table></figure></li><li><p>要删除服务使用<code>chkconfig --del myservice</code>即可：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www init.d]<span class=\"comment\"># chkconfig --del myservice </span></span><br><span class=\"line\">[root@www init.d]<span class=\"comment\"># chkconfig --list</span></span><br><span class=\"line\"></span><br><span class=\"line\">netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关</span><br><span class=\"line\">network        \t0:关\t1:关\t2:关\t3:开\t4:关\t5:开\t6:关</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"systemd\"><a href=\"#systemd\" class=\"headerlink\" title=\"systemd\"></a>systemd</h2><ul><li>systemd是Centos7默认的服务管理工具，查看systemd的所有unit使用命令<code>systemctl list-unit-files</code>，命令的输出结果不仅包括service，还有target、socket等等；</li></ul><h3 id=\"服务管理相关命令\"><a href=\"#服务管理相关命令\" class=\"headerlink\" title=\"服务管理相关命令\"></a>服务管理相关命令</h3><ul><li><p>查看systemd管理的所有服务，命令为<code>systemctl list-units --all --type=service</code>，输出内容只包含service，并且会显示服务状态、描述信息等，如果命令中不加<code>--all</code>，则只显示active和failed状态的服务，不显示inactive状态的服务：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/systemd-service.png\" alt=\"systemd-service\"></p></li><li><p>让服务开机自启动，使用命令<code>systemctl enable crond.service</code>，服务名后面的<code>.service</code>可以不写：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www init.d]<span class=\"comment\"># systemctl enable crond.service</span></span><br><span class=\"line\">Created symlink from /etc/systemd/system/multi-user.target.wants/crond.service to /usr/lib/systemd/system/crond.service.</span><br></pre></td></tr></table></figure><ul><li>这里的输出也可以看到服务的启动脚本路径，实际上启动脚本是一个软连接文件，可以查看到启动脚本的具体内容，设置服务开机自启动实际上就是创建了启动脚本的软连接到<strong>/etc/systemd/system/multi-user.target.wants/</strong>目录下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www init.d]<span class=\"comment\"># ls -l /etc/systemd/system/multi-user.target.wants/crond.service </span></span><br><span class=\"line\">lrwxrwxrwx 1 root root 37 5月  11 01:40 /etc/systemd/system/multi-user.target.wants/crond.service -&gt; /usr/lib/systemd/system/crond.service</span><br><span class=\"line\"></span><br><span class=\"line\">[root@www init.d]<span class=\"comment\"># cat !$</span></span><br><span class=\"line\">cat /etc/systemd/system/multi-user.target.wants/crond.service</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Command Scheduler</span><br><span class=\"line\">After=auditd.service systemd-user-sessions.service time-sync.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">EnvironmentFile=/etc/sysconfig/crond</span><br><span class=\"line\">ExecStart=/usr/sbin/crond -n <span class=\"variable\">$CRONDARGS</span></span><br><span class=\"line\">ExecReload=/bin/<span class=\"built_in\">kill</span> -HUP <span class=\"variable\">$MAINPID</span></span><br><span class=\"line\">KillMode=process</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>关闭服务开机自启则使用<code>systemctl disable crond.service</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www init.d]<span class=\"comment\"># systemctl disable crond.service </span></span><br><span class=\"line\">Removed symlink /etc/systemd/system/multi-user.target.wants/crond.service.</span><br></pre></td></tr></table></figure><ul><li>关闭服务的自启动则会将启动脚本的软连接文件删除。</li></ul></li><li><p>查看服务状态使用<code>systemctl status crond.service</code>：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/systemd-status.png\" alt=\"systemctl status\"></p></li><li><p><code>systemctl [start|stop|restart] crond.service</code>则分别表示启动服务、停止服务和重启服务： <img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/systemctl-stop.png\" alt=\"start|stop|restart\"></p></li></ul><ul><li><p>命令<code>systemdctl is-enabled crond</code>可以查看服务是否是开机启动：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www init.d]<span class=\"comment\"># systemctl is-enabled crond.service </span></span><br><span class=\"line\">enabled</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"unit介绍\"><a href=\"#unit介绍\" class=\"headerlink\" title=\"unit介绍\"></a>unit介绍</h3><ul><li><p>设置服务自启动时从<strong>/usr/lib/systemd/system/</strong>目录创建了启动脚本的软连接，而这个目录下除了service之外还有其他文件，这些文件都被称为<strong>unit</strong>：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/systemd-unit.png\" alt=\"systemd unit\"></p></li><li><p>unit分为以下几种类型：</p><p>service：系统服务</p><p>target：多个unit组成的组，Centos6的7个运行级别对应的target如下：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/systemd-target.png\" alt=\"target\"></p><p><strong>device</strong>：硬件设备</p><p><strong>mount</strong>：文件系统挂载点</p><p><strong>automount</strong>：自动挂载点</p><p><strong>path</strong>：文件或路径</p><p><strong>scope</strong>：不是由systemd启动的外部进程</p><p><strong>slice</strong>：进程组</p><p><strong>snapshot</strong>：systemd快照</p><p><strong>socket</strong>：进程间通信套接字</p><p><strong>swap</strong>：swap文件</p><p><strong>timer</strong>：定时器</p></li></ul><h3 id=\"unit相关命令\"><a href=\"#unit相关命令\" class=\"headerlink\" title=\"unit相关命令\"></a>unit相关命令</h3><ul><li><p><code>systemctl list-units</code>列出正在运行的unit：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/list-units.png\" alt=\"list-units\"></p></li></ul><ul><li><p><code>systemctl list-units --all</code>列出所有，包括失败或inactive的unit：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/units-all.png\" alt=\"units-all\"></p></li><li><p><code>systemctl list-units --all --states=inactive</code>列出所有状态为<strong>inactive</strong>的unit，如果命令中不加<code>--all</code>，使用<code>systemctl list-units --type=service</code>可以查看状态为<strong>active</strong>的service：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/inactive-units.png\" alt=\"inactive-unit\"></p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/active-service.png\" alt=\"active-service\"></p></li><li><p><code>systemctl is-active crond.service</code>命令可以查看服务是否是<strong>active</strong>状态：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www system]<span class=\"comment\"># systemctl is-active crond.service </span></span><br><span class=\"line\">active</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"target介绍\"><a href=\"#target介绍\" class=\"headerlink\" title=\"target介绍\"></a>target介绍</h3><ul><li><p>系统为了方便管理，使用<strong>target</strong>来管理<strong>unit</strong>；</p></li><li><p><code>systemctl list-unit-files --type=target</code>命令可以列出所有的target：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/target-list.png\" alt=\"target-list\"></p></li><li><p>命令<code>systemctl list-dependencies multi-user-target</code>,可以查看指定的target中包括哪些unit：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/multi-user.png\" alt=\"multi-user\"></p><ul><li>target中同样也可以包含其他的target，形成嵌套的形式：</li></ul><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/resuce-target.png\" alt=\"resuce-target\"></p></li><li><p>查看系统默认的target使用命令<code>systemctl get-default</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www system]<span class=\"comment\"># systemctl get-default </span></span><br><span class=\"line\">multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>Centos6中可以更改系统运行级别，而在Centos7中，更改运行级别是通过更改默认target来实现，使用命令<code>systemctl set-default multi-user.target</code>更改：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www system]<span class=\"comment\"># systemctl set-default multi-user.target </span></span><br><span class=\"line\">Removed symlink /etc/systemd/system/default.target.</span><br><span class=\"line\">Created symlink from /etc/systemd/system/default.target to /usr/lib/systemd/system/multi-user.target.</span><br></pre></td></tr></table></figure><ul><li>可以看到，设置默认target同样也是使用创建软连接的形式实现。</li></ul></li></ul><blockquote><p>实际上，systemd中，一个service属于一种类型的unit，而多个unit又组成一个target；所以在target中包含了多个service。</p><p>查看service属于哪个target，可以在<strong>/usr/lib/systemd/system/</strong>目录下查看service的配置文件的<strong>[install]</strong>部分，如sshd服务：</p></blockquote><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/service-target.png\" alt=\"service-target\"></p><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><h1 id=\"Linux计划任务\"><a href=\"#Linux计划任务\" class=\"headerlink\" title=\"Linux计划任务\"></a>Linux计划任务</h1><ul><li><p>Linux中需要定时执行一个程序或者脚本，使用crontab工具，可以查看<strong>/etc/crontab</strong>配置文件的内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHELL=/bin/bash</span><br><span class=\"line\">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class=\"line\">MAILTO=root</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For details see man 4 crontabs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example of job definition:</span></span><br><span class=\"line\"><span class=\"comment\"># .---------------- minute (0 - 59)</span></span><br><span class=\"line\"><span class=\"comment\"># |  .------------- hour (0 - 23)</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  .---------- day of month (1 - 31)</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  |</span></span><br><span class=\"line\"><span class=\"comment\"># *  *  *  *  * user-name  command to be executed</span></span><br></pre></td></tr></table></figure></li><li><p>这里定义了三个变量，分别是<code>SHELL</code>环境、<code>PATH</code>环境变量、<code>MAILTO</code>发送邮件到某个用户，配置文件下半部分则是crontab的格式，5个<code>*</code>分别表示：分、时、日、月、每周哪一天，然后则是执行命令的用户，默认是配置定时任务的用户，最后则是要执行的命令；</p></li><li><p>定义crontab定时任务，使用<code>crontab -e</code>命令，然后的操作与vim相同，例如凌晨3点执行一个任务，则写入下面的内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 3 * * * /bin/bash /use/<span class=\"built_in\">local</span>/sbin/xx.sh &gt;&gt; /tmp/123.log 2&gt;&gt; /tmp/123.log</span><br></pre></td></tr></table></figure><ul><li>crontab的时间设置，除了指定一个时刻，还可以指定时间段或者多个时间，如每两个月1-10号周二和周五执行：<code>0 3 1-10 */2 2,5 command</code>。</li><li>如果需要定义一个只需要今年执行的命令，则使用星期来确定，因为年份中指定日期的星期与其他年份是不想同的。</li></ul></li><li><p>启动crontab服务使用命令<code>systemctl start crond</code>，然后可以使用<code>systemctl status crond</code>查看服务状态：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># systemctl start crond</span></span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ps -aux | grep cron</span></span><br><span class=\"line\">root       605  0.0  0.0 126260  1644 ?        Ss   4月19   0:12 /usr/sbin/crond -n</span><br><span class=\"line\">root     19401  0.0  0.0 112676   984 pts/0    R+   00:44   0:00 grep --color=auto cron</span><br><span class=\"line\">[root@evobot ~]<span class=\"comment\"># systemctl status crond</span></span><br><span class=\"line\">● crond.service - Command Scheduler</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/crond.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since 四 2018-04-19 00:35:50 CST; 3 weeks 2 days ago</span><br><span class=\"line\"> Main PID: 605 (crond)</span><br><span class=\"line\">   CGroup: /system.slice/crond.service</span><br><span class=\"line\">           └─605 /usr/sbin/crond -n</span><br><span class=\"line\"></span><br><span class=\"line\">4月 19 00:35:50 evobot systemd[1]: Started Command Scheduler.</span><br><span class=\"line\">4月 19 00:35:50 evobot systemd[1]: Starting Command Scheduler...</span><br><span class=\"line\">4月 19 00:35:50 evobot crond[605]: (CRON) INFO (RANDOM_DELAY will be scale....)</span><br><span class=\"line\">4月 19 00:35:50 evobot crond[605]: (CRON) INFO (running with inotify support)</span><br><span class=\"line\">5月 12 00:44:01 evobot crond[605]: (root) RELOAD (/var/spool/cron/root)</span><br><span class=\"line\">Hint: Some lines were ellipsized, use -l to show <span class=\"keyword\">in</span> full.</span><br></pre></td></tr></table></figure></li><li><p>如果遇到定时任务不执行的问题，首先查看命令路径是否在crontab配置文件的PATH变量，或者使用命令的绝对路径执行；</p></li><li><p><code>crontab -l</code>可以列出当前用户的计划任务，而每个用户的计划任务文件则是在<strong>/var/spool/cron/[username]</strong>文件内：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># cat /var/spool/cron/root </span></span><br><span class=\"line\">*/1 * * * * /usr/<span class=\"built_in\">local</span>/qcloud/stargate/admin/start.sh &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class=\"line\">0 3 1-10 */2 */2 ls</span><br></pre></td></tr></table></figure><ul><li>所以要备份用户的crontab任务，直接将上面的文件拷贝即可。</li></ul></li><li><p><code>crontab -r</code>是删除当前用户配置的计划任务，<code>crontab -u root -l</code>则是查看指定用户的计划任务列表。</p></li></ul><h1 id=\"服务管理\"><a href=\"#服务管理\" class=\"headerlink\" title=\"服务管理\"></a>服务管理</h1><h2 id=\"chkconfig\"><a href=\"#chkconfig\" class=\"headerlink\" title=\"chkconfig\"></a>chkconfig</h2><h3 id=\"查看管理服务列表\"><a href=\"#查看管理服务列表\" class=\"headerlink\" title=\"查看管理服务列表\"></a>查看管理服务列表</h3><ul><li><p>chkconfig能够管理服务的启动、开机自启动和指定级别启动，chkconfig是Centos6的服务管理工具，在Centos7中则使用的是systemd；</p></li><li><p><code>chkconfig --list</code>可以查看当前使用chkconfig管理的服务：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># chkconfig --list</span></span><br><span class=\"line\"></span><br><span class=\"line\">netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关</span><br><span class=\"line\">network        \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关</span><br></pre></td></tr></table></figure></li><li><p>chkconfig管理的服务的启动脚本在<strong>/etc/init.d/</strong>目录下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@evobot ~]<span class=\"comment\"># ls /etc/init.d/</span></span><br><span class=\"line\"><span class=\"built_in\">functions</span>  netconsole  network  README</span><br></pre></td></tr></table></figure></li><li><p>在<code>chkconfig --list</code>命令的输出中，可以看到network服务在2、3、4、5级别的状态都是开，即表示在这几个运行级别服务会自启动，如果想要将各级别的服务自启动关闭，则使用命令<code>chkconfig network off</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># chkconfig network off</span></span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># chkconfig --list</span></span><br><span class=\"line\"></span><br><span class=\"line\">netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关</span><br><span class=\"line\">network        \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关</span><br></pre></td></tr></table></figure></li><li><p>重新打开服务状态则使用<code>chkconfig network on</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># chkconfig network on</span></span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># chkconfig --list</span></span><br><span class=\"line\"></span><br><span class=\"line\">netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关</span><br><span class=\"line\">network        \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"系统运行级别\"><a href=\"#系统运行级别\" class=\"headerlink\" title=\"系统运行级别\"></a>系统运行级别</h3><ul><li>这里的6个级别表示开机系统进入的状态，具体的含义如下表：</li></ul><table><thead><tr><th style=\"text-align:center\">级别</th><th style=\"text-align:center\">作用</th></tr></thead><tbody><tr><td style=\"text-align:center\">0</td><td style=\"text-align:center\">关机</td></tr><tr><td style=\"text-align:center\">1</td><td style=\"text-align:center\">单用户</td></tr><tr><td style=\"text-align:center\">2</td><td style=\"text-align:center\">无NFS服务，无GUI的正常多用户状态</td></tr><tr><td style=\"text-align:center\">3</td><td style=\"text-align:center\">无GUI的正常多用户状态</td></tr><tr><td style=\"text-align:center\">4</td><td style=\"text-align:center\">保留级别，未使用</td></tr><tr><td style=\"text-align:center\">5</td><td style=\"text-align:center\">图形界面多用户状态</td></tr><tr><td style=\"text-align:center\">6</td><td style=\"text-align:center\">重启</td></tr></tbody></table><ul><li>在Centos6中可以修改<strong>/etc/inittab</strong>文件改变系统的运行级别；</li></ul><h3 id=\"更改指定级别服务状态\"><a href=\"#更改指定级别服务状态\" class=\"headerlink\" title=\"更改指定级别服务状态\"></a>更改指定级别服务状态</h3><ul><li><p>使用命令<code>chkconfig --level 24 network off</code>可以关闭指定级别服务自启：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># chkconfig --level 24 network off</span></span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># chkconfig --list</span></span><br><span class=\"line\"></span><br><span class=\"line\">netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关</span><br><span class=\"line\">network        \t0:关\t1:关\t2:关\t3:开\t4:关\t5:开\t6:关</span><br></pre></td></tr></table></figure></li><li><p>使用<code>chkconfig --level 24 network on</code>可以重新打开指定级别服务自启，<strong>不能打开服务在0,1,6级别的自启开关，否则会导致服务启动异常。</strong></p></li></ul><h3 id=\"增加删除服务\"><a href=\"#增加删除服务\" class=\"headerlink\" title=\"增加删除服务\"></a>增加删除服务</h3><ul><li><p>如果要给chkconfig增加新的服务进行管理，需要先将服务的启动脚本放到<strong>/etc/init.d/</strong>目录下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www init.d]<span class=\"comment\"># ls</span></span><br><span class=\"line\"><span class=\"built_in\">functions</span>  myservice  netconsole  network  README</span><br></pre></td></tr></table></figure></li><li><p>启动脚本的格式如下，首先启动脚本是shell脚本，然后<code>#chkconfig： 2345 10 90</code>指定服务运行级别和启动关闭顺序，这里分别是第10位启动和第90位关闭，然后描述<code>description</code>也必须存在：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># network       Bring up/down networking</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># chkconfig: 2345 10 90</span></span><br><span class=\"line\"><span class=\"comment\"># description: Activates/Deactivates all network interfaces configured to \\</span></span><br><span class=\"line\"><span class=\"comment\">#              start at boot time.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">### BEGIN INIT INFO</span></span><br><span class=\"line\"><span class=\"comment\"># Provides: $network</span></span><br><span class=\"line\"><span class=\"comment\"># Should-Start: iptables ip6tables NetworkManager-wait-online NetworkManager $network-pre</span></span><br><span class=\"line\"><span class=\"comment\"># Short-Description: Bring up/down networking</span></span><br><span class=\"line\"><span class=\"comment\"># Description: Bring up/down networking</span></span><br><span class=\"line\"><span class=\"comment\">### END INIT INFO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Source function library.</span></span><br><span class=\"line\">. /etc/init.d/<span class=\"built_in\">functions</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -f /etc/sysconfig/network ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 6</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">. /etc/sysconfig/network</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f /etc/sysconfig/pcmcia ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        . /etc/sysconfig/pcmcia</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></li><li><p>然后使用命令<code>chkconfig --add myservice</code>将服务添加到chkconfig：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www init.d]<span class=\"comment\"># chkconfig --add myservice</span></span><br><span class=\"line\">[root@www init.d]<span class=\"comment\"># chkconfig --list</span></span><br><span class=\"line\"></span><br><span class=\"line\">myservice      \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关</span><br><span class=\"line\">netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关</span><br><span class=\"line\">network        \t0:关\t1:关\t2:关\t3:开\t4:关\t5:开\t6:关</span><br></pre></td></tr></table></figure></li><li><p>要删除服务使用<code>chkconfig --del myservice</code>即可：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www init.d]<span class=\"comment\"># chkconfig --del myservice </span></span><br><span class=\"line\">[root@www init.d]<span class=\"comment\"># chkconfig --list</span></span><br><span class=\"line\"></span><br><span class=\"line\">netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关</span><br><span class=\"line\">network        \t0:关\t1:关\t2:关\t3:开\t4:关\t5:开\t6:关</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"systemd\"><a href=\"#systemd\" class=\"headerlink\" title=\"systemd\"></a>systemd</h2><ul><li>systemd是Centos7默认的服务管理工具，查看systemd的所有unit使用命令<code>systemctl list-unit-files</code>，命令的输出结果不仅包括service，还有target、socket等等；</li></ul><h3 id=\"服务管理相关命令\"><a href=\"#服务管理相关命令\" class=\"headerlink\" title=\"服务管理相关命令\"></a>服务管理相关命令</h3><ul><li><p>查看systemd管理的所有服务，命令为<code>systemctl list-units --all --type=service</code>，输出内容只包含service，并且会显示服务状态、描述信息等，如果命令中不加<code>--all</code>，则只显示active和failed状态的服务，不显示inactive状态的服务：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/systemd-service.png\" alt=\"systemd-service\"></p></li><li><p>让服务开机自启动，使用命令<code>systemctl enable crond.service</code>，服务名后面的<code>.service</code>可以不写：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www init.d]<span class=\"comment\"># systemctl enable crond.service</span></span><br><span class=\"line\">Created symlink from /etc/systemd/system/multi-user.target.wants/crond.service to /usr/lib/systemd/system/crond.service.</span><br></pre></td></tr></table></figure><ul><li>这里的输出也可以看到服务的启动脚本路径，实际上启动脚本是一个软连接文件，可以查看到启动脚本的具体内容，设置服务开机自启动实际上就是创建了启动脚本的软连接到<strong>/etc/systemd/system/multi-user.target.wants/</strong>目录下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www init.d]<span class=\"comment\"># ls -l /etc/systemd/system/multi-user.target.wants/crond.service </span></span><br><span class=\"line\">lrwxrwxrwx 1 root root 37 5月  11 01:40 /etc/systemd/system/multi-user.target.wants/crond.service -&gt; /usr/lib/systemd/system/crond.service</span><br><span class=\"line\"></span><br><span class=\"line\">[root@www init.d]<span class=\"comment\"># cat !$</span></span><br><span class=\"line\">cat /etc/systemd/system/multi-user.target.wants/crond.service</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Command Scheduler</span><br><span class=\"line\">After=auditd.service systemd-user-sessions.service time-sync.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">EnvironmentFile=/etc/sysconfig/crond</span><br><span class=\"line\">ExecStart=/usr/sbin/crond -n <span class=\"variable\">$CRONDARGS</span></span><br><span class=\"line\">ExecReload=/bin/<span class=\"built_in\">kill</span> -HUP <span class=\"variable\">$MAINPID</span></span><br><span class=\"line\">KillMode=process</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>关闭服务开机自启则使用<code>systemctl disable crond.service</code>命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www init.d]<span class=\"comment\"># systemctl disable crond.service </span></span><br><span class=\"line\">Removed symlink /etc/systemd/system/multi-user.target.wants/crond.service.</span><br></pre></td></tr></table></figure><ul><li>关闭服务的自启动则会将启动脚本的软连接文件删除。</li></ul></li><li><p>查看服务状态使用<code>systemctl status crond.service</code>：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/systemd-status.png\" alt=\"systemctl status\"></p></li><li><p><code>systemctl [start|stop|restart] crond.service</code>则分别表示启动服务、停止服务和重启服务： <img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/systemctl-stop.png\" alt=\"start|stop|restart\"></p></li></ul><ul><li><p>命令<code>systemdctl is-enabled crond</code>可以查看服务是否是开机启动：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www init.d]<span class=\"comment\"># systemctl is-enabled crond.service </span></span><br><span class=\"line\">enabled</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"unit介绍\"><a href=\"#unit介绍\" class=\"headerlink\" title=\"unit介绍\"></a>unit介绍</h3><ul><li><p>设置服务自启动时从<strong>/usr/lib/systemd/system/</strong>目录创建了启动脚本的软连接，而这个目录下除了service之外还有其他文件，这些文件都被称为<strong>unit</strong>：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/systemd-unit.png\" alt=\"systemd unit\"></p></li><li><p>unit分为以下几种类型：</p><p>service：系统服务</p><p>target：多个unit组成的组，Centos6的7个运行级别对应的target如下：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/systemd-target.png\" alt=\"target\"></p><p><strong>device</strong>：硬件设备</p><p><strong>mount</strong>：文件系统挂载点</p><p><strong>automount</strong>：自动挂载点</p><p><strong>path</strong>：文件或路径</p><p><strong>scope</strong>：不是由systemd启动的外部进程</p><p><strong>slice</strong>：进程组</p><p><strong>snapshot</strong>：systemd快照</p><p><strong>socket</strong>：进程间通信套接字</p><p><strong>swap</strong>：swap文件</p><p><strong>timer</strong>：定时器</p></li></ul><h3 id=\"unit相关命令\"><a href=\"#unit相关命令\" class=\"headerlink\" title=\"unit相关命令\"></a>unit相关命令</h3><ul><li><p><code>systemctl list-units</code>列出正在运行的unit：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/list-units.png\" alt=\"list-units\"></p></li></ul><ul><li><p><code>systemctl list-units --all</code>列出所有，包括失败或inactive的unit：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/units-all.png\" alt=\"units-all\"></p></li><li><p><code>systemctl list-units --all --states=inactive</code>列出所有状态为<strong>inactive</strong>的unit，如果命令中不加<code>--all</code>，使用<code>systemctl list-units --type=service</code>可以查看状态为<strong>active</strong>的service：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/inactive-units.png\" alt=\"inactive-unit\"></p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/active-service.png\" alt=\"active-service\"></p></li><li><p><code>systemctl is-active crond.service</code>命令可以查看服务是否是<strong>active</strong>状态：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www system]<span class=\"comment\"># systemctl is-active crond.service </span></span><br><span class=\"line\">active</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"target介绍\"><a href=\"#target介绍\" class=\"headerlink\" title=\"target介绍\"></a>target介绍</h3><ul><li><p>系统为了方便管理，使用<strong>target</strong>来管理<strong>unit</strong>；</p></li><li><p><code>systemctl list-unit-files --type=target</code>命令可以列出所有的target：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/target-list.png\" alt=\"target-list\"></p></li><li><p>命令<code>systemctl list-dependencies multi-user-target</code>,可以查看指定的target中包括哪些unit：</p><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/multi-user.png\" alt=\"multi-user\"></p><ul><li>target中同样也可以包含其他的target，形成嵌套的形式：</li></ul><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/resuce-target.png\" alt=\"resuce-target\"></p></li><li><p>查看系统默认的target使用命令<code>systemctl get-default</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www system]<span class=\"comment\"># systemctl get-default </span></span><br><span class=\"line\">multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>Centos6中可以更改系统运行级别，而在Centos7中，更改运行级别是通过更改默认target来实现，使用命令<code>systemctl set-default multi-user.target</code>更改：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www system]<span class=\"comment\"># systemctl set-default multi-user.target </span></span><br><span class=\"line\">Removed symlink /etc/systemd/system/default.target.</span><br><span class=\"line\">Created symlink from /etc/systemd/system/default.target to /usr/lib/systemd/system/multi-user.target.</span><br></pre></td></tr></table></figure><ul><li>可以看到，设置默认target同样也是使用创建软连接的形式实现。</li></ul></li></ul><blockquote><p>实际上，systemd中，一个service属于一种类型的unit，而多个unit又组成一个target；所以在target中包含了多个service。</p><p>查看service属于哪个target，可以在<strong>/usr/lib/systemd/system/</strong>目录下查看service的配置文件的<strong>[install]</strong>部分，如sshd服务：</p></blockquote><p><img src=\"https://blogimage-1251925320.cos.ap-chengdu.myqcloud.com/service-target.png\" alt=\"service-target\"></p><hr><!-- rebuild by neat -->"},{"title":"MariaDB和Apache的安装","author":"Evobot","abbrlink":"1d2820c6","date":"2018-05-24T15:02:55.000Z","image":null,"_content":"\n\n\nMariaDB由于与MySQL基本相同，所以安装方法也基本一致，这里介绍MariaDB的免编译二进制安装包的安装方法，另外也将介绍Apache的安装方法。\n\n<!--more-->\n\n---\n\n# MariaDB安装\n\n- 下载MariaDB：\n\n  ```bash\n  # cd /usr/local/src\n  # wget https://downloads.mariadb.com/MariaDB/mariadb-10.2.6/bintar-linux-glibc_214-x86_64/mariadb-10.2.6-linux-glibc_214-x86_64.tar.gz\n  ```\n\n- 解压MariaDB压缩包：\n\n  ```bash\n  # tar zxvf mariadb-10.2.6-linux-glibc_214-x86_64.tar.gz\n  ```\n\n- 将解压出来的目录移动到`/usr/local/`下并更名为`mariadb`：\n\n  ```bash\n  # mv mariadb-10.2.6-linux-glibc_214-x86_64 /usr/local/mariadb\n  ```\n\n- 创建`mysql`用户并创建`/data/mariadb`目录，或使用mariadb目录下的data目录：\n\n  ```bash\n  # useradd mysql -s /bin/nologin\n  # mkdir -p /data/mariadb\n  ```\n\n- 执行初始化脚本：\n\n  ```bash\n  # ./scripts/mysql_install_db --user=mysql --datadir=/data/mariadb/\n  ```\n\n  - 如果在执行初始化脚本是提示如下错误，那么需要将`/etc/my,cnf`删除或者重命名，这是由于之前安装了MySQL并且修改了`my.cnf`内的basedir等配置造成的，或者在初始化脚本的参数上增加`--basedir=/usr/local/mariadb`：\n\n  ```bash\n  FATAL ERROR: Could not find mysqld\n  \n  The following directories were searched:\n  \n      /usr/local/mysql/libexec\n      /usr/local/mysql/sbin\n      /usr/local/mysql/bin\n  \n  If you compiled from source, you need to either run 'make install' to\n  copy the software into the correct location ready for operation.\n  If you don't want to do a full install, you can use the --srcddir\n  option to only install the mysql database and privilege tables\n  \n  If you are using a binary release, you must either be at the top\n  level of the extracted archive, or pass the --basedir option\n  pointing to that location.\n  \n  The latest information about mysql_install_db is available at\n  ```\n\n- 复制配置文件和启动脚本：\n\n  MariaDB提供了不同的配置文件，如my-small.cnf，my-large.cnf，这些配置文件的不同之处在于其定义的MariaDB运行时的缓存，缓冲等大小不一样，可以根据自己机器的性能和配置，选择合适的配置文件复制：\n\n  另外为了与MySQL的配置做区分，这里不在复制到`/etc/`下，而是复制到MariaDB的basedir下：\n\n  ```bash\n  # cp support-files/my-small.cnf /usr/local/mariadb/my.cnf\n  # cp support-files/mysql.server /etc/init.d/mariadb\n  ```\n\n- 编辑启动脚本和配置文件\n\n  - 为了防止MariaDB启动时由于未配置datadir，导致启动时MariaDB读取`/etc/my.cnf`中配置的datadir，所以需要在MariaDB自定义的配置文件中增加datadir：\n\n  ```bash\n  [mysqld]\n  datadir=/data/mariadb\n  ```\n\n  - MariaDB的启动脚本需要对`basedir`、`datadir`进行修改，并且增加`conf`配置，然后再修改启动命令，指定配置文件启动：\n\n  ```bash\n  basedir=/usr/local/mariadb\n  datadir=/data/mariadb\n  conf=$basedir/my.cnf\n  ...\n  case \"$mode\" in\n    'start')\n      # Start daemon\n  \n      # Safeguard (relative paths, core dumps..)\n      cd $basedir\n  \n      echo $echo_n \"Starting MySQL\"\n      if test -x $bindir/mysqld_safe\n      then\n        # Give extra arguments to mysqld with the my.cnf file. This script\n        # may be overwritten at next upgrade.\n        # 增加--defaults-file选项\n        $bindir/mysqld_safe --defaults-file=\"$conf\" --datadir=\"$datadir\" --pid-file=\"$mysqld_pid_file_path\" \"$@\" &\n        wait_for_ready; return_value=$?\n  ...\n  ```\n\n- 启动服务\n\n  ```bash\n  [root@localhost mariadb]# /etc/init.d/mariadb start\n  Reloading systemd:                                         [  确定  ]\n  Starting mariadb (via systemctl):                          [  确定  ]\n  \n  [root@localhost mariadb]# ps aux | grep mysql\n  root       2288  0.0  0.1 115380  1736 ?        S    00:19   0:00 /bin/sh /usr/local/mariadb/bin/mysqld_safe --defaults-file=/usr/local/mariadb/my.cnf --datadir=/data/mariadb --pid-file=/data/mariadb/localhost.localdomain.pid\n  mysql      2404  0.3  5.6 1583772 56676 ?       Sl   00:19   0:00 /usr/local/mariadb/bin/mysqld --defaults-file=/usr/local/mariadb/my.cnf --basedir=/usr/local/mariadb --datadir=/data/mariadb --plugin-dir=/usr/local/mariadb/lib/plugin --user=mysql --log-error=/data/mariadb/localhost.localdomain.err --pid-file=/data/mariadb/localhost.localdomain.pid --socket=/tmp/mysql.sock --port=3306\n  root       2442  0.0  0.0 112668   964 pts/0    S+   00:21   0:00 grep --color=auto mysql\n  \n  [root@localhost mariadb]# netstat -tlnp\n  Active Internet connections (only servers)\n  Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\n  tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1328/sshd\n  tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      2032/master\n  tcp6       0      0 :::3306                 :::*                    LISTEN      2404/mysqld\n  ```\n\n---\n\n# Apache安装\n\nApache是一个基金会的名字，实际上httpd才是需要安装的软件包，早期其名字叫做apache。\n\n## 下载httpd源码包及依赖包\n\n- 安装httpd还需要使用`apr`和`apr-util`通用函数库，它们可以让httpd不关心底层操作系统平台，可以很方便的移植，如从linux移植到windows。\n\n- 下载httpd和apr，apr-util源码包：\n\n  ```bash\n  // httpd2.4.33源码包\n  # wget http://mirrors.cnnic.cn/apache/httpd/httpd-2.4.33.tar.gz\n  // apr1.6.3源码包\n  # wget http://mirrors.cnnic.cn/apache/apr/apr-1.6.3.tar.gz\n  // apr-util1.6.1源码包\n  # wget http://mirrors.cnnic.cn/apache/apr/apr-util-1.6.1.tar.bz2\n  ```\n\n## 编译apr和apr-util\n\n- 由于yum安装的apr和apr-util版本与httpd2.4不匹配，所以需要手动编译这两个库；\n\n### 编译apr\n\n  ```bash\n# tar zxvf apr-1.6.3.tar.gz\n# cd apr-1.6.3\n# ./configure --prefix=/usr/local/apr\n# make && make install\n  ```\n\n- 检查是否安装正确\n\n  ```bash\n  [root@localhost apr-1.6.3]# echo $?\n  0\n  ```\n\n### 编译apr-util\n\n- 编译apr-util时需要指定apr的安装位置：\n\n  ```bash\n  # tar jxvf apr-util-1.6.1.tar.bz2\n  # cd apr-util-1.6.1\n  # ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr\n  # make && make install\n  ```\n\n- 如果执行make的过程中报错如下，则需要安装xml解析的`expat-devel `软件包：\n\n  ```bash\n  [root@localhost apr-util-1.6.1]# make && make install\n  make[1]: 进入目录“/usr/local/src/apr-util-1.6.1”\n  /bin/sh /usr/local/apr/build-1/libtool --silent --mode=compile gcc -g -O2 -pthread   -DHAVE_CONFIG_H  -DLINUX -D_REENTRANT -D_GNU_SOURCE   -I/usr/local/src/apr-util-1.6.1/include -I/usr/local/src/apr-util-1.6.1/include/private  -I/usr/local/apr/include/apr-1    -o xml/apr_xml.lo -c xml/apr_xml.c &&touch xml/apr_xml.lo\n  xml/apr_xml.c:35:19: 致命错误：expat.h：没有那个文件或目录\n   #include <expat.h>\n                     ^\n  编译中断。\n  make[1]: *** [xml/apr_xml.lo] 错误 1\n  make[1]: 离开目录“/usr/local/src/apr-util-1.6.1”\n  make: *** [all-recursive] 错误 1\n  ```\n\n  \n\n## 编译安装httpd\n\n- httpd的编译参数如下：\n\n  ```bash\n  ./configure --prefix=/usr/local/apache2.4 \\\n  --with-apr=/usr/local/apr \\\n  --with-apr-util=/usr/local/apr-util \\\n  --enable-so \\\n  --enable-mods-shared=most\n  ```\n\n  - 其中，`enable-so`参数是让apache支持动态扩展和加载模块，如php模块，`enable-mods-shared=most`参数则是指定apache支持绝大多数的模块扩展。\n\n- 编译时报错`pcre-config`，则需要安装`pcre-devel`软件包：\n\n  ```bash\n  checking for pcre-config... false\n  configure: error: pcre-config for libpcre not found. PCRE is required and available from http://pcre.org/\n  ```\n\n- 安装：\n\n  ```bash\n  # make && make install\n  ```\n\n  - 安装时如果报错如下，则是因为编译`apr-util`时没有安装`expat-devel`，并且安装之后没有重新进行编译，如果编译出错，使用`make clean`清除之前的编译结果：\n\n  ```bash\n  /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_GetErrorCode'\n  /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_SetEntityDeclHandler'\n  /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_ParserCreate'\n  /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_SetCharacterDataHandler'\n  /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_ParserFree'\n  /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_SetUserData'\n  /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_StopParser'\n  /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_Parse'\n  /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_ErrorString'\n  /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_SetElementHandler'\n  collect2: error: ld returned 1 exit status\n  make[2]: *** [htpasswd] 错误 1\n  make[2]: 离开目录“/usr/local/src/httpd-2.4.33/support”\n  make[1]: *** [all-recursive] 错误 1\n  make[1]: 离开目录“/usr/local/src/httpd-2.4.33/support”\n  make: *** [all-recursive] 错误 1\n  ```\n\n- 安装完成后可以进入apache的安装目录，apache的执行文件为`apache/bin/httpd`:\n\n  ```bash\n  [root@localhost apache2.4]# ls\n  bin    cgi-bin  error   icons    logs  manual\n  build  conf     htdocs  include  man   modules\n  \n  [root@localhost apache2.4]# ls -l bin/httpd\n  -rwxr-xr-x. 1 root root 2348432 5月  25 01:33 bin/httpd\n  ```\n\n- apache的安装目录下，conf目录为配置文件所在目录，htdocs则是存放默认访问页的目录，logs则是日志存放的目录，日志由错误日志、访问日志等，modules则是扩展模块的存放目录，每个模块都代表apache的一个功能，查看apache加载了哪些模块，可以使用如下命令：\n\n  ```bash\n  # /usr/local/apache2.4/bin/apachectl -M\n  or\n  # /usr/local/apache2.4/bin/httpd -M\n  ```\n\n  ```bash\n  [root@localhost apache2.4]# ./bin/httpd -M\n  AH00558: httpd: Could not reliably determine the server's fully qualified domain name, using localhost.localdomain. Set the 'ServerName' directive globally to suppress this message\n  Loaded Modules:\n   core_module (static)\n   so_module (static)\n   http_module (static)\n   mpm_event_module (static)\n   authn_file_module (shared)\n   authn_core_module (shared)\n   authz_host_module (shared)\n   authz_groupfile_module (shared)\n   authz_user_module (shared)\n   authz_core_module (shared)\n   access_compat_module (shared)\n   auth_basic_module (shared)\n   reqtimeout_module (shared)\n   filter_module (shared)\n   mime_module (shared)\n   log_config_module (shared)\n   env_module (shared)\n   headers_module (shared)\n   setenvif_module (shared)\n   version_module (shared)\n   unixd_module (shared)\n   status_module (shared)\n   autoindex_module (shared)\n   dir_module (shared)\n   alias_module (shared)\n  ```\n\n  - 这里模块后面的`static`和`shared`，static表示模块被编译进了htppd脚本里，是一个整体；shared则表示扩展模块，模块在modules目录下，在需要时被调用。\n\n- 启动apache，执行`bin/apachectl start`：\n\n  ```bash\n  [root@localhost apache2.4]# /usr/local/apache2.4/bin/apachectl start\n  AH00558: httpd: Could not reliably determine the server's fully qualified domain name, using localhost.localdomain. Set the 'ServerName' directive globally to suppress this message\n  \n  [root@localhost apache2.4]# ps aux | grep httpd\n  root      76399  0.0  0.2  70952  2248 ?        Ss   01:47   0:00 /usr/local/apache2.4/bin/httpd -k start\n  daemon    76400  0.0  0.4 359916  4264 ?        Sl   01:47   0:00 /usr/local/apache2.4/bin/httpd -k start\n  daemon    76401  0.0  0.4 359916  4264 ?        Sl   01:47   0:00 /usr/local/apache2.4/bin/httpd -k start\n  daemon    76402  0.0  0.4 359916  4264 ?        Sl   01:47   0:00 /usr/local/apache2.4/bin/httpd -k start\n  root      76485  0.0  0.0 112724   976 pts/0    S+   01:47   0:00 grep --color=auto httpd\n  \n  [root@localhost apache2.4]# netstat -tlnp\n  Active Internet connections (only servers)\n  Proto Recv-Q Send-Q Local Address           Foreign Address         State     PID/Program name\n  tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN     1328/sshd\n  tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN     2032/master\n  tcp6       0      0 :::80                   :::*                    LISTEN     76399/httpd\n  ```\n\n  - 默认监听80端口。\n\n---\n\n","source":"_posts/MariaDB和Apache的安装.md","raw":"---\ntitle: MariaDB和Apache的安装\nauthor: Evobot\ncategories: LAMP\ntags:\n  - Linux\n  - Centos\n  - Apache\n  - MariaDB\nabbrlink: 1d2820c6\ndate: 2018-05-24 23:02:55\nimage:\n---\n\n\n\nMariaDB由于与MySQL基本相同，所以安装方法也基本一致，这里介绍MariaDB的免编译二进制安装包的安装方法，另外也将介绍Apache的安装方法。\n\n<!--more-->\n\n---\n\n# MariaDB安装\n\n- 下载MariaDB：\n\n  ```bash\n  # cd /usr/local/src\n  # wget https://downloads.mariadb.com/MariaDB/mariadb-10.2.6/bintar-linux-glibc_214-x86_64/mariadb-10.2.6-linux-glibc_214-x86_64.tar.gz\n  ```\n\n- 解压MariaDB压缩包：\n\n  ```bash\n  # tar zxvf mariadb-10.2.6-linux-glibc_214-x86_64.tar.gz\n  ```\n\n- 将解压出来的目录移动到`/usr/local/`下并更名为`mariadb`：\n\n  ```bash\n  # mv mariadb-10.2.6-linux-glibc_214-x86_64 /usr/local/mariadb\n  ```\n\n- 创建`mysql`用户并创建`/data/mariadb`目录，或使用mariadb目录下的data目录：\n\n  ```bash\n  # useradd mysql -s /bin/nologin\n  # mkdir -p /data/mariadb\n  ```\n\n- 执行初始化脚本：\n\n  ```bash\n  # ./scripts/mysql_install_db --user=mysql --datadir=/data/mariadb/\n  ```\n\n  - 如果在执行初始化脚本是提示如下错误，那么需要将`/etc/my,cnf`删除或者重命名，这是由于之前安装了MySQL并且修改了`my.cnf`内的basedir等配置造成的，或者在初始化脚本的参数上增加`--basedir=/usr/local/mariadb`：\n\n  ```bash\n  FATAL ERROR: Could not find mysqld\n  \n  The following directories were searched:\n  \n      /usr/local/mysql/libexec\n      /usr/local/mysql/sbin\n      /usr/local/mysql/bin\n  \n  If you compiled from source, you need to either run 'make install' to\n  copy the software into the correct location ready for operation.\n  If you don't want to do a full install, you can use the --srcddir\n  option to only install the mysql database and privilege tables\n  \n  If you are using a binary release, you must either be at the top\n  level of the extracted archive, or pass the --basedir option\n  pointing to that location.\n  \n  The latest information about mysql_install_db is available at\n  ```\n\n- 复制配置文件和启动脚本：\n\n  MariaDB提供了不同的配置文件，如my-small.cnf，my-large.cnf，这些配置文件的不同之处在于其定义的MariaDB运行时的缓存，缓冲等大小不一样，可以根据自己机器的性能和配置，选择合适的配置文件复制：\n\n  另外为了与MySQL的配置做区分，这里不在复制到`/etc/`下，而是复制到MariaDB的basedir下：\n\n  ```bash\n  # cp support-files/my-small.cnf /usr/local/mariadb/my.cnf\n  # cp support-files/mysql.server /etc/init.d/mariadb\n  ```\n\n- 编辑启动脚本和配置文件\n\n  - 为了防止MariaDB启动时由于未配置datadir，导致启动时MariaDB读取`/etc/my.cnf`中配置的datadir，所以需要在MariaDB自定义的配置文件中增加datadir：\n\n  ```bash\n  [mysqld]\n  datadir=/data/mariadb\n  ```\n\n  - MariaDB的启动脚本需要对`basedir`、`datadir`进行修改，并且增加`conf`配置，然后再修改启动命令，指定配置文件启动：\n\n  ```bash\n  basedir=/usr/local/mariadb\n  datadir=/data/mariadb\n  conf=$basedir/my.cnf\n  ...\n  case \"$mode\" in\n    'start')\n      # Start daemon\n  \n      # Safeguard (relative paths, core dumps..)\n      cd $basedir\n  \n      echo $echo_n \"Starting MySQL\"\n      if test -x $bindir/mysqld_safe\n      then\n        # Give extra arguments to mysqld with the my.cnf file. This script\n        # may be overwritten at next upgrade.\n        # 增加--defaults-file选项\n        $bindir/mysqld_safe --defaults-file=\"$conf\" --datadir=\"$datadir\" --pid-file=\"$mysqld_pid_file_path\" \"$@\" &\n        wait_for_ready; return_value=$?\n  ...\n  ```\n\n- 启动服务\n\n  ```bash\n  [root@localhost mariadb]# /etc/init.d/mariadb start\n  Reloading systemd:                                         [  确定  ]\n  Starting mariadb (via systemctl):                          [  确定  ]\n  \n  [root@localhost mariadb]# ps aux | grep mysql\n  root       2288  0.0  0.1 115380  1736 ?        S    00:19   0:00 /bin/sh /usr/local/mariadb/bin/mysqld_safe --defaults-file=/usr/local/mariadb/my.cnf --datadir=/data/mariadb --pid-file=/data/mariadb/localhost.localdomain.pid\n  mysql      2404  0.3  5.6 1583772 56676 ?       Sl   00:19   0:00 /usr/local/mariadb/bin/mysqld --defaults-file=/usr/local/mariadb/my.cnf --basedir=/usr/local/mariadb --datadir=/data/mariadb --plugin-dir=/usr/local/mariadb/lib/plugin --user=mysql --log-error=/data/mariadb/localhost.localdomain.err --pid-file=/data/mariadb/localhost.localdomain.pid --socket=/tmp/mysql.sock --port=3306\n  root       2442  0.0  0.0 112668   964 pts/0    S+   00:21   0:00 grep --color=auto mysql\n  \n  [root@localhost mariadb]# netstat -tlnp\n  Active Internet connections (only servers)\n  Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\n  tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1328/sshd\n  tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      2032/master\n  tcp6       0      0 :::3306                 :::*                    LISTEN      2404/mysqld\n  ```\n\n---\n\n# Apache安装\n\nApache是一个基金会的名字，实际上httpd才是需要安装的软件包，早期其名字叫做apache。\n\n## 下载httpd源码包及依赖包\n\n- 安装httpd还需要使用`apr`和`apr-util`通用函数库，它们可以让httpd不关心底层操作系统平台，可以很方便的移植，如从linux移植到windows。\n\n- 下载httpd和apr，apr-util源码包：\n\n  ```bash\n  // httpd2.4.33源码包\n  # wget http://mirrors.cnnic.cn/apache/httpd/httpd-2.4.33.tar.gz\n  // apr1.6.3源码包\n  # wget http://mirrors.cnnic.cn/apache/apr/apr-1.6.3.tar.gz\n  // apr-util1.6.1源码包\n  # wget http://mirrors.cnnic.cn/apache/apr/apr-util-1.6.1.tar.bz2\n  ```\n\n## 编译apr和apr-util\n\n- 由于yum安装的apr和apr-util版本与httpd2.4不匹配，所以需要手动编译这两个库；\n\n### 编译apr\n\n  ```bash\n# tar zxvf apr-1.6.3.tar.gz\n# cd apr-1.6.3\n# ./configure --prefix=/usr/local/apr\n# make && make install\n  ```\n\n- 检查是否安装正确\n\n  ```bash\n  [root@localhost apr-1.6.3]# echo $?\n  0\n  ```\n\n### 编译apr-util\n\n- 编译apr-util时需要指定apr的安装位置：\n\n  ```bash\n  # tar jxvf apr-util-1.6.1.tar.bz2\n  # cd apr-util-1.6.1\n  # ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr\n  # make && make install\n  ```\n\n- 如果执行make的过程中报错如下，则需要安装xml解析的`expat-devel `软件包：\n\n  ```bash\n  [root@localhost apr-util-1.6.1]# make && make install\n  make[1]: 进入目录“/usr/local/src/apr-util-1.6.1”\n  /bin/sh /usr/local/apr/build-1/libtool --silent --mode=compile gcc -g -O2 -pthread   -DHAVE_CONFIG_H  -DLINUX -D_REENTRANT -D_GNU_SOURCE   -I/usr/local/src/apr-util-1.6.1/include -I/usr/local/src/apr-util-1.6.1/include/private  -I/usr/local/apr/include/apr-1    -o xml/apr_xml.lo -c xml/apr_xml.c &&touch xml/apr_xml.lo\n  xml/apr_xml.c:35:19: 致命错误：expat.h：没有那个文件或目录\n   #include <expat.h>\n                     ^\n  编译中断。\n  make[1]: *** [xml/apr_xml.lo] 错误 1\n  make[1]: 离开目录“/usr/local/src/apr-util-1.6.1”\n  make: *** [all-recursive] 错误 1\n  ```\n\n  \n\n## 编译安装httpd\n\n- httpd的编译参数如下：\n\n  ```bash\n  ./configure --prefix=/usr/local/apache2.4 \\\n  --with-apr=/usr/local/apr \\\n  --with-apr-util=/usr/local/apr-util \\\n  --enable-so \\\n  --enable-mods-shared=most\n  ```\n\n  - 其中，`enable-so`参数是让apache支持动态扩展和加载模块，如php模块，`enable-mods-shared=most`参数则是指定apache支持绝大多数的模块扩展。\n\n- 编译时报错`pcre-config`，则需要安装`pcre-devel`软件包：\n\n  ```bash\n  checking for pcre-config... false\n  configure: error: pcre-config for libpcre not found. PCRE is required and available from http://pcre.org/\n  ```\n\n- 安装：\n\n  ```bash\n  # make && make install\n  ```\n\n  - 安装时如果报错如下，则是因为编译`apr-util`时没有安装`expat-devel`，并且安装之后没有重新进行编译，如果编译出错，使用`make clean`清除之前的编译结果：\n\n  ```bash\n  /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_GetErrorCode'\n  /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_SetEntityDeclHandler'\n  /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_ParserCreate'\n  /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_SetCharacterDataHandler'\n  /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_ParserFree'\n  /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_SetUserData'\n  /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_StopParser'\n  /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_Parse'\n  /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_ErrorString'\n  /usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_SetElementHandler'\n  collect2: error: ld returned 1 exit status\n  make[2]: *** [htpasswd] 错误 1\n  make[2]: 离开目录“/usr/local/src/httpd-2.4.33/support”\n  make[1]: *** [all-recursive] 错误 1\n  make[1]: 离开目录“/usr/local/src/httpd-2.4.33/support”\n  make: *** [all-recursive] 错误 1\n  ```\n\n- 安装完成后可以进入apache的安装目录，apache的执行文件为`apache/bin/httpd`:\n\n  ```bash\n  [root@localhost apache2.4]# ls\n  bin    cgi-bin  error   icons    logs  manual\n  build  conf     htdocs  include  man   modules\n  \n  [root@localhost apache2.4]# ls -l bin/httpd\n  -rwxr-xr-x. 1 root root 2348432 5月  25 01:33 bin/httpd\n  ```\n\n- apache的安装目录下，conf目录为配置文件所在目录，htdocs则是存放默认访问页的目录，logs则是日志存放的目录，日志由错误日志、访问日志等，modules则是扩展模块的存放目录，每个模块都代表apache的一个功能，查看apache加载了哪些模块，可以使用如下命令：\n\n  ```bash\n  # /usr/local/apache2.4/bin/apachectl -M\n  or\n  # /usr/local/apache2.4/bin/httpd -M\n  ```\n\n  ```bash\n  [root@localhost apache2.4]# ./bin/httpd -M\n  AH00558: httpd: Could not reliably determine the server's fully qualified domain name, using localhost.localdomain. Set the 'ServerName' directive globally to suppress this message\n  Loaded Modules:\n   core_module (static)\n   so_module (static)\n   http_module (static)\n   mpm_event_module (static)\n   authn_file_module (shared)\n   authn_core_module (shared)\n   authz_host_module (shared)\n   authz_groupfile_module (shared)\n   authz_user_module (shared)\n   authz_core_module (shared)\n   access_compat_module (shared)\n   auth_basic_module (shared)\n   reqtimeout_module (shared)\n   filter_module (shared)\n   mime_module (shared)\n   log_config_module (shared)\n   env_module (shared)\n   headers_module (shared)\n   setenvif_module (shared)\n   version_module (shared)\n   unixd_module (shared)\n   status_module (shared)\n   autoindex_module (shared)\n   dir_module (shared)\n   alias_module (shared)\n  ```\n\n  - 这里模块后面的`static`和`shared`，static表示模块被编译进了htppd脚本里，是一个整体；shared则表示扩展模块，模块在modules目录下，在需要时被调用。\n\n- 启动apache，执行`bin/apachectl start`：\n\n  ```bash\n  [root@localhost apache2.4]# /usr/local/apache2.4/bin/apachectl start\n  AH00558: httpd: Could not reliably determine the server's fully qualified domain name, using localhost.localdomain. Set the 'ServerName' directive globally to suppress this message\n  \n  [root@localhost apache2.4]# ps aux | grep httpd\n  root      76399  0.0  0.2  70952  2248 ?        Ss   01:47   0:00 /usr/local/apache2.4/bin/httpd -k start\n  daemon    76400  0.0  0.4 359916  4264 ?        Sl   01:47   0:00 /usr/local/apache2.4/bin/httpd -k start\n  daemon    76401  0.0  0.4 359916  4264 ?        Sl   01:47   0:00 /usr/local/apache2.4/bin/httpd -k start\n  daemon    76402  0.0  0.4 359916  4264 ?        Sl   01:47   0:00 /usr/local/apache2.4/bin/httpd -k start\n  root      76485  0.0  0.0 112724   976 pts/0    S+   01:47   0:00 grep --color=auto httpd\n  \n  [root@localhost apache2.4]# netstat -tlnp\n  Active Internet connections (only servers)\n  Proto Recv-Q Send-Q Local Address           Foreign Address         State     PID/Program name\n  tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN     1328/sshd\n  tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN     2032/master\n  tcp6       0      0 :::80                   :::*                    LISTEN     76399/httpd\n  ```\n\n  - 默认监听80端口。\n\n---\n\n","slug":"MariaDB和Apache的安装","published":1,"updated":"2018-06-05T06:50:47.890Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji1gazg4004xu1jxypywoi5j","content":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p>MariaDB由于与MySQL基本相同，所以安装方法也基本一致，这里介绍MariaDB的免编译二进制安装包的安装方法，另外也将介绍Apache的安装方法。</p><a id=\"more\"></a><hr><h1 id=\"MariaDB安装\"><a href=\"#MariaDB安装\" class=\"headerlink\" title=\"MariaDB安装\"></a>MariaDB安装</h1><ul><li><p>下载MariaDB：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cd /usr/local/src</span></span><br><span class=\"line\"><span class=\"comment\"># wget https://downloads.mariadb.com/MariaDB/mariadb-10.2.6/bintar-linux-glibc_214-x86_64/mariadb-10.2.6-linux-glibc_214-x86_64.tar.gz</span></span><br></pre></td></tr></table></figure></li><li><p>解压MariaDB压缩包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># tar zxvf mariadb-10.2.6-linux-glibc_214-x86_64.tar.gz</span></span><br></pre></td></tr></table></figure></li><li><p>将解压出来的目录移动到<code>/usr/local/</code>下并更名为<code>mariadb</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mv mariadb-10.2.6-linux-glibc_214-x86_64 /usr/local/mariadb</span></span><br></pre></td></tr></table></figure></li><li><p>创建<code>mysql</code>用户并创建<code>/data/mariadb</code>目录，或使用mariadb目录下的data目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># useradd mysql -s /bin/nologin</span></span><br><span class=\"line\"><span class=\"comment\"># mkdir -p /data/mariadb</span></span><br></pre></td></tr></table></figure></li><li><p>执行初始化脚本：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ./scripts/mysql_install_db --user=mysql --datadir=/data/mariadb/</span></span><br></pre></td></tr></table></figure><ul><li>如果在执行初始化脚本是提示如下错误，那么需要将<code>/etc/my,cnf</code>删除或者重命名，这是由于之前安装了MySQL并且修改了<code>my.cnf</code>内的basedir等配置造成的，或者在初始化脚本的参数上增加<code>--basedir=/usr/local/mariadb</code>：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FATAL ERROR: Could not find mysqld</span><br><span class=\"line\"></span><br><span class=\"line\">The following directories were searched:</span><br><span class=\"line\"></span><br><span class=\"line\">    /usr/<span class=\"built_in\">local</span>/mysql/libexec</span><br><span class=\"line\">    /usr/<span class=\"built_in\">local</span>/mysql/sbin</span><br><span class=\"line\">    /usr/<span class=\"built_in\">local</span>/mysql/bin</span><br><span class=\"line\"></span><br><span class=\"line\">If you compiled from <span class=\"built_in\">source</span>, you need to either run <span class=\"string\">'make install'</span> to</span><br><span class=\"line\">copy the software into the correct location ready <span class=\"keyword\">for</span> operation.</span><br><span class=\"line\">If you don<span class=\"string\">'t want to do a full install, you can use the --srcddir</span></span><br><span class=\"line\"><span class=\"string\">option to only install the mysql database and privilege tables</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">If you are using a binary release, you must either be at the top</span></span><br><span class=\"line\"><span class=\"string\">level of the extracted archive, or pass the --basedir option</span></span><br><span class=\"line\"><span class=\"string\">pointing to that location.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">The latest information about mysql_install_db is available at</span></span><br></pre></td></tr></table></figure></li><li><p>复制配置文件和启动脚本：</p><p>MariaDB提供了不同的配置文件，如my-small.cnf，my-large.cnf，这些配置文件的不同之处在于其定义的MariaDB运行时的缓存，缓冲等大小不一样，可以根据自己机器的性能和配置，选择合适的配置文件复制：</p><p>另外为了与MySQL的配置做区分，这里不在复制到<code>/etc/</code>下，而是复制到MariaDB的basedir下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cp support-files/my-small.cnf /usr/local/mariadb/my.cnf</span></span><br><span class=\"line\"><span class=\"comment\"># cp support-files/mysql.server /etc/init.d/mariadb</span></span><br></pre></td></tr></table></figure></li><li><p>编辑启动脚本和配置文件</p><ul><li>为了防止MariaDB启动时由于未配置datadir，导致启动时MariaDB读取<code>/etc/my.cnf</code>中配置的datadir，所以需要在MariaDB自定义的配置文件中增加datadir：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">datadir=/data/mariadb</span><br></pre></td></tr></table></figure><ul><li>MariaDB的启动脚本需要对<code>basedir</code>、<code>datadir</code>进行修改，并且增加<code>conf</code>配置，然后再修改启动命令，指定配置文件启动：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">basedir=/usr/<span class=\"built_in\">local</span>/mariadb</span><br><span class=\"line\">datadir=/data/mariadb</span><br><span class=\"line\">conf=<span class=\"variable\">$basedir</span>/my.cnf</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$mode</span>\"</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"string\">'start'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># Start daemon</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Safeguard (relative paths, core dumps..)</span></span><br><span class=\"line\">    <span class=\"built_in\">cd</span> <span class=\"variable\">$basedir</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$echo_n</span> <span class=\"string\">\"Starting MySQL\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">test</span> -x <span class=\"variable\">$bindir</span>/mysqld_safe</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"comment\"># Give extra arguments to mysqld with the my.cnf file. This script</span></span><br><span class=\"line\">      <span class=\"comment\"># may be overwritten at next upgrade.</span></span><br><span class=\"line\">      <span class=\"comment\"># 增加--defaults-file选项</span></span><br><span class=\"line\">      <span class=\"variable\">$bindir</span>/mysqld_safe --defaults-file=<span class=\"string\">\"<span class=\"variable\">$conf</span>\"</span> --datadir=<span class=\"string\">\"<span class=\"variable\">$datadir</span>\"</span> --pid-file=<span class=\"string\">\"<span class=\"variable\">$mysqld_pid_file_path</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span> &amp;</span><br><span class=\"line\">      wait_for_ready; return_value=$?</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mariadb]<span class=\"comment\"># /etc/init.d/mariadb start</span></span><br><span class=\"line\">Reloading systemd:                                         [  确定  ]</span><br><span class=\"line\">Starting mariadb (via systemctl):                          [  确定  ]</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost mariadb]<span class=\"comment\"># ps aux | grep mysql</span></span><br><span class=\"line\">root       2288  0.0  0.1 115380  1736 ?        S    00:19   0:00 /bin/sh /usr/<span class=\"built_in\">local</span>/mariadb/bin/mysqld_safe --defaults-file=/usr/<span class=\"built_in\">local</span>/mariadb/my.cnf --datadir=/data/mariadb --pid-file=/data/mariadb/localhost.localdomain.pid</span><br><span class=\"line\">mysql      2404  0.3  5.6 1583772 56676 ?       Sl   00:19   0:00 /usr/<span class=\"built_in\">local</span>/mariadb/bin/mysqld --defaults-file=/usr/<span class=\"built_in\">local</span>/mariadb/my.cnf --basedir=/usr/<span class=\"built_in\">local</span>/mariadb --datadir=/data/mariadb --plugin-dir=/usr/<span class=\"built_in\">local</span>/mariadb/lib/plugin --user=mysql --<span class=\"built_in\">log</span>-error=/data/mariadb/localhost.localdomain.err --pid-file=/data/mariadb/localhost.localdomain.pid --socket=/tmp/mysql.sock --port=3306</span><br><span class=\"line\">root       2442  0.0  0.0 112668   964 pts/0    S+   00:21   0:00 grep --color=auto mysql</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost mariadb]<span class=\"comment\"># netstat -tlnp</span></span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class=\"line\">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1328/sshd</span><br><span class=\"line\">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      2032/master</span><br><span class=\"line\">tcp6       0      0 :::3306                 :::*                    LISTEN      2404/mysqld</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id=\"Apache安装\"><a href=\"#Apache安装\" class=\"headerlink\" title=\"Apache安装\"></a>Apache安装</h1><p>Apache是一个基金会的名字，实际上httpd才是需要安装的软件包，早期其名字叫做apache。</p><h2 id=\"下载httpd源码包及依赖包\"><a href=\"#下载httpd源码包及依赖包\" class=\"headerlink\" title=\"下载httpd源码包及依赖包\"></a>下载httpd源码包及依赖包</h2><ul><li><p>安装httpd还需要使用<code>apr</code>和<code>apr-util</code>通用函数库，它们可以让httpd不关心底层操作系统平台，可以很方便的移植，如从linux移植到windows。</p></li><li><p>下载httpd和apr，apr-util源码包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// httpd2.4.33源码包</span><br><span class=\"line\"><span class=\"comment\"># wget http://mirrors.cnnic.cn/apache/httpd/httpd-2.4.33.tar.gz</span></span><br><span class=\"line\">// apr1.6.3源码包</span><br><span class=\"line\"><span class=\"comment\"># wget http://mirrors.cnnic.cn/apache/apr/apr-1.6.3.tar.gz</span></span><br><span class=\"line\">// apr-util1.6.1源码包</span><br><span class=\"line\"><span class=\"comment\"># wget http://mirrors.cnnic.cn/apache/apr/apr-util-1.6.1.tar.bz2</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"编译apr和apr-util\"><a href=\"#编译apr和apr-util\" class=\"headerlink\" title=\"编译apr和apr-util\"></a>编译apr和apr-util</h2><ul><li>由于yum安装的apr和apr-util版本与httpd2.4不匹配，所以需要手动编译这两个库；</li></ul><h3 id=\"编译apr\"><a href=\"#编译apr\" class=\"headerlink\" title=\"编译apr\"></a>编译apr</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># tar zxvf apr-1.6.3.tar.gz</span></span><br><span class=\"line\"><span class=\"comment\"># cd apr-1.6.3</span></span><br><span class=\"line\"><span class=\"comment\"># ./configure --prefix=/usr/local/apr</span></span><br><span class=\"line\"><span class=\"comment\"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><ul><li><p>检查是否安装正确</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost apr-1.6.3]<span class=\"comment\"># echo $?</span></span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"编译apr-util\"><a href=\"#编译apr-util\" class=\"headerlink\" title=\"编译apr-util\"></a>编译apr-util</h3><ul><li><p>编译apr-util时需要指定apr的安装位置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># tar jxvf apr-util-1.6.1.tar.bz2</span></span><br><span class=\"line\"><span class=\"comment\"># cd apr-util-1.6.1</span></span><br><span class=\"line\"><span class=\"comment\"># ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr</span></span><br><span class=\"line\"><span class=\"comment\"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure></li><li><p>如果执行make的过程中报错如下，则需要安装xml解析的<code>expat-devel</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost apr-util-1.6.1]<span class=\"comment\"># make &amp;&amp; make install</span></span><br><span class=\"line\">make[1]: 进入目录“/usr/<span class=\"built_in\">local</span>/src/apr-util-1.6.1”</span><br><span class=\"line\">/bin/sh /usr/<span class=\"built_in\">local</span>/apr/build-1/libtool --silent --mode=compile gcc -g -O2 -pthread   -DHAVE_CONFIG_H  -DLINUX -D_REENTRANT -D_GNU_SOURCE   -I/usr/<span class=\"built_in\">local</span>/src/apr-util-1.6.1/include -I/usr/<span class=\"built_in\">local</span>/src/apr-util-1.6.1/include/private  -I/usr/<span class=\"built_in\">local</span>/apr/include/apr-1    -o xml/apr_xml.lo -c xml/apr_xml.c &amp;&amp;touch xml/apr_xml.lo</span><br><span class=\"line\">xml/apr_xml.c:35:19: 致命错误：expat.h：没有那个文件或目录</span><br><span class=\"line\"> <span class=\"comment\">#include &lt;expat.h&gt;</span></span><br><span class=\"line\">                   ^</span><br><span class=\"line\">编译中断。</span><br><span class=\"line\">make[1]: *** [xml/apr_xml.lo] 错误 1</span><br><span class=\"line\">make[1]: 离开目录“/usr/<span class=\"built_in\">local</span>/src/apr-util-1.6.1”</span><br><span class=\"line\">make: *** [all-recursive] 错误 1</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"编译安装httpd\"><a href=\"#编译安装httpd\" class=\"headerlink\" title=\"编译安装httpd\"></a>编译安装httpd</h2><ul><li><p>httpd的编译参数如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/apache2.4 \\</span><br><span class=\"line\">--with-apr=/usr/<span class=\"built_in\">local</span>/apr \\</span><br><span class=\"line\">--with-apr-util=/usr/<span class=\"built_in\">local</span>/apr-util \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-so \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-mods-shared=most</span><br></pre></td></tr></table></figure><ul><li>其中，<code>enable-so</code>参数是让apache支持动态扩展和加载模块，如php模块，<code>enable-mods-shared=most</code>参数则是指定apache支持绝大多数的模块扩展。</li></ul></li><li><p>编译时报错<code>pcre-config</code>，则需要安装<code>pcre-devel</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checking <span class=\"keyword\">for</span> pcre-config... <span class=\"literal\">false</span></span><br><span class=\"line\">configure: error: pcre-config <span class=\"keyword\">for</span> libpcre not found. PCRE is required and available from http://pcre.org/</span><br></pre></td></tr></table></figure></li><li><p>安装：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><ul><li>安装时如果报错如下，则是因为编译<code>apr-util</code>时没有安装<code>expat-devel</code>，并且安装之后没有重新进行编译，如果编译出错，使用<code>make clean</code>清除之前的编译结果：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/<span class=\"built_in\">local</span>/apr-util/lib/libaprutil-1.so: undefined reference to `XML_GetErrorCode<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">/usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_SetEntityDeclHandler'</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/apr-util/lib/libaprutil-1.so: undefined reference to `XML_ParserCreate<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">/usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_SetCharacterDataHandler'</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/apr-util/lib/libaprutil-1.so: undefined reference to `XML_ParserFree<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">/usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_SetUserData'</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/apr-util/lib/libaprutil-1.so: undefined reference to `XML_StopParser<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">/usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_Parse'</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/apr-util/lib/libaprutil-1.so: undefined reference to `XML_ErrorString<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">/usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_SetElementHandler'</span></span><br><span class=\"line\">collect2: error: ld returned 1 <span class=\"built_in\">exit</span> status</span><br><span class=\"line\">make[2]: *** [htpasswd] 错误 1</span><br><span class=\"line\">make[2]: 离开目录“/usr/<span class=\"built_in\">local</span>/src/httpd-2.4.33/support”</span><br><span class=\"line\">make[1]: *** [all-recursive] 错误 1</span><br><span class=\"line\">make[1]: 离开目录“/usr/<span class=\"built_in\">local</span>/src/httpd-2.4.33/support”</span><br><span class=\"line\">make: *** [all-recursive] 错误 1</span><br></pre></td></tr></table></figure></li><li><p>安装完成后可以进入apache的安装目录，apache的执行文件为<code>apache/bin/httpd</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost apache2.4]<span class=\"comment\"># ls</span></span><br><span class=\"line\">bin    cgi-bin  error   icons    logs  manual</span><br><span class=\"line\">build  conf     htdocs  include  man   modules</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost apache2.4]<span class=\"comment\"># ls -l bin/httpd</span></span><br><span class=\"line\">-rwxr-xr-x. 1 root root 2348432 5月  25 01:33 bin/httpd</span><br></pre></td></tr></table></figure></li><li><p>apache的安装目录下，conf目录为配置文件所在目录，htdocs则是存放默认访问页的目录，logs则是日志存放的目录，日志由错误日志、访问日志等，modules则是扩展模块的存放目录，每个模块都代表apache的一个功能，查看apache加载了哪些模块，可以使用如下命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /usr/local/apache2.4/bin/apachectl -M</span></span><br><span class=\"line\">or</span><br><span class=\"line\"><span class=\"comment\"># /usr/local/apache2.4/bin/httpd -M</span></span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost apache2.4]<span class=\"comment\"># ./bin/httpd -M</span></span><br><span class=\"line\">AH00558: httpd: Could not reliably determine the server<span class=\"string\">'s fully qualified domain name, using localhost.localdomain. Set the '</span>ServerName<span class=\"string\">' directive globally to suppress this message</span></span><br><span class=\"line\"><span class=\"string\">Loaded Modules:</span></span><br><span class=\"line\"><span class=\"string\"> core_module (static)</span></span><br><span class=\"line\"><span class=\"string\"> so_module (static)</span></span><br><span class=\"line\"><span class=\"string\"> http_module (static)</span></span><br><span class=\"line\"><span class=\"string\"> mpm_event_module (static)</span></span><br><span class=\"line\"><span class=\"string\"> authn_file_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> authn_core_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> authz_host_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> authz_groupfile_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> authz_user_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> authz_core_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> access_compat_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> auth_basic_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> reqtimeout_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> filter_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> mime_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> log_config_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> env_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> headers_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> setenvif_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> version_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> unixd_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> status_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> autoindex_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> dir_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> alias_module (shared)</span></span><br></pre></td></tr></table></figure><ul><li>这里模块后面的<code>static</code>和<code>shared</code>，static表示模块被编译进了htppd脚本里，是一个整体；shared则表示扩展模块，模块在modules目录下，在需要时被调用。</li></ul></li><li><p>启动apache，执行<code>bin/apachectl start</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost apache2.4]<span class=\"comment\"># /usr/local/apache2.4/bin/apachectl start</span></span><br><span class=\"line\">AH00558: httpd: Could not reliably determine the server<span class=\"string\">'s fully qualified domain name, using localhost.localdomain. Set the '</span>ServerName<span class=\"string\">' directive globally to suppress this message</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[root@localhost apache2.4]# ps aux | grep httpd</span></span><br><span class=\"line\"><span class=\"string\">root      76399  0.0  0.2  70952  2248 ?        Ss   01:47   0:00 /usr/local/apache2.4/bin/httpd -k start</span></span><br><span class=\"line\"><span class=\"string\">daemon    76400  0.0  0.4 359916  4264 ?        Sl   01:47   0:00 /usr/local/apache2.4/bin/httpd -k start</span></span><br><span class=\"line\"><span class=\"string\">daemon    76401  0.0  0.4 359916  4264 ?        Sl   01:47   0:00 /usr/local/apache2.4/bin/httpd -k start</span></span><br><span class=\"line\"><span class=\"string\">daemon    76402  0.0  0.4 359916  4264 ?        Sl   01:47   0:00 /usr/local/apache2.4/bin/httpd -k start</span></span><br><span class=\"line\"><span class=\"string\">root      76485  0.0  0.0 112724   976 pts/0    S+   01:47   0:00 grep --color=auto httpd</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[root@localhost apache2.4]# netstat -tlnp</span></span><br><span class=\"line\"><span class=\"string\">Active Internet connections (only servers)</span></span><br><span class=\"line\"><span class=\"string\">Proto Recv-Q Send-Q Local Address           Foreign Address         State     PID/Program name</span></span><br><span class=\"line\"><span class=\"string\">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN     1328/sshd</span></span><br><span class=\"line\"><span class=\"string\">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN     2032/master</span></span><br><span class=\"line\"><span class=\"string\">tcp6       0      0 :::80                   :::*                    LISTEN     76399/httpd</span></span><br></pre></td></tr></table></figure><ul><li>默认监听80端口。</li></ul></li></ul><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Tue Jun 05 2018 16:57:40 GMT+0800 (CST) --><p>MariaDB由于与MySQL基本相同，所以安装方法也基本一致，这里介绍MariaDB的免编译二进制安装包的安装方法，另外也将介绍Apache的安装方法。</p>","more":"<hr><h1 id=\"MariaDB安装\"><a href=\"#MariaDB安装\" class=\"headerlink\" title=\"MariaDB安装\"></a>MariaDB安装</h1><ul><li><p>下载MariaDB：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cd /usr/local/src</span></span><br><span class=\"line\"><span class=\"comment\"># wget https://downloads.mariadb.com/MariaDB/mariadb-10.2.6/bintar-linux-glibc_214-x86_64/mariadb-10.2.6-linux-glibc_214-x86_64.tar.gz</span></span><br></pre></td></tr></table></figure></li><li><p>解压MariaDB压缩包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># tar zxvf mariadb-10.2.6-linux-glibc_214-x86_64.tar.gz</span></span><br></pre></td></tr></table></figure></li><li><p>将解压出来的目录移动到<code>/usr/local/</code>下并更名为<code>mariadb</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mv mariadb-10.2.6-linux-glibc_214-x86_64 /usr/local/mariadb</span></span><br></pre></td></tr></table></figure></li><li><p>创建<code>mysql</code>用户并创建<code>/data/mariadb</code>目录，或使用mariadb目录下的data目录：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># useradd mysql -s /bin/nologin</span></span><br><span class=\"line\"><span class=\"comment\"># mkdir -p /data/mariadb</span></span><br></pre></td></tr></table></figure></li><li><p>执行初始化脚本：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ./scripts/mysql_install_db --user=mysql --datadir=/data/mariadb/</span></span><br></pre></td></tr></table></figure><ul><li>如果在执行初始化脚本是提示如下错误，那么需要将<code>/etc/my,cnf</code>删除或者重命名，这是由于之前安装了MySQL并且修改了<code>my.cnf</code>内的basedir等配置造成的，或者在初始化脚本的参数上增加<code>--basedir=/usr/local/mariadb</code>：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FATAL ERROR: Could not find mysqld</span><br><span class=\"line\"></span><br><span class=\"line\">The following directories were searched:</span><br><span class=\"line\"></span><br><span class=\"line\">    /usr/<span class=\"built_in\">local</span>/mysql/libexec</span><br><span class=\"line\">    /usr/<span class=\"built_in\">local</span>/mysql/sbin</span><br><span class=\"line\">    /usr/<span class=\"built_in\">local</span>/mysql/bin</span><br><span class=\"line\"></span><br><span class=\"line\">If you compiled from <span class=\"built_in\">source</span>, you need to either run <span class=\"string\">'make install'</span> to</span><br><span class=\"line\">copy the software into the correct location ready <span class=\"keyword\">for</span> operation.</span><br><span class=\"line\">If you don<span class=\"string\">'t want to do a full install, you can use the --srcddir</span></span><br><span class=\"line\"><span class=\"string\">option to only install the mysql database and privilege tables</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">If you are using a binary release, you must either be at the top</span></span><br><span class=\"line\"><span class=\"string\">level of the extracted archive, or pass the --basedir option</span></span><br><span class=\"line\"><span class=\"string\">pointing to that location.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">The latest information about mysql_install_db is available at</span></span><br></pre></td></tr></table></figure></li><li><p>复制配置文件和启动脚本：</p><p>MariaDB提供了不同的配置文件，如my-small.cnf，my-large.cnf，这些配置文件的不同之处在于其定义的MariaDB运行时的缓存，缓冲等大小不一样，可以根据自己机器的性能和配置，选择合适的配置文件复制：</p><p>另外为了与MySQL的配置做区分，这里不在复制到<code>/etc/</code>下，而是复制到MariaDB的basedir下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cp support-files/my-small.cnf /usr/local/mariadb/my.cnf</span></span><br><span class=\"line\"><span class=\"comment\"># cp support-files/mysql.server /etc/init.d/mariadb</span></span><br></pre></td></tr></table></figure></li><li><p>编辑启动脚本和配置文件</p><ul><li>为了防止MariaDB启动时由于未配置datadir，导致启动时MariaDB读取<code>/etc/my.cnf</code>中配置的datadir，所以需要在MariaDB自定义的配置文件中增加datadir：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">datadir=/data/mariadb</span><br></pre></td></tr></table></figure><ul><li>MariaDB的启动脚本需要对<code>basedir</code>、<code>datadir</code>进行修改，并且增加<code>conf</code>配置，然后再修改启动命令，指定配置文件启动：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">basedir=/usr/<span class=\"built_in\">local</span>/mariadb</span><br><span class=\"line\">datadir=/data/mariadb</span><br><span class=\"line\">conf=<span class=\"variable\">$basedir</span>/my.cnf</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$mode</span>\"</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"string\">'start'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># Start daemon</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Safeguard (relative paths, core dumps..)</span></span><br><span class=\"line\">    <span class=\"built_in\">cd</span> <span class=\"variable\">$basedir</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$echo_n</span> <span class=\"string\">\"Starting MySQL\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">test</span> -x <span class=\"variable\">$bindir</span>/mysqld_safe</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"comment\"># Give extra arguments to mysqld with the my.cnf file. This script</span></span><br><span class=\"line\">      <span class=\"comment\"># may be overwritten at next upgrade.</span></span><br><span class=\"line\">      <span class=\"comment\"># 增加--defaults-file选项</span></span><br><span class=\"line\">      <span class=\"variable\">$bindir</span>/mysqld_safe --defaults-file=<span class=\"string\">\"<span class=\"variable\">$conf</span>\"</span> --datadir=<span class=\"string\">\"<span class=\"variable\">$datadir</span>\"</span> --pid-file=<span class=\"string\">\"<span class=\"variable\">$mysqld_pid_file_path</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span> &amp;</span><br><span class=\"line\">      wait_for_ready; return_value=$?</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost mariadb]<span class=\"comment\"># /etc/init.d/mariadb start</span></span><br><span class=\"line\">Reloading systemd:                                         [  确定  ]</span><br><span class=\"line\">Starting mariadb (via systemctl):                          [  确定  ]</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost mariadb]<span class=\"comment\"># ps aux | grep mysql</span></span><br><span class=\"line\">root       2288  0.0  0.1 115380  1736 ?        S    00:19   0:00 /bin/sh /usr/<span class=\"built_in\">local</span>/mariadb/bin/mysqld_safe --defaults-file=/usr/<span class=\"built_in\">local</span>/mariadb/my.cnf --datadir=/data/mariadb --pid-file=/data/mariadb/localhost.localdomain.pid</span><br><span class=\"line\">mysql      2404  0.3  5.6 1583772 56676 ?       Sl   00:19   0:00 /usr/<span class=\"built_in\">local</span>/mariadb/bin/mysqld --defaults-file=/usr/<span class=\"built_in\">local</span>/mariadb/my.cnf --basedir=/usr/<span class=\"built_in\">local</span>/mariadb --datadir=/data/mariadb --plugin-dir=/usr/<span class=\"built_in\">local</span>/mariadb/lib/plugin --user=mysql --<span class=\"built_in\">log</span>-error=/data/mariadb/localhost.localdomain.err --pid-file=/data/mariadb/localhost.localdomain.pid --socket=/tmp/mysql.sock --port=3306</span><br><span class=\"line\">root       2442  0.0  0.0 112668   964 pts/0    S+   00:21   0:00 grep --color=auto mysql</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost mariadb]<span class=\"comment\"># netstat -tlnp</span></span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class=\"line\">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1328/sshd</span><br><span class=\"line\">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      2032/master</span><br><span class=\"line\">tcp6       0      0 :::3306                 :::*                    LISTEN      2404/mysqld</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id=\"Apache安装\"><a href=\"#Apache安装\" class=\"headerlink\" title=\"Apache安装\"></a>Apache安装</h1><p>Apache是一个基金会的名字，实际上httpd才是需要安装的软件包，早期其名字叫做apache。</p><h2 id=\"下载httpd源码包及依赖包\"><a href=\"#下载httpd源码包及依赖包\" class=\"headerlink\" title=\"下载httpd源码包及依赖包\"></a>下载httpd源码包及依赖包</h2><ul><li><p>安装httpd还需要使用<code>apr</code>和<code>apr-util</code>通用函数库，它们可以让httpd不关心底层操作系统平台，可以很方便的移植，如从linux移植到windows。</p></li><li><p>下载httpd和apr，apr-util源码包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// httpd2.4.33源码包</span><br><span class=\"line\"><span class=\"comment\"># wget http://mirrors.cnnic.cn/apache/httpd/httpd-2.4.33.tar.gz</span></span><br><span class=\"line\">// apr1.6.3源码包</span><br><span class=\"line\"><span class=\"comment\"># wget http://mirrors.cnnic.cn/apache/apr/apr-1.6.3.tar.gz</span></span><br><span class=\"line\">// apr-util1.6.1源码包</span><br><span class=\"line\"><span class=\"comment\"># wget http://mirrors.cnnic.cn/apache/apr/apr-util-1.6.1.tar.bz2</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"编译apr和apr-util\"><a href=\"#编译apr和apr-util\" class=\"headerlink\" title=\"编译apr和apr-util\"></a>编译apr和apr-util</h2><ul><li>由于yum安装的apr和apr-util版本与httpd2.4不匹配，所以需要手动编译这两个库；</li></ul><h3 id=\"编译apr\"><a href=\"#编译apr\" class=\"headerlink\" title=\"编译apr\"></a>编译apr</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># tar zxvf apr-1.6.3.tar.gz</span></span><br><span class=\"line\"><span class=\"comment\"># cd apr-1.6.3</span></span><br><span class=\"line\"><span class=\"comment\"># ./configure --prefix=/usr/local/apr</span></span><br><span class=\"line\"><span class=\"comment\"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><ul><li><p>检查是否安装正确</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost apr-1.6.3]<span class=\"comment\"># echo $?</span></span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"编译apr-util\"><a href=\"#编译apr-util\" class=\"headerlink\" title=\"编译apr-util\"></a>编译apr-util</h3><ul><li><p>编译apr-util时需要指定apr的安装位置：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># tar jxvf apr-util-1.6.1.tar.bz2</span></span><br><span class=\"line\"><span class=\"comment\"># cd apr-util-1.6.1</span></span><br><span class=\"line\"><span class=\"comment\"># ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr</span></span><br><span class=\"line\"><span class=\"comment\"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure></li><li><p>如果执行make的过程中报错如下，则需要安装xml解析的<code>expat-devel</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost apr-util-1.6.1]<span class=\"comment\"># make &amp;&amp; make install</span></span><br><span class=\"line\">make[1]: 进入目录“/usr/<span class=\"built_in\">local</span>/src/apr-util-1.6.1”</span><br><span class=\"line\">/bin/sh /usr/<span class=\"built_in\">local</span>/apr/build-1/libtool --silent --mode=compile gcc -g -O2 -pthread   -DHAVE_CONFIG_H  -DLINUX -D_REENTRANT -D_GNU_SOURCE   -I/usr/<span class=\"built_in\">local</span>/src/apr-util-1.6.1/include -I/usr/<span class=\"built_in\">local</span>/src/apr-util-1.6.1/include/private  -I/usr/<span class=\"built_in\">local</span>/apr/include/apr-1    -o xml/apr_xml.lo -c xml/apr_xml.c &amp;&amp;touch xml/apr_xml.lo</span><br><span class=\"line\">xml/apr_xml.c:35:19: 致命错误：expat.h：没有那个文件或目录</span><br><span class=\"line\"> <span class=\"comment\">#include &lt;expat.h&gt;</span></span><br><span class=\"line\">                   ^</span><br><span class=\"line\">编译中断。</span><br><span class=\"line\">make[1]: *** [xml/apr_xml.lo] 错误 1</span><br><span class=\"line\">make[1]: 离开目录“/usr/<span class=\"built_in\">local</span>/src/apr-util-1.6.1”</span><br><span class=\"line\">make: *** [all-recursive] 错误 1</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"编译安装httpd\"><a href=\"#编译安装httpd\" class=\"headerlink\" title=\"编译安装httpd\"></a>编译安装httpd</h2><ul><li><p>httpd的编译参数如下：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/apache2.4 \\</span><br><span class=\"line\">--with-apr=/usr/<span class=\"built_in\">local</span>/apr \\</span><br><span class=\"line\">--with-apr-util=/usr/<span class=\"built_in\">local</span>/apr-util \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-so \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-mods-shared=most</span><br></pre></td></tr></table></figure><ul><li>其中，<code>enable-so</code>参数是让apache支持动态扩展和加载模块，如php模块，<code>enable-mods-shared=most</code>参数则是指定apache支持绝大多数的模块扩展。</li></ul></li><li><p>编译时报错<code>pcre-config</code>，则需要安装<code>pcre-devel</code>软件包：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checking <span class=\"keyword\">for</span> pcre-config... <span class=\"literal\">false</span></span><br><span class=\"line\">configure: error: pcre-config <span class=\"keyword\">for</span> libpcre not found. PCRE is required and available from http://pcre.org/</span><br></pre></td></tr></table></figure></li><li><p>安装：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><ul><li>安装时如果报错如下，则是因为编译<code>apr-util</code>时没有安装<code>expat-devel</code>，并且安装之后没有重新进行编译，如果编译出错，使用<code>make clean</code>清除之前的编译结果：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/<span class=\"built_in\">local</span>/apr-util/lib/libaprutil-1.so: undefined reference to `XML_GetErrorCode<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">/usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_SetEntityDeclHandler'</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/apr-util/lib/libaprutil-1.so: undefined reference to `XML_ParserCreate<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">/usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_SetCharacterDataHandler'</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/apr-util/lib/libaprutil-1.so: undefined reference to `XML_ParserFree<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">/usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_SetUserData'</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/apr-util/lib/libaprutil-1.so: undefined reference to `XML_StopParser<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">/usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_Parse'</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/apr-util/lib/libaprutil-1.so: undefined reference to `XML_ErrorString<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">/usr/local/apr-util/lib/libaprutil-1.so: undefined reference to `XML_SetElementHandler'</span></span><br><span class=\"line\">collect2: error: ld returned 1 <span class=\"built_in\">exit</span> status</span><br><span class=\"line\">make[2]: *** [htpasswd] 错误 1</span><br><span class=\"line\">make[2]: 离开目录“/usr/<span class=\"built_in\">local</span>/src/httpd-2.4.33/support”</span><br><span class=\"line\">make[1]: *** [all-recursive] 错误 1</span><br><span class=\"line\">make[1]: 离开目录“/usr/<span class=\"built_in\">local</span>/src/httpd-2.4.33/support”</span><br><span class=\"line\">make: *** [all-recursive] 错误 1</span><br></pre></td></tr></table></figure></li><li><p>安装完成后可以进入apache的安装目录，apache的执行文件为<code>apache/bin/httpd</code>:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost apache2.4]<span class=\"comment\"># ls</span></span><br><span class=\"line\">bin    cgi-bin  error   icons    logs  manual</span><br><span class=\"line\">build  conf     htdocs  include  man   modules</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost apache2.4]<span class=\"comment\"># ls -l bin/httpd</span></span><br><span class=\"line\">-rwxr-xr-x. 1 root root 2348432 5月  25 01:33 bin/httpd</span><br></pre></td></tr></table></figure></li><li><p>apache的安装目录下，conf目录为配置文件所在目录，htdocs则是存放默认访问页的目录，logs则是日志存放的目录，日志由错误日志、访问日志等，modules则是扩展模块的存放目录，每个模块都代表apache的一个功能，查看apache加载了哪些模块，可以使用如下命令：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /usr/local/apache2.4/bin/apachectl -M</span></span><br><span class=\"line\">or</span><br><span class=\"line\"><span class=\"comment\"># /usr/local/apache2.4/bin/httpd -M</span></span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost apache2.4]<span class=\"comment\"># ./bin/httpd -M</span></span><br><span class=\"line\">AH00558: httpd: Could not reliably determine the server<span class=\"string\">'s fully qualified domain name, using localhost.localdomain. Set the '</span>ServerName<span class=\"string\">' directive globally to suppress this message</span></span><br><span class=\"line\"><span class=\"string\">Loaded Modules:</span></span><br><span class=\"line\"><span class=\"string\"> core_module (static)</span></span><br><span class=\"line\"><span class=\"string\"> so_module (static)</span></span><br><span class=\"line\"><span class=\"string\"> http_module (static)</span></span><br><span class=\"line\"><span class=\"string\"> mpm_event_module (static)</span></span><br><span class=\"line\"><span class=\"string\"> authn_file_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> authn_core_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> authz_host_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> authz_groupfile_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> authz_user_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> authz_core_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> access_compat_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> auth_basic_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> reqtimeout_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> filter_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> mime_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> log_config_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> env_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> headers_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> setenvif_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> version_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> unixd_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> status_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> autoindex_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> dir_module (shared)</span></span><br><span class=\"line\"><span class=\"string\"> alias_module (shared)</span></span><br></pre></td></tr></table></figure><ul><li>这里模块后面的<code>static</code>和<code>shared</code>，static表示模块被编译进了htppd脚本里，是一个整体；shared则表示扩展模块，模块在modules目录下，在需要时被调用。</li></ul></li><li><p>启动apache，执行<code>bin/apachectl start</code>：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost apache2.4]<span class=\"comment\"># /usr/local/apache2.4/bin/apachectl start</span></span><br><span class=\"line\">AH00558: httpd: Could not reliably determine the server<span class=\"string\">'s fully qualified domain name, using localhost.localdomain. Set the '</span>ServerName<span class=\"string\">' directive globally to suppress this message</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[root@localhost apache2.4]# ps aux | grep httpd</span></span><br><span class=\"line\"><span class=\"string\">root      76399  0.0  0.2  70952  2248 ?        Ss   01:47   0:00 /usr/local/apache2.4/bin/httpd -k start</span></span><br><span class=\"line\"><span class=\"string\">daemon    76400  0.0  0.4 359916  4264 ?        Sl   01:47   0:00 /usr/local/apache2.4/bin/httpd -k start</span></span><br><span class=\"line\"><span class=\"string\">daemon    76401  0.0  0.4 359916  4264 ?        Sl   01:47   0:00 /usr/local/apache2.4/bin/httpd -k start</span></span><br><span class=\"line\"><span class=\"string\">daemon    76402  0.0  0.4 359916  4264 ?        Sl   01:47   0:00 /usr/local/apache2.4/bin/httpd -k start</span></span><br><span class=\"line\"><span class=\"string\">root      76485  0.0  0.0 112724   976 pts/0    S+   01:47   0:00 grep --color=auto httpd</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[root@localhost apache2.4]# netstat -tlnp</span></span><br><span class=\"line\"><span class=\"string\">Active Internet connections (only servers)</span></span><br><span class=\"line\"><span class=\"string\">Proto Recv-Q Send-Q Local Address           Foreign Address         State     PID/Program name</span></span><br><span class=\"line\"><span class=\"string\">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN     1328/sshd</span></span><br><span class=\"line\"><span class=\"string\">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN     2032/master</span></span><br><span class=\"line\"><span class=\"string\">tcp6       0      0 :::80                   :::*                    LISTEN     76399/httpd</span></span><br></pre></td></tr></table></figure><ul><li>默认监听80端口。</li></ul></li></ul><hr><!-- rebuild by neat -->"}],"PostAsset":[],"PostCategory":[{"post_id":"cji1gaz6v0009u1jxm0mx05oe","category_id":"cji1gaz6f0006u1jxfm43fxi8","_id":"cji1gaz7o000fu1jxbejxsgu4"},{"post_id":"cji1gaz5m0003u1jxgpda7702","category_id":"cji1gaz6f0006u1jxfm43fxi8","_id":"cji1gaz7x000ku1jx2y4v5t8a"},{"post_id":"cji1gaz660005u1jx2sml3i3l","category_id":"cji1gaz6f0006u1jxfm43fxi8","_id":"cji1gaz85000ou1jxrfqr6ht6"},{"post_id":"cji1gaz6o0008u1jx71u3cmm1","category_id":"cji1gaz6f0006u1jxfm43fxi8","_id":"cji1gaz8g000uu1jxvjd3nlmr"},{"post_id":"cji1gaz87000ru1jxh5kkp6y2","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gaz8u0011u1jx9iak0itw"},{"post_id":"cji1gaz73000au1jxnhxe02j8","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gaz920016u1jxewsl97m4"},{"post_id":"cji1gaz8d000tu1jxfum9ij5l","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gaz990019u1jxqflqramf"},{"post_id":"cji1gaz8k000yu1jxrddoepsx","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gaz9h001eu1jxl07cdx5u"},{"post_id":"cji1gaz7f000du1jxmzmv0fey","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gaz9o001hu1jxa2j0wtgb"},{"post_id":"cji1gaz8r0010u1jxq7b6w1uu","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gaz9w001mu1jx3601jahg"},{"post_id":"cji1gaz8z0015u1jxoj7dekkb","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gaza3001pu1jxym801pa6"},{"post_id":"cji1gaz7l000eu1jx3for6i7j","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazaa001tu1jxfs5tmhe2"},{"post_id":"cji1gaz950018u1jx5urohry6","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazal001wu1jxq6h5fnxr"},{"post_id":"cji1gaz9d001du1jxwas1dork","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazar0020u1jx0v9f5m7x"},{"post_id":"cji1gaz7t000ju1jxrp9b0upr","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazax0023u1jx46s17w4x"},{"post_id":"cji1gaz9k001gu1jxkvkq6v55","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazb40027u1jxq77m7h0g"},{"post_id":"cji1gaz9s001lu1jx5rsbagur","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazbb002au1jxtrqitq67"},{"post_id":"cji1gaz80000mu1jx7g4gisej","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazbi002eu1jx71d666cz"},{"post_id":"cji1gaz9z001ou1jxdlobply6","category_id":"cji1gaz6f0006u1jxfm43fxi8","_id":"cji1gazbo002hu1jxbcrq0mlw"},{"post_id":"cji1gaza6001su1jxmha5cxst","category_id":"cji1gaz6f0006u1jxfm43fxi8","_id":"cji1gazbv002lu1jxtaux8pyn"},{"post_id":"cji1gazae001vu1jxsexcs6wb","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazc2002ou1jxsquzeve2"},{"post_id":"cji1gazao001zu1jxlmlcz0mz","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazc8002su1jx3a6hybgh"},{"post_id":"cji1gazau0022u1jxuxywcule","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazcf002vu1jx687elsiu"},{"post_id":"cji1gazb00026u1jxv7vcvkjq","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazcm002zu1jxs7owuame"},{"post_id":"cji1gazb70029u1jx5vj68w68","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazct0032u1jxhfcw7xw1"},{"post_id":"cji1gazbe002du1jxpg4ryg5h","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazcy0035u1jx4jqnd7t6"},{"post_id":"cji1gazbl002gu1jx6l4mpxun","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazd50038u1jx87ksilev"},{"post_id":"cji1gazbr002ku1jxrplqr75c","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazdb003bu1jxvecs7b3r"},{"post_id":"cji1gazby002nu1jx4yyvt65y","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazdg003eu1jxmqjwv67w"},{"post_id":"cji1gazc5002ru1jxs3rrlrmv","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazdm003hu1jxax79vzy3"},{"post_id":"cji1gazcb002uu1jxjk958jkr","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazdr003ku1jxfob7me2a"},{"post_id":"cji1gazci002yu1jxiaz19oi8","category_id":"cji1gaz6f0006u1jxfm43fxi8","_id":"cji1gazdw003nu1jxygo73ke3"},{"post_id":"cji1gazcp0031u1jx5emeqep8","category_id":"cji1gaz6f0006u1jxfm43fxi8","_id":"cji1gaze2003su1jxpcn41k2j"},{"post_id":"cji1gazcv0034u1jxsy6xrqq3","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gaze7003vu1jxxca6xek5"},{"post_id":"cji1gazd10037u1jxdj6t7475","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazed0040u1jxevo7ja1o"},{"post_id":"cji1gazd6003au1jxo6g15vg7","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazej0043u1jxxlg7dqgt"},{"post_id":"cji1gazdd003du1jxx9k57ktr","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazep0046u1jxg4228fca"},{"post_id":"cji1gazdi003gu1jx6ngu09rf","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazev004au1jx2m4gfihq"},{"post_id":"cji1gazdt003mu1jxugp15sx1","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazf0004du1jx42xrq1nb"},{"post_id":"cji1gaze4003uu1jx03t1u1il","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazf7004hu1jxkrq86af0"},{"post_id":"cji1gazdn003ju1jxqhxrbvld","category_id":"cji1gazdx003ou1jxe3mgynwl","_id":"cji1gazfc004ku1jxsdvfpve6"},{"post_id":"cji1gaze9003xu1jxhmsmmvrl","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazfj004ou1jxxhenj0bg"},{"post_id":"cji1gazef0042u1jxqfx1bvtt","category_id":"cji1gazdx003ou1jxe3mgynwl","_id":"cji1gazfs004ru1jx68i0peth"},{"post_id":"cji1gazdz003ru1jxrefyec8l","category_id":"cji1gazec003yu1jx0vz3bjwn","_id":"cji1gazg2004vu1jxp72dwfk2"},{"post_id":"cji1gazel0045u1jxq2lhgcpx","category_id":"cji1gazdx003ou1jxe3mgynwl","_id":"cji1gazg8004yu1jxyanm86sp"},{"post_id":"cji1gazes0049u1jx83z643hd","category_id":"cji1gazdx003ou1jxe3mgynwl","_id":"cji1gazga0050u1jx9y5x6ehg"},{"post_id":"cji1gazex004cu1jxkgf9lxom","category_id":"cji1gazdx003ou1jxe3mgynwl","_id":"cji1gazgd0053u1jx7ukhwtpp"},{"post_id":"cji1gazf3004gu1jxjuppekw4","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazge0055u1jxddyf0jys"},{"post_id":"cji1gazf9004ju1jx0ae1quoc","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazgg0058u1jxs0bmsufz"},{"post_id":"cji1gazff004nu1jxoanq07oa","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazgh005au1jxxk7qkwn5"},{"post_id":"cji1gazfo004qu1jxq7darwgc","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazgj005du1jxve83488i"},{"post_id":"cji1gazfu004tu1jxsmfxg85q","category_id":"cji1gaz84000nu1jxovhmh0dj","_id":"cji1gazgk005fu1jx47qtetya"},{"post_id":"cji1gazg4004xu1jxypywoi5j","category_id":"cji1gaz6f0006u1jxfm43fxi8","_id":"cji1gazgn005iu1jx0cyitbgv"}],"PostTag":[{"post_id":"cji1gaz7f000du1jxmzmv0fey","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gaz7t000iu1jxpgknsghd"},{"post_id":"cji1gaz7f000du1jxmzmv0fey","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gaz80000lu1jxk7k1c53f"},{"post_id":"cji1gaz7l000eu1jx3for6i7j","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gaz86000qu1jxatgfps2j"},{"post_id":"cji1gaz7l000eu1jx3for6i7j","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gaz8c000su1jxses2tfy0"},{"post_id":"cji1gaz7t000ju1jxrp9b0upr","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gaz8j000wu1jx9hz5c12j"},{"post_id":"cji1gaz7t000ju1jxrp9b0upr","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gaz8q000zu1jx8a3o8ivu"},{"post_id":"cji1gaz80000mu1jx7g4gisej","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gaz8x0013u1jxnk61vesd"},{"post_id":"cji1gaz80000mu1jx7g4gisej","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gaz940017u1jxt0zq9d31"},{"post_id":"cji1gaz87000ru1jxh5kkp6y2","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gaz9b001bu1jx39ribwxt"},{"post_id":"cji1gaz87000ru1jxh5kkp6y2","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gaz9j001fu1jx886mslfd"},{"post_id":"cji1gaz5m0003u1jxgpda7702","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gaz9r001ju1jx4c622cvi"},{"post_id":"cji1gaz5m0003u1jxgpda7702","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gaz9z001nu1jxmp635qkw"},{"post_id":"cji1gaz5m0003u1jxgpda7702","tag_id":"cji1gaz7r000hu1jxyozh3x46","_id":"cji1gaza5001qu1jxh4zwyesu"},{"post_id":"cji1gaz5m0003u1jxgpda7702","tag_id":"cji1gaz86000pu1jxukncho99","_id":"cji1gazad001uu1jxxwvdfhx7"},{"post_id":"cji1gaz8d000tu1jxfum9ij5l","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazam001xu1jxtd7du9fw"},{"post_id":"cji1gaz8d000tu1jxfum9ij5l","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazau0021u1jxao2mtbvz"},{"post_id":"cji1gaz8k000yu1jxrddoepsx","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazaz0024u1jx0pktmh2g"},{"post_id":"cji1gaz8k000yu1jxrddoepsx","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazb60028u1jxjvti6yv9"},{"post_id":"cji1gaz8r0010u1jxq7b6w1uu","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazbd002bu1jxulzf5quk"},{"post_id":"cji1gaz8r0010u1jxq7b6w1uu","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazbk002fu1jxvs8279dr"},{"post_id":"cji1gaz8z0015u1jxoj7dekkb","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazbq002iu1jxv9m8ltgy"},{"post_id":"cji1gaz8z0015u1jxoj7dekkb","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazbx002mu1jxpkce729s"},{"post_id":"cji1gaz950018u1jx5urohry6","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazc3002pu1jx01ljzui2"},{"post_id":"cji1gaz950018u1jx5urohry6","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazcb002tu1jxffourlhi"},{"post_id":"cji1gaz9d001du1jxwas1dork","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazch002wu1jx69dv2z92"},{"post_id":"cji1gaz9d001du1jxwas1dork","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazco0030u1jxtgza5h49"},{"post_id":"cji1gaz660005u1jx2sml3i3l","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazcu0033u1jxsncmkm1m"},{"post_id":"cji1gaz660005u1jx2sml3i3l","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazd10036u1jx0w3b3gej"},{"post_id":"cji1gaz660005u1jx2sml3i3l","tag_id":"cji1gaz7r000hu1jxyozh3x46","_id":"cji1gazd60039u1jx932up7pk"},{"post_id":"cji1gaz9k001gu1jxkvkq6v55","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazdc003cu1jxfek7jvhe"},{"post_id":"cji1gaz9k001gu1jxkvkq6v55","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazdi003fu1jxvr1y67qu"},{"post_id":"cji1gaz9s001lu1jx5rsbagur","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazdn003iu1jxe785y839"},{"post_id":"cji1gaz9s001lu1jx5rsbagur","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazds003lu1jx5x3lncrw"},{"post_id":"cji1gaz9z001ou1jxdlobply6","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazdy003qu1jxjphq66hy"},{"post_id":"cji1gaz9z001ou1jxdlobply6","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gaze3003tu1jxzdmualtb"},{"post_id":"cji1gaz9z001ou1jxdlobply6","tag_id":"cji1gaz7r000hu1jxyozh3x46","_id":"cji1gaze8003wu1jxjn6x1rr1"},{"post_id":"cji1gazae001vu1jxsexcs6wb","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazef0041u1jxfm7vlkqy"},{"post_id":"cji1gazae001vu1jxsexcs6wb","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazel0044u1jxlgv9tjus"},{"post_id":"cji1gazao001zu1jxlmlcz0mz","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazer0048u1jx7npllmtg"},{"post_id":"cji1gazao001zu1jxlmlcz0mz","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazex004bu1jxuojr4o7a"},{"post_id":"cji1gaz6o0008u1jx71u3cmm1","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazf3004fu1jxisssvnao"},{"post_id":"cji1gaz6o0008u1jx71u3cmm1","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazf8004iu1jxeh1ewtzr"},{"post_id":"cji1gaz6o0008u1jx71u3cmm1","tag_id":"cji1gaz7r000hu1jxyozh3x46","_id":"cji1gazfe004mu1jxarxjy845"},{"post_id":"cji1gazau0022u1jxuxywcule","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazfo004pu1jxqg6f2d6l"},{"post_id":"cji1gazau0022u1jxuxywcule","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazft004su1jxnruq23bl"},{"post_id":"cji1gazb00026u1jxv7vcvkjq","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazg4004wu1jxswcvc958"},{"post_id":"cji1gazb00026u1jxv7vcvkjq","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazg9004zu1jx0uyqxhjy"},{"post_id":"cji1gazb70029u1jx5vj68w68","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazgd0052u1jxcw2mqg8i"},{"post_id":"cji1gazb70029u1jx5vj68w68","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazge0054u1jxbgkui8l4"},{"post_id":"cji1gazbe002du1jxpg4ryg5h","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazgg0057u1jxnxbbhzhj"},{"post_id":"cji1gazbe002du1jxpg4ryg5h","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazgh0059u1jxhgxggkzo"},{"post_id":"cji1gazbl002gu1jx6l4mpxun","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazgj005cu1jxwq1uz5tv"},{"post_id":"cji1gazbl002gu1jx6l4mpxun","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazgk005eu1jxg6c38l5n"},{"post_id":"cji1gazbr002ku1jxrplqr75c","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazgm005hu1jx45ksy6d1"},{"post_id":"cji1gazbr002ku1jxrplqr75c","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazgn005ju1jx86q2i3zv"},{"post_id":"cji1gaz6v0009u1jxm0mx05oe","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazgp005lu1jxnu1q1vrk"},{"post_id":"cji1gaz6v0009u1jxm0mx05oe","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazgp005mu1jxjq4srwls"},{"post_id":"cji1gaz6v0009u1jxm0mx05oe","tag_id":"cji1gaz86000pu1jxukncho99","_id":"cji1gazgr005ou1jxoh2406nh"},{"post_id":"cji1gaz6v0009u1jxm0mx05oe","tag_id":"cji1gaz7r000hu1jxyozh3x46","_id":"cji1gazgr005pu1jxo10jo79q"},{"post_id":"cji1gazby002nu1jx4yyvt65y","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazgu005ru1jx6g02q30i"},{"post_id":"cji1gazby002nu1jx4yyvt65y","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazgu005su1jxae8g51wc"},{"post_id":"cji1gazc5002ru1jxs3rrlrmv","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazgw005uu1jxh2d8p4ki"},{"post_id":"cji1gazc5002ru1jxs3rrlrmv","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazgw005vu1jxhm9eo7p2"},{"post_id":"cji1gaz73000au1jxnhxe02j8","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazgy005xu1jxz7woggb0"},{"post_id":"cji1gaz73000au1jxnhxe02j8","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazgy005yu1jxqcz2di97"},{"post_id":"cji1gazcb002uu1jxjk958jkr","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazh00060u1jxtrilr874"},{"post_id":"cji1gazcb002uu1jxjk958jkr","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazh10061u1jxc1djcgs4"},{"post_id":"cji1gazci002yu1jxiaz19oi8","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazh20062u1jx3sr5r4pu"},{"post_id":"cji1gazci002yu1jxiaz19oi8","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazh20063u1jx29y7y47p"},{"post_id":"cji1gazci002yu1jxiaz19oi8","tag_id":"cji1gaz86000pu1jxukncho99","_id":"cji1gazh20064u1jxcb1apxl3"},{"post_id":"cji1gazcp0031u1jx5emeqep8","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazh30065u1jxcu8xshlk"},{"post_id":"cji1gazcp0031u1jx5emeqep8","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazh30066u1jxmkrrv109"},{"post_id":"cji1gazcp0031u1jx5emeqep8","tag_id":"cji1gaz86000pu1jxukncho99","_id":"cji1gazh30067u1jxd3os1ftn"},{"post_id":"cji1gaza6001su1jxmha5cxst","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazh40068u1jxwxyiypan"},{"post_id":"cji1gaza6001su1jxmha5cxst","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazh40069u1jxj0iek6c4"},{"post_id":"cji1gaza6001su1jxmha5cxst","tag_id":"cji1gazch002xu1jxjpo5tm8j","_id":"cji1gazh4006au1jxi2lh5qht"},{"post_id":"cji1gazcv0034u1jxsy6xrqq3","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazh4006bu1jxah52cc2d"},{"post_id":"cji1gazcv0034u1jxsy6xrqq3","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazh5006cu1jxy3qahxck"},{"post_id":"cji1gazd10037u1jxdj6t7475","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazh5006du1jxlblrhi3f"},{"post_id":"cji1gazd10037u1jxdj6t7475","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazh5006eu1jxse0pw7bf"},{"post_id":"cji1gazd6003au1jxo6g15vg7","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazh6006fu1jx3kzibcqi"},{"post_id":"cji1gazd6003au1jxo6g15vg7","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazh6006gu1jxar76xf18"},{"post_id":"cji1gazdd003du1jxx9k57ktr","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazh6006hu1jx4lwg7c9i"},{"post_id":"cji1gazdd003du1jxx9k57ktr","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazh7006iu1jxndm6kxv4"},{"post_id":"cji1gazdi003gu1jx6ngu09rf","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazh7006ju1jxao18exgf"},{"post_id":"cji1gazdi003gu1jx6ngu09rf","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazh7006ku1jxjudj53wy"},{"post_id":"cji1gazdt003mu1jxugp15sx1","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazh8006lu1jxyrh5rng8"},{"post_id":"cji1gazdt003mu1jxugp15sx1","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazh8006mu1jxfy6mnd7s"},{"post_id":"cji1gaze4003uu1jx03t1u1il","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazh8006nu1jx19eoqtao"},{"post_id":"cji1gaze4003uu1jx03t1u1il","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazh9006ou1jxydnanzmv"},{"post_id":"cji1gaze9003xu1jxhmsmmvrl","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazh9006pu1jxueaxwywr"},{"post_id":"cji1gaze9003xu1jxhmsmmvrl","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazh9006qu1jxq2pbasp4"},{"post_id":"cji1gazdn003ju1jxqhxrbvld","tag_id":"cji1gazdy003pu1jx5f45v8tm","_id":"cji1gazh9006ru1jxkj22iwlq"},{"post_id":"cji1gazdn003ju1jxqhxrbvld","tag_id":"cji1gazed003zu1jx6aq2x703","_id":"cji1gazha006su1jx5js5cmi4"},{"post_id":"cji1gazdz003ru1jxrefyec8l","tag_id":"cji1gazeq0047u1jxsihhexjh","_id":"cji1gazha006tu1jxrqkj8j5n"},{"post_id":"cji1gazdz003ru1jxrefyec8l","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazha006uu1jxz9w8ajmc"},{"post_id":"cji1gazf3004gu1jxjuppekw4","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazhb006vu1jxh8s0t7ia"},{"post_id":"cji1gazf3004gu1jxjuppekw4","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazhb006wu1jxxfzvj6e9"},{"post_id":"cji1gazf9004ju1jx0ae1quoc","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazhb006xu1jx36gn4myd"},{"post_id":"cji1gazf9004ju1jx0ae1quoc","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazhc006yu1jxnjmi6dpt"},{"post_id":"cji1gazff004nu1jxoanq07oa","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazhc006zu1jxy0qzftse"},{"post_id":"cji1gazff004nu1jxoanq07oa","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazhc0070u1jxoq0cxtvm"},{"post_id":"cji1gazfo004qu1jxq7darwgc","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazhd0071u1jx3i186h59"},{"post_id":"cji1gazfo004qu1jxq7darwgc","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazhd0072u1jx9y12y4eu"},{"post_id":"cji1gazfu004tu1jxsmfxg85q","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazhd0073u1jxdz425776"},{"post_id":"cji1gazfu004tu1jxsmfxg85q","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazhe0074u1jxq2eaxspz"},{"post_id":"cji1gazef0042u1jxqfx1bvtt","tag_id":"cji1gazf2004eu1jxvtwhzj2k","_id":"cji1gazhe0075u1jxrk2wujks"},{"post_id":"cji1gazef0042u1jxqfx1bvtt","tag_id":"cji1gazfe004lu1jxzbkdpw60","_id":"cji1gazhe0076u1jxy6wjqsm7"},{"post_id":"cji1gazef0042u1jxqfx1bvtt","tag_id":"cji1gazg1004uu1jx2nidgrfg","_id":"cji1gazhe0077u1jxoq48cy1v"},{"post_id":"cji1gazef0042u1jxqfx1bvtt","tag_id":"cji1gazdy003pu1jx5f45v8tm","_id":"cji1gazhf0078u1jxzem7ck7k"},{"post_id":"cji1gazel0045u1jxq2lhgcpx","tag_id":"cji1gazf2004eu1jxvtwhzj2k","_id":"cji1gazhf0079u1jxyh9bqdrp"},{"post_id":"cji1gazel0045u1jxq2lhgcpx","tag_id":"cji1gazfe004lu1jxzbkdpw60","_id":"cji1gazhf007au1jxh1djjoen"},{"post_id":"cji1gazel0045u1jxq2lhgcpx","tag_id":"cji1gazg1004uu1jx2nidgrfg","_id":"cji1gazhf007bu1jxq4kwsbpa"},{"post_id":"cji1gazel0045u1jxq2lhgcpx","tag_id":"cji1gazdy003pu1jx5f45v8tm","_id":"cji1gazhg007cu1jxh4fnuv5k"},{"post_id":"cji1gazes0049u1jx83z643hd","tag_id":"cji1gazf2004eu1jxvtwhzj2k","_id":"cji1gazhg007du1jxj6odh49t"},{"post_id":"cji1gazes0049u1jx83z643hd","tag_id":"cji1gazfe004lu1jxzbkdpw60","_id":"cji1gazhg007eu1jx8hbjopx0"},{"post_id":"cji1gazes0049u1jx83z643hd","tag_id":"cji1gazg1004uu1jx2nidgrfg","_id":"cji1gazhh007fu1jxqyskpun1"},{"post_id":"cji1gazes0049u1jx83z643hd","tag_id":"cji1gazdy003pu1jx5f45v8tm","_id":"cji1gazhh007gu1jxa4su3wse"},{"post_id":"cji1gazex004cu1jxkgf9lxom","tag_id":"cji1gazf2004eu1jxvtwhzj2k","_id":"cji1gazhh007hu1jxbud4cx1c"},{"post_id":"cji1gazex004cu1jxkgf9lxom","tag_id":"cji1gazfe004lu1jxzbkdpw60","_id":"cji1gazhh007iu1jxz0ojrh2d"},{"post_id":"cji1gazex004cu1jxkgf9lxom","tag_id":"cji1gazg1004uu1jx2nidgrfg","_id":"cji1gazhi007ju1jxx6yqkek2"},{"post_id":"cji1gazex004cu1jxkgf9lxom","tag_id":"cji1gazdy003pu1jx5f45v8tm","_id":"cji1gazhi007ku1jxhgoivuzt"},{"post_id":"cji1gazg4004xu1jxypywoi5j","tag_id":"cji1gaz6m0007u1jxpnd5n83d","_id":"cji1gazhi007lu1jxhprgwkns"},{"post_id":"cji1gazg4004xu1jxypywoi5j","tag_id":"cji1gaz77000cu1jxtmzzt5sv","_id":"cji1gazhi007mu1jxwexet3kd"},{"post_id":"cji1gazg4004xu1jxypywoi5j","tag_id":"cji1gaz7r000hu1jxyozh3x46","_id":"cji1gazhj007nu1jxbpwm4sj9"},{"post_id":"cji1gazg4004xu1jxypywoi5j","tag_id":"cji1gazgz005zu1jxzbpnx2c4","_id":"cji1gazhj007ou1jx236rksug"}],"Tag":[{"name":"Linux","_id":"cji1gaz6m0007u1jxpnd5n83d"},{"name":"Centos","_id":"cji1gaz77000cu1jxtmzzt5sv"},{"name":"Apache","_id":"cji1gaz7r000hu1jxyozh3x46"},{"name":"PHP","_id":"cji1gaz86000pu1jxukncho99"},{"name":"MySQL","_id":"cji1gazch002xu1jxjpo5tm8j"},{"name":"windows10","_id":"cji1gazdy003pu1jx5f45v8tm"},{"name":"WSL","_id":"cji1gazed003zu1jx6aq2x703"},{"name":"Python","_id":"cji1gazeq0047u1jxsihhexjh"},{"name":"linux","_id":"cji1gazf2004eu1jxvtwhzj2k"},{"name":"archlinux","_id":"cji1gazfe004lu1jxzbkdpw60"},{"name":"cinnamon","_id":"cji1gazg1004uu1jx2nidgrfg"},{"name":"MariaDB","_id":"cji1gazgz005zu1jxzbpnx2c4"}]}}